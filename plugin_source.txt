dG9ueTI2L2JvdW50aWVzUGx1cy8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDc3NyAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDAwMDAwIDE1MDI2NjAwNTc1IDAxMzA3MwAgNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL0Fub255bW91c0JvdW50eS5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMzE0MDAgMTUwMjY0NDIyMDEgMDE3MTEzACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1czsNCg0KaW1wb3J0IG5ldC5taWxrYm93bC52YXVsdC5lY29ub215LkVjb25vbXk7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuRmlsZUNvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1TdGFjazsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkdVSXMuQ3JlYXRlR1VJOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuTWVzc2FnZVV0aWxzOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuUGxhY2Vob2xkZXJDb250ZXh0Ow0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuUGxhY2Vob2xkZXJzOw0KaW1wb3J0IGphdmEudXRpbC4qOw0KaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uQ29sbGVjdG9yczsNCi8qKg0KICogTWFuYWdlcyBhbm9ueW1vdXMgYm91bnR5IGZ1bmN0aW9uYWxpdHkNCiAqLw0KcHVibGljIGNsYXNzIEFub255bW91c0JvdW50eSB7DQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIEFub255bW91c1Nlc3Npb24+IHBlbmRpbmdTZXNzaW9ucyA9IG5ldyBIYXNoTWFwPD4oKTsNCg0KICAgIC8vIEFub255bW91cyBzZXNzaW9uIGRhdGENCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIEFub255bW91c1Nlc3Npb24gew0KICAgICAgICBwcml2YXRlIGZpbmFsIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBib3VudHlTZXNzaW9uOw0KICAgICAgICBwcml2YXRlIGZpbmFsIGRvdWJsZSBhbm9ueW1vdXNDb3N0Ow0KDQogICAgICAgIHB1YmxpYyBBbm9ueW1vdXNTZXNzaW9uKEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBib3VudHlTZXNzaW9uLCBkb3VibGUgYW5vbnltb3VzQ29zdCkgew0KICAgICAgICAgICAgdGhpcy5ib3VudHlTZXNzaW9uID0gYm91bnR5U2Vzc2lvbjsNCiAgICAgICAgICAgIHRoaXMuYW5vbnltb3VzQ29zdCA9IGFub255bW91c0Nvc3Q7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgQm91bnR5Q3JlYXRpb25TZXNzaW9uIGdldEJvdW50eVNlc3Npb24oKSB7IHJldHVybiBib3VudHlTZXNzaW9uOyB9DQogICAgICAgIHB1YmxpYyBkb3VibGUgZ2V0QW5vbnltb3VzQ29zdCgpIHsgcmV0dXJuIGFub255bW91c0Nvc3Q7IH0NCiAgICB9DQoNCiAgICBwdWJsaWMgQW5vbnltb3VzQm91bnR5KEJvdW50aWVzUGx1cyBwbHVnaW4pIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUHJvbXB0cyB0aGUgcGxheWVyIHRvIGNvbmZpcm0gYW5vbnltaXR5IGZvciBhIGJvdW50eQ0KICAgICAqIC8vIG5vdGU6IFNlbmRzIGFub255bW91cy1ib3VudHktcHJvbXB0IG1lc3NhZ2UgYW5kIHNldHMgdXAgY2hhdCBsaXN0ZW5lciBmb3IgcmVzcG9uc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBwcm9tcHRGb3JBbm9ueW1pdHkoUGxheWVyIHBsYXllciwgQm91bnR5Q3JlYXRpb25TZXNzaW9uIHNlc3Npb24pIHsNCiAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIlByb21wdGluZyAiICsgcGxheWVyLmdldE5hbWUoKSArICIgZm9yIGFub255bW91cyBib3VudHkgY29uZmlybWF0aW9uIik7DQogICAgICAgIC8vIFByZXZlbnQgcmUtc2VuZGluZyBwcm9tcHQgaWYgYWxyZWFkeSBhd2FpdGluZyBhbm9ueW1vdXMgY29uZmlybWF0aW9uDQogICAgICAgIGlmIChzZXNzaW9uLmdldEF3YWl0aW5nSW5wdXQoKSA9PSBCb3VudHlDcmVhdGlvblNlc3Npb24uSW5wdXRUeXBlLkFOT05ZTU9VU19DT05GSVJNQVRJT04pIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiW0RFQlVHIC0gQW5vbnltb3VzQm91bnR5XSBTa2lwcGluZyBkdXBsaWNhdGUgcHJvbXB0IGZvciAiICsgcGxheWVyLmdldE5hbWUoKSArICI6IGFscmVhZHkgYXdhaXRpbmcgQU5PTllNT1VTX0NPTkZJUk1BVElPTiIpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGRvdWJsZSBhbm9ueW1vdXNDb3N0ID0gY2FsY3VsYXRlQW5vbnltb3VzQ29zdChzZXNzaW9uLmdldE1vbmV5KCkpOw0KICAgICAgICBwZW5kaW5nU2Vzc2lvbnMucHV0KHBsYXllci5nZXRVbmlxdWVJZCgpLCBuZXcgQW5vbnltb3VzU2Vzc2lvbihzZXNzaW9uLCBhbm9ueW1vdXNDb3N0KSk7DQogICAgICAgIHNlc3Npb24uc2V0QXdhaXRpbmdJbnB1dChCb3VudHlDcmVhdGlvblNlc3Npb24uSW5wdXRUeXBlLkFOT05ZTU9VU19DT05GSVJNQVRJT04pOw0KICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgIC5wbGF5ZXIocGxheWVyKQ0KICAgICAgICAgICAgICAgIC50YXJnZXQoc2Vzc2lvbi5nZXRUYXJnZXRVVUlEKCkpDQogICAgICAgICAgICAgICAgLm1vbmV5VmFsdWUoc2Vzc2lvbi5nZXRNb25leSgpKQ0KICAgICAgICAgICAgICAgIC5leHBWYWx1ZShzZXNzaW9uLmdldEV4cGVyaWVuY2UoKSkNCiAgICAgICAgICAgICAgICAudGltZVZhbHVlKHNlc3Npb24uZ2V0Rm9ybWF0dGVkVGltZSgpKQ0KICAgICAgICAgICAgICAgIC5pdGVtQ291bnQoc2Vzc2lvbi5nZXRJdGVtUmV3YXJkcygpLnNpemUoKSkNCiAgICAgICAgICAgICAgICAuaXRlbVZhbHVlKHNlc3Npb24uZ2V0SXRlbVJld2FyZHMoKS5zdHJlYW0oKS5tYXBUb0RvdWJsZShpdGVtIC0+IHBsdWdpbi5nZXRJdGVtVmFsdWVDYWxjdWxhdG9yKCkuY2FsY3VsYXRlSXRlbVZhbHVlKGl0ZW0pKS5zdW0oKSk7DQogICAgICAgIGNvbnRleHQgPSBjb250ZXh0LnNldHRlcihwbGF5ZXIuZ2V0VW5pcXVlSWQoKSkNCiAgICAgICAgICAgICAgICAudGF4UmF0ZShwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0RG91YmxlKCJib3VudHktcGxhY2UtdGF4LXJhdGUiLCAwLjApKQ0KICAgICAgICAgICAgICAgIC50YXhBbW91bnQoc2Vzc2lvbi5nZXRNb25leSgpICogcGx1Z2luLmdldENvbmZpZygpLmdldERvdWJsZSgiYm91bnR5LXBsYWNlLXRheC1yYXRlIiwgMC4wKSkNCiAgICAgICAgICAgICAgICAud2l0aEFtb3VudChhbm9ueW1vdXNDb3N0KTsgLy8gQWRkIGFub255bW91cyBjb3N0IHRvIGNvbnRleHQNCiAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgImFub255bW91cy1ib3VudHktcHJvbXB0IiwgY29udGV4dCk7DQogICAgfQ0KICAgIC8qKg0KICAgICAqIENhbGN1bGF0ZXMgdGhlIGNvc3QgZm9yIGFuIGFub255bW91cyBib3VudHkgYmFzZWQgb24gYm91bnR5IHZhbHVlDQogICAgICovDQogICAgcHJpdmF0ZSBkb3VibGUgY2FsY3VsYXRlQW5vbnltb3VzQ29zdChkb3VibGUgYm91bnR5QW1vdW50KSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRDb25maWcoKTsNCiAgICAgICAgZG91YmxlIGJhc2VQZXJjZW50YWdlID0gY29uZmlnLmdldERvdWJsZSgiYW5vbnltb3VzLWJvdW50aWVzLmJhc2UtcGVyY2VudGFnZSIsIDE1LjApOw0KICAgICAgICBkb3VibGUgbWluQ29zdCA9IGNvbmZpZy5nZXREb3VibGUoImFub255bW91cy1ib3VudGllcy5taW5pbXVtLWNvc3QiLCA1MC4wKTsNCiAgICAgICAgZG91YmxlIG1heENvc3QgPSBjb25maWcuZ2V0RG91YmxlKCJhbm9ueW1vdXMtYm91bnRpZXMubWF4aW11bS1jb3N0IiwgNTAwMC4wKTsNCiAgICAgICAgZG91YmxlIHBlcmNlbnRhZ2VDb3N0ID0gYm91bnR5QW1vdW50ICogKGJhc2VQZXJjZW50YWdlIC8gMTAwLjApOw0KICAgICAgICBkb3VibGUgZmluYWxDb3N0ID0gTWF0aC5tYXgobWluQ29zdCwgTWF0aC5taW4obWF4Q29zdCwgcGVyY2VudGFnZUNvc3QpKTsNCiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZmluYWxDb3N0ICogMTAwLjApIC8gMTAwLjA7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUHJvY2Vzc2VzIHRoZSBwbGF5ZXIncyBhbm9ueW1vdXMgZGVjaXNpb24NCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBwcm9jZXNzQW5vbnltb3VzSW5wdXQoUGxheWVyIHBsYXllciwgQW5vbnltb3VzU2Vzc2lvbiBzZXNzaW9uLCBTdHJpbmcgaW5wdXQpIHsNCiAgICAgICAgVVVJRCBwbGF5ZXJVVUlEID0gcGxheWVyLmdldFVuaXF1ZUlkKCk7DQogICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBib3VudHlTZXNzaW9uID0gc2Vzc2lvbi5nZXRCb3VudHlTZXNzaW9uKCk7DQogICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJQcm9jZXNzaW5nIGFub255bW91cyBpbnB1dCBmb3IgIiArIHBsYXllci5nZXROYW1lKCkgKyAiOiAiICsgaW5wdXQpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBndWlDb25maWcgPSBwbHVnaW4uZ2V0Q3JlYXRlR1VJQ29uZmlnKCk7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnID0gcGx1Z2luLmdldE1lc3NhZ2VzQ29uZmlnKCk7DQogICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgLnBsYXllcihwbGF5ZXIpDQogICAgICAgICAgICAgICAgLnRhcmdldChib3VudHlTZXNzaW9uLmdldFRhcmdldFVVSUQoKSkNCiAgICAgICAgICAgICAgICAubW9uZXlWYWx1ZShib3VudHlTZXNzaW9uLmdldE1vbmV5KCkpDQogICAgICAgICAgICAgICAgLmV4cFZhbHVlKGJvdW50eVNlc3Npb24uZ2V0RXhwZXJpZW5jZSgpKQ0KICAgICAgICAgICAgICAgIC50aW1lVmFsdWUoYm91bnR5U2Vzc2lvbi5nZXRGb3JtYXR0ZWRUaW1lKCkpDQogICAgICAgICAgICAgICAgLml0ZW1Db3VudChib3VudHlTZXNzaW9uLmdldEl0ZW1SZXdhcmRzKCkuc2l6ZSgpKQ0KICAgICAgICAgICAgICAgIC5pdGVtVmFsdWUoYm91bnR5U2Vzc2lvbi5nZXRJdGVtUmV3YXJkcygpLnN0cmVhbSgpLm1hcFRvRG91YmxlKGl0ZW0gLT4gcGx1Z2luLmdldEl0ZW1WYWx1ZUNhbGN1bGF0b3IoKS5jYWxjdWxhdGVJdGVtVmFsdWUoaXRlbSkpLnN1bSgpKTsNCiAgICAgICAgY29udGV4dCA9IGNvbnRleHQuc2V0dGVyKHBsYXllci5nZXRVbmlxdWVJZCgpKQ0KICAgICAgICAgICAgICAgIC50YXhSYXRlKHBsdWdpbi5nZXRDb25maWcoKS5nZXREb3VibGUoImJvdW50eS1wbGFjZS10YXgtcmF0ZSIsIDAuMCkpDQogICAgICAgICAgICAgICAgLnRheEFtb3VudChib3VudHlTZXNzaW9uLmdldE1vbmV5KCkgKiBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0RG91YmxlKCJib3VudHktcGxhY2UtdGF4LXJhdGUiLCAwLjApKTsNCiAgICAgICAgc3dpdGNoIChpbnB1dCkgew0KICAgICAgICAgICAgY2FzZSAieWVzIjoNCiAgICAgICAgICAgIGNhc2UgInkiOg0KICAgICAgICAgICAgICAgIHBsYWNlQW5vbnltb3VzQm91bnR5KHBsYXllciwgc2Vzc2lvbik7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBjYXNlICJubyI6DQogICAgICAgICAgICBjYXNlICJuIjoNCiAgICAgICAgICAgICAgICBwbGFjZU5vcm1hbEJvdW50eShwbGF5ZXIsIGJvdW50eVNlc3Npb24pOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAiY2FuY2VsIjoNCiAgICAgICAgICAgICAgICBTdHJpbmcgY2FuY2VsTWVzc2FnZSA9IGd1aUNvbmZpZy5nZXRTdHJpbmcoIm1lc3NhZ2VzLmFub255bW91cy1wcm9tcHQtY2FuY2VsbGVkIiwgIiZhUmV0dXJuZWQgdG8gYm91bnR5IGNyZWF0aW9uIEdVSS4iKTsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KGNhbmNlbE1lc3NhZ2UsIGNvbnRleHQpKTsNCiAgICAgICAgICAgICAgICBib3VudHlTZXNzaW9uLnJldHVyblRvQ3JlYXRlR1VJKCk7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIlJlc3VtZWQgQ3JlYXRlR1VJIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSArICIgYWZ0ZXIgY2FuY2VsbGluZyBhbm9ueW1vdXMgcHJvbXB0Iik7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgIFN0cmluZyBpbnZhbGlkTWVzc2FnZSA9IGd1aUNvbmZpZy5nZXRTdHJpbmcoIm1lc3NhZ2VzLmludmFsaWQtYW5vbnltb3VzLWlucHV0IiwgIiZjSW52YWxpZCBpbnB1dDogJyZmJWlucHV0JSZjJ1xuJjdQbGVhc2UgdHlwZSAmZid5ZXMnJjcsICZmJ3knJjcsICZmJ25vJyY3LCAmZiduJyY3LCBvciAmZidjYW5jZWwnIik7DQogICAgICAgICAgICAgICAgaW52YWxpZE1lc3NhZ2UgPSBpbnZhbGlkTWVzc2FnZS5yZXBsYWNlKCIlaW5wdXQlIiwgaW5wdXQpOw0KICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkoaW52YWxpZE1lc3NhZ2UsIGNvbnRleHQpKTsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiSW52YWxpZCBhbm9ueW1vdXMgaW5wdXQgYnkgIiArIHBsYXllci5nZXROYW1lKCkgKyAiOiAiICsgaW5wdXQpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoIWlucHV0LmVxdWFscygiY2FuY2VsIikpIHsNCiAgICAgICAgICAgIHBlbmRpbmdTZXNzaW9ucy5yZW1vdmUocGxheWVyVVVJRCk7DQogICAgICAgICAgICBCb3VudHlDcmVhdGlvblNlc3Npb24ucmVtb3ZlU2Vzc2lvbihwbGF5ZXIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUGxhY2VzIGFuIGFub255bW91cyBib3VudHkgLy8gbm90ZTogQ3JlYXRlcyBhIGJvdW50eSB3aXRoIG1vbmV5LCBpdGVtcywgWFAsIGFuZCBkdXJhdGlvbiwgaGlkaW5nIHRoZSBzZXR0ZXLigJlzIGlkZW50aXR5DQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIHBsYWNlQW5vbnltb3VzQm91bnR5KFBsYXllciBwbGF5ZXIsIEFub255bW91c1Nlc3Npb24gc2Vzc2lvbikgew0KICAgICAgICBCb3VudHlDcmVhdGlvblNlc3Npb24gYm91bnR5U2Vzc2lvbiA9IHNlc3Npb24uZ2V0Qm91bnR5U2Vzc2lvbigpOw0KICAgICAgICBkb3VibGUgYW5vbnltb3VzQ29zdCA9IHNlc3Npb24uZ2V0QW5vbnltb3VzQ29zdCgpOw0KICAgICAgICBFY29ub215IGVjb25vbXkgPSBCb3VudGllc1BsdXMuZ2V0RWNvbm9teSgpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBtZXNzYWdlc0NvbmZpZyA9IHBsdWdpbi5nZXRNZXNzYWdlc0NvbmZpZygpOw0KICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgIC5wbGF5ZXIocGxheWVyKQ0KICAgICAgICAgICAgICAgIC50YXJnZXQoYm91bnR5U2Vzc2lvbi5nZXRUYXJnZXRVVUlEKCkpDQogICAgICAgICAgICAgICAgLm1vbmV5VmFsdWUoYm91bnR5U2Vzc2lvbi5nZXRNb25leSgpKQ0KICAgICAgICAgICAgICAgIC5leHBWYWx1ZShib3VudHlTZXNzaW9uLmdldEV4cGVyaWVuY2UoKSkNCiAgICAgICAgICAgICAgICAudGltZVZhbHVlKGJvdW50eVNlc3Npb24uZ2V0Rm9ybWF0dGVkVGltZSgpKQ0KICAgICAgICAgICAgICAgIC5pdGVtQ291bnQoYm91bnR5U2Vzc2lvbi5nZXRJdGVtUmV3YXJkcygpLnNpemUoKSkNCiAgICAgICAgICAgICAgICAuaXRlbVZhbHVlKGJvdW50eVNlc3Npb24uZ2V0SXRlbVJld2FyZHMoKS5zdHJlYW0oKS5tYXBUb0RvdWJsZShpdGVtIC0+IHBsdWdpbi5nZXRJdGVtVmFsdWVDYWxjdWxhdG9yKCkuY2FsY3VsYXRlSXRlbVZhbHVlKGl0ZW0pKS5zdW0oKSk7DQogICAgICAgIGNvbnRleHQgPSBjb250ZXh0LnNldHRlcihwbGF5ZXIuZ2V0VW5pcXVlSWQoKSkNCiAgICAgICAgICAgICAgICAudGF4UmF0ZShwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0RG91YmxlKCJib3VudHktcGxhY2UtdGF4LXJhdGUiLCAwLjApKQ0KICAgICAgICAgICAgICAgIC50YXhBbW91bnQoYm91bnR5U2Vzc2lvbi5nZXRNb25leSgpICogcGx1Z2luLmdldENvbmZpZygpLmdldERvdWJsZSgiYm91bnR5LXBsYWNlLXRheC1yYXRlIiwgMC4wKSk7DQogICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJbQW5vbnltb3VzQm91bnR5XSBBdHRlbXB0aW5nIHRvIHBsYWNlIGFub255bW91cyBib3VudHkgYnkgIiArIHBsYXllci5nZXROYW1lKCkgKw0KICAgICAgICAgICAgICAgICIgb24gIiArIGJvdW50eVNlc3Npb24uZ2V0VGFyZ2V0TmFtZSgpICsgIjogTW9uZXk9JCIgKyBib3VudHlTZXNzaW9uLmdldE1vbmV5KCkgKw0KICAgICAgICAgICAgICAgICIsIEl0ZW1zPSIgKyBib3VudHlTZXNzaW9uLmdldEl0ZW1SZXdhcmRzKCkuc2l6ZSgpICsgIiwgWFA9IiArIGJvdW50eVNlc3Npb24uZ2V0RXhwZXJpZW5jZSgpICsNCiAgICAgICAgICAgICAgICAiLCBEdXJhdGlvbj0iICsgYm91bnR5U2Vzc2lvbi5nZXRGb3JtYXR0ZWRUaW1lKCkpOw0KICAgICAgICBpZiAoZWNvbm9teSAhPSBudWxsICYmICFlY29ub215LmhhcyhwbGF5ZXIsIGFub255bW91c0Nvc3QpKSB7DQogICAgICAgICAgICBTdHJpbmcgaW5zdWZmaWNpZW50TWVzc2FnZSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiaW5zdWZmaWNpZW50LWZ1bmRzLWFub255bW91cyIsDQogICAgICAgICAgICAgICAgICAgICImY0luc3VmZmljaWVudCBmdW5kcyBmb3IgYW5vbnltb3VzIGJvdW50eSFcbiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICImN1JlcXVpcmVkOiAmYSQlY29zdCVcbiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICImN1lvdXIgYmFsYW5jZTogJmEkJWJhbGFuY2UlXG4iICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjdQbGFjaW5nIGJvdW50eSBub3JtYWxseSBpbnN0ZWFkLi4uIik7DQogICAgICAgICAgICBpbnN1ZmZpY2llbnRNZXNzYWdlID0gaW5zdWZmaWNpZW50TWVzc2FnZS5yZXBsYWNlKCIlY29zdCUiLCBTdHJpbmcuZm9ybWF0KCIlLjJmIiwgYW5vbnltb3VzQ29zdCkpDQogICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlYmFsYW5jZSUiLCBTdHJpbmcuZm9ybWF0KCIlLjJmIiwgZWNvbm9teS5nZXRCYWxhbmNlKHBsYXllcikpKTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkoaW5zdWZmaWNpZW50TWVzc2FnZSwgY29udGV4dCkpOw0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIltBbm9ueW1vdXNCb3VudHldIEluc3VmZmljaWVudCBmdW5kcyBmb3IgYW5vbnltb3VzIGJvdW50eSBieSAiICsgcGxheWVyLmdldE5hbWUoKSArDQogICAgICAgICAgICAgICAgICAgICI6IHJlcXVpcmVkICQiICsgYW5vbnltb3VzQ29zdCk7DQogICAgICAgICAgICBwbGFjZU5vcm1hbEJvdW50eShwbGF5ZXIsIGJvdW50eVNlc3Npb24pOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGlmIChlY29ub215ICE9IG51bGwpIHsNCiAgICAgICAgICAgIGVjb25vbXkud2l0aGRyYXdQbGF5ZXIocGxheWVyLCBhbm9ueW1vdXNDb3N0KTsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJbQW5vbnltb3VzQm91bnR5XSBXaXRoZHJldyBhbm9ueW1vdXMgZmVlICQiICsgYW5vbnltb3VzQ29zdCArDQogICAgICAgICAgICAgICAgICAgICIgZnJvbSAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgIH0NCiAgICAgICAgVVVJRCB0YXJnZXRVVUlEID0gYm91bnR5U2Vzc2lvbi5nZXRUYXJnZXRVVUlEKCk7DQogICAgICAgIGRvdWJsZSBib3VudHlBbW91bnQgPSBib3VudHlTZXNzaW9uLmdldE1vbmV5KCk7DQogICAgICAgIGludCBleHBlcmllbmNlID0gYm91bnR5U2Vzc2lvbi5nZXRFeHBlcmllbmNlKCk7DQogICAgICAgIGludCBkdXJhdGlvbk1pbnV0ZXMgPSBib3VudHlTZXNzaW9uLmdldFRpbWVNaW51dGVzKCk7DQogICAgICAgIExpc3Q8SXRlbVN0YWNrPiBpdGVtcyA9IG5ldyBBcnJheUxpc3Q8Pihib3VudHlTZXNzaW9uLmdldEl0ZW1SZXdhcmRzKCkpOw0KICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiW0Fub255bW91c0JvdW50eV0gSXRlbXMgdG8gYWRkOiAiICsgaXRlbXMuc2l6ZSgpICsNCiAgICAgICAgICAgICAgICAiIFsiICsgaXRlbXMuc3RyZWFtKCkubWFwKGl0ZW0gLT4gaXRlbS5nZXRUeXBlKCkubmFtZSgpICsgIiB4IiArIGl0ZW0uZ2V0QW1vdW50KCkpDQogICAgICAgICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy5qb2luaW5nKCIsICIpKSArICJdIik7DQogICAgICAgIHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuYWRkQW5vbnltb3VzQm91bnR5KHRhcmdldFVVSUQsIHBsYXllci5nZXRVbmlxdWVJZCgpLCBib3VudHlBbW91bnQsDQogICAgICAgICAgICAgICAgZXhwZXJpZW5jZSwgZHVyYXRpb25NaW51dGVzLCBpdGVtcyk7DQogICAgICAgIFN0cmluZyBzdWNjZXNzTWVzc2FnZSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYW5vbnltb3VzLWJvdW50eS1wbGFjZWQiLA0KICAgICAgICAgICAgICAgICImYSZsQW5vbnltb3VzIGJvdW50eSBzdWNjZXNzZnVsbHkgcGxhY2VkIVxuIiArDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdUYXJnZXQ6ICZlJWJvdW50aWVzcGx1c190YXJnZXRfbmFtZSVcbiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3Qm91bnR5IGFtb3VudDogJmEkJWJvdW50aWVzcGx1c19tb25leV92YWx1ZSVcbiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3SXRlbXM6ICZiJWJvdW50aWVzcGx1c19pdGVtX2NvdW50JSAmNygmYiQlYm91bnRpZXNwbHVzX2l0ZW1fdmFsdWUlJjcpXG4iICsNCiAgICAgICAgICAgICAgICAgICAgICAgICImN0V4cGVyaWVuY2U6ICZlJWJvdW50aWVzcGx1c19leHBfdmFsdWUlXG4iICsNCiAgICAgICAgICAgICAgICAgICAgICAgICImN0R1cmF0aW9uOiAmZCVib3VudGllc3BsdXNfdGltZV92YWx1ZSVcbiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3QW5vbnltb3VzIGZlZTogJmMkJWFub255bW91c19jb3N0JVxuIiArDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdZb3VyIGlkZW50aXR5IHdpbGwgcmVtYWluIGhpZGRlbiBmcm9tIG90aGVyIHBsYXllcnMuIik7DQogICAgICAgIHN1Y2Nlc3NNZXNzYWdlID0gc3VjY2Vzc01lc3NhZ2UucmVwbGFjZSgiJWFub255bW91c19jb3N0JSIsIFN0cmluZy5mb3JtYXQoIiUuMmYiLCBhbm9ueW1vdXNDb3N0KSk7DQogICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkoc3VjY2Vzc01lc3NhZ2UsIGNvbnRleHQpKTsNCiAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIltBbm9ueW1vdXNCb3VudHldIEFub255bW91cyBib3VudHkgcGxhY2VkIGJ5ICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsNCiAgICAgICAgICAgICAgICAiIG9uICIgKyBib3VudHlTZXNzaW9uLmdldFRhcmdldE5hbWUoKSArICIgZm9yICQiICsgYm91bnR5QW1vdW50ICsNCiAgICAgICAgICAgICAgICAiLCBJdGVtcz0iICsgaXRlbXMuc2l6ZSgpICsgIiwgWFA9IiArIGV4cGVyaWVuY2UgKyAiLCBEdXJhdGlvbj0iICsgZHVyYXRpb25NaW51dGVzICsNCiAgICAgICAgICAgICAgICAiIG1pbnV0ZXMgKGFub255bW91cyBmZWU6ICQiICsgYW5vbnltb3VzQ29zdCArICIpIik7DQogICAgICAgIHBlbmRpbmdTZXNzaW9ucy5yZW1vdmUocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICBCb3VudHlDcmVhdGlvblNlc3Npb24ucmVtb3ZlU2Vzc2lvbihwbGF5ZXIpOw0KICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiW0Fub255bW91c0JvdW50eV0gQ2xlYW5lZCB1cCBzZXNzaW9uIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUGxhY2VzIGEgbm9ybWFsIChub24tYW5vbnltb3VzKSBib3VudHkNCiAgICAgKiAvLyBub3RlOiBDcmVhdGVzIGEgYm91bnR5IHdpdGggbW9uZXksIGl0ZW1zLCBYUCwgYW5kIGR1cmF0aW9uLCBzaG93aW5nIHRoZSBzZXR0ZXLigJlzIGlkZW50aXR5DQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIHBsYWNlTm9ybWFsQm91bnR5KFBsYXllciBwbGF5ZXIsIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBzZXNzaW9uKSB7DQogICAgICAgIENyZWF0ZUdVSSBjcmVhdGVHVUkgPSBuZXcgQ3JlYXRlR1VJKHBsYXllciwgcGx1Z2luLmdldEV2ZW50TWFuYWdlcigpKTsNCiAgICAgICAgY3JlYXRlR1VJLmhhbmRsZUNvbmZpcm1CdXR0b25EaXJlY3QocGxheWVyLCBzZXNzaW9uKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGVja3MgaWYgYSBwbGF5ZXIgaXMgY3VycmVudGx5IGluIGFuIGFub255bW91cyBib3VudHkgcHJvbXB0DQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gaXNBd2FpdGluZ0Fub255bW91c0lucHV0KFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgcmV0dXJuIHBlbmRpbmdTZXNzaW9ucy5jb250YWluc0tleShwbGF5ZXIuZ2V0VW5pcXVlSWQoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2FuY2VscyBhbnkgcGVuZGluZyBhbm9ueW1vdXMgc2Vzc2lvbiBmb3IgYSBwbGF5ZXINCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBjYW5jZWxBbm9ueW1vdXNTZXNzaW9uKFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgcGVuZGluZ1Nlc3Npb25zLnJlbW92ZShwbGF5ZXIuZ2V0VW5pcXVlSWQoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2xlYW5zIHVwIHdoZW4gcGx1Z2luIGRpc2FibGVzDQogICAgICovDQogICAgcHVibGljIHZvaWQgY2xlYW51cCgpIHsNCiAgICAgICAgcGVuZGluZ1Nlc3Npb25zLmNsZWFyKCk7DQogICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJDbGVhbmVkIHVwIEFub255bW91c0JvdW50eSBzZXNzaW9ucyIpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHJpZXZlcyB0aGUgcGVuZGluZyBhbm9ueW1vdXMgc2Vzc2lvbiBmb3IgYSBwbGF5ZXINCiAgICAgKi8NCiAgICBwdWJsaWMgQW5vbnltb3VzU2Vzc2lvbiBnZXRQZW5kaW5nU2Vzc2lvbihVVUlEIHBsYXllclVVSUQpIHsNCiAgICAgICAgcmV0dXJuIHBlbmRpbmdTZXNzaW9ucy5nZXQocGxheWVyVVVJRCk7DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL0Jvb3N0ZWRCb3VudHkuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMzQxNTYgMTUwMjUyMjQzNjUgMDE2NTQ1ACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0KcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzOw0KDQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5DaGF0Q29sb3I7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLkNvbmZpZ3VyYXRpb25TZWN0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LnNjaGVkdWxlci5CdWtraXRSdW5uYWJsZTsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlZlcnNpb25VdGlsczsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlRpbWVGb3JtYXR0ZXI7DQoNCg0KaW1wb3J0IGphdmEudXRpbC4qOw0KDQpwdWJsaWMgY2xhc3MgQm9vc3RlZEJvdW50eSB7DQoNCiAgICBwcml2YXRlIGZpbmFsIEJvdW50aWVzUGx1cyBwbHVnaW47DQogICAgcHJpdmF0ZSBPYmplY3QgYm9zc0JhcjsgLy8gVXNpbmcgT2JqZWN0IGZvciB2ZXJzaW9uIGNvbXBhdGliaWxpdHkNCiAgICBwcml2YXRlIGludCBib29zdEludGVydmFsOw0KICAgIHByaXZhdGUgUmFuZG9tIHJhbmRvbSA9IG5ldyBSYW5kb20oKTsNCiAgICBwcml2YXRlIE1hcDxEb3VibGUsIERvdWJsZT4gbXVsdGlwbGllckNoYW5jZXM7DQogICAgcHJpdmF0ZSBTdHJpbmcgYm9vc3RlZFRpdGxlOw0KICAgIHByaXZhdGUgU3RyaW5nIGJvb3N0ZWRTdWJ0aXRsZTsNCiAgICBwcml2YXRlIGJvb2xlYW4gZW5hYmxlVGl0bGVTdWJ0aXRsZTsNCiAgICBwcml2YXRlIGJvb2xlYW4gYm9zc2JhckVuYWJsZWQ7DQogICAgcHJpdmF0ZSBpbnQgZGlzcGxheUJlZm9yZUJvb3N0Ow0KICAgIHByaXZhdGUgU3RyaW5nIGJvc3NiYXJNZXNzYWdlOw0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIFNldDxVVUlEPj4gYm9vc3RlZEJvdW50aWVzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIERvdWJsZT4gYm9vc3RlZE11bHRpcGxpZXJzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgIHByaXZhdGUgZmluYWwgU2V0PFBsYXllcj4gb25saW5lUGxheWVycyA9IG5ldyBIYXNoU2V0PD4oKTsNCiAgICBwcml2YXRlIEJ1a2tpdFJ1bm5hYmxlIGJvb3N0VGFzazsNCiAgICBwcml2YXRlIGludCB0YXNrSWQgPSAtMTsNCg0KICAgIC8qKg0KICAgICAqIENvbnN0cnVjdHMgdGhlIEJvb3N0ZWRCb3VudHkgbWFuYWdlcg0KICAgICAqIC8vIG5vdGU6IEluaXRpYWxpemVzIGJvb3N0ZWQgYm91bnR5IHN5c3RlbSBhbmQgc3RhcnRzIHRoZSBib29zdCBjeWNsZQ0KICAgICAqLw0KICAgIHB1YmxpYyBCb29zdGVkQm91bnR5KEJvdW50aWVzUGx1cyBwbHVnaW4sIExpc3Q8U3RyaW5nPiB3YXJuaW5ncykgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICAgICAgbG9hZENvbmZpZyh3YXJuaW5ncyk7DQogICAgICAgIHN0YXJ0Qm9vc3RDeWNsZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIExvYWRzIGJvb3N0ZWQgYm91bnR5IGNvbmZpZ3VyYXRpb24gZnJvbSBjb25maWcueW1sDQogICAgICogLy8gbm90ZTogSW5pdGlhbGl6ZXMgYm9vc3Qgc2V0dGluZ3MgYW5kIGNvbGxlY3RzIHdhcm5pbmdzIGZvciBtaXNzaW5nIG9yIGludmFsaWQgY29uZmlndXJhdGlvbnMNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgbG9hZENvbmZpZyhMaXN0PFN0cmluZz4gd2FybmluZ3MpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldENvbmZpZygpOw0KICAgICAgICBib29zdEludGVydmFsID0gTWF0aC5tYXgoMSwgY29uZmlnLmdldEludCgiYm9vc3RlZC1ib3VudGllcy5ib29zdC1pbnRlcnZhbCIsIDMwKSk7DQogICAgICAgIG11bHRpcGxpZXJDaGFuY2VzID0gbmV3IExpbmtlZEhhc2hNYXA8PigpOw0KDQogICAgICAgIENvbmZpZ3VyYXRpb25TZWN0aW9uIG11bHRpcGxpZXJTZWN0aW9uID0gY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJib29zdGVkLWJvdW50aWVzLm11bHRpcGxpZXItY2hhbmNlcyIpOw0KICAgICAgICBpZiAobXVsdGlwbGllclNlY3Rpb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgd2FybmluZ3MuYWRkKCJCb29zdGVkIGJvdW50eSBtdWx0aXBsaWVyIGNoYW5jZXMgbm90IGZvdW5kLCB1c2luZyBkZWZhdWx0OiAyeCAoNTAlKSwgM3ggKDMwJSksIDV4ICgyMCUpIik7DQogICAgICAgICAgICBtdWx0aXBsaWVyQ2hhbmNlcy5wdXQoMi4wLCA1MC4wKTsNCiAgICAgICAgICAgIG11bHRpcGxpZXJDaGFuY2VzLnB1dCgzLjAsIDMwLjApOw0KICAgICAgICAgICAgbXVsdGlwbGllckNoYW5jZXMucHV0KDUuMCwgMjAuMCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBmb3IgKFN0cmluZyBrZXkgOiBtdWx0aXBsaWVyU2VjdGlvbi5nZXRLZXlzKGZhbHNlKSkgew0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIGRvdWJsZSBtdWx0aXBsaWVyID0gRG91YmxlLnBhcnNlRG91YmxlKGtleSk7DQogICAgICAgICAgICAgICAgICAgIGRvdWJsZSBjaGFuY2UgPSBtdWx0aXBsaWVyU2VjdGlvbi5nZXREb3VibGUoa2V5KTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5jZSA8IDAgfHwgbXVsdGlwbGllciA8PSAxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncy5hZGQoIkludmFsaWQgYm9vc3RlZCBib3VudHkgbXVsdGlwbGllciBvciBjaGFuY2U6ICIgKyBrZXkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllckNoYW5jZXMucHV0KG11bHRpcGxpZXIsIGNoYW5jZSk7DQogICAgICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICAgICAgd2FybmluZ3MuYWRkKCJJbnZhbGlkIGJvb3N0ZWQgYm91bnR5IG11bHRpcGxpZXIgZm9ybWF0OiAiICsga2V5KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBib29zdGVkVGl0bGUgPSBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGNvbmZpZy5nZXRTdHJpbmcoImJvb3N0ZWQtYm91bnRpZXMuYm9vc3RlZC10aXRsZSIsICImYUJvdW50eSBCb29zdGVkISIpKTsNCiAgICAgICAgYm9vc3RlZFN1YnRpdGxlID0gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBjb25maWcuZ2V0U3RyaW5nKCJib29zdGVkLWJvdW50aWVzLmJvb3N0ZWQtc3VidGl0bGUiLCAiJmUldGFyZ2V0JSAmYWJ5ICZlJW11bHRpcGxpZXIleCIpKTsNCiAgICAgICAgZW5hYmxlVGl0bGVTdWJ0aXRsZSA9IGNvbmZpZy5nZXRCb29sZWFuKCJib29zdGVkLWJvdW50aWVzLmVuYWJsZS10aXRsZS1zdWJ0aXRsZSIsIHRydWUpOw0KICAgICAgICBib3NzYmFyRW5hYmxlZCA9IGNvbmZpZy5nZXRCb29sZWFuKCJib29zdGVkLWJvdW50aWVzLmJvc3NiYXIuZW5hYmxlZCIsIHRydWUpOw0KICAgICAgICBkaXNwbGF5QmVmb3JlQm9vc3QgPSBNYXRoLm1heCgxLCBjb25maWcuZ2V0SW50KCJib29zdGVkLWJvdW50aWVzLmJvc3NiYXIuZGlzcGxheS1iZWZvcmUtYm9vc3QiLCAzKSk7DQogICAgICAgIGJvc3NiYXJNZXNzYWdlID0gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBjb25maWcuZ2V0U3RyaW5nKCJib29zdGVkLWJvdW50aWVzLmJvc3NiYXIubWVzc2FnZSIsICImNk5leHQgQm9vc3RlZCBCb3VudHkgaW4gJXRpbWUlIikpOw0KDQogICAgICAgIC8vIENoZWNrIGlmIGJvc3MgYmFycyBhcmUgYXZhaWxhYmxlIGluIHRoaXMgdmVyc2lvbg0KICAgICAgICBpZiAoYm9zc2JhckVuYWJsZWQgJiYgIVZlcnNpb25VdGlscy5pc1Bvc3QxOSgpKSB7DQogICAgICAgICAgICB3YXJuaW5ncy5hZGQoIkJvc3MgYmFycyBub3Qgc3VwcG9ydGVkIGluIE1pbmVjcmFmdCAiICsgVmVyc2lvblV0aWxzLmdldFZlcnNpb25TdHJpbmcoKSArICIsIGRpc2FibGluZyBib29zdGVkIGJvdW50eSBib3NzIGJhciBmZWF0dXJlLiIpOw0KICAgICAgICAgICAgYm9zc2JhckVuYWJsZWQgPSBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBzdGFydEJvb3N0Q3ljbGUoKSB7DQogICAgICAgIHRhc2tJZCA9IEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5zY2hlZHVsZVN5bmNSZXBlYXRpbmdUYXNrKHBsdWdpbiwgKCkgLT4gew0KICAgICAgICAgICAgaWYgKG9ubGluZVBsYXllcnMuc2l6ZSgpIDwgMikgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgTWFwPFVVSUQsIE1hcDxVVUlELCBJbnRlZ2VyPj4gYWxsQm91bnRpZXMgPSBwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLmxpc3RBbGxCb3VudGllcygpOw0KICAgICAgICAgICAgaWYgKGFsbEJvdW50aWVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gQ3JlYXRlIGJvc3MgYmFyIGlmIHN1cHBvcnRlZCBhbmQgZW5hYmxlZA0KICAgICAgICAgICAgaWYgKGJvc3NiYXJFbmFibGVkICYmIGJvc3NCYXIgPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGJvc3NCYXIgPSBWZXJzaW9uVXRpbHMuY3JlYXRlQm9zc0Jhcihib3NzYmFyTWVzc2FnZS5yZXBsYWNlKCIldGltZSUiLCBTdHJpbmcudmFsdWVPZihkaXNwbGF5QmVmb3JlQm9vc3QpKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIERpc3BsYXkgY291bnRkb3duIGFuZCB0aGVuIHNlbGVjdCBib3VudHkNCiAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrTGF0ZXIocGx1Z2luLCB0aGlzOjpzZWxlY3RSYW5kb21Cb3VudHksIChib29zdEludGVydmFsIC0gZGlzcGxheUJlZm9yZUJvb3N0KSAqIDIwTCk7DQogICAgICAgIH0sIDBMLCBib29zdEludGVydmFsICogMjBMKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgc2VsZWN0UmFuZG9tQm91bnR5KCkgew0KICAgICAgICBNYXA8VVVJRCwgTWFwPFVVSUQsIEludGVnZXI+PiBhbGxCb3VudGllcyA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkubGlzdEFsbEJvdW50aWVzKCk7DQogICAgICAgIGlmIChhbGxCb3VudGllcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGJyb2FkY2FzdE5vQm91bnRpZXMoKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIExpc3Q8VVVJRD4gZWxpZ2libGVUYXJnZXRzID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgIGZvciAoVVVJRCB0YXJnZXQgOiBhbGxCb3VudGllcy5rZXlTZXQoKSkgew0KICAgICAgICAgICAgUGxheWVyIHRhcmdldFBsYXllciA9IEJ1a2tpdC5nZXRQbGF5ZXIodGFyZ2V0KTsNCiAgICAgICAgICAgIGlmICh0YXJnZXRQbGF5ZXIgIT0gbnVsbCAmJiB0YXJnZXRQbGF5ZXIuaXNPbmxpbmUoKSkgew0KICAgICAgICAgICAgICAgIGVsaWdpYmxlVGFyZ2V0cy5hZGQodGFyZ2V0KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChlbGlnaWJsZVRhcmdldHMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBicm9hZGNhc3ROb0JvdW50aWVzKCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBVVUlEIHNlbGVjdGVkVGFyZ2V0ID0gZWxpZ2libGVUYXJnZXRzLmdldChuZXcgUmFuZG9tKCkubmV4dEludChlbGlnaWJsZVRhcmdldHMuc2l6ZSgpKSk7DQogICAgICAgIE1hcDxVVUlELCBJbnRlZ2VyPiB0YXJnZXRCb3VudGllcyA9IGFsbEJvdW50aWVzLmdldChzZWxlY3RlZFRhcmdldCk7DQoNCiAgICAgICAgaWYgKHRhcmdldEJvdW50aWVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgYnJvYWRjYXN0Tm9Cb3VudGllcygpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgVVVJRCBzZWxlY3RlZFNldHRlciA9IHRhcmdldEJvdW50aWVzLmtleVNldCgpLml0ZXJhdG9yKCkubmV4dCgpOw0KICAgICAgICBkb3VibGUgbXVsdGlwbGllciA9IGdldFJhbmRvbU11bHRpcGxpZXIoKTsNCg0KICAgICAgICAvLyBTdG9yZSBsYXN0IGJvb3N0IGluZm8gYmVmb3JlIHNldHRpbmcgbmV3IGJvb3N0DQogICAgICAgIGlmICghYm9vc3RlZE11bHRpcGxpZXJzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgVVVJRCBvbGRUYXJnZXQgPSBib29zdGVkTXVsdGlwbGllcnMua2V5U2V0KCkuaXRlcmF0b3IoKS5uZXh0KCk7DQogICAgICAgICAgICBQbGF5ZXIgb2xkUGxheWVyID0gQnVra2l0LmdldFBsYXllcihvbGRUYXJnZXQpOw0KICAgICAgICAgICAgaWYgKG9sZFBsYXllciAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgbGFzdEJvb3N0ZWRQbGF5ZXIgPSBvbGRQbGF5ZXIuZ2V0TmFtZSgpOw0KICAgICAgICAgICAgICAgIGxhc3RNdWx0aXBsaWVyID0gYm9vc3RlZE11bHRpcGxpZXJzLmdldChvbGRUYXJnZXQpOw0KICAgICAgICAgICAgICAgIGxhc3RCb29zdFRpbWUgPSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFN0b3JlIGJvb3N0ZWQgYm91bnR5IGluZm8NCiAgICAgICAgYm9vc3RlZEJvdW50aWVzLmNvbXB1dGVJZkFic2VudChzZWxlY3RlZFRhcmdldCwgayAtPiBuZXcgSGFzaFNldDw+KCkpLmFkZChzZWxlY3RlZFNldHRlcik7DQogICAgICAgIGJvb3N0ZWRNdWx0aXBsaWVycy5wdXQoc2VsZWN0ZWRUYXJnZXQsIG11bHRpcGxpZXIpOw0KICAgICAgICBsYXN0Qm9vc3RTdGFydFRpbWUgPSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKTsNCg0KICAgICAgICAvLyBOb3RpZnkgcGxheWVycw0KICAgICAgICBub3RpZnlQbGF5ZXJzKHNlbGVjdGVkVGFyZ2V0LCBzZWxlY3RlZFNldHRlciwgbXVsdGlwbGllcik7DQoNCiAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIkJvb3N0ZWQgYm91bnR5IHNlbGVjdGVkOiBUYXJnZXQ9IiArIHNlbGVjdGVkVGFyZ2V0ICsgIiwgU2V0dGVyPSIgKyBzZWxlY3RlZFNldHRlciArICIsIE11bHRpcGxpZXI9IiArIG11bHRpcGxpZXIpOw0KDQogICAgICAgIC8vIFJlbW92ZSBib29zdCBhZnRlciA1IG1pbnV0ZXMNCiAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2tMYXRlcihwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgIGJvb3N0ZWRCb3VudGllcy5yZW1vdmUoc2VsZWN0ZWRUYXJnZXQpOw0KICAgICAgICAgICAgYm9vc3RlZE11bHRpcGxpZXJzLnJlbW92ZShzZWxlY3RlZFRhcmdldCk7DQogICAgICAgIH0sIDMwMEwpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBub3RpZnlQbGF5ZXJzKFVVSUQgdGFyZ2V0VVVJRCwgVVVJRCBzZXR0ZXJVVUlELCBkb3VibGUgbXVsdGlwbGllcikgew0KICAgICAgICBQbGF5ZXIgdGFyZ2V0UGxheWVyID0gQnVra2l0LmdldFBsYXllcih0YXJnZXRVVUlEKTsNCiAgICAgICAgUGxheWVyIHNldHRlclBsYXllciA9IEJ1a2tpdC5nZXRQbGF5ZXIoc2V0dGVyVVVJRCk7DQoNCiAgICAgICAgU3RyaW5nIHRhcmdldE5hbWUgPSB0YXJnZXRQbGF5ZXIgIT0gbnVsbCA/IHRhcmdldFBsYXllci5nZXROYW1lKCkgOiAiVW5rbm93biI7DQogICAgICAgIFN0cmluZyBzZXR0ZXJOYW1lID0gc2V0dGVyUGxheWVyICE9IG51bGwgPyBzZXR0ZXJQbGF5ZXIuZ2V0TmFtZSgpIDogIlVua25vd24iOw0KDQogICAgICAgIGlmIChlbmFibGVUaXRsZVN1YnRpdGxlKSB7DQogICAgICAgICAgICBTdHJpbmcgdGl0bGUgPSBib29zdGVkVGl0bGU7DQogICAgICAgICAgICBTdHJpbmcgc3VidGl0bGUgPSBib29zdGVkU3VidGl0bGUNCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiV0YXJnZXQlIiwgdGFyZ2V0TmFtZSkNCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVtdWx0aXBsaWVyJSIsIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBtdWx0aXBsaWVyKSk7DQoNCiAgICAgICAgICAgIGZvciAoUGxheWVyIG9ubGluZVBsYXllciA6IEJ1a2tpdC5nZXRPbmxpbmVQbGF5ZXJzKCkpIHsNCiAgICAgICAgICAgICAgICBWZXJzaW9uVXRpbHMuc2VuZFRpdGxlKG9ubGluZVBsYXllciwgdGl0bGUsIHN1YnRpdGxlLCAxMCwgNzAsIDIwKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEJyb2FkY2FzdCBtZXNzYWdlDQogICAgICAgIExpc3Q8U3RyaW5nPiBtZXNzYWdlTGlzdCA9IHBsdWdpbi5nZXRNZXNzYWdlc0NvbmZpZygpLmdldFN0cmluZ0xpc3QoImJvb3N0ZWQtYm91bnR5LW1lc3NhZ2UiKTsNCiAgICAgICAgaWYgKG1lc3NhZ2VMaXN0LmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoImJvb3N0ZWQtYm91bnR5LW1lc3NhZ2UgaXMgbWlzc2luZyBpbiBtZXNzYWdlcy55bWwiKTsNCiAgICAgICAgICAgIFN0cmluZyBkZWZhdWx0TWVzc2FnZSA9ICImNltCb3VudHkgQm9vc3RdICZlJXRhcmdldCUmYSdzIGJvdW50eSBoYXMgYmVlbiBib29zdGVkIGJ5ICZlJW11bHRpcGxpZXIleCZhISI7DQogICAgICAgICAgICBmb3IgKFBsYXllciBvbmxpbmVQbGF5ZXIgOiBCdWtraXQuZ2V0T25saW5lUGxheWVycygpKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIG1lc3NhZ2UgPSBkZWZhdWx0TWVzc2FnZQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiV0YXJnZXQlIiwgdGFyZ2V0TmFtZSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlc2V0dGVyJSIsIHNldHRlck5hbWUpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW11bHRpcGxpZXIlIiwgU3RyaW5nLnZhbHVlT2YobXVsdGlwbGllcikpOw0KICAgICAgICAgICAgICAgIG9ubGluZVBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIG1lc3NhZ2UpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFN0cmluZyBib29zdGVkQm91bnR5TWVzc2FnZSA9IFN0cmluZy5qb2luKCJcbiIsIG1lc3NhZ2VMaXN0KQ0KICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJXRhcmdldCUiLCB0YXJnZXROYW1lKQ0KICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJXNldHRlciUiLCBzZXR0ZXJOYW1lKQ0KICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW11bHRpcGxpZXIlIiwgU3RyaW5nLnZhbHVlT2YobXVsdGlwbGllcikpOw0KICAgICAgICAgICAgZm9yIChQbGF5ZXIgb25saW5lUGxheWVyIDogQnVra2l0LmdldE9ubGluZVBsYXllcnMoKSkgew0KICAgICAgICAgICAgICAgIG9ubGluZVBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGJvb3N0ZWRCb3VudHlNZXNzYWdlKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgYnJvYWRjYXN0Tm9Cb3VudGllcygpIHsNCiAgICAgICAgU3RyaW5nIG1lc3NhZ2UgPSBwbHVnaW4uZ2V0TWVzc2FnZXNDb25maWcoKS5nZXRTdHJpbmcoIm5vLWJvdW50aWVzLXRvLWJvb3N0IiwgIiZjTm8gYm91bnRpZXMgYXZhaWxhYmxlIHRvIGJvb3N0ISIpOw0KICAgICAgICBmb3IgKFBsYXllciBvbmxpbmVQbGF5ZXIgOiBCdWtraXQuZ2V0T25saW5lUGxheWVycygpKSB7DQogICAgICAgICAgICBvbmxpbmVQbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcml2YXRlIGRvdWJsZSBnZXRSYW5kb21NdWx0aXBsaWVyKCkgew0KICAgICAgICBpZiAobXVsdGlwbGllckNoYW5jZXMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICByZXR1cm4gMi4wOyAvLyBEZWZhdWx0IG11bHRpcGxpZXINCiAgICAgICAgfQ0KDQogICAgICAgIGRvdWJsZSB0b3RhbENoYW5jZSA9IG11bHRpcGxpZXJDaGFuY2VzLnZhbHVlcygpLnN0cmVhbSgpLm1hcFRvRG91YmxlKERvdWJsZTo6ZG91YmxlVmFsdWUpLnN1bSgpOw0KICAgICAgICBkb3VibGUgcmFuZG9tVmFsdWUgPSByYW5kb20ubmV4dERvdWJsZSgpICogdG90YWxDaGFuY2U7DQogICAgICAgIGRvdWJsZSBjdW11bGF0aXZlUHJvYmFiaWxpdHkgPSAwOw0KDQogICAgICAgIGZvciAoTWFwLkVudHJ5PERvdWJsZSwgRG91YmxlPiBlbnRyeSA6IG11bHRpcGxpZXJDaGFuY2VzLmVudHJ5U2V0KCkpIHsNCiAgICAgICAgICAgIGN1bXVsYXRpdmVQcm9iYWJpbGl0eSArPSBlbnRyeS5nZXRWYWx1ZSgpOw0KICAgICAgICAgICAgaWYgKHJhbmRvbVZhbHVlIDw9IGN1bXVsYXRpdmVQcm9iYWJpbGl0eSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS5nZXRLZXkoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBtdWx0aXBsaWVyQ2hhbmNlcy5rZXlTZXQoKS5zdHJlYW0oKS5maW5kRmlyc3QoKS5vckVsc2UoMi4wKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgYm9vbGVhbiBpc0Jvb3N0ZWQoVVVJRCB0YXJnZXQsIFVVSUQgc2V0dGVyKSB7DQogICAgICAgIFNldDxVVUlEPiBib29zdGVkU2V0dGVycyA9IGJvb3N0ZWRCb3VudGllcy5nZXQodGFyZ2V0KTsNCiAgICAgICAgcmV0dXJuIGJvb3N0ZWRTZXR0ZXJzICE9IG51bGwgJiYgYm9vc3RlZFNldHRlcnMuY29udGFpbnMoc2V0dGVyKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgZG91YmxlIGdldEJvb3N0ZWRNdWx0aXBsaWVyKCkgew0KICAgICAgICByZXR1cm4gYm9vc3RlZE11bHRpcGxpZXJzLnZhbHVlcygpLnN0cmVhbSgpLmZpbmRGaXJzdCgpLm9yRWxzZSgxLjApOw0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIGFkZFBsYXllcihQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIG9ubGluZVBsYXllcnMuYWRkKHBsYXllcik7DQoNCiAgICAgICAgLy8gQWRkIHRvIGJvc3MgYmFyIGlmIHN1cHBvcnRlZCBhbmQgYXZhaWxhYmxlDQogICAgICAgIGlmIChib3NzYmFyRW5hYmxlZCAmJiBib3NzQmFyICE9IG51bGwpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgLy8gVXNlIHJlZmxlY3Rpb24gdG8gYWRkIHBsYXllciB0byBib3NzIGJhcg0KICAgICAgICAgICAgICAgIE9iamVjdFtdIHBsYXllcnMgPSAoT2JqZWN0W10pIGJvc3NCYXIuZ2V0Q2xhc3MoKS5nZXRNZXRob2QoImdldFBsYXllcnMiKS5pbnZva2UoYm9zc0Jhcik7DQogICAgICAgICAgICAgICAgYm9vbGVhbiBoYXNQbGF5ZXIgPSBBcnJheXMuc3RyZWFtKHBsYXllcnMpLmFueU1hdGNoKHAgLT4gcC5lcXVhbHMocGxheWVyKSk7DQogICAgICAgICAgICAgICAgaWYgKCFoYXNQbGF5ZXIpIHsNCiAgICAgICAgICAgICAgICAgICAgYm9zc0Jhci5nZXRDbGFzcygpLmdldE1ldGhvZCgiYWRkUGxheWVyIiwgUGxheWVyLmNsYXNzKS5pbnZva2UoYm9zc0JhciwgcGxheWVyKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIC8vIFNpbGVudGx5IGhhbmRsZSByZWZsZWN0aW9uIGVycm9ycw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgcmVtb3ZlUGxheWVyKFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgb25saW5lUGxheWVycy5yZW1vdmUocGxheWVyKTsNCg0KICAgICAgICAvLyBSZW1vdmUgZnJvbSBib3NzIGJhciBpZiBzdXBwb3J0ZWQgYW5kIGF2YWlsYWJsZQ0KICAgICAgICBpZiAoYm9zc2JhckVuYWJsZWQgJiYgYm9zc0JhciAhPSBudWxsKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGJvc3NCYXIuZ2V0Q2xhc3MoKS5nZXRNZXRob2QoInJlbW92ZVBsYXllciIsIFBsYXllci5jbGFzcykuaW52b2tlKGJvc3NCYXIsIHBsYXllcik7DQogICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIC8vIFNpbGVudGx5IGhhbmRsZSByZWZsZWN0aW9uIGVycm9ycw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgY2xlYW51cCgpIHsNCiAgICAgICAgaWYgKHRhc2tJZCAhPSAtMSkgew0KICAgICAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLmNhbmNlbFRhc2sodGFza0lkKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChib3NzYmFyRW5hYmxlZCAmJiBib3NzQmFyICE9IG51bGwpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBwbGF5ZXJzIGFuZCBoaWRlIGJvc3MgYmFyDQogICAgICAgICAgICAgICAgYm9zc0Jhci5nZXRDbGFzcygpLmdldE1ldGhvZCgic2V0VmlzaWJsZSIsIGJvb2xlYW4uY2xhc3MpLmludm9rZShib3NzQmFyLCBmYWxzZSk7DQogICAgICAgICAgICAgICAgT2JqZWN0IHBsYXllcnMgPSBib3NzQmFyLmdldENsYXNzKCkuZ2V0TWV0aG9kKCJnZXRQbGF5ZXJzIikuaW52b2tlKGJvc3NCYXIpOw0KICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJzIGluc3RhbmNlb2YgQ29sbGVjdGlvbikgew0KICAgICAgICAgICAgICAgICAgICBmb3IgKE9iamVjdCBwbGF5ZXIgOiBuZXcgQXJyYXlMaXN0PD4oKENvbGxlY3Rpb248Pz4pIHBsYXllcnMpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBib3NzQmFyLmdldENsYXNzKCkuZ2V0TWV0aG9kKCJyZW1vdmVQbGF5ZXIiLCBQbGF5ZXIuY2xhc3MpLmludm9rZShib3NzQmFyLCBwbGF5ZXIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICAvLyBTaWxlbnRseSBoYW5kbGUgcmVmbGVjdGlvbiBlcnJvcnMNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCiAgICAvLyBBZGQgdGhlc2UgbmV3IG1ldGhvZHMgdG8gc3VwcG9ydCB0aGUgYm9vc3QgY2xvY2sNCiAgICBwdWJsaWMgVVVJRCBnZXRDdXJyZW50Qm9vc3RlZFRhcmdldCgpIHsNCiAgICAgICAgcmV0dXJuIGJvb3N0ZWRNdWx0aXBsaWVycy5rZXlTZXQoKS5zdHJlYW0oKS5maW5kRmlyc3QoKS5vckVsc2UobnVsbCk7DQogICAgfQ0KDQogICAgcHVibGljIGRvdWJsZSBnZXRDdXJyZW50Qm9vc3RNdWx0aXBsaWVyKFVVSUQgdGFyZ2V0KSB7DQogICAgICAgIHJldHVybiBib29zdGVkTXVsdGlwbGllcnMuZ2V0T3JEZWZhdWx0KHRhcmdldCwgMS4wKTsNCiAgICB9DQoNCiAgICAvLyBZb3UnbGwgbmVlZCB0byBhZGQgdHJhY2tpbmcgZm9yIGxhc3QgYm9vc3QgYW5kIHRpbWluZw0KICAgIHByaXZhdGUgU3RyaW5nIGxhc3RCb29zdGVkUGxheWVyID0gbnVsbDsNCiAgICBwcml2YXRlIGRvdWJsZSBsYXN0TXVsdGlwbGllciA9IDEuMDsNCiAgICBwcml2YXRlIGxvbmcgbGFzdEJvb3N0VGltZSA9IDA7DQogICAgcHJpdmF0ZSBsb25nIGxhc3RCb29zdFN0YXJ0VGltZSA9IDA7DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldExhc3RCb29zdGVkUGxheWVyKCkgew0KICAgICAgICByZXR1cm4gbGFzdEJvb3N0ZWRQbGF5ZXI7DQogICAgfQ0KDQogICAgcHVibGljIGRvdWJsZSBnZXRMYXN0Qm9vc3RNdWx0aXBsaWVyKCkgew0KICAgICAgICByZXR1cm4gbGFzdE11bHRpcGxpZXI7DQogICAgfQ0KDQogICAgcHVibGljIGxvbmcgZ2V0VGltZVVudGlsTmV4dEJvb3N0KCkgew0KICAgICAgICAvLyBDYWxjdWxhdGUgYmFzZWQgb24gYm9vc3QgaW50ZXJ2YWwgYW5kIGxhc3QgYm9vc3QgdGltZQ0KICAgICAgICBsb25nIGludGVydmFsTXMgPSBib29zdEludGVydmFsICogMTAwMEw7DQogICAgICAgIGxvbmcgdGltZVNpbmNlTGFzdFN0YXJ0ID0gU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkgLSBsYXN0Qm9vc3RTdGFydFRpbWU7DQogICAgICAgIGxvbmcgdGltZVVudGlsTmV4dCA9IGludGVydmFsTXMgLSAodGltZVNpbmNlTGFzdFN0YXJ0ICUgaW50ZXJ2YWxNcyk7DQogICAgICAgIHJldHVybiB0aW1lVW50aWxOZXh0IC8gMTAwMDsgLy8gUmV0dXJuIGluIHNlY29uZHMNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldExhc3RCb29zdFRpbWUoKSB7DQogICAgICAgIGlmIChsYXN0Qm9vc3RUaW1lID09IDApIHsNCiAgICAgICAgICAgIHJldHVybiAiTmV2ZXIiOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBUaW1lRm9ybWF0dGVyLmZvcm1hdFRpbWVzdGFtcFRvQWdvKGxhc3RCb29zdFRpbWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbG9hZHMgYm9vc3RlZCBib3VudHkgY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IFVwZGF0ZXMgc2V0dGluZ3MgZnJvbSBjb25maWcueW1sDQogICAgICovDQogICAgcHVibGljIHZvaWQgcmVsb2FkKExpc3Q8U3RyaW5nPiB3YXJuaW5ncykgew0KICAgICAgICBsb2FkQ29uZmlnKHdhcm5pbmdzKTsNCiAgICB9DQp9DQob255MjYvYm91bnRpZXNQbHVzL0JvdW50aWVzUGx1cy5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAxMjA2NTQgMTUwMjY2MDA1NzUgMDE2NDAyACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8vIGZpbGU6IHNyYy9tYWluL2phdmEvdG9ueTI2L2JvdW50aWVzUGx1cy9Cb3VudGllc1BsdXMuamF2YQ0KcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzOw0KaW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247DQppbXBvcnQgbmV0Lm1pbGtib3dsLnZhdWx0LmVjb25vbXkuRWNvbm9teTsNCmltcG9ydCBvcmcuYnVra2l0LkJ1a2tpdDsNCmltcG9ydCBvcmcuYnVra2l0LkNoYXRDb2xvcjsNCmltcG9ydCBvcmcuYnVra2l0Lk1hdGVyaWFsOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5JbnZhbGlkQ29uZmlndXJhdGlvbkV4Y2VwdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmVudGl0eS5QbGF5ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5FdmVudEhhbmRsZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5MaXN0ZW5lcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LnBsYXllci5QbGF5ZXJKb2luRXZlbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5wbGF5ZXIuUGxheWVyUXVpdEV2ZW50Ow0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1TdGFjazsNCmltcG9ydCBvcmcuYnVra2l0LnBsdWdpbi5SZWdpc3RlcmVkU2VydmljZVByb3ZpZGVyOw0KaW1wb3J0IG9yZy5idWtraXQucGx1Z2luLmphdmEuSmF2YVBsdWdpbjsNCmltcG9ydCBvcmcuYnVra2l0LmNvbW1hbmQuUGx1Z2luQ29tbWFuZDsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5GaWxlQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5ZYW1sQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LnNjaGVkdWxlci5CdWtraXRSdW5uYWJsZTsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkl0ZW1zLio7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy4qOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuU2hvcEd1aVBsdXNJbnRlZ3JhdGlvbjsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkdVSXMuQm91bnR5R1VJOw0KDQppbXBvcnQgamF2YS5pby4qOw0KaW1wb3J0IGphdmEudXRpbC4qOw0KaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkV4ZWN1dG9yU2VydmljZTsNCmltcG9ydCBqYXZhLnV0aWwuY29uY3VycmVudC5FeGVjdXRvcnM7DQoNCnB1YmxpYyBjbGFzcyBCb3VudGllc1BsdXMgZXh0ZW5kcyBKYXZhUGx1Z2luIGltcGxlbWVudHMgTGlzdGVuZXIgew0KDQogICAgcHJpdmF0ZSBzdGF0aWMgQm91bnRpZXNQbHVzIGluc3RhbmNlOw0KICAgIHByaXZhdGUgc3RhdGljIEVjb25vbXkgZWNvbm9teTsNCiAgICBwcml2YXRlIEJvdW50eU1hbmFnZXIgYm91bnR5TWFuYWdlcjsNCiAgICBwcml2YXRlIEJvb3N0ZWRCb3VudHkgYm9vc3RlZEJvdW50eTsNCiAgICBwcml2YXRlIEFub255bW91c0JvdW50eSBhbm9ueW1vdXNCb3VudHk7DQogICAgcHJpdmF0ZSBUYXhNYW5hZ2VyIHRheE1hbmFnZXI7DQogICAgcHJpdmF0ZSBGcmVuenkgZnJlbnp5Ow0KICAgIHByaXZhdGUgVHJhY2tlciB0cmFja2VyOw0KICAgIHByaXZhdGUgSmFtbWVyIGphbW1lcjsNCiAgICBwcml2YXRlIFVBViB1YXY7DQogICAgcHJpdmF0ZSBNYW51YWxCb29zdCBtYW51YWxCb29zdDsNCiAgICBwcml2YXRlIE1hbnVhbEZyZW56eSBtYW51YWxGcmVuenk7DQogICAgcHJpdmF0ZSBEZWNyZWFzZVRpbWUgZGVjcmVhc2VUaW1lOw0KICAgIHByaXZhdGUgUmV2ZXJzZUJvdW50eSByZXZlcnNlQm91bnR5Ow0KICAgIHByaXZhdGUgSXRlbVZhbHVlQ2FsY3VsYXRvciBpdGVtVmFsdWVDYWxjdWxhdG9yOw0KICAgIHByaXZhdGUgVGFibGlzdE1hbmFnZXIgdGFibGlzdE1hbmFnZXI7DQogICAgcHJpdmF0ZSBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyOw0KICAgIHByaXZhdGUgYm9vbGVhbiBib3VudHlTb3VuZEVuYWJsZWQ7DQogICAgcHJpdmF0ZSBTdHJpbmcgYm91bnR5U291bmROYW1lOw0KICAgIHByaXZhdGUgZmxvYXQgYm91bnR5U291bmRWb2x1bWU7DQogICAgcHJpdmF0ZSBmbG9hdCBib3VudHlTb3VuZFBpdGNoOw0KICAgIHByaXZhdGUgU3RyaW5nIGJvdW50eUdVSVRpdGxlOw0KICAgIHByaXZhdGUgTWFwPFN0cmluZywgQ29uZmlnV3JhcHBlcj4gY29uZmlnV3JhcHBlcnMgPSBuZXcgSGFzaE1hcDw+KCk7DQogICAgcHJpdmF0ZSBNeVNRTCBteVNRTDsNCiAgICBwcml2YXRlIEV4ZWN1dG9yU2VydmljZSBleGVjdXRvclNlcnZpY2U7DQogICAgcHJpdmF0ZSBFdmVudE1hbmFnZXIgZXZlbnRNYW5hZ2VyOw0KICAgIHByaXZhdGUgU2hvcEd1aVBsdXNJbnRlZ3JhdGlvbiBzaG9wR3VpUGx1c0ludGVncmF0aW9uOw0KDQogICAgcHVibGljIFNob3BHdWlQbHVzSW50ZWdyYXRpb24gZ2V0U2hvcEd1aVBsdXNJbnRlZ3JhdGlvbigpIHsNCiAgICAgICAgcmV0dXJuIHNob3BHdWlQbHVzSW50ZWdyYXRpb247DQogICAgfQ0KDQogICAgcHVibGljIEV2ZW50TWFuYWdlciBnZXRFdmVudE1hbmFnZXIoKSB7DQogICAgICAgIHJldHVybiBldmVudE1hbmFnZXI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSW5pdGlhbGl6ZXMgYSBjb25maWd1cmF0aW9uIHdyYXBwZXIgZm9yIGEgc3BlY2lmaWMgZmlsZQ0KICAgICAqIC8vIG5vdGU6IExvYWRzIG9yIGNyZWF0ZXMgYSBjb25maWcgZmlsZSB3aXRoIGRlZmF1bHRzDQogICAgICovDQogICAgcHJpdmF0ZSBjbGFzcyBDb25maWdXcmFwcGVyIHsNCiAgICAgICAgcHJpdmF0ZSBmaW5hbCBTdHJpbmcgbmFtZTsNCiAgICAgICAgcHJpdmF0ZSBmaW5hbCBTdHJpbmcgZnVsbFBhdGg7DQogICAgICAgIHByaXZhdGUgRmlsZSBmaWxlOw0KICAgICAgICBwcml2YXRlIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZzsNCg0KICAgICAgICAvKioNCiAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBjb25maWd1cmF0aW9uIHdyYXBwZXIgZm9yIGEgc3BlY2lmaWMgZmlsZQ0KICAgICAgICAgKiAvLyBub3RlOiBMb2FkcyBvciBjcmVhdGVzIGEgY29uZmlnIGZpbGUgd2l0aCBkZWZhdWx0cyBmcm9tIHJlc291cmNlcy9HVUlzLw0KICAgICAgICAgKi8NCiAgICAgICAgLyoqDQogICAgICAgICAqIEluaXRpYWxpemVzIGEgY29uZmlndXJhdGlvbiB3cmFwcGVyIGZvciBhIHNwZWNpZmljIGZpbGUNCiAgICAgICAgICogLy8gbm90ZTogTG9hZHMgb3IgY3JlYXRlcyBhIGNvbmZpZyBmaWxlIHdpdGggZGVmYXVsdHMgZnJvbSByZXNvdXJjZXMvDQogICAgICAgICAqLw0KICAgICAgICBwdWJsaWMgQ29uZmlnV3JhcHBlcihTdHJpbmcgbmFtZSkgdGhyb3dzIElPRXhjZXB0aW9uIHsNCiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7DQogICAgICAgICAgICAvLyBOb3JtYWxpemUgcGF0aCBmb3IgZmlsZSBzeXN0ZW0gKGUuZy4sIFN0b3JhZ2UvQm91bnR5U3RvcmFnZSAtPiBTdG9yYWdlL0JvdW50eVN0b3JhZ2UueW1sKQ0KICAgICAgICAgICAgdGhpcy5mdWxsUGF0aCA9IG5hbWUuZW5kc1dpdGgoIi55bWwiKSA/IG5hbWUgOiBuYW1lICsgIi55bWwiOw0KICAgICAgICAgICAgLy8gQWRqdXN0IHJlc291cmNlIHBhdGggdG8gaW5jbHVkZSAncmVzb3VyY2VzLycgcHJlZml4IGFzIHBlciBKQVIgc3RydWN0dXJlDQogICAgICAgICAgICBTdHJpbmcgcmVzb3VyY2VQYXRoID0gInJlc291cmNlcy8iICsgZnVsbFBhdGg7DQogICAgICAgICAgICAvLyBDcmVhdGUgZmlsZSBpbiBhcHByb3ByaWF0ZSBzdWJmb2xkZXIgKGUuZy4sIHBsdWdpbnMvQm91bnRpZXNQbHVzL1N0b3JhZ2UvKQ0KICAgICAgICAgICAgZmlsZSA9IG5ldyBGaWxlKGdldERhdGFGb2xkZXIoKSwgZnVsbFBhdGgucmVwbGFjZSgiLyIsIEZpbGUuc2VwYXJhdG9yKSk7DQogICAgICAgICAgICBGaWxlIHBhcmVudERpciA9IGZpbGUuZ2V0UGFyZW50RmlsZSgpOw0KICAgICAgICAgICAgaWYgKCFwYXJlbnREaXIuZXhpc3RzKCkgJiYgIXBhcmVudERpci5ta2RpcnMoKSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUddIEZhaWxlZCB0byBjcmVhdGUgZGlyZWN0b3J5OiAiICsgcGFyZW50RGlyLmdldFBhdGgoKSk7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IElPRXhjZXB0aW9uKCJGYWlsZWQgdG8gY3JlYXRlIGRpcmVjdG9yeTogIiArIHBhcmVudERpci5nZXRQYXRoKCkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBDaGVjayBpZiBmaWxlIGV4aXN0czsgaWYgbm90LCBhdHRlbXB0IHRvIGNvcHkgZnJvbSByZXNvdXJjZXMNCiAgICAgICAgICAgIGlmICghZmlsZS5leGlzdHMoKSkgew0KICAgICAgICAgICAgICAgIElucHV0U3RyZWFtIHJlc291cmNlU3RyZWFtID0gZ2V0UmVzb3VyY2UocmVzb3VyY2VQYXRoKTsNCiAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2VTdHJlYW0gPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHXSBSZXNvdXJjZSBub3QgZm91bmQgaW4gSkFSOiAiICsgcmVzb3VyY2VQYXRoICsgIiwgY3JlYXRpbmcgZW1wdHkgZmlsZSBmb3IgIiArIGZ1bGxQYXRoKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWxlLmNyZWF0ZU5ld0ZpbGUoKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IElPRXhjZXB0aW9uKCJGYWlsZWQgdG8gY3JlYXRlIGZpbGU6ICIgKyBmaWxlLmdldFBhdGgoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gbmV3IFlhbWxDb25maWd1cmF0aW9uKCk7DQogICAgICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgbWluaW1hbCBkZWZhdWx0IGNvbnRlbnQgZm9yIGNyaXRpY2FsIGZpbGVzDQogICAgICAgICAgICAgICAgICAgIGlmIChmdWxsUGF0aC5jb250YWlucygiQm91bnR5U3RvcmFnZSIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuY3JlYXRlU2VjdGlvbigiYm91bnRpZXMiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5jcmVhdGVTZWN0aW9uKCJhbm9ueW1vdXMtYm91bnRpZXMiKTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmdWxsUGF0aC5jb250YWlucygiU3RhdFN0b3JhZ2UiKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmNyZWF0ZVNlY3Rpb24oInBsYXllcnMiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBjb25maWcuc2F2ZShmaWxlKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVR10gQ29weWluZyBkZWZhdWx0IHJlc291cmNlIGZvciAiICsgZnVsbFBhdGggKyAiIGZyb20gIiArIHJlc291cmNlUGF0aCk7DQogICAgICAgICAgICAgICAgICAgIC8vIENvcHkgcmVzb3VyY2UgdG8gZmlsZQ0KICAgICAgICAgICAgICAgICAgICB0cnkgKEZpbGVPdXRwdXRTdHJlYW0gZm9zID0gbmV3IEZpbGVPdXRwdXRTdHJlYW0oZmlsZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVbXSBidWZmZXIgPSBuZXcgYnl0ZVsxMDI0XTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGludCBieXRlc1JlYWQ7DQogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGJ5dGVzUmVhZCA9IHJlc291cmNlU3RyZWFtLnJlYWQoYnVmZmVyKSkgIT0gLTEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3Mud3JpdGUoYnVmZmVyLCAwLCBieXRlc1JlYWQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VTdHJlYW0uY2xvc2UoKTsNCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVR10gRmFpbGVkIHRvIGNvcHkgcmVzb3VyY2UgIiArIHJlc291cmNlUGF0aCArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBMb2FkIHRoZSBjb25maWd1cmF0aW9uDQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGNvbmZpZyA9IFlhbWxDb25maWd1cmF0aW9uLmxvYWRDb25maWd1cmF0aW9uKGZpbGUpOw0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHXSBTdWNjZXNzZnVsbHkgbG9hZGVkIGNvbmZpZ3VyYXRpb246ICIgKyBmdWxsUGF0aCk7DQogICAgICAgICAgICAgICAgLy8gTG9hZCBkZWZhdWx0cyBpZiByZXNvdXJjZSBleGlzdHMNCiAgICAgICAgICAgICAgICBJbnB1dFN0cmVhbSBkZWZDb25maWdTdHJlYW0gPSBnZXRSZXNvdXJjZShyZXNvdXJjZVBhdGgpOw0KICAgICAgICAgICAgICAgIGlmIChkZWZDb25maWdTdHJlYW0gIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICB0cnkgKElucHV0U3RyZWFtUmVhZGVyIHJlYWRlciA9IG5ldyBJbnB1dFN0cmVhbVJlYWRlcihkZWZDb25maWdTdHJlYW0pKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBZYW1sQ29uZmlndXJhdGlvbiBkZWZDb25maWcgPSBZYW1sQ29uZmlndXJhdGlvbi5sb2FkQ29uZmlndXJhdGlvbihyZWFkZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLnNldERlZmF1bHRzKGRlZkNvbmZpZyk7DQogICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVR10gU2V0IGRlZmF1bHRzIGZvciAiICsgZnVsbFBhdGggKyAiIGZyb20gcmVzb3VyY2UiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUddIE5vIGRlZmF1bHQgcmVzb3VyY2UgZm91bmQgZm9yICIgKyByZXNvdXJjZVBhdGgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVR10gRmFpbGVkIHRvIHBhcnNlICIgKyBmdWxsUGF0aCArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IElPRXhjZXB0aW9uKCJGYWlsZWQgdG8gcGFyc2UgIiArIGZ1bGxQYXRoICsgIjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8qKg0KICAgICAgICAgKiBSZWxvYWRzIHRoZSBjb25maWd1cmF0aW9uIGZyb20gZGlzaw0KICAgICAgICAgKiAvLyBub3RlOiBSZWZyZXNoZXMgdGhlIGNvbmZpZyBmaWxlIGFuZCByZWFwcGxpZXMgZGVmYXVsdHMNCiAgICAgICAgICovDQogICAgICAgIHB1YmxpYyB2b2lkIHJlbG9hZCgpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgY29uZmlnID0gWWFtbENvbmZpZ3VyYXRpb24ubG9hZENvbmZpZ3VyYXRpb24oZmlsZSk7DQogICAgICAgICAgICAgICAgU3RyaW5nIHJlc291cmNlUGF0aCA9ICJyZXNvdXJjZXMvIiArIGZ1bGxQYXRoOw0KICAgICAgICAgICAgICAgIElucHV0U3RyZWFtIGRlZkNvbmZpZ1N0cmVhbSA9IGdldFJlc291cmNlKHJlc291cmNlUGF0aCk7DQogICAgICAgICAgICAgICAgaWYgKGRlZkNvbmZpZ1N0cmVhbSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIHRyeSAoSW5wdXRTdHJlYW1SZWFkZXIgcmVhZGVyID0gbmV3IElucHV0U3RyZWFtUmVhZGVyKGRlZkNvbmZpZ1N0cmVhbSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFlhbWxDb25maWd1cmF0aW9uIGRlZkNvbmZpZyA9IFlhbWxDb25maWd1cmF0aW9uLmxvYWRDb25maWd1cmF0aW9uKHJlYWRlcik7DQogICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuc2V0RGVmYXVsdHMoZGVmQ29uZmlnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHXSBSZWxvYWRlZCAiICsgZnVsbFBhdGggKyAiIHdpdGggZGVmYXVsdHMgZnJvbSAiICsgcmVzb3VyY2VQYXRoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUddIE5vIGRlZmF1bHQgcmVzb3VyY2UgZm91bmQgZm9yICIgKyByZXNvdXJjZVBhdGggKyAiIGR1cmluZyByZWxvYWQiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUddIEZhaWxlZCB0byByZWxvYWQgIiArIGZ1bGxQYXRoICsgIjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8qKg0KICAgICAgICAgKiBTYXZlcyB0aGUgY29uZmlndXJhdGlvbiB0byBkaXNrDQogICAgICAgICAqIC8vIG5vdGU6IFBlcnNpc3RzIHRoZSBjdXJyZW50IGNvbmZpZyBzdGF0ZSB0byBmaWxlDQogICAgICAgICAqLw0KICAgICAgICBwdWJsaWMgdm9pZCBzYXZlKCkgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBjb25maWcuc2F2ZShmaWxlKTsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVR10gU2F2ZWQgY29uZmlndXJhdGlvbjogIiArIGZ1bGxQYXRoKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHXSBDb3VsZCBub3Qgc2F2ZSAiICsgZnVsbFBhdGggKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIEdldHMgdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0DQogICAgICAgICAqIC8vIG5vdGU6IFJldHVybnMgdGhlIGxvYWRlZCBGaWxlQ29uZmlndXJhdGlvbg0KICAgICAgICAgKi8NCiAgICAgICAgcHVibGljIEZpbGVDb25maWd1cmF0aW9uIGdldENvbmZpZygpIHsNCiAgICAgICAgICAgIHJldHVybiBjb25maWc7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwdWJsaWMgc3RhdGljIEJvdW50aWVzUGx1cyBnZXRJbnN0YW5jZSgpIHsNCiAgICAgICAgcmV0dXJuIGluc3RhbmNlOw0KICAgIH0NCg0KICAgIHB1YmxpYyBzdGF0aWMgRWNvbm9teSBnZXRFY29ub215KCkgew0KICAgICAgICByZXR1cm4gZWNvbm9teTsNCiAgICB9DQoNCiAgICBwdWJsaWMgQm91bnR5TWFuYWdlciBnZXRCb3VudHlNYW5hZ2VyKCkgew0KICAgICAgICByZXR1cm4gYm91bnR5TWFuYWdlcjsNCiAgICB9DQoNCiAgICBwdWJsaWMgQm9vc3RlZEJvdW50eSBnZXRCb29zdGVkQm91bnR5KCkgew0KICAgICAgICByZXR1cm4gYm9vc3RlZEJvdW50eTsNCiAgICB9DQoNCiAgICBwdWJsaWMgQW5vbnltb3VzQm91bnR5IGdldEFub255bW91c0JvdW50eSgpIHsNCiAgICAgICAgcmV0dXJuIGFub255bW91c0JvdW50eTsNCiAgICB9DQoNCiAgICBwdWJsaWMgVGF4TWFuYWdlciBnZXRUYXhNYW5hZ2VyKCkgew0KICAgICAgICByZXR1cm4gdGF4TWFuYWdlcjsNCiAgICB9DQoNCiAgICBwdWJsaWMgRnJlbnp5IGdldEZyZW56eSgpIHsNCiAgICAgICAgcmV0dXJuIGZyZW56eTsNCiAgICB9DQoNCiAgICBwdWJsaWMgVHJhY2tlciBnZXRUcmFja2VyKCkgew0KICAgICAgICByZXR1cm4gdHJhY2tlcjsNCiAgICB9DQoNCiAgICBwdWJsaWMgSmFtbWVyIGdldEphbW1lcigpIHsNCiAgICAgICAgcmV0dXJuIGphbW1lcjsNCiAgICB9DQoNCiAgICBwdWJsaWMgVUFWIGdldFVBVigpIHsNCiAgICAgICAgcmV0dXJuIHVhdjsNCiAgICB9DQoNCiAgICBwdWJsaWMgTWFudWFsQm9vc3QgZ2V0TWFudWFsQm9vc3QoKSB7DQogICAgICAgIHJldHVybiBtYW51YWxCb29zdDsNCiAgICB9DQoNCiAgICBwdWJsaWMgTWFudWFsRnJlbnp5IGdldE1hbnVhbEZyZW56eSgpIHsNCiAgICAgICAgcmV0dXJuIG1hbnVhbEZyZW56eTsNCiAgICB9DQoNCiAgICBwdWJsaWMgRGVjcmVhc2VUaW1lIGdldERlY3JlYXNlVGltZSgpIHsNCiAgICAgICAgcmV0dXJuIGRlY3JlYXNlVGltZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgUmV2ZXJzZUJvdW50eSBnZXRSZXZlcnNlQm91bnR5KCkgew0KICAgICAgICByZXR1cm4gcmV2ZXJzZUJvdW50eTsNCiAgICB9DQoNCiAgICBwdWJsaWMgSXRlbVZhbHVlQ2FsY3VsYXRvciBnZXRJdGVtVmFsdWVDYWxjdWxhdG9yKCkgew0KICAgICAgICByZXR1cm4gaXRlbVZhbHVlQ2FsY3VsYXRvcjsNCiAgICB9DQoNCiAgICBwdWJsaWMgVGFibGlzdE1hbmFnZXIgZ2V0VGFibGlzdE1hbmFnZXIoKSB7DQogICAgICAgIHJldHVybiB0YWJsaXN0TWFuYWdlcjsNCiAgICB9DQoNCiAgICBwdWJsaWMgRGVidWdNYW5hZ2VyIGdldERlYnVnTWFuYWdlcigpIHsNCiAgICAgICAgcmV0dXJuIGRlYnVnTWFuYWdlcjsNCiAgICB9DQoNCiAgICBwdWJsaWMgYm9vbGVhbiBpc0JvdW50eVNvdW5kRW5hYmxlZCgpIHsNCiAgICAgICAgcmV0dXJuIGJvdW50eVNvdW5kRW5hYmxlZDsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldEJvdW50eVNvdW5kTmFtZSgpIHsNCiAgICAgICAgcmV0dXJuIGJvdW50eVNvdW5kTmFtZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgZmxvYXQgZ2V0Qm91bnR5U291bmRWb2x1bWUoKSB7DQogICAgICAgIHJldHVybiBib3VudHlTb3VuZFZvbHVtZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgZmxvYXQgZ2V0Qm91bnR5U291bmRQaXRjaCgpIHsNCiAgICAgICAgcmV0dXJuIGJvdW50eVNvdW5kUGl0Y2g7DQogICAgfQ0KDQogICAgcHVibGljIE15U1FMIGdldE15U1FMKCkgew0KICAgICAgICByZXR1cm4gbXlTUUw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmV0cmlldmVzIHRoZSBCb3VudHlTdG9yYWdlIGNvbmZpZ3VyYXRpb24NCiAgICAgKiAvLyBub3RlOiBQcm92aWRlcyBhY2Nlc3MgdG8gQm91bnR5U3RvcmFnZS55bWwgZm9yIGJvdW50eSBkYXRhDQogICAgICovDQogICAgcHVibGljIEZpbGVDb25maWd1cmF0aW9uIGdldEJvdW50aWVzQ29uZmlnKCkgew0KICAgICAgICBDb25maWdXcmFwcGVyIHdyYXBwZXIgPSBjb25maWdXcmFwcGVycy5nZXQoIlN0b3JhZ2UvQm91bnR5U3RvcmFnZSIpOw0KICAgICAgICBpZiAod3JhcHBlciA9PSBudWxsKSB7DQogICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIFN0b3JhZ2UvQm91bnR5U3RvcmFnZSBDb25maWdXcmFwcGVyIG5vdCBmb3VuZCwgYXR0ZW1wdGluZyB0byBsb2FkIik7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGNvbmZpZ1dyYXBwZXJzLnB1dCgiU3RvcmFnZS9Cb3VudHlTdG9yYWdlIiwgbmV3IENvbmZpZ1dyYXBwZXIoIlN0b3JhZ2UvQm91bnR5U3RvcmFnZSIpKTsNCiAgICAgICAgICAgICAgICB3cmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJTdG9yYWdlL0JvdW50eVN0b3JhZ2UiKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIEZhaWxlZCB0byBjcmVhdGUgU3RvcmFnZS9Cb3VudHlTdG9yYWdlIENvbmZpZ1dyYXBwZXI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gd3JhcHBlci5nZXRDb25maWcoKTsNCiAgICAgICAgaWYgKGNvbmZpZyA9PSBudWxsKSB7DQogICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIFN0b3JhZ2UvQm91bnR5U3RvcmFnZSBjb25maWd1cmF0aW9uIGlzIG51bGwiKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gY29uZmlnOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHJpZXZlcyB0aGUgc3RhdHMgY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IFByb3ZpZGVzIGFjY2VzcyB0byBTdGF0U3RvcmFnZS55bWwNCiAgICAgKi8NCiAgICBwdWJsaWMgRmlsZUNvbmZpZ3VyYXRpb24gZ2V0U3RhdHNDb25maWcoKSB7DQogICAgICAgIENvbmZpZ1dyYXBwZXIgd3JhcHBlciA9IGNvbmZpZ1dyYXBwZXJzLmdldCgiU3RvcmFnZS9TdGF0U3RvcmFnZSIpOw0KICAgICAgICBpZiAod3JhcHBlciA9PSBudWxsKSB7DQogICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIFN0b3JhZ2UvU3RhdFN0b3JhZ2UgQ29uZmlnV3JhcHBlciBub3QgZm91bmQsIGF0dGVtcHRpbmcgdG8gbG9hZCIpOw0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBjb25maWdXcmFwcGVycy5wdXQoIlN0b3JhZ2UvU3RhdFN0b3JhZ2UiLCBuZXcgQ29uZmlnV3JhcHBlcigiU3RvcmFnZS9TdGF0U3RvcmFnZSIpKTsNCiAgICAgICAgICAgICAgICB3cmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJTdG9yYWdlL1N0YXRTdG9yYWdlIik7DQogICAgICAgICAgICB9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBGYWlsZWQgdG8gY3JlYXRlIFN0b3JhZ2UvU3RhdFN0b3JhZ2UgQ29uZmlnV3JhcHBlcjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSB3cmFwcGVyLmdldENvbmZpZygpOw0KICAgICAgICBpZiAoY29uZmlnID09IG51bGwpIHsNCiAgICAgICAgICAgIGdldExvZ2dlcigpLndhcm5pbmcoIltERUJVR10gU3RvcmFnZS9TdGF0U3RvcmFnZSBjb25maWd1cmF0aW9uIGlzIG51bGwiKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gY29uZmlnOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHJpZXZlcyB0aGUgbWVzc2FnZXMgY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IFByb3ZpZGVzIGFjY2VzcyB0byBtZXNzYWdlcy55bWwgZm9yIHBsYXllciBtZXNzYWdlcw0KICAgICAqLw0KICAgIHB1YmxpYyBGaWxlQ29uZmlndXJhdGlvbiBnZXRNZXNzYWdlc0NvbmZpZygpIHsNCiAgICAgICAgQ29uZmlnV3JhcHBlciB3cmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJtZXNzYWdlcyIpOw0KICAgICAgICByZXR1cm4gd3JhcHBlciAhPSBudWxsID8gd3JhcHBlci5nZXRDb25maWcoKSA6IG51bGw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmV0cmlldmVzIHRoZSBCb3VudHlHVUkgY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IFByb3ZpZGVzIGFjY2VzcyB0byBHVUlzL0JvdW50eUdVSS55bWwgZm9yIEdVSSBzZXR0aW5ncw0KICAgICAqLw0KICAgIHB1YmxpYyBGaWxlQ29uZmlndXJhdGlvbiBnZXRCb3VudHlHVUlDb25maWcoKSB7DQogICAgICAgIENvbmZpZ1dyYXBwZXIgd3JhcHBlciA9IGNvbmZpZ1dyYXBwZXJzLmdldCgiR1VJcy9Cb3VudHlHVUkiKTsNCiAgICAgICAgaWYgKHdyYXBwZXIgPT0gbnVsbCkgew0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBHVUlzL0JvdW50eUdVSSBDb25maWdXcmFwcGVyIG5vdCBmb3VuZCwgYXR0ZW1wdGluZyB0byBsb2FkIik7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGNvbmZpZ1dyYXBwZXJzLnB1dCgiR1VJcy9Cb3VudHlHVUkiLCBuZXcgQ29uZmlnV3JhcHBlcigiR1VJcy9Cb3VudHlHVUkiKSk7DQogICAgICAgICAgICAgICAgd3JhcHBlciA9IGNvbmZpZ1dyYXBwZXJzLmdldCgiR1VJcy9Cb3VudHlHVUkiKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIEZhaWxlZCB0byBjcmVhdGUgR1VJcy9Cb3VudHlHVUkgQ29uZmlnV3JhcHBlcjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSB3cmFwcGVyLmdldENvbmZpZygpOw0KICAgICAgICBpZiAoY29uZmlnID09IG51bGwpIHsNCiAgICAgICAgICAgIGdldExvZ2dlcigpLndhcm5pbmcoIltERUJVR10gR1VJcy9Cb3VudHlHVUkgY29uZmlndXJhdGlvbiBpcyBudWxsIik7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGNvbmZpZzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZXRyaWV2ZXMgdGhlIENyZWF0ZUdVSSBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogUHJvdmlkZXMgYWNjZXNzIHRvIEdVSXMvQ3JlYXRlR1VJLnltbCBmb3IgR1VJIHNldHRpbmdzDQogICAgICovDQogICAgcHVibGljIEZpbGVDb25maWd1cmF0aW9uIGdldENyZWF0ZUdVSUNvbmZpZygpIHsNCiAgICAgICAgQ29uZmlnV3JhcHBlciB3cmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJHVUlzL0NyZWF0ZUdVSSIpOw0KICAgICAgICBpZiAod3JhcHBlciA9PSBudWxsKSB7DQogICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIEdVSXMvQ3JlYXRlR1VJIENvbmZpZ1dyYXBwZXIgbm90IGZvdW5kLCBhdHRlbXB0aW5nIHRvIGxvYWQiKTsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgY29uZmlnV3JhcHBlcnMucHV0KCJHVUlzL0NyZWF0ZUdVSSIsIG5ldyBDb25maWdXcmFwcGVyKCJHVUlzL0NyZWF0ZUdVSSIpKTsNCiAgICAgICAgICAgICAgICB3cmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJHVUlzL0NyZWF0ZUdVSSIpOw0KICAgICAgICAgICAgfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIGdldExvZ2dlcigpLndhcm5pbmcoIltERUJVR10gRmFpbGVkIHRvIGNyZWF0ZSBHVUlzL0NyZWF0ZUdVSSBDb25maWdXcmFwcGVyOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHdyYXBwZXIuZ2V0Q29uZmlnKCk7DQogICAgICAgIGlmIChjb25maWcgPT0gbnVsbCkgew0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBHVUlzL0NyZWF0ZUdVSSBjb25maWd1cmF0aW9uIGlzIG51bGwiKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gY29uZmlnOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHJpZXZlcyB0aGUgUHJldmlld0dVSSBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogUHJvdmlkZXMgYWNjZXNzIHRvIEdVSXMvUHJldmlld0dVSS55bWwgZm9yIEdVSSBzZXR0aW5ncw0KICAgICAqLw0KICAgIHB1YmxpYyBGaWxlQ29uZmlndXJhdGlvbiBnZXRQcmV2aWV3R1VJQ29uZmlnKCkgew0KICAgICAgICBDb25maWdXcmFwcGVyIHdyYXBwZXIgPSBjb25maWdXcmFwcGVycy5nZXQoIkdVSXMvUHJldmlld0dVSSIpOw0KICAgICAgICBpZiAod3JhcHBlciA9PSBudWxsKSB7DQogICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIEdVSXMvUHJldmlld0dVSSBDb25maWdXcmFwcGVyIG5vdCBmb3VuZCwgYXR0ZW1wdGluZyB0byBsb2FkIik7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGNvbmZpZ1dyYXBwZXJzLnB1dCgiR1VJcy9QcmV2aWV3R1VJIiwgbmV3IENvbmZpZ1dyYXBwZXIoIkdVSXMvUHJldmlld0dVSSIpKTsNCiAgICAgICAgICAgICAgICB3cmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJHVUlzL1ByZXZpZXdHVUkiKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIEZhaWxlZCB0byBjcmVhdGUgR1VJcy9QcmV2aWV3R1VJIENvbmZpZ1dyYXBwZXI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gd3JhcHBlci5nZXRDb25maWcoKTsNCiAgICAgICAgaWYgKGNvbmZpZyA9PSBudWxsKSB7DQogICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIEdVSXMvUHJldmlld0dVSSBjb25maWd1cmF0aW9uIGlzIG51bGwiKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gY29uZmlnOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHJpZXZlcyB0aGUgQWRkSXRlbXNHVUkgY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IFByb3ZpZGVzIGFjY2VzcyB0byBHVUlzL0FkZEl0ZW1zR1VJLnltbCBmb3IgR1VJIHNldHRpbmdzDQogICAgICovDQogICAgcHVibGljIEZpbGVDb25maWd1cmF0aW9uIGdldEFkZEl0ZW1zR1VJQ29uZmlnKCkgew0KICAgICAgICBDb25maWdXcmFwcGVyIHdyYXBwZXIgPSBjb25maWdXcmFwcGVycy5nZXQoIkdVSXMvQWRkSXRlbXNHVUkiKTsNCiAgICAgICAgaWYgKHdyYXBwZXIgPT0gbnVsbCkgew0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBHVUlzL0FkZEl0ZW1zR1VJIENvbmZpZ1dyYXBwZXIgbm90IGZvdW5kLCBhdHRlbXB0aW5nIHRvIGxvYWQiKTsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgY29uZmlnV3JhcHBlcnMucHV0KCJHVUlzL0FkZEl0ZW1zR1VJIiwgbmV3IENvbmZpZ1dyYXBwZXIoIkdVSXMvQWRkSXRlbXNHVUkiKSk7DQogICAgICAgICAgICAgICAgd3JhcHBlciA9IGNvbmZpZ1dyYXBwZXJzLmdldCgiR1VJcy9BZGRJdGVtc0dVSSIpOw0KICAgICAgICAgICAgfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIGdldExvZ2dlcigpLndhcm5pbmcoIltERUJVR10gRmFpbGVkIHRvIGNyZWF0ZSBHVUlzL0FkZEl0ZW1zR1VJIENvbmZpZ1dyYXBwZXI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gd3JhcHBlci5nZXRDb25maWcoKTsNCiAgICAgICAgaWYgKGNvbmZpZyA9PSBudWxsKSB7DQogICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIEdVSXMvQWRkSXRlbXNHVUkgY29uZmlndXJhdGlvbiBpcyBudWxsIik7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGNvbmZpZzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZXRyaWV2ZXMgdGhlIEh1bnRlcnNEZW4gY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IFByb3ZpZGVzIGFjY2VzcyB0byBHVUlzL0h1bnRlcnNEZW4ueW1sIGZvciBHVUkgc2V0dGluZ3MNCiAgICAgKi8NCiAgICBwdWJsaWMgRmlsZUNvbmZpZ3VyYXRpb24gZ2V0SHVudGVyc0RlbkNvbmZpZygpIHsNCiAgICAgICAgQ29uZmlnV3JhcHBlciB3cmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJHVUlzL0h1bnRlcnNEZW4iKTsNCiAgICAgICAgaWYgKHdyYXBwZXIgPT0gbnVsbCkgew0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBHVUlzL0h1bnRlcnNEZW4gQ29uZmlnV3JhcHBlciBub3QgZm91bmQsIGF0dGVtcHRpbmcgdG8gbG9hZCIpOw0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBjb25maWdXcmFwcGVycy5wdXQoIkdVSXMvSHVudGVyc0RlbiIsIG5ldyBDb25maWdXcmFwcGVyKCJHVUlzL0h1bnRlcnNEZW4iKSk7DQogICAgICAgICAgICAgICAgd3JhcHBlciA9IGNvbmZpZ1dyYXBwZXJzLmdldCgiR1VJcy9IdW50ZXJzRGVuIik7DQogICAgICAgICAgICB9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBGYWlsZWQgdG8gY3JlYXRlIEdVSXMvSHVudGVyc0RlbiBDb25maWdXcmFwcGVyOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHdyYXBwZXIuZ2V0Q29uZmlnKCk7DQogICAgICAgIGlmIChjb25maWcgPT0gbnVsbCkgew0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBHVUlzL0h1bnRlcnNEZW4gY29uZmlndXJhdGlvbiBpcyBudWxsIik7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGNvbmZpZzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZXRyaWV2ZXMgdGhlIEJvdW50eUNhbmNlbEdVSSBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogUHJvdmlkZXMgYWNjZXNzIHRvIEdVSXMvQm91bnR5Q2FuY2VsR1VJLnltbCBmb3IgR1VJIHNldHRpbmdzDQogICAgICovDQogICAgcHVibGljIEZpbGVDb25maWd1cmF0aW9uIGdldEJvdW50eUNhbmNlbEdVSUNvbmZpZygpIHsNCiAgICAgICAgQ29uZmlnV3JhcHBlciB3cmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJHVUlzL0JvdW50eUNhbmNlbEdVSSIpOw0KICAgICAgICBpZiAod3JhcHBlciA9PSBudWxsKSB7DQogICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIEdVSXMvQm91bnR5Q2FuY2VsR1VJIENvbmZpZ1dyYXBwZXIgbm90IGZvdW5kLCBhdHRlbXB0aW5nIHRvIGxvYWQiKTsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgY29uZmlnV3JhcHBlcnMucHV0KCJHVUlzL0JvdW50eUNhbmNlbEdVSSIsIG5ldyBDb25maWdXcmFwcGVyKCJHVUlzL0JvdW50eUNhbmNlbEdVSSIpKTsNCiAgICAgICAgICAgICAgICB3cmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJHVUlzL0JvdW50eUNhbmNlbEdVSSIpOw0KICAgICAgICAgICAgfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIGdldExvZ2dlcigpLndhcm5pbmcoIltERUJVR10gRmFpbGVkIHRvIGNyZWF0ZSBHVUlzL0JvdW50eUNhbmNlbEdVSSBDb25maWdXcmFwcGVyOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHdyYXBwZXIuZ2V0Q29uZmlnKCk7DQogICAgICAgIGlmIChjb25maWcgPT0gbnVsbCkgew0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBHVUlzL0JvdW50eUNhbmNlbEdVSSBjb25maWd1cmF0aW9uIGlzIG51bGwiKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gY29uZmlnOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHJpZXZlcyB0aGUgSXRlbVZhbHVlIGNvbmZpZ3VyYXRpb24NCiAgICAgKiAvLyBub3RlOiBQcm92aWRlcyBhY2Nlc3MgdG8gSXRlbVZhbHVlLnltbCBmb3IgaXRlbSBwcmljaW5nDQogICAgICovDQogICAgcHVibGljIEZpbGVDb25maWd1cmF0aW9uIGdldEl0ZW1WYWx1ZUNvbmZpZygpIHsNCiAgICAgICAgQ29uZmlnV3JhcHBlciB3cmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJJdGVtVmFsdWUiKTsNCiAgICAgICAgcmV0dXJuIHdyYXBwZXIgIT0gbnVsbCA/IHdyYXBwZXIuZ2V0Q29uZmlnKCkgOiBudWxsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHJpZXZlcyB0aGUgaXRlbXMgY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IFByb3ZpZGVzIGFjY2VzcyB0byBpdGVtcy55bWwgZm9yIGl0ZW0gc2V0dGluZ3MNCiAgICAgKi8NCiAgICBwdWJsaWMgRmlsZUNvbmZpZ3VyYXRpb24gZ2V0SXRlbXNDb25maWcoKSB7DQogICAgICAgIENvbmZpZ1dyYXBwZXIgd3JhcHBlciA9IGNvbmZpZ1dyYXBwZXJzLmdldCgiaXRlbXMiKTsNCiAgICAgICAgcmV0dXJuIHdyYXBwZXIgIT0gbnVsbCA/IHdyYXBwZXIuZ2V0Q29uZmlnKCkgOiBudWxsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHJpZXZlcyB0aGUgVG9wR1VJIGNvbmZpZ3VyYXRpb24NCiAgICAgKiAvLyBub3RlOiBQcm92aWRlcyBhY2Nlc3MgdG8gVG9wR1VJLnltbCBmb3IgR1VJIHNldHRpbmdzDQogICAgICovDQogICAgcHVibGljIEZpbGVDb25maWd1cmF0aW9uIGdldFRvcEdVSUNvbmZpZygpIHsNCiAgICAgICAgQ29uZmlnV3JhcHBlciB3cmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJUb3BHVUkiKTsNCiAgICAgICAgcmV0dXJuIHdyYXBwZXIgIT0gbnVsbCA/IHdyYXBwZXIuZ2V0Q29uZmlnKCkgOiBudWxsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHJpZXZlcyB0aGUgQm91bnR5VGVhbUNoZWNrcyBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogUHJvdmlkZXMgYWNjZXNzIHRvIEJvdW50eVRlYW1DaGVja3MueW1sIGZvciB0ZWFtIHNldHRpbmdzDQogICAgICovDQogICAgcHVibGljIEZpbGVDb25maWd1cmF0aW9uIGdldFRlYW1DaGVja3NDb25maWcoKSB7DQogICAgICAgIENvbmZpZ1dyYXBwZXIgd3JhcHBlciA9IGNvbmZpZ1dyYXBwZXJzLmdldCgiQm91bnR5VGVhbUNoZWNrcyIpOw0KICAgICAgICByZXR1cm4gd3JhcHBlciAhPSBudWxsID8gd3JhcHBlci5nZXRDb25maWcoKSA6IG51bGw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2FsbGVkIHdoZW4gdGhlIHBsdWdpbiBpcyBlbmFibGVkDQogICAgICogLy8gbm90ZTogSW5pdGlhbGl6ZXMgY29uZmlndXJhdGlvbnMsIG1hbmFnZXJzLCBsaXN0ZW5lcnMsIGNvbW1hbmRzLCBhbmQgTXlTUUwNCiAgICAgKi8NCiAgICBAT3ZlcnJpZGUNCiAgICBwdWJsaWMgdm9pZCBvbkVuYWJsZSgpIHsNCiAgICAgICAgLy8gQ2xlYXIgZmlsdGVyIHN0YXRlcyBmb3IgcmVsb2FkDQogICAgICAgIEJvdW50eUdVSS5jbGVhclBsYXllclNob3dPbmx5T25saW5lKCk7DQogICAgICAgIEJvdW50eUdVSS5jbGVhclBsYXllckZpbHRlckhpZ2hUb0xvdygpOw0KDQogICAgICAgIC8vIFBsdWdpbiBJbnN0YW5jZSBhbmQgQ29yZSBTZXR1cA0KICAgICAgICBpbnN0YW5jZSA9IHRoaXM7DQoNCiAgICAgICAgLy8gQ29uZmlndXJhdGlvbiBGaWxlcw0KICAgICAgICBTdHJpbmdbXSBjb25maWdOYW1lcyA9IHsNCiAgICAgICAgICAgICAgICAiY29uZmlnIiwgIlN0b3JhZ2UvQm91bnR5U3RvcmFnZSIsICJTdG9yYWdlL1N0YXRTdG9yYWdlIiwgIm1lc3NhZ2VzIiwgIml0ZW1zIiwgIkl0ZW1WYWx1ZSIsDQogICAgICAgICAgICAgICAgIkdVSXMvQm91bnR5R1VJIiwgIkdVSXMvQ3JlYXRlR1VJIiwgIkdVSXMvUHJldmlld0dVSSIsICJHVUlzL1RvcEdVSSIsDQogICAgICAgICAgICAgICAgIkdVSXMvQWRkSXRlbXNHVUkiLCAiR1VJcy9IdW50ZXJzRGVuIiwgIkJvdW50eVRlYW1DaGVja3MiLCAiR1VJcy9Cb3VudHlDYW5jZWxHVUkiDQogICAgICAgIH07DQogICAgICAgIExpc3Q8U3RyaW5nPiBmYWlsZWRDb25maWdzID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgIGludCBsb2FkZWRDb25maWdzID0gMDsNCiAgICAgICAgZm9yIChTdHJpbmcgbmFtZSA6IGNvbmZpZ05hbWVzKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGNvbmZpZ1dyYXBwZXJzLnB1dChuYW1lLCBuZXcgQ29uZmlnV3JhcHBlcihuYW1lKSk7DQogICAgICAgICAgICAgICAgbG9hZGVkQ29uZmlncysrOw0KICAgICAgICAgICAgICAgIGdldExvZ2dlcigpLmluZm8oIltERUJVR10gTG9hZGVkIGNvbmZpZ3VyYXRpb246ICIgKyBuYW1lICsgIi55bWwiKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBmYWlsZWRDb25maWdzLmFkZChuYW1lICsgIi55bWwiKTsNCiAgICAgICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIEZhaWxlZCB0byBsb2FkICIgKyBuYW1lICsgIi55bWw6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDbGVhbiB1cCBpbmNvcnJlY3RseSBwbGFjZWQgQm91bnR5U3RvcmFnZS55bWwgYW5kIFN0YXRTdG9yYWdlLnltbCBpbiByb290IGRpcmVjdG9yeQ0KICAgICAgICBGaWxlIHJvb3RCb3VudHlTdG9yYWdlID0gbmV3IEZpbGUoZ2V0RGF0YUZvbGRlcigpLCAiQm91bnR5U3RvcmFnZS55bWwiKTsNCiAgICAgICAgRmlsZSByb290U3RhdFN0b3JhZ2UgPSBuZXcgRmlsZShnZXREYXRhRm9sZGVyKCksICJTdGF0U3RvcmFnZS55bWwiKTsNCiAgICAgICAgaWYgKHJvb3RCb3VudHlTdG9yYWdlLmV4aXN0cygpKSB7DQogICAgICAgICAgICBpZiAocm9vdEJvdW50eVN0b3JhZ2UuZGVsZXRlKCkpIHsNCiAgICAgICAgICAgICAgICBnZXRMb2dnZXIoKS5pbmZvKCJbREVCVUddIERlbGV0ZWQgbWlzcGxhY2VkIEJvdW50eVN0b3JhZ2UueW1sIGZyb20gcGx1Z2lucy9Cb3VudGllc1BsdXMvIik7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGdldExvZ2dlcigpLndhcm5pbmcoIltERUJVR10gRmFpbGVkIHRvIGRlbGV0ZSBtaXNwbGFjZWQgQm91bnR5U3RvcmFnZS55bWwgZnJvbSBwbHVnaW5zL0JvdW50aWVzUGx1cy8iKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZiAocm9vdFN0YXRTdG9yYWdlLmV4aXN0cygpKSB7DQogICAgICAgICAgICBpZiAocm9vdFN0YXRTdG9yYWdlLmRlbGV0ZSgpKSB7DQogICAgICAgICAgICAgICAgZ2V0TG9nZ2VyKCkuaW5mbygiW0RFQlVHXSBEZWxldGVkIG1pc3BsYWNlZCBTdGF0U3RvcmFnZS55bWwgZnJvbSBwbHVnaW5zL0JvdW50aWVzUGx1cy8iKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBGYWlsZWQgdG8gZGVsZXRlIG1pc3BsYWNlZCBTdGF0U3RvcmFnZS55bWwgZnJvbSBwbHVnaW5zL0JvdW50aWVzUGx1cy8iKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIENoZWNrIGZvciBjcml0aWNhbCBjb25maWcgZmFpbHVyZXMNCiAgICAgICAgaWYgKGZhaWxlZENvbmZpZ3MuY29udGFpbnMoIlN0b3JhZ2UvQm91bnR5U3RvcmFnZS55bWwiKSB8fCBmYWlsZWRDb25maWdzLmNvbnRhaW5zKCJtZXNzYWdlcy55bWwiKSkgew0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkuc2V2ZXJlKCJbREVCVUddIENyaXRpY2FsIGNvbmZpZyhzKSBmYWlsZWQgdG8gbG9hZDogIiArIFN0cmluZy5qb2luKCIsICIsIGZhaWxlZENvbmZpZ3MpICsgIiwgZGlzYWJsaW5nIHBsdWdpbiEiKTsNCiAgICAgICAgICAgIGdldFNlcnZlcigpLmdldFBsdWdpbk1hbmFnZXIoKS5kaXNhYmxlUGx1Z2luKHRoaXMpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ2hlY2sgZm9yIG1vbmV5IGFuZCBzaG9wIHNlY3Rpb25zIGluIGNvbmZpZy55bWwNCiAgICAgICAgaWYgKCFnZXRDb25maWcoKS5jb250YWlucygibW9uZXkiKSkgew0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSAnbW9uZXknIHNlY3Rpb24gbWlzc2luZyBpbiBjb25maWcueW1sISBVc2luZyBkZWZhdWx0cyBmb3IgYWxsb3ctemVyby1kb2xsYXItYm91bnRpZXMsIG1pbi1ib3VudHktYW1vdW50LCBhbmQgbWF4LWJvdW50eS1hbW91bnQuIik7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCFnZXRDb25maWcoKS5jb250YWlucygic2hvcCIpKSB7DQogICAgICAgICAgICBnZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddICdzaG9wJyBzZWN0aW9uIG1pc3NpbmcgaW4gY29uZmlnLnltbCEgVXNpbmcgZGVmYXVsdHMgZm9yIGVuYWJsZS1zaG9wLCBhbGxvdy1leHBpcmVkLXNrdWxscywgYW5kIHVzZS1zaG9wLWd1aS1wbHVzLiIpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gTWVzc2FnZSBVdGlsaXR5DQogICAgICAgIE1lc3NhZ2VVdGlscy5pbml0aWFsaXplKHRoaXMpOw0KDQogICAgICAgIC8vIENvcmUgTWFuYWdlcnMgYW5kIFNlcnZpY2VzDQogICAgICAgIGRlYnVnTWFuYWdlciA9IG5ldyBEZWJ1Z01hbmFnZXIodGhpcyk7DQogICAgICAgIGV4ZWN1dG9yU2VydmljZSA9IEV4ZWN1dG9ycy5uZXdGaXhlZFRocmVhZFBvb2woNCk7DQogICAgICAgIGV2ZW50TWFuYWdlciA9IG5ldyBFdmVudE1hbmFnZXIodGhpcyk7DQoNCiAgICAgICAgLy8gTXlTUUwgRGF0YWJhc2UNCiAgICAgICAgbXlTUUwgPSBuZXcgTXlTUUwodGhpcyk7DQogICAgICAgIG15U1FMLmluaXRpYWxpemUoKTsNCiAgICAgICAgbXlTUUwubWlncmF0ZURhdGEoKTsNCiAgICAgICAgbXlTUUwubWlncmF0ZVN0YXRzRGF0YSgpOw0KDQogICAgICAgIC8vIEdhbWVwbGF5IE1hbmFnZXJzDQogICAgICAgIHRheE1hbmFnZXIgPSBuZXcgVGF4TWFuYWdlcih0aGlzKTsNCiAgICAgICAgaXRlbVZhbHVlQ2FsY3VsYXRvciA9IG5ldyBJdGVtVmFsdWVDYWxjdWxhdG9yKHRoaXMpOw0KICAgICAgICBMaXN0PFN0cmluZz4gd2FybmluZ3MgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgYm91bnR5TWFuYWdlciA9IG5ldyBCb3VudHlNYW5hZ2VyKHRoaXMsIHdhcm5pbmdzKTsNCiAgICAgICAgYW5vbnltb3VzQm91bnR5ID0gbmV3IEFub255bW91c0JvdW50eSh0aGlzKTsNCiAgICAgICAgZnJlbnp5ID0gbmV3IEZyZW56eSh0aGlzLCB3YXJuaW5ncyk7DQogICAgICAgIGJvb3N0ZWRCb3VudHkgPSBuZXcgQm9vc3RlZEJvdW50eSh0aGlzLCB3YXJuaW5ncyk7DQogICAgICAgIGdldExvZ2dlcigpLmluZm8oIltERUJVR10gQm9vc3RlZEJvdW50eSBpbml0aWFsaXplZDogIiArIChib29zdGVkQm91bnR5ICE9IG51bGwpKTsNCiAgICAgICAgdGFibGlzdE1hbmFnZXIgPSBuZXcgVGFibGlzdE1hbmFnZXIodGhpcywgZXZlbnRNYW5hZ2VyKTsNCiAgICAgICAgaWYgKHRhYmxpc3RNYW5hZ2VyID09IG51bGwpIHsNCiAgICAgICAgICAgIHdhcm5pbmdzLmFkZCgiRmFpbGVkIHRvIGluaXRpYWxpemUgVGFibGlzdE1hbmFnZXIhIik7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBTaG9wR1VJUGx1cyBJbnRlZ3JhdGlvbg0KICAgICAgICBzaG9wR3VpUGx1c0ludGVncmF0aW9uID0gbmV3IFNob3BHdWlQbHVzSW50ZWdyYXRpb24odGhpcyk7DQoNCiAgICAgICAgLy8gSXRlbSBTeXN0ZW1zDQogICAgICAgIHVhdiA9IG5ldyBVQVYodGhpcywgZXZlbnRNYW5hZ2VyKTsNCiAgICAgICAgdHJhY2tlciA9IG5ldyBUcmFja2VyKHRoaXMsIGV2ZW50TWFuYWdlcik7DQogICAgICAgIGphbW1lciA9IG5ldyBKYW1tZXIodGhpcywgZXZlbnRNYW5hZ2VyKTsNCiAgICAgICAgbWFudWFsQm9vc3QgPSBuZXcgTWFudWFsQm9vc3QodGhpcywgZXZlbnRNYW5hZ2VyKTsNCiAgICAgICAgbWFudWFsRnJlbnp5ID0gbmV3IE1hbnVhbEZyZW56eSh0aGlzLCBldmVudE1hbmFnZXIpOw0KICAgICAgICByZXZlcnNlQm91bnR5ID0gbmV3IFJldmVyc2VCb3VudHkodGhpcywgZXZlbnRNYW5hZ2VyKTsNCiAgICAgICAgZGVjcmVhc2VUaW1lID0gbmV3IERlY3JlYXNlVGltZSh0aGlzLCBldmVudE1hbmFnZXIpOw0KDQogICAgICAgIC8vIEV2ZW50IExpc3RlbmVycw0KICAgICAgICBldmVudE1hbmFnZXIucmVnaXN0ZXJHbG9iYWxMaXN0ZW5lcnMoKTsNCiAgICAgICAgZXZlbnRNYW5hZ2VyLnJlZ2lzdGVyKHRoaXMpOw0KDQogICAgICAgIC8vIENvbW1hbmRzDQogICAgICAgIFBsdWdpbkNvbW1hbmQgYm91bnR5Q29tbWFuZCA9IGdldENvbW1hbmQoImJvdW50eSIpOw0KICAgICAgICBpZiAoYm91bnR5Q29tbWFuZCAhPSBudWxsKSB7DQogICAgICAgICAgICBib3VudHlDb21tYW5kLnNldEV4ZWN1dG9yKG5ldyBCb3VudHlDb21tYW5kKHRoaXMpKTsNCiAgICAgICAgICAgIGJvdW50eUNvbW1hbmQuc2V0VGFiQ29tcGxldGVyKG5ldyBCb3VudHlUYWJDb21wbGV0ZXIoKSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB3YXJuaW5ncy5hZGQoIkZhaWxlZCB0byByZWdpc3RlciBib3VudHkgY29tbWFuZCEiKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEV4dGVybmFsIERlcGVuZGVuY2llcw0KICAgICAgICBib29sZWFuIHBsYWNlaG9sZGVyQVBJSG9va2VkID0gZmFsc2U7DQogICAgICAgIGlmIChnZXRTZXJ2ZXIoKS5nZXRQbHVnaW5NYW5hZ2VyKCkuaXNQbHVnaW5FbmFibGVkKCJQbGFjZWhvbGRlckFQSSIpKSB7DQogICAgICAgICAgICBuZXcgUGxhY2Vob2xkZXJzKHRoaXMpLnJlZ2lzdGVyKCk7DQogICAgICAgICAgICBwbGFjZWhvbGRlckFQSUhvb2tlZCA9IHRydWU7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB3YXJuaW5ncy5hZGQoIlBsYWNlaG9sZGVyQVBJIG5vdCBmb3VuZDsgcGxhY2Vob2xkZXJzIHdpbGwgbm90IHdvcmsuIik7DQogICAgICAgIH0NCg0KICAgICAgICBib29sZWFuIGVjb25vbXlIb29rZWQgPSBzZXR1cEVjb25vbXkoKTsNCiAgICAgICAgaWYgKCFlY29ub215SG9va2VkKSB7DQogICAgICAgICAgICB3YXJuaW5ncy5hZGQoIk5vIGVjb25vbXkgcGx1Z2luIGZvdW5kLiBTb21lIGZlYXR1cmVzIG1heSBub3Qgd29yay4iKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEFkZCBza3VsbCBjb25maWcgd2FybmluZw0KICAgICAgICBpZiAoIWdldENvbmZpZygpLmNvbnRhaW5zKCJib3VudHktc2t1bGwiKSkgew0KICAgICAgICAgICAgd2FybmluZ3MuYWRkKCJCb3VudHkgc2t1bGwgY29uZmlndXJhdGlvbiBub3QgZm91bmQgaW4gY29uZmlnLnltbCEgVXNpbmcgZGVmYXVsdHMuIik7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBGaW5hbCBTZXR1cA0KICAgICAgICByZWxvYWRFdmVyeXRoaW5nKCk7DQoNCiAgICAgICAgLy8gQ29uc29sZSBJbml0aWFsaXphdGlvbiBNZXNzYWdlDQogICAgICAgIGJvb2xlYW4gdXNlQW5zaSA9IE1lc3NhZ2VVdGlscy5pc0Fuc2lTdXBwb3J0ZWQoKTsNCiAgICAgICAgU3RyaW5nIGdyZWVuID0gdXNlQW5zaSA/ICJcdTAwMUJbOTJtIiA6ICIiOw0KICAgICAgICBTdHJpbmcgcmVkID0gdXNlQW5zaSA/ICJcdTAwMUJbOTFtIiA6ICIiOw0KICAgICAgICBTdHJpbmcgd2hpdGUgPSB1c2VBbnNpID8gIlx1MDAxQls5N20iIDogIiI7DQogICAgICAgIFN0cmluZyByZXNldCA9IHVzZUFuc2kgPyAiXHUwMDFCWzBtIiA6ICIiOw0KICAgICAgICBMaXN0PFN0cmluZz4gaW5pdE1lc3NhZ2VzID0gbmV3IEFycmF5TGlzdDw+KEFycmF5cy5hc0xpc3QoDQogICAgICAgICAgICAgICAgIkJvdW50aWVzUGx1cyBlbmFibGluZy4uLiIsDQogICAgICAgICAgICAgICAgIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iLA0KICAgICAgICAgICAgICAgICIiLA0KICAgICAgICAgICAgICAgIGdyZWVuICsgIkJvdW50aWVzUGx1cyBFbmFibGVkIiArIHJlc2V0LA0KICAgICAgICAgICAgICAgIGdyZWVuICsgIiAgIE15U1FMOiIgKyByZXNldCwNCiAgICAgICAgICAgICAgICB3aGl0ZSArICIgICAgICAtIE15U1FMIFN0YXR1czogIiArIChteVNRTC5pc0VuYWJsZWQoKSA/IGdyZWVuICsgIkVuYWJsZWQiIDogcmVkICsgIkRpc2FibGVkIikgKyByZXNldCwNCiAgICAgICAgICAgICAgICB3aGl0ZSArICIgICAgICAtIFBsYWNlaG9sZGVyQVBJICIgKyAocGxhY2Vob2xkZXJBUElIb29rZWQgPyBncmVlbiArICJGb3VuZCAtIEV4cGFuc2lvbiBSZWdpc3RlcmVkIiA6IHJlZCArICJOb3QgRm91bmQiKSArIHJlc2V0LA0KICAgICAgICAgICAgICAgIGdyZWVuICsgIiAgIERlcGVuZGVuY2llczoiICsgcmVzZXQsDQogICAgICAgICAgICAgICAgd2hpdGUgKyAiICAgICAgLSBFY29ub215IHN1cHBvcnQgIiArIChlY29ub215SG9va2VkID8gZ3JlZW4gKyAiZW5hYmxlZCB3aXRoIFZhdWx0IiA6IHJlZCArICJkaXNhYmxlZCIpICsgcmVzZXQsDQogICAgICAgICAgICAgICAgd2hpdGUgKyAiICAgICAgLSBQbGFjZWhvbGRlckFQSSAiICsgKHBsYWNlaG9sZGVyQVBJSG9va2VkID8gZ3JlZW4gKyAiRm91bmQgLSBFeHBhbnNpb24gUmVnaXN0ZXJlZCIgOiByZWQgKyAiTm90IEZvdW5kIikgKyByZXNldCwNCiAgICAgICAgICAgICAgICB3aGl0ZSArICIgICAgICAtIFNob3BHVUlQbHVzICIgKyAoc2hvcEd1aVBsdXNJbnRlZ3JhdGlvbi5pc0VuYWJsZWQoKSA/IGdyZWVuICsgIkZvdW5kIC0gSW50ZWdyYXRpb24gRW5hYmxlZCIgOiByZWQgKyAiTm90IEZvdW5kIG9yIERpc2FibGVkIikgKyByZXNldCwNCiAgICAgICAgICAgICAgICBncmVlbiArICIgICBDb25maWcgRmlsZXM6IiArIHJlc2V0LA0KICAgICAgICAgICAgICAgIGZhaWxlZENvbmZpZ3MuaXNFbXB0eSgpDQogICAgICAgICAgICAgICAgICAgICAgICA/IHdoaXRlICsgIiAgICAgIC0gIiArIGdyZWVuICsgIkFsbCBjb25maWcgZmlsZXMgbG9hZGVkICgiICsgbG9hZGVkQ29uZmlncyArICIvIiArIGNvbmZpZ05hbWVzLmxlbmd0aCArICIpIiArIHJlc2V0DQogICAgICAgICAgICAgICAgICAgICAgICA6IHdoaXRlICsgIiAgICAgIC0gIiArIHJlZCArIGxvYWRlZENvbmZpZ3MgKyAiLyIgKyBjb25maWdOYW1lcy5sZW5ndGggKyAiIGZpbGVzIGxvYWRlZCwgTWlzc2luZzogIiArIFN0cmluZy5qb2luKCIsICIsIGZhaWxlZENvbmZpZ3MpICsgcmVzZXQsDQogICAgICAgICAgICAgICAgcmVkICsgIiAgIFdhcm5pbmdzOiIgKyByZXNldCwNCiAgICAgICAgICAgICAgICB3YXJuaW5ncy5pc0VtcHR5KCkgPyB3aGl0ZSArICIgICAgICAtIE5vbmUiICsgcmVzZXQgOiAiIg0KICAgICAgICApKTsNCiAgICAgICAgaW5pdE1lc3NhZ2VzLmFkZEFsbCh3YXJuaW5ncy5zdHJlYW0oKS5tYXAodyAtPiB3aGl0ZSArICIgICAgICAtICIgKyByZWQgKyB3ICsgcmVzZXQpLnRvTGlzdCgpKTsNCiAgICAgICAgaW5pdE1lc3NhZ2VzLmFkZEFsbChBcnJheXMuYXNMaXN0KA0KICAgICAgICAgICAgICAgICIiLA0KICAgICAgICAgICAgICAgIGdyZWVuICsgIkpvaW4gbXkgRGlzY29yZCBmb3IgU3VwcG9ydCIgKyByZXNldCwNCiAgICAgICAgICAgICAgICB3aGl0ZSArICIgICAtIGh0dHBzOi8vZGlzY29yZC5nZy9VOFdNYkI0biIgKyByZXNldCwNCiAgICAgICAgICAgICAgICAiIiwNCiAgICAgICAgICAgICAgICAiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgICAgICAgKSk7DQoNCiAgICAgICAgZm9yIChTdHJpbmcgbWVzc2FnZSA6IGluaXRNZXNzYWdlcykgew0KICAgICAgICAgICAgaWYgKCFtZXNzYWdlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGdldExvZ2dlcigpLmluZm8obWVzc2FnZSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGdldExvZ2dlcigpLmluZm8oIiIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2V0cyB1cCBWYXVsdCBlY29ub215IGludGVncmF0aW9uDQogICAgICogLy8gbm90ZTogSW5pdGlhbGl6ZXMgZWNvbm9teSBwcm92aWRlciBpZiBWYXVsdCBpcyBwcmVzZW50DQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIHNldHVwRWNvbm9teSgpIHsNCiAgICAgICAgaWYgKGdldFNlcnZlcigpLmdldFBsdWdpbk1hbmFnZXIoKS5nZXRQbHVnaW4oIlZhdWx0IikgPT0gbnVsbCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICBSZWdpc3RlcmVkU2VydmljZVByb3ZpZGVyPEVjb25vbXk+IHJzcCA9IGdldFNlcnZlcigpLmdldFNlcnZpY2VzTWFuYWdlcigpLmdldFJlZ2lzdHJhdGlvbihFY29ub215LmNsYXNzKTsNCiAgICAgICAgaWYgKHJzcCA9PSBudWxsKSByZXR1cm4gZmFsc2U7DQogICAgICAgIGVjb25vbXkgPSByc3AuZ2V0UHJvdmlkZXIoKTsNCiAgICAgICAgcmV0dXJuIGVjb25vbXkgIT0gbnVsbDsNCiAgICB9DQoNCg0KICAgIC8qKg0KICAgICAqIFNhdmVzIHRoZSBzdGF0cyBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogUGVyc2lzdHMgU3RhdFN0b3JhZ2UueW1sIHRvIGRpc2sNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBzYXZlU3RhdHNDb25maWcoKSB7DQogICAgICAgIENvbmZpZ1dyYXBwZXIgc3RhdHNXcmFwcGVyID0gY29uZmlnV3JhcHBlcnMuZ2V0KCJzdGF0cyIpOw0KICAgICAgICBpZiAoc3RhdHNXcmFwcGVyICE9IG51bGwpIHsNCiAgICAgICAgICAgIHN0YXRzV3JhcHBlci5zYXZlKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZWxvYWRzIGFsbCBjb25maWd1cmF0aW9ucyBhbmQgZGF0YQ0KICAgICAqIC8vIG5vdGU6IFJlZnJlc2hlcyBjb25maWdzLCBNeVNRTCwgYW5kIGFsbCBzeXN0ZW1zDQogICAgICovDQogICAgcHVibGljIHZvaWQgcmVsb2FkRXZlcnl0aGluZygpIHsNCiAgICAgICAgTGlzdDxTdHJpbmc+IHdhcm5pbmdzID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgIHJlbG9hZEFsbENvbmZpZ3MoKTsgLy8gUmVsb2FkcyBhbGwgY29uZmlncyB2aWEgY29uZmlnV3JhcHBlcnMNCiAgICAgICAgbXlTUUwuaW5pdGlhbGl6ZSgpOw0KICAgICAgICBteVNRTC5taWdyYXRlRGF0YSgpOw0KICAgICAgICBteVNRTC5taWdyYXRlU3RhdHNEYXRhKCk7DQogICAgICAgIGlmIChib3VudHlNYW5hZ2VyICE9IG51bGwpIGJvdW50eU1hbmFnZXIucmVsb2FkKHdhcm5pbmdzKTsNCiAgICAgICAgaWYgKGZyZW56eSAhPSBudWxsKSBmcmVuenkucmVsb2FkKHdhcm5pbmdzKTsNCiAgICAgICAgaWYgKGJvb3N0ZWRCb3VudHkgIT0gbnVsbCkgYm9vc3RlZEJvdW50eS5yZWxvYWQod2FybmluZ3MpOw0KICAgICAgICBpZiAoc2hvcEd1aVBsdXNJbnRlZ3JhdGlvbiAhPSBudWxsKSBzaG9wR3VpUGx1c0ludGVncmF0aW9uLnJlbG9hZCgpOw0KICAgICAgICBpZiAoIXdhcm5pbmdzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiQ29uZmlndXJhdGlvbiByZWxvYWQgd2FybmluZ3M6ICIgKyBTdHJpbmcuam9pbigiOyAiLCB3YXJuaW5ncykpOw0KICAgICAgICB9DQogICAgICAgIGdldExvZ2dlcigpLmluZm8oIkFsbCBjb25maWd1cmF0aW9ucyByZWxvYWRlZC4iKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZWxvYWRzIGFsbCBwbHVnaW4gY29uZmlndXJhdGlvbnMNCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIGFsbCBjb25maWcgZmlsZXMgYW5kIGRlcGVuZGVudCBzZXR0aW5ncw0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIHJlbG9hZEFsbENvbmZpZ3MoKSB7DQogICAgICAgIHJlbG9hZENvbmZpZygpOw0KICAgICAgICBmb3IgKENvbmZpZ1dyYXBwZXIgd3JhcHBlciA6IGNvbmZpZ1dyYXBwZXJzLnZhbHVlcygpKSB7DQogICAgICAgICAgICB3cmFwcGVyLnJlbG9hZCgpOw0KICAgICAgICB9DQogICAgICAgIGxvYWRCb3VudHlTb3VuZENvbmZpZygpOw0KICAgICAgICBsb2FkQm91bnR5R1VJVGl0bGUoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBMb2FkcyB0aGUgQm91bnR5R1VJIGNvbmZpZ3VyYXRpb24gZmlsZQ0KICAgICAqIC8vIG5vdGU6IEluaXRpYWxpemVzIGFuZCByZWxvYWRzIEJvdW50eUdVSS55bWwgd2l0aCBzbG90IHZhbGlkYXRpb24NCiAgICAgKi8NCiAgICBwcml2YXRlIEZpbGVDb25maWd1cmF0aW9uIGxvYWRCb3VudHlHVUlDb25maWcoKSB7DQogICAgICAgIENvbmZpZ1dyYXBwZXIgd3JhcHBlciA9IGNvbmZpZ1dyYXBwZXJzLmdldCgiR1VJcy9Cb3VudHlHVUkiKTsNCiAgICAgICAgaWYgKHdyYXBwZXIgPT0gbnVsbCkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVR10gR1VJcy9Cb3VudHlHVUkgQ29uZmlnV3JhcHBlciBub3QgZm91bmQsIGF0dGVtcHRpbmcgdG8gbG9hZCIpOw0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBjb25maWdXcmFwcGVycy5wdXQoIkdVSXMvQm91bnR5R1VJIiwgbmV3IENvbmZpZ1dyYXBwZXIoIkdVSXMvQm91bnR5R1VJIikpOw0KICAgICAgICAgICAgICAgIHdyYXBwZXIgPSBjb25maWdXcmFwcGVycy5nZXQoIkdVSXMvQm91bnR5R1VJIik7DQogICAgICAgICAgICB9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVR10gRmFpbGVkIHRvIGNyZWF0ZSBHVUlzL0JvdW50eUdVSSBDb25maWdXcmFwcGVyOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHdyYXBwZXIuZ2V0Q29uZmlnKCk7DQogICAgICAgIGlmIChjb25maWcgPT0gbnVsbCkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVR10gR1VJcy9Cb3VudHlHVUkgY29uZmlndXJhdGlvbiBpcyBudWxsIik7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFZhbGlkYXRlIGJvdW50eS1za3VsbC1zbG90cw0KICAgICAgICBMaXN0PEludGVnZXI+IHNrdWxsU2xvdHMgPSBjb25maWcuZ2V0SW50ZWdlckxpc3QoImJvdW50eS1za3VsbC1zbG90cy5zbG90cyIpOw0KICAgICAgICBMaXN0PEludGVnZXI+IGJvcmRlclNsb3RzID0gY29uZmlnLmdldEludGVnZXJMaXN0KCJib3JkZXIuc2xvdHMiKTsNCiAgICAgICAgU2V0PEludGVnZXI+IHBsdWdpbkl0ZW1TbG90cyA9IG5ldyBIYXNoU2V0PD4oKTsNCiAgICAgICAgaWYgKGNvbmZpZy5jb250YWlucygiUGx1Z2luLUl0ZW1zIikpIHsNCiAgICAgICAgICAgIGZvciAoU3RyaW5nIGtleSA6IGNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiUGx1Z2luLUl0ZW1zIikuZ2V0S2V5cyhmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICBpbnQgc2xvdCA9IGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy4iICsga2V5ICsgIi5zbG90IiwgLTEpOw0KICAgICAgICAgICAgICAgIGlmIChzbG90ID49IDAgJiYgc2xvdCA8IDU0KSB7DQogICAgICAgICAgICAgICAgICAgIHBsdWdpbkl0ZW1TbG90cy5hZGQoc2xvdCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGludCBzZWFyY2hTaW5nbGVTbG90ID0gY29uZmlnLmdldEludCgic2VhcmNoLXJlc3VsdHMuc2luZ2xlLXNsb3QiLCAtMSk7DQogICAgICAgIExpc3Q8SW50ZWdlcj4gaW52YWxpZFNsb3RzID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgIGZvciAoaW50IHNsb3QgOiBza3VsbFNsb3RzKSB7DQogICAgICAgICAgICBpZiAoc2xvdCA8IDAgfHwgc2xvdCA+PSA1NCB8fCBib3JkZXJTbG90cy5jb250YWlucyhzbG90KSB8fCBwbHVnaW5JdGVtU2xvdHMuY29udGFpbnMoc2xvdCkgfHwgc2xvdCA9PSBzZWFyY2hTaW5nbGVTbG90KSB7DQogICAgICAgICAgICAgICAgaW52YWxpZFNsb3RzLmFkZChzbG90KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZiAoIWludmFsaWRTbG90cy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEludmFsaWQgb3IgcmVzZXJ2ZWQgYm91bnR5LXNrdWxsLXNsb3RzICIgKyBpbnZhbGlkU2xvdHMgKyAiIGluIEJvdW50eUdVSS55bWwgKG11c3QgYmUgMC01MywgdW5pcXVlLCBub3QgaW4gYm9yZGVyIG9yIFBsdWdpbi1JdGVtcykiKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoc2t1bGxTbG90cy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIE5vIHZhbGlkIGJvdW50eS1za3VsbC1zbG90cyBkZWZpbmVkIGluIEJvdW50eUdVSS55bWwsIHVzaW5nIGRlZmF1bHRzIik7DQogICAgICAgICAgICBjb25maWcuc2V0KCJib3VudHktc2t1bGwtc2xvdHMuc2xvdHMiLCBBcnJheXMuYXNMaXN0KDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxOSwgMjAsIDIxLCAyMywgMjQsIDI1LCAyOCwgMjksIDMwLCAzMSwgMzIsIDMzLCAzNCkpOw0KICAgICAgICAgICAgd3JhcHBlci5zYXZlKCk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKHNlYXJjaFNpbmdsZVNsb3QgPCAwIHx8IHNlYXJjaFNpbmdsZVNsb3QgPj0gNTQgfHwgYm9yZGVyU2xvdHMuY29udGFpbnMoc2VhcmNoU2luZ2xlU2xvdCkgfHwgcGx1Z2luSXRlbVNsb3RzLmNvbnRhaW5zKHNlYXJjaFNpbmdsZVNsb3QpIHx8IHNrdWxsU2xvdHMuY29udGFpbnMoc2VhcmNoU2luZ2xlU2xvdCkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEludmFsaWQgb3IgcmVzZXJ2ZWQgc2VhcmNoLXJlc3VsdHMuc2luZ2xlLXNsb3QgIiArIHNlYXJjaFNpbmdsZVNsb3QgKyAiIGluIEJvdW50eUdVSS55bWwsIHVzaW5nIGRlZmF1bHQgMjIiKTsNCiAgICAgICAgICAgIGNvbmZpZy5zZXQoInNlYXJjaC1yZXN1bHRzLnNpbmdsZS1zbG90IiwgMjIpOw0KICAgICAgICAgICAgd3JhcHBlci5zYXZlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVR10gTG9hZGVkIEJvdW50eUdVSS55bWw6IGNvbnRhaW5zIFBsdWdpbi1JdGVtcz0iICsgY29uZmlnLmNvbnRhaW5zKCJQbHVnaW4tSXRlbXMiKSk7DQogICAgICAgIGlmIChjb25maWcuY29udGFpbnMoIlBsdWdpbi1JdGVtcyIpKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVR10gUGx1Z2luLUl0ZW1zIHNlY3Rpb25zOiAiICsgY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJQbHVnaW4tSXRlbXMiKS5nZXRLZXlzKGZhbHNlKSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGNvbmZpZzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTYXZlcyBhbGwgZGF0YSB0byBzdG9yYWdlDQogICAgICogLy8gbm90ZTogUGVyc2lzdHMgYm91bnRpZXMsIHN0YXRzLCBhbmQgY29uZmlndXJhdGlvbnMNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBzYXZlRXZlcnl0aGluZygpIHsNCiAgICAgICAgc2F2ZUNvbmZpZygpOw0KICAgICAgICBmb3IgKENvbmZpZ1dyYXBwZXIgd3JhcHBlciA6IGNvbmZpZ1dyYXBwZXJzLnZhbHVlcygpKSB7DQogICAgICAgICAgICB3cmFwcGVyLnNhdmUoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoc2hvcEd1aVBsdXNJbnRlZ3JhdGlvbiAhPSBudWxsKSBzaG9wR3VpUGx1c0ludGVncmF0aW9uLmNsZWFudXAoKTsNCiAgICB9DQogICAgLyoqDQogICAgICogUmV0dXJucyBhbiBpdGVtIHRvIHRoZSBwbGF5ZXIncyBpbnZlbnRvcnkgb3IgZHJvcHMgaXQgaWYgZnVsbA0KICAgICAqIC8vIG5vdGU6IEFkZHMgaXRlbSB0byBpbnZlbnRvcnkgb3IgZHJvcHMgYXQgcGxheWVyJ3MgbG9jYXRpb24NCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCByZXR1cm5JdGVtVG9QbGF5ZXIoUGxheWVyIHBsYXllciwgSXRlbVN0YWNrIGl0ZW0pIHsNCiAgICAgICAgaWYgKGl0ZW0gPT0gbnVsbCB8fCBpdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5BSVIpIHsNCiAgICAgICAgICAgIGdldExvZ2dlcigpLmluZm8oIkF0dGVtcHRlZCB0byByZXR1cm4gbnVsbCBvciBBSVIgaXRlbSB0byAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgSGFzaE1hcDxJbnRlZ2VyLCBJdGVtU3RhY2s+IG92ZXJmbG93ID0gcGxheWVyLmdldEludmVudG9yeSgpLmFkZEl0ZW0oaXRlbS5jbG9uZSgpKTsNCiAgICAgICAgcGxheWVyLnVwZGF0ZUludmVudG9yeSgpOw0KICAgICAgICBpZiAoIW92ZXJmbG93LmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgZm9yIChJdGVtU3RhY2sgb3ZlcmZsb3dJdGVtIDogb3ZlcmZsb3cudmFsdWVzKCkpIHsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuZ2V0V29ybGQoKS5kcm9wSXRlbU5hdHVyYWxseShwbGF5ZXIuZ2V0TG9jYXRpb24oKSwgb3ZlcmZsb3dJdGVtKTsNCiAgICAgICAgICAgICAgICBnZXRMb2dnZXIoKS5pbmZvKCJEcm9wcGVkIGl0ZW0gIiArIG92ZXJmbG93SXRlbS5nZXRUeXBlKCkubmFtZSgpICsgIiB4IiArIG92ZXJmbG93SXRlbS5nZXRBbW91bnQoKSArICIgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBkdWUgdG8gZnVsbCBpbnZlbnRvcnkiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJpbnZlbnRvcnktZnVsbCIpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkuaW5mbygiUmV0dXJuZWQgaXRlbSAiICsgaXRlbS5nZXRUeXBlKCkubmFtZSgpICsgIiB4IiArIGl0ZW0uZ2V0QW1vdW50KCkgKyAiIHRvICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIidzIGludmVudG9yeSIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmVnaXN0ZXJzIHBsYWNlaG9sZGVycyB3aXRoIFBsYWNlaG9sZGVyQVBJLCB3aXRoIGRlbGF5ZWQgcmV0cnkgZm9yIGxvYWQgb3JkZXINCiAgICAgKiAvLyBub3RlOiBJbml0aWFsaXplcyBQbGFjZWhvbGRlckFQSSBpbnRlZ3JhdGlvbiB3aXRoIHJldHJ5IG1lY2hhbmlzbQ0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCByZWdpc3RlclBsYWNlaG9sZGVyc1dpdGhEZWxheSgpIHsNCiAgICAgICAgaWYgKEJ1a2tpdC5nZXRQbHVnaW5NYW5hZ2VyKCkuaXNQbHVnaW5FbmFibGVkKCJQbGFjZWhvbGRlckFQSSIpKSB7DQogICAgICAgICAgICBuZXcgUGxhY2Vob2xkZXJzKHRoaXMpLnJlZ2lzdGVyKCk7DQogICAgICAgICAgICBnZXRMb2dnZXIoKS5pbmZvKCJQbGFjZWhvbGRlckFQSSBkZXRlY3RlZCBhbmQgcGxhY2Vob2xkZXJzIHJlZ2lzdGVyZWQiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGdldExvZ2dlcigpLndhcm5pbmcoIlBsYWNlaG9sZGVyQVBJIG5vdCBmb3VuZCwgc2NoZWR1bGluZyBkZWxheWVkIHJlZ2lzdHJhdGlvbiBhdHRlbXB0Iik7DQogICAgICAgICAgICBuZXcgQnVra2l0UnVubmFibGUoKSB7DQogICAgICAgICAgICAgICAgcHJpdmF0ZSBpbnQgYXR0ZW1wdHMgPSAwOw0KICAgICAgICAgICAgICAgIHByaXZhdGUgZmluYWwgaW50IG1heEF0dGVtcHRzID0gMzsNCiAgICAgICAgICAgICAgICBAT3ZlcnJpZGUNCiAgICAgICAgICAgICAgICBwdWJsaWMgdm9pZCBydW4oKSB7DQogICAgICAgICAgICAgICAgICAgIGF0dGVtcHRzKys7DQogICAgICAgICAgICAgICAgICAgIGlmIChCdWtraXQuZ2V0UGx1Z2luTWFuYWdlcigpLmlzUGx1Z2luRW5hYmxlZCgiUGxhY2Vob2xkZXJBUEkiKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBsYWNlaG9sZGVycyhCb3VudGllc1BsdXMudGhpcykucmVnaXN0ZXIoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGdldExvZ2dlcigpLmluZm8oIkRlbGF5ZWQgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWw6IFBsYWNlaG9sZGVyQVBJIGRldGVjdGVkIGFuZCBwbGFjZWhvbGRlcnMgcmVnaXN0ZXJlZCBhZnRlciAiICsgYXR0ZW1wdHMgKyAiIGF0dGVtcHQocykiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbCgpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0dGVtcHRzID49IG1heEF0dGVtcHRzKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBnZXRMb2dnZXIoKS5zZXZlcmUoIkZhaWxlZCB0byByZWdpc3RlciBwbGFjZWhvbGRlcnMgYWZ0ZXIgIiArIG1heEF0dGVtcHRzICsgIiBhdHRlbXB0czogUGxhY2Vob2xkZXJBUEkgbm90IGZvdW5kLCBwbGFjZWhvbGRlcnMgd2lsbCBub3Qgd29yayIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBnZXRMb2dnZXIoKS5pbmZvKCJQbGFjZWhvbGRlckFQSSBub3QgeWV0IGxvYWRlZCwgcmV0cnlpbmcgcmVnaXN0cmF0aW9uIChhdHRlbXB0ICIgKyBhdHRlbXB0cyArICIgb2YgIiArIG1heEF0dGVtcHRzICsgIikiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0ucnVuVGFza1RpbWVyKHRoaXMsIDIwTCwgMjBMKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdGhlIGV4ZWN1dG9yIHNlcnZpY2UgZm9yIGFzeW5jaHJvbm91cyB0YXNrcw0KICAgICAqIC8vIG5vdGU6IFJldHVybnMgdGhlIHRocmVhZCBwb29sIHVzZWQgZm9yIHJ1bm5pbmcgYXN5bmMgZGF0YWJhc2Ugb3BlcmF0aW9ucw0KICAgICAqLw0KICAgIHB1YmxpYyBFeGVjdXRvclNlcnZpY2UgZ2V0RXhlY3V0b3JTZXJ2aWNlKCkgew0KICAgICAgICByZXR1cm4gZXhlY3V0b3JTZXJ2aWNlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENhbGxlZCB3aGVuIHRoZSBwbHVnaW4gaXMgZGlzYWJsZWQNCiAgICAgKiAvLyBub3RlOiBDbGVhbnMgdXAgcmVzb3VyY2VzLCBzYXZlcyBkYXRhLCBhbmQgdW5yZWdpc3RlcnMgbGlzdGVuZXJzDQogICAgICovDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIHZvaWQgb25EaXNhYmxlKCkgew0KICAgICAgICAvLyBDbGVhciBmaWx0ZXIgc3RhdGVzIGZvciBzaHV0ZG93bg0KICAgICAgICBCb3VudHlHVUkuY2xlYXJQbGF5ZXJTaG93T25seU9ubGluZSgpOw0KICAgICAgICBCb3VudHlHVUkuY2xlYXJQbGF5ZXJGaWx0ZXJIaWdoVG9Mb3coKTsNCg0KICAgICAgICAvLyBDbGVhbnVwIExpc3RlbmVycw0KICAgICAgICBpZiAoZXZlbnRNYW5hZ2VyICE9IG51bGwpIHsNCiAgICAgICAgICAgIGV2ZW50TWFuYWdlci51bnJlZ2lzdGVyQWxsKCk7DQogICAgICAgICAgICBnZXRMb2dnZXIoKS5pbmZvKCJVbnJlZ2lzdGVyZWQgYWxsIGV2ZW50IGxpc3RlbmVycy4iKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFNhdmUgRGF0YQ0KICAgICAgICBzYXZlRXZlcnl0aGluZygpOw0KICAgICAgICBnZXRMb2dnZXIoKS5pbmZvKCJTYXZlZCBhbGwgcGx1Z2luIGRhdGEuIik7DQoNCiAgICAgICAgLy8gQ2xlYW51cCBSZXNvdXJjZXMNCiAgICAgICAgaWYgKGV4ZWN1dG9yU2VydmljZSAhPSBudWxsKSB7DQogICAgICAgICAgICBleGVjdXRvclNlcnZpY2Uuc2h1dGRvd24oKTsNCiAgICAgICAgICAgIGdldExvZ2dlcigpLmluZm8oIlNodXRkb3duIGFzeW5jIGV4ZWN1dG9yIHNlcnZpY2UuIik7DQogICAgICAgIH0NCiAgICAgICAgaWYgKG15U1FMICE9IG51bGwgJiYgbXlTUUwuaXNFbmFibGVkKCkpIHsNCiAgICAgICAgICAgIG15U1FMLmNsb3NlQ29ubmVjdGlvbigpOw0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkuaW5mbygiQ2xvc2VkIE15U1FMIGNvbm5lY3Rpb24uIik7DQogICAgICAgIH0NCiAgICAgICAgZ2V0TG9nZ2VyKCkuaW5mbygiQm91bnRpZXNQbHVzIGZ1bGx5IGRpc2FibGVkISIpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIExvYWRzIGJvdW50eSBzb3VuZCBjb25maWd1cmF0aW9uIGZyb20gY29uZmlnLnltbA0KICAgICAqIC8vIG5vdGU6IFNldHMgdXAgc291bmQgZWZmZWN0cyBmb3IgYm91bnR5IGV2ZW50cw0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGxvYWRCb3VudHlTb3VuZENvbmZpZygpIHsNCiAgICAgICAgYm91bnR5U291bmRFbmFibGVkID0gZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigiYm91bnR5LXNvdW5kLmVuYWJsZWQiLCB0cnVlKTsNCiAgICAgICAgYm91bnR5U291bmROYW1lID0gZ2V0Q29uZmlnKCkuZ2V0U3RyaW5nKCJib3VudHktc291bmQuc291bmQiLCAiRU5USVRZX0JMQVpFX1NIT09UIik7DQogICAgICAgIGJvdW50eVNvdW5kVm9sdW1lID0gKGZsb2F0KSBnZXRDb25maWcoKS5nZXREb3VibGUoImJvdW50eS1zb3VuZC52b2x1bWUiLCAxLjApOw0KICAgICAgICBib3VudHlTb3VuZFBpdGNoID0gKGZsb2F0KSBnZXRDb25maWcoKS5nZXREb3VibGUoImJvdW50eS1zb3VuZC5waXRjaCIsIDEuMCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogTG9hZHMgR1VJIHRpdGxlIGZyb20gQm91bnR5R1VJLnltbA0KICAgICAqIC8vIG5vdGU6IFNldHMgdGhlIHRpdGxlIGZvciB0aGUgYm91bnR5IEdVSQ0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGxvYWRCb3VudHlHVUlUaXRsZSgpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gZ2V0Qm91bnR5R1VJQ29uZmlnKCk7DQogICAgICAgIGlmIChjb25maWcgPT0gbnVsbCkgew0KICAgICAgICAgICAgZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBGYWlsZWQgdG8gbG9hZCBHVUkgdGl0bGU6IEdVSXMvQm91bnR5R1VJLnltbCBpcyBudWxsIik7DQogICAgICAgICAgICBib3VudHlHVUlUaXRsZSA9IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgIiZkQm91bnR5IEh1bnRlciIpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgYm91bnR5R1VJVGl0bGUgPSBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGNvbmZpZy5nZXRTdHJpbmcoImd1aS10aXRsZSIsICImZEJvdW50eSBIdW50ZXIiKSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBIYW5kbGVzIHBsYXllciBqb2luIGV2ZW50cw0KICAgICAqIC8vIG5vdGU6IEFkZHMgcGxheWVyIHRvIGJvb3N0ZWQgYm91bnR5IGFuZCBmcmVuenkgc3lzdGVtcw0KICAgICAqLw0KICAgIEBFdmVudEhhbmRsZXINCiAgICBwdWJsaWMgdm9pZCBvblBsYXllckpvaW4oUGxheWVySm9pbkV2ZW50IGV2ZW50KSB7DQogICAgICAgIGlmIChib29zdGVkQm91bnR5ICE9IG51bGwpIHsNCiAgICAgICAgICAgIGJvb3N0ZWRCb3VudHkuYWRkUGxheWVyKGV2ZW50LmdldFBsYXllcigpKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZnJlbnp5ICE9IG51bGwpIHsNCiAgICAgICAgICAgIGZyZW56eS5hZGRQbGF5ZXIoZXZlbnQuZ2V0UGxheWVyKCkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBwbGF5ZXIgcXVpdCBldmVudHMNCiAgICAgKiAvLyBub3RlOiBSZW1vdmVzIHBsYXllciBmcm9tIGJvb3N0ZWQgYm91bnR5LCBmcmVuenkgc3lzdGVtcywgYW5kIGZpbHRlciBzdGF0ZXMNCiAgICAgKi8NCiAgICBARXZlbnRIYW5kbGVyDQogICAgcHVibGljIHZvaWQgb25QbGF5ZXJRdWl0KFBsYXllclF1aXRFdmVudCBldmVudCkgew0KICAgICAgICBpZiAoYm9vc3RlZEJvdW50eSAhPSBudWxsKSB7DQogICAgICAgICAgICBib29zdGVkQm91bnR5LnJlbW92ZVBsYXllcihldmVudC5nZXRQbGF5ZXIoKSk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGZyZW56eSAhPSBudWxsKSB7DQogICAgICAgICAgICBmcmVuenkucmVtb3ZlUGxheWVyKGV2ZW50LmdldFBsYXllcigpKTsNCiAgICAgICAgfQ0KICAgICAgICBVVUlEIHBsYXllclVVSUQgPSBldmVudC5nZXRQbGF5ZXIoKS5nZXRVbmlxdWVJZCgpOw0KICAgICAgICBCb3VudHlHVUkucmVtb3ZlUGxheWVyU2hvd09ubHlPbmxpbmUocGxheWVyVVVJRCk7DQogICAgICAgIEJvdW50eUdVSS5yZW1vdmVQbGF5ZXJGaWx0ZXJIaWdoVG9Mb3cocGxheWVyVVVJRCk7DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRvbnkyNi9ib3VudGllc1BsdXMvQm91bnR5LmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAyNDIwNCAxNTAyNDE3NzM0MCAwMTUyMTUAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzOw0KDQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5NYXRlcmlhbDsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JdGVtU3RhY2s7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy5UaW1lRm9ybWF0dGVyOw0KDQppbXBvcnQgamF2YS51dGlsLio7DQppbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3JzOw0KDQovKioNCiAqIFJlcHJlc2VudHMgYSBib3VudHkgd2l0aCBtb25leSwgaXRlbXMsIFhQLCBkdXJhdGlvbiwgYW5kIHNwb25zb3JzDQogKi8NCnB1YmxpYyBjbGFzcyBCb3VudHkgew0KICAgIHByaXZhdGUgZmluYWwgQm91bnRpZXNQbHVzIHBsdWdpbjsNCiAgICBwcml2YXRlIGZpbmFsIFVVSUQgdGFyZ2V0VVVJRDsNCiAgICBwcml2YXRlIGRvdWJsZSBvcmlnaW5hbE1vbmV5Ow0KICAgIHByaXZhdGUgZG91YmxlIGN1cnJlbnRNb25leTsNCiAgICBwcml2YXRlIGludCBvcmlnaW5hbFhQOw0KICAgIHByaXZhdGUgaW50IGN1cnJlbnRYUDsNCiAgICBwcml2YXRlIGludCBvcmlnaW5hbER1cmF0aW9uTWludXRlczsNCiAgICBwcml2YXRlIGludCBjdXJyZW50RHVyYXRpb25NaW51dGVzOw0KICAgIHByaXZhdGUgYm9vbGVhbiBpc1Blcm1hbmVudDsNCiAgICBwcml2YXRlIGZpbmFsIExpc3Q8Qm91bnR5SXRlbT4gb3JpZ2luYWxJdGVtczsNCiAgICBwcml2YXRlIGZpbmFsIExpc3Q8Qm91bnR5SXRlbT4gY3VycmVudEl0ZW1zOw0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIFNwb25zb3I+IHNwb25zb3JzOw0KDQogICAgcHVibGljIHN0YXRpYyBjbGFzcyBCb3VudHlJdGVtIHsNCiAgICAgICAgcHJpdmF0ZSBmaW5hbCBJdGVtU3RhY2sgaXRlbTsNCiAgICAgICAgcHJpdmF0ZSBmaW5hbCBVVUlEIGNvbnRyaWJ1dG9yOw0KICAgICAgICBwcml2YXRlIGZpbmFsIGJvb2xlYW4gaXNBbm9ueW1vdXM7DQoNCiAgICAgICAgcHVibGljIEJvdW50eUl0ZW0oSXRlbVN0YWNrIGl0ZW0sIFVVSUQgY29udHJpYnV0b3IsIGJvb2xlYW4gaXNBbm9ueW1vdXMpIHsNCiAgICAgICAgICAgIHRoaXMuaXRlbSA9IGl0ZW07DQogICAgICAgICAgICB0aGlzLmNvbnRyaWJ1dG9yID0gY29udHJpYnV0b3I7DQogICAgICAgICAgICB0aGlzLmlzQW5vbnltb3VzID0gaXNBbm9ueW1vdXM7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgSXRlbVN0YWNrIGdldEl0ZW0oKSB7IHJldHVybiBpdGVtOyB9DQogICAgICAgIHB1YmxpYyBVVUlEIGdldENvbnRyaWJ1dG9yKCkgeyByZXR1cm4gY29udHJpYnV0b3I7IH0NCiAgICAgICAgcHVibGljIGJvb2xlYW4gaXNBbm9ueW1vdXMoKSB7IHJldHVybiBpc0Fub255bW91czsgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgU3BvbnNvciB7DQogICAgICAgIHByaXZhdGUgZmluYWwgVVVJRCBwbGF5ZXJVVUlEOw0KICAgICAgICBwcml2YXRlIGRvdWJsZSBtb25leTsNCiAgICAgICAgcHJpdmF0ZSBpbnQgeHA7DQogICAgICAgIHByaXZhdGUgaW50IGR1cmF0aW9uTWludXRlczsNCiAgICAgICAgcHJpdmF0ZSBmaW5hbCBMaXN0PEJvdW50eUl0ZW0+IGl0ZW1zOw0KICAgICAgICBwcml2YXRlIGJvb2xlYW4gaXNBbm9ueW1vdXM7DQogICAgICAgIHByaXZhdGUgbG9uZyBzZXRUaW1lOyAvLyBBZGRlZA0KICAgICAgICBwcml2YXRlIGxvbmcgZXhwaXJlVGltZTsgLy8gQWRkZWQNCiAgICAgICAgcHJpdmF0ZSBkb3VibGUgbXVsdGlwbGllcjsgLy8gQWRkZWQNCg0KICAgICAgICBwdWJsaWMgU3BvbnNvcihVVUlEIHBsYXllclVVSUQpIHsNCiAgICAgICAgICAgIHRoaXMucGxheWVyVVVJRCA9IHBsYXllclVVSUQ7DQogICAgICAgICAgICB0aGlzLm1vbmV5ID0gMC4wOw0KICAgICAgICAgICAgdGhpcy54cCA9IDA7DQogICAgICAgICAgICB0aGlzLmR1cmF0aW9uTWludXRlcyA9IDA7DQogICAgICAgICAgICB0aGlzLml0ZW1zID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICB0aGlzLmlzQW5vbnltb3VzID0gZmFsc2U7DQogICAgICAgICAgICB0aGlzLnNldFRpbWUgPSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKTsNCiAgICAgICAgICAgIHRoaXMuZXhwaXJlVGltZSA9IC0xOw0KICAgICAgICAgICAgdGhpcy5tdWx0aXBsaWVyID0gMS4wOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgYWRkTW9uZXkoZG91YmxlIGFtb3VudCkgeyB0aGlzLm1vbmV5ICs9IGFtb3VudDsgfQ0KICAgICAgICBwdWJsaWMgdm9pZCBhZGRYUChpbnQgbGV2ZWxzKSB7IHRoaXMueHAgKz0gbGV2ZWxzOyB9DQogICAgICAgIHB1YmxpYyB2b2lkIGFkZER1cmF0aW9uKGludCBtaW51dGVzKSB7IHRoaXMuZHVyYXRpb25NaW51dGVzICs9IG1pbnV0ZXM7IH0NCiAgICAgICAgcHVibGljIHZvaWQgYWRkSXRlbShCb3VudHlJdGVtIGl0ZW0pIHsgdGhpcy5pdGVtcy5hZGQoaXRlbSk7IH0NCiAgICAgICAgcHVibGljIHZvaWQgc2V0QW5vbnltb3VzKGJvb2xlYW4gYW5vbnltb3VzKSB7IHRoaXMuaXNBbm9ueW1vdXMgPSBhbm9ueW1vdXM7IH0NCiAgICAgICAgcHVibGljIHZvaWQgc2V0U2V0VGltZShsb25nIHRpbWUpIHsgdGhpcy5zZXRUaW1lID0gdGltZTsgfSAvLyBBZGRlZA0KICAgICAgICBwdWJsaWMgdm9pZCBzZXRFeHBpcmVUaW1lKGxvbmcgdGltZSkgeyB0aGlzLmV4cGlyZVRpbWUgPSB0aW1lOyB9IC8vIEFkZGVkDQogICAgICAgIHB1YmxpYyB2b2lkIHNldE11bHRpcGxpZXIoZG91YmxlIG11bHRpcGxpZXIpIHsgdGhpcy5tdWx0aXBsaWVyID0gbXVsdGlwbGllcjsgfSAvLyBBZGRlZA0KICAgICAgICBwdWJsaWMgVVVJRCBnZXRQbGF5ZXJVVUlEKCkgeyByZXR1cm4gcGxheWVyVVVJRDsgfQ0KICAgICAgICBwdWJsaWMgZG91YmxlIGdldE1vbmV5KCkgeyByZXR1cm4gbW9uZXk7IH0NCiAgICAgICAgcHVibGljIGludCBnZXRYUCgpIHsgcmV0dXJuIHhwOyB9DQogICAgICAgIHB1YmxpYyBpbnQgZ2V0RHVyYXRpb25NaW51dGVzKCkgeyByZXR1cm4gZHVyYXRpb25NaW51dGVzOyB9DQogICAgICAgIHB1YmxpYyBMaXN0PEJvdW50eUl0ZW0+IGdldEl0ZW1zKCkgeyByZXR1cm4gbmV3IEFycmF5TGlzdDw+KGl0ZW1zKTsgfQ0KICAgICAgICBwdWJsaWMgYm9vbGVhbiBpc0Fub255bW91cygpIHsgcmV0dXJuIGlzQW5vbnltb3VzOyB9DQogICAgICAgIHB1YmxpYyBsb25nIGdldFNldFRpbWUoKSB7IHJldHVybiBzZXRUaW1lOyB9IC8vIEFkZGVkDQogICAgICAgIHB1YmxpYyBsb25nIGdldEV4cGlyZVRpbWUoKSB7IHJldHVybiBleHBpcmVUaW1lOyB9IC8vIEFkZGVkDQogICAgICAgIHB1YmxpYyBkb3VibGUgZ2V0TXVsdGlwbGllcigpIHsgcmV0dXJuIG11bHRpcGxpZXI7IH0gLy8gQWRkZWQNCiAgICAgICAgcHVibGljIGRvdWJsZSBnZXRUb3RhbFZhbHVlKEJvdW50aWVzUGx1cyBwbHVnaW4pIHsNCiAgICAgICAgICAgIGRvdWJsZSBpdGVtVmFsdWUgPSBpdGVtcy5zdHJlYW0oKQ0KICAgICAgICAgICAgICAgICAgICAubWFwVG9Eb3VibGUoaXRlbSAtPiBwbHVnaW4uZ2V0SXRlbVZhbHVlQ2FsY3VsYXRvcigpLmNhbGN1bGF0ZUl0ZW1WYWx1ZShpdGVtLmdldEl0ZW0oKSkpDQogICAgICAgICAgICAgICAgICAgIC5zdW0oKTsNCiAgICAgICAgICAgIHJldHVybiBtb25leSArIGl0ZW1WYWx1ZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENvbnN0cnVjdHMgYSBuZXcgQm91bnR5IGZvciBhIHRhcmdldCBwbGF5ZXINCiAgICAgKi8NCiAgICBwdWJsaWMgQm91bnR5KEJvdW50aWVzUGx1cyBwbHVnaW4sIFVVSUQgdGFyZ2V0VVVJRCkgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICAgICAgdGhpcy50YXJnZXRVVUlEID0gdGFyZ2V0VVVJRDsNCiAgICAgICAgdGhpcy5vcmlnaW5hbE1vbmV5ID0gMC4wOw0KICAgICAgICB0aGlzLmN1cnJlbnRNb25leSA9IDAuMDsNCiAgICAgICAgdGhpcy5vcmlnaW5hbFhQID0gMDsNCiAgICAgICAgdGhpcy5jdXJyZW50WFAgPSAwOw0KICAgICAgICB0aGlzLm9yaWdpbmFsRHVyYXRpb25NaW51dGVzID0gMDsNCiAgICAgICAgdGhpcy5jdXJyZW50RHVyYXRpb25NaW51dGVzID0gMDsNCiAgICAgICAgdGhpcy5pc1Blcm1hbmVudCA9IHRydWU7DQogICAgICAgIHRoaXMub3JpZ2luYWxJdGVtcyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICB0aGlzLmN1cnJlbnRJdGVtcyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICB0aGlzLnNwb25zb3JzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEFkZHMgYSBjb250cmlidXRpb24gdG8gdGhlIGJvdW50eQ0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGFkZENvbnRyaWJ1dGlvbihVVUlEIHNwb25zb3JVVUlELCBkb3VibGUgbW9uZXksIGludCB4cCwgaW50IGR1cmF0aW9uTWludXRlcywgTGlzdDxJdGVtU3RhY2s+IGl0ZW1zLCBib29sZWFuIGlzQW5vbnltb3VzLCBib29sZWFuIGlzSW5pdGlhbCkgew0KICAgICAgICBTcG9uc29yIHNwb25zb3IgPSBzcG9uc29ycy5jb21wdXRlSWZBYnNlbnQoc3BvbnNvclVVSUQsIFNwb25zb3I6Om5ldyk7DQogICAgICAgIHNwb25zb3IuYWRkTW9uZXkobW9uZXkpOw0KICAgICAgICBzcG9uc29yLmFkZFhQKHhwKTsNCiAgICAgICAgc3BvbnNvci5hZGREdXJhdGlvbihkdXJhdGlvbk1pbnV0ZXMpOw0KICAgICAgICBzcG9uc29yLnNldEFub255bW91cyhpc0Fub255bW91cyk7DQogICAgICAgIHNwb25zb3Iuc2V0U2V0VGltZShTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSk7DQogICAgICAgIHNwb25zb3Iuc2V0RXhwaXJlVGltZShtb25leSA+IDAgPyBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSArIChwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0SW50KCJkZWZhdWx0LWJvdW50eS1kdXJhdGlvbiIsIDE0NDApICogNjAgKiAxMDAwTCkgOiAtMSk7DQogICAgICAgIHNwb25zb3Iuc2V0TXVsdGlwbGllcigxLjApOw0KICAgICAgICBmb3IgKEl0ZW1TdGFjayBpdGVtIDogaXRlbXMpIHsNCiAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgIWl0ZW0uZ2V0VHlwZSgpLmVxdWFscyhNYXRlcmlhbC5BSVIpKSB7DQogICAgICAgICAgICAgICAgQm91bnR5SXRlbSBib3VudHlJdGVtID0gbmV3IEJvdW50eUl0ZW0oaXRlbS5jbG9uZSgpLCBzcG9uc29yVVVJRCwgaXNBbm9ueW1vdXMpOw0KICAgICAgICAgICAgICAgIGlmIChpc0luaXRpYWwpIHsNCiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxJdGVtcy5hZGQoYm91bnR5SXRlbSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGN1cnJlbnRJdGVtcy5hZGQoYm91bnR5SXRlbSk7DQogICAgICAgICAgICAgICAgc3BvbnNvci5hZGRJdGVtKGJvdW50eUl0ZW0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmIChpc0luaXRpYWwpIHsNCiAgICAgICAgICAgIG9yaWdpbmFsTW9uZXkgKz0gbW9uZXk7DQogICAgICAgICAgICBvcmlnaW5hbFhQICs9IHhwOw0KICAgICAgICAgICAgb3JpZ2luYWxEdXJhdGlvbk1pbnV0ZXMgKz0gZHVyYXRpb25NaW51dGVzOw0KICAgICAgICB9DQogICAgICAgIGN1cnJlbnRNb25leSArPSBtb25leTsNCiAgICAgICAgY3VycmVudFhQICs9IHhwOw0KICAgICAgICBjdXJyZW50RHVyYXRpb25NaW51dGVzICs9IGR1cmF0aW9uTWludXRlczsNCiAgICAgICAgaXNQZXJtYW5lbnQgPSBjdXJyZW50RHVyYXRpb25NaW51dGVzID09IDA7DQogICAgfQ0KDQogICAgcHVibGljIExpc3Q8U3BvbnNvcj4gZ2V0VG9wU3BvbnNvcnMoaW50IGxpbWl0KSB7DQogICAgICAgIHJldHVybiBzcG9uc29ycy52YWx1ZXMoKS5zdHJlYW0oKQ0KICAgICAgICAgICAgICAgIC5zb3J0ZWQoKHMxLCBzMikgLT4gRG91YmxlLmNvbXBhcmUoczIuZ2V0VG90YWxWYWx1ZShCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKSksIHMxLmdldFRvdGFsVmFsdWUoQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkpKSkNCiAgICAgICAgICAgICAgICAubGltaXQobGltaXQpDQogICAgICAgICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmVtb3ZlcyBhIHNwb25zb3IgYW5kIHRoZWlyIGNvbnRyaWJ1dGlvbnMgZnJvbSB0aGUgYm91bnR5DQogICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcG9uc29yIHdhcyByZW1vdmVkLCBmYWxzZSBvdGhlcndpc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgYm9vbGVhbiByZW1vdmVTcG9uc29yKFVVSUQgc3BvbnNvclVVSUQpIHsNCiAgICAgICAgU3BvbnNvciBzcG9uc29yID0gc3BvbnNvcnMucmVtb3ZlKHNwb25zb3JVVUlEKTsNCiAgICAgICAgaWYgKHNwb25zb3IgIT0gbnVsbCkgew0KICAgICAgICAgICAgY3VycmVudE1vbmV5IC09IHNwb25zb3IuZ2V0TW9uZXkoKTsNCiAgICAgICAgICAgIGN1cnJlbnRYUCAtPSBzcG9uc29yLmdldFhQKCk7DQogICAgICAgICAgICBjdXJyZW50RHVyYXRpb25NaW51dGVzIC09IHNwb25zb3IuZ2V0RHVyYXRpb25NaW51dGVzKCk7DQogICAgICAgICAgICBjdXJyZW50SXRlbXMucmVtb3ZlSWYoaXRlbSAtPiBpdGVtLmdldENvbnRyaWJ1dG9yKCkuZXF1YWxzKHNwb25zb3JVVUlEKSk7DQogICAgICAgICAgICBpc1Blcm1hbmVudCA9IGN1cnJlbnREdXJhdGlvbk1pbnV0ZXMgPT0gMDsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgTGlzdDxCb3VudHlJdGVtPiBnZXRTb3J0ZWRJdGVtcygpIHsNCiAgICAgICAgTWFwPFVVSUQsIExpc3Q8Qm91bnR5SXRlbT4+IGl0ZW1zQnlDb250cmlidXRvciA9IG5ldyBMaW5rZWRIYXNoTWFwPD4oKTsNCiAgICAgICAgc3BvbnNvcnMua2V5U2V0KCkuc3RyZWFtKCkNCiAgICAgICAgICAgICAgICAuc29ydGVkKCh1dWlkMSwgdXVpZDIpIC0+IHsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIG5hbWUxID0gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIodXVpZDEpLmdldE5hbWUoKTsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIG5hbWUyID0gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIodXVpZDIpLmdldE5hbWUoKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWUxICE9IG51bGwgJiYgbmFtZTIgIT0gbnVsbCA/IG5hbWUxLmNvbXBhcmVUb0lnbm9yZUNhc2UobmFtZTIpIDogMDsNCiAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgIC5mb3JFYWNoKHV1aWQgLT4gaXRlbXNCeUNvbnRyaWJ1dG9yLnB1dCh1dWlkLCBuZXcgQXJyYXlMaXN0PD4oKSkpOw0KICAgICAgICBmb3IgKEJvdW50eUl0ZW0gaXRlbSA6IGN1cnJlbnRJdGVtcykgew0KICAgICAgICAgICAgaXRlbXNCeUNvbnRyaWJ1dG9yLmNvbXB1dGVJZkFic2VudChpdGVtLmdldENvbnRyaWJ1dG9yKCksIGsgLT4gbmV3IEFycmF5TGlzdDw+KCkpLmFkZChpdGVtKTsNCiAgICAgICAgfQ0KICAgICAgICBMaXN0PEJvdW50eUl0ZW0+IHNvcnRlZEl0ZW1zID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgIGZvciAoTGlzdDxCb3VudHlJdGVtPiBjb250cmlidXRvckl0ZW1zIDogaXRlbXNCeUNvbnRyaWJ1dG9yLnZhbHVlcygpKSB7DQogICAgICAgICAgICBzb3J0ZWRJdGVtcy5hZGRBbGwoY29udHJpYnV0b3JJdGVtcyk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHNvcnRlZEl0ZW1zOw0KICAgIH0NCg0KICAgIHB1YmxpYyBVVUlEIGdldFRhcmdldFVVSUQoKSB7IHJldHVybiB0YXJnZXRVVUlEOyB9DQogICAgcHVibGljIGRvdWJsZSBnZXRPcmlnaW5hbE1vbmV5KCkgeyByZXR1cm4gb3JpZ2luYWxNb25leTsgfQ0KICAgIHB1YmxpYyBkb3VibGUgZ2V0Q3VycmVudE1vbmV5KCkgeyByZXR1cm4gY3VycmVudE1vbmV5OyB9DQogICAgcHVibGljIGRvdWJsZSBnZXRQcmljZUluY3JlYXNlUGVyY2VudCgpIHsNCiAgICAgICAgcmV0dXJuIG9yaWdpbmFsTW9uZXkgPT0gMCA/IDAgOiAoKGN1cnJlbnRNb25leSAtIG9yaWdpbmFsTW9uZXkpIC8gb3JpZ2luYWxNb25leSkgKiAxMDA7DQogICAgfQ0KICAgIHB1YmxpYyBpbnQgZ2V0T3JpZ2luYWxYUCgpIHsgcmV0dXJuIG9yaWdpbmFsWFA7IH0NCiAgICBwdWJsaWMgaW50IGdldEN1cnJlbnRYUCgpIHsgcmV0dXJuIGN1cnJlbnRYUDsgfQ0KICAgIHB1YmxpYyBkb3VibGUgZ2V0WFBMZXZlbEluY3JlYXNlUGVyY2VudCgpIHsNCiAgICAgICAgcmV0dXJuIG9yaWdpbmFsWFAgPT0gMCA/IDAgOiAoKGRvdWJsZSkgKGN1cnJlbnRYUCAtIG9yaWdpbmFsWFApIC8gb3JpZ2luYWxYUCkgKiAxMDA7DQogICAgfQ0KICAgIHB1YmxpYyBpbnQgZ2V0T3JpZ2luYWxEdXJhdGlvbk1pbnV0ZXMoKSB7IHJldHVybiBvcmlnaW5hbER1cmF0aW9uTWludXRlczsgfQ0KICAgIHB1YmxpYyBpbnQgZ2V0Q3VycmVudER1cmF0aW9uTWludXRlcygpIHsgcmV0dXJuIGN1cnJlbnREdXJhdGlvbk1pbnV0ZXM7IH0NCiAgICBwdWJsaWMgYm9vbGVhbiBpc1Blcm1hbmVudCgpIHsgcmV0dXJuIGlzUGVybWFuZW50OyB9DQogICAgcHVibGljIGRvdWJsZSBnZXREdXJhdGlvbkluY3JlYXNlUGVyY2VudCgpIHsNCiAgICAgICAgcmV0dXJuIG9yaWdpbmFsRHVyYXRpb25NaW51dGVzID09IDAgPyAwIDogKChkb3VibGUpIChjdXJyZW50RHVyYXRpb25NaW51dGVzIC0gb3JpZ2luYWxEdXJhdGlvbk1pbnV0ZXMpIC8gb3JpZ2luYWxEdXJhdGlvbk1pbnV0ZXMpICogMTAwOw0KICAgIH0NCiAgICBwdWJsaWMgTGlzdDxCb3VudHlJdGVtPiBnZXRPcmlnaW5hbEl0ZW1zKCkgeyByZXR1cm4gbmV3IEFycmF5TGlzdDw+KG9yaWdpbmFsSXRlbXMpOyB9DQogICAgcHVibGljIExpc3Q8Qm91bnR5SXRlbT4gZ2V0Q3VycmVudEl0ZW1zKCkgeyByZXR1cm4gbmV3IEFycmF5TGlzdDw+KGN1cnJlbnRJdGVtcyk7IH0NCiAgICBwdWJsaWMgZG91YmxlIGdldE9yaWdpbmFsSXRlbVZhbHVlKCkgew0KICAgICAgICByZXR1cm4gb3JpZ2luYWxJdGVtcy5zdHJlYW0oKQ0KICAgICAgICAgICAgICAgIC5tYXBUb0RvdWJsZShpdGVtIC0+IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldEl0ZW1WYWx1ZUNhbGN1bGF0b3IoKS5jYWxjdWxhdGVJdGVtVmFsdWUoaXRlbS5nZXRJdGVtKCkpKQ0KICAgICAgICAgICAgICAgIC5zdW0oKTsNCiAgICB9DQogICAgcHVibGljIGRvdWJsZSBnZXRDdXJyZW50SXRlbVZhbHVlKCkgew0KICAgICAgICByZXR1cm4gY3VycmVudEl0ZW1zLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgLm1hcFRvRG91YmxlKGl0ZW0gLT4gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0SXRlbVZhbHVlQ2FsY3VsYXRvcigpLmNhbGN1bGF0ZUl0ZW1WYWx1ZShpdGVtLmdldEl0ZW0oKSkpDQogICAgICAgICAgICAgICAgLnN1bSgpOw0KICAgIH0NCiAgICBwdWJsaWMgZG91YmxlIGdldEl0ZW1JbmNyZWFzZVBlcmNlbnQoKSB7DQogICAgICAgIGRvdWJsZSBvcmlnaW5hbFZhbHVlID0gZ2V0T3JpZ2luYWxJdGVtVmFsdWUoKTsNCiAgICAgICAgcmV0dXJuIG9yaWdpbmFsVmFsdWUgPT0gMCA/IDAgOiAoKGdldEN1cnJlbnRJdGVtVmFsdWUoKSAtIG9yaWdpbmFsVmFsdWUpIC8gb3JpZ2luYWxWYWx1ZSkgKiAxMDA7DQogICAgfQ0KICAgIHB1YmxpYyBkb3VibGUgZ2V0T3JpZ2luYWxQb29sKCkgeyByZXR1cm4gb3JpZ2luYWxNb25leSArIGdldE9yaWdpbmFsSXRlbVZhbHVlKCk7IH0NCiAgICBwdWJsaWMgZG91YmxlIGdldEN1cnJlbnRQb29sKCkgeyByZXR1cm4gY3VycmVudE1vbmV5ICsgZ2V0Q3VycmVudEl0ZW1WYWx1ZSgpOyB9DQogICAgcHVibGljIGRvdWJsZSBnZXRQb29sSW5jcmVhc2VQZXJjZW50KCkgew0KICAgICAgICBkb3VibGUgb3JpZ2luYWxQb29sID0gZ2V0T3JpZ2luYWxQb29sKCk7DQogICAgICAgIHJldHVybiBvcmlnaW5hbFBvb2wgPT0gMCA/IDAgOiAoKGdldEN1cnJlbnRQb29sKCkgLSBvcmlnaW5hbFBvb2wpIC8gb3JpZ2luYWxQb29sKSAqIDEwMDsNCiAgICB9DQogICAgcHVibGljIFN0cmluZyBnZXRGb3JtYXR0ZWRPcmlnaW5hbER1cmF0aW9uKCkgew0KICAgICAgICByZXR1cm4gVGltZUZvcm1hdHRlci5mb3JtYXRNaW51dGVzVG9SZWFkYWJsZShvcmlnaW5hbER1cmF0aW9uTWludXRlcywgb3JpZ2luYWxEdXJhdGlvbk1pbnV0ZXMgPT0gMCk7DQogICAgfQ0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0Rm9ybWF0dGVkQ3VycmVudER1cmF0aW9uKCkgew0KICAgICAgICByZXR1cm4gVGltZUZvcm1hdHRlci5mb3JtYXRNaW51dGVzVG9SZWFkYWJsZShjdXJyZW50RHVyYXRpb25NaW51dGVzLCBpc1Blcm1hbmVudCk7DQogICAgfQ0KICAgIHB1YmxpYyBMaXN0PFNwb25zb3I+IGdldFNwb25zb3JzKCkgeyByZXR1cm4gbmV3IEFycmF5TGlzdDw+KHNwb25zb3JzLnZhbHVlcygpKTsgfQ0KfdG9ueTI2L2JvdW50aWVzUGx1cy9Cb3VudHlDb21tYW5kLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMTM3NDE0IDE1MDI2MzI0NDU3IDAxNjUzMQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCnBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1czsNCg0KaW1wb3J0IG5ldC5tZF81LmJ1bmdlZS5hcGkuY2hhdC5CYXNlQ29tcG9uZW50Ow0KaW1wb3J0IG5ldC5tZF81LmJ1bmdlZS5hcGkuY2hhdC5DbGlja0V2ZW50Ow0KaW1wb3J0IG5ldC5tZF81LmJ1bmdlZS5hcGkuY2hhdC5UZXh0Q29tcG9uZW50Ow0KaW1wb3J0IG9yZy5idWtraXQuQnVra2l0Ow0KaW1wb3J0IG9yZy5idWtraXQuQ2hhdENvbG9yOw0KaW1wb3J0IG9yZy5idWtraXQuT2ZmbGluZVBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LlNvdW5kOw0KaW1wb3J0IG9yZy5idWtraXQuY29tbWFuZC5Db21tYW5kOw0KaW1wb3J0IG9yZy5idWtraXQuY29tbWFuZC5Db21tYW5kRXhlY3V0b3I7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb21tYW5kLkNvbW1hbmRTZW5kZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuRmlsZUNvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1TdGFjazsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkdVSXMuKjsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLio7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy5TaG9wR3VpUGx1c0ludGVncmF0aW9uOw0KDQppbXBvcnQgamF2YS51dGlsLio7DQoNCnB1YmxpYyBjbGFzcyBCb3VudHlDb21tYW5kIGltcGxlbWVudHMgQ29tbWFuZEV4ZWN1dG9yIHsNCg0KICAgIHByaXZhdGUgZmluYWwgQm91bnRpZXNQbHVzIHBsdWdpbjsNCg0KICAgIHB1YmxpYyBCb3VudHlDb21tYW5kKEJvdW50aWVzUGx1cyBwbHVnaW4pIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyB0aGUgL2JvdW50eSBjb21tYW5kIGV4ZWN1dGlvbg0KICAgICAqIC8vIG5vdGU6IERpc3BhdGNoZXMgdG8gYXBwcm9wcmlhdGUgc3ViY29tbWFuZCBiYXNlZCBvbiBhcmd1bWVudHMNCiAgICAgKi8NCiAgICBAT3ZlcnJpZGUNCiAgICBwdWJsaWMgYm9vbGVhbiBvbkNvbW1hbmQoQ29tbWFuZFNlbmRlciBzZW5kZXIsIENvbW1hbmQgY29tbWFuZCwgU3RyaW5nIGxhYmVsLCBTdHJpbmdbXSBhcmdzKSB7DQogICAgICAgIGlmICghKHNlbmRlciBpbnN0YW5jZW9mIFBsYXllcikpIHsNCiAgICAgICAgICAgIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnID0gcGx1Z2luLmdldE1lc3NhZ2VzQ29uZmlnKCk7DQogICAgICAgICAgICBTdHJpbmcgY29uc29sZU5vdEFsbG93ZWQgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImNvbnNvbGUtbm90LWFsbG93ZWQiLCAiJmNUaGlzIGNvbW1hbmQgY2FuIG9ubHkgYmUgdXNlZCBieSBwbGF5ZXJzLCBleGNlcHQgZm9yICdnaXZlJyBjb21tYW5kLiIpOw0KICAgICAgICAgICAgc2VuZGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgY29uc29sZU5vdEFsbG93ZWQpKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgUGxheWVyIHBsYXllciA9IChQbGF5ZXIpIHNlbmRlcjsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBwbHVnaW4uZ2V0TWVzc2FnZXNDb25maWcoKTsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldENvbmZpZygpOw0KDQogICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICBpZiAoY29uZmlnLmdldEJvb2xlYW4oInJlcXVpcmUtc2t1bGwtdHVybi1pbiIsIHRydWUpKSB7DQogICAgICAgICAgICAgICAgQm91bnR5R1VJLm9wZW5Cb3VudHlHVUkocGxheWVyLCBmYWxzZSwgZmFsc2UsIDApOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiYm91bnR5LWd1aS1kaXNhYmxlZCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgc3ViQ29tbWFuZCA9IGFyZ3NbMF0udG9Mb3dlckNhc2UoKTsNCiAgICAgICAgc3dpdGNoIChzdWJDb21tYW5kKSB7DQogICAgICAgICAgICBjYXNlICJzZXQiOg0KICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVTZXRDb21tYW5kKHBsYXllciwgYXJncywgY29uZmlnLCBtZXNzYWdlc0NvbmZpZyk7DQogICAgICAgICAgICBjYXNlICJjaGVjayI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUNoZWNrQ29tbWFuZChwbGF5ZXIsIGFyZ3MsIG1lc3NhZ2VzQ29uZmlnKTsNCiAgICAgICAgICAgIGNhc2UgImNhbmNlbCI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUNhbmNlbENvbW1hbmQocGxheWVyLCBtZXNzYWdlc0NvbmZpZyk7DQogICAgICAgICAgICBjYXNlICJzdGF0cyI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0YXRzQ29tbWFuZChwbGF5ZXIsIG1lc3NhZ2VzQ29uZmlnKTsNCiAgICAgICAgICAgIGNhc2UgInN0YXR1cyI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0YXR1c0NvbW1hbmQocGxheWVyLCBhcmdzLCBtZXNzYWdlc0NvbmZpZyk7DQogICAgICAgICAgICBjYXNlICJnaXZlIjoNCiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlR2l2ZUNvbW1hbmQoc2VuZGVyLCBhcmdzKTsNCiAgICAgICAgICAgIGNhc2UgInJlbG9hZCI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVJlbG9hZENvbW1hbmQocGxheWVyLCBhcmdzLCBtZXNzYWdlc0NvbmZpZywgY29uZmlnLmdldEJvb2xlYW4oImFsbG93LXRpbWUiLCBmYWxzZSkpOw0KICAgICAgICAgICAgY2FzZSAiZnJlbnp5IjoNCiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlRnJlbnp5Q29tbWFuZChzZW5kZXIsIGFyZ3MsIG1lc3NhZ2VzQ29uZmlnKTsNCiAgICAgICAgICAgIGNhc2UgInByZXZpZXciOg0KICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPSAyKSB7DQogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJib3VudHktcHJldmlldy11c2FnZSIpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgU3RyaW5nIHByZXZpZXdUYXJnZXROYW1lID0gYXJnc1sxXTsNCiAgICAgICAgICAgICAgICBPZmZsaW5lUGxheWVyIHByZXZpZXdUYXJnZXQgPSBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcihwcmV2aWV3VGFyZ2V0TmFtZSk7DQogICAgICAgICAgICAgICAgaWYgKHByZXZpZXdUYXJnZXQgPT0gbnVsbCB8fCAhcHJldmlld1RhcmdldC5oYXNQbGF5ZWRCZWZvcmUoKSkgew0KICAgICAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiYm91bnR5LXBsYXllci1ub3QtZm91bmQiKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIFByZXZpZXdHVUkgcHJldmlld0dVSSA9IG5ldyBQcmV2aWV3R1VJKHBsYXllciwgcHJldmlld1RhcmdldC5nZXRVbmlxdWVJZCgpLCBwbHVnaW4uZ2V0RXZlbnRNYW5hZ2VyKCkpOw0KICAgICAgICAgICAgICAgIHByZXZpZXdHVUkub3BlbkludmVudG9yeShwbGF5ZXIpOw0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgY2FzZSAidG9wIjoNCiAgICAgICAgICAgICAgICBpZiAoIXBsYXllci5oYXNQZXJtaXNzaW9uKCJib3VudGllc3BsdXMuYm91bnR5LnRvcCIpKSB7DQogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJib3VudHktdG9wLW5vLXBlcm1pc3Npb24iKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPSAxKSB7DQogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJib3VudHktdG9wLXVzYWdlIik7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBUb3BHVUkgdG9wR1VJID0gbmV3IFRvcEdVSShwbHVnaW4sIHBsdWdpbi5nZXRFdmVudE1hbmFnZXIoKSk7DQogICAgICAgICAgICAgICAgdG9wR1VJLm9wZW5Ub3BHVUkocGxheWVyLCAwLCBUb3BHVUkuRmlsdGVyVHlwZS5DTEFJTUVELCB0cnVlKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIGNhc2UgInNob3AiOg0KICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVTaG9wQ29tbWFuZChwbGF5ZXIsIGFyZ3MpOw0KICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiYm91bnR5LXVzYWdlIik7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBIYW5kbGVzIHRoZSBzaG9wIHN1YmNvbW1hbmQNCiAgICAgKiAvLyBub3RlOiBPcGVucyB0aGUgSHVudGVycyBEZW4gc2hvcCBHVUkgb3IgU2hvcEdVSVBsdXMgc2hvcA0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBoYW5kbGVTaG9wQ29tbWFuZChQbGF5ZXIgcGxheWVyLCBTdHJpbmdbXSBhcmdzKSB7DQogICAgICAgIGlmICghcGxheWVyLmhhc1Blcm1pc3Npb24oImJvdW50aWVzcGx1cy5zaG9wIikpIHsNCiAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJuby1wZXJtaXNzaW9uIik7DQogICAgICAgICAgICBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCkubG9nRGVidWcoIltCb3VudHlDb21tYW5kXSAiICsgcGxheWVyLmdldE5hbWUoKSArICIgYXR0ZW1wdGVkIC9ib3VudHkgc2hvcCB3aXRob3V0IHBlcm1pc3Npb24iKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgICAgIGlmICghcGx1Z2luLmdldENvbmZpZygpLmdldEJvb2xlYW4oInNob3AuZW5hYmxlLXNob3AiLCB0cnVlKSkgew0KICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgInNob3AtZGlzYWJsZWQiKTsNCiAgICAgICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiW0JvdW50eUNvbW1hbmRdICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBhdHRlbXB0ZWQgL2JvdW50eSBzaG9wIGJ1dCBzaG9wIGlzIGRpc2FibGVkIik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICBTaG9wR3VpUGx1c0ludGVncmF0aW9uIHNob3BJbnRlZ3JhdGlvbiA9IHBsdWdpbi5nZXRTaG9wR3VpUGx1c0ludGVncmF0aW9uKCk7DQogICAgICAgIGlmIChzaG9wSW50ZWdyYXRpb24gIT0gbnVsbCkgew0KICAgICAgICAgICAgc2hvcEludGVncmF0aW9uLm9wZW5TaG9wKHBsYXllcik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBIdW50ZXJEZW5HVUkgZ3VpID0gbmV3IEh1bnRlckRlbkdVSShwbGF5ZXIsIHBsdWdpbi5nZXRFdmVudE1hbmFnZXIoKSk7DQogICAgICAgICAgICBndWkub3BlbkludmVudG9yeShwbGF5ZXIpOw0KICAgICAgICAgICAgcGx1Z2luLmdldERlYnVnTWFuYWdlcigpLmxvZ0RlYnVnKCJbQm91bnR5Q29tbWFuZF0gT3BlbmVkIGRlZmF1bHQgSHVudGVyRGVuR1VJIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyB0aGUgL2JvdW50eSBzdGF0dXMgY29tbWFuZA0KICAgICAqIC8vIG5vdGU6IERpc3BsYXlzIHRoZSBib3VudHkgc3RhdHVzIGZvciB0aGUgcGxheWVyIG9yIGEgc3BlY2lmaWVkIHRhcmdldA0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBoYW5kbGVTdGF0dXNDb21tYW5kKFBsYXllciBwbGF5ZXIsIFN0cmluZ1tdIGFyZ3MsIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnKSB7DQogICAgICAgIGlmICghcGxheWVyLmhhc1Blcm1pc3Npb24oImJvdW50aWVzcGx1cy5ib3VudHkuc3RhdHVzIikpIHsNCiAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJuby1wZXJtaXNzaW9uIik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIFN0cmluZyB0YXJnZXROYW1lOw0KICAgICAgICBPZmZsaW5lUGxheWVyIHRhcmdldDsNCg0KICAgICAgICAvLyBJZiBubyBwbGF5ZXIgc3BlY2lmaWVkLCBjaGVjayBvd24gc3RhdHVzDQogICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PSAxKSB7DQogICAgICAgICAgICB0YXJnZXROYW1lID0gcGxheWVyLmdldE5hbWUoKTsNCiAgICAgICAgICAgIHRhcmdldCA9IHBsYXllcjsNCiAgICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PSAyKSB7DQogICAgICAgICAgICB0YXJnZXROYW1lID0gYXJnc1sxXTsNCiAgICAgICAgICAgIHRhcmdldCA9IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVyKHRhcmdldE5hbWUpOw0KDQogICAgICAgICAgICBpZiAodGFyZ2V0ID09IG51bGwgfHwgIXRhcmdldC5oYXNQbGF5ZWRCZWZvcmUoKSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBwbGF5ZXJOb3RGb3VuZCA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LXBsYXllci1ub3QtZm91bmQiLCAiJXByZWZpeCUmY1BsYXllciAmZSV0YXJnZXQlJmMgbm90IGZvdW5kLiIpOw0KICAgICAgICAgICAgICAgIHBsYXllck5vdEZvdW5kID0gcGxheWVyTm90Rm91bmQucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICImNCZsQm91bnRpZXMgJjcmbMK7ICY3IikpOw0KICAgICAgICAgICAgICAgIHBsYXllck5vdEZvdW5kID0gcGxheWVyTm90Rm91bmQucmVwbGFjZSgiJXRhcmdldCUiLCB0YXJnZXROYW1lKTsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBwbGF5ZXJOb3RGb3VuZCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgImJvdW50eS1zdGF0dXMtdXNhZ2UiKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgVVVJRCB0YXJnZXRVVUlEID0gdGFyZ2V0LmdldFVuaXF1ZUlkKCk7DQogICAgICAgIE1hcDxVVUlELCBJbnRlZ2VyPiBib3VudGllcyA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuZ2V0Qm91bnRpZXNPblRhcmdldCh0YXJnZXRVVUlEKTsNCg0KICAgICAgICBpZiAoYm91bnRpZXMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKS5wbGF5ZXIocGxheWVyKS50YXJnZXQodGFyZ2V0VVVJRCk7DQogICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiYm91bnR5LXN0YXR1cy1ub25lIiwgY29udGV4dCk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIENhbGN1bGF0ZSB0b3RhbCBib3VudHkgcG9vbCB3aXRoIG11bHRpcGxpZXJzDQogICAgICAgIGRvdWJsZSB0b3RhbFBvb2wgPSAwOw0KICAgICAgICBmb3IgKE1hcC5FbnRyeTxVVUlELCBJbnRlZ2VyPiBlbnRyeSA6IGJvdW50aWVzLmVudHJ5U2V0KCkpIHsNCiAgICAgICAgICAgIFVVSUQgc2V0dGVyVVVJRCA9IGVudHJ5LmdldEtleSgpOw0KICAgICAgICAgICAgaW50IGFtb3VudCA9IGVudHJ5LmdldFZhbHVlKCk7DQogICAgICAgICAgICBkb3VibGUgbXVsdGlwbGllciA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuZ2V0Qm91bnR5TXVsdGlwbGllcihzZXR0ZXJVVUlELCB0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgIHRvdGFsUG9vbCArPSBhbW91bnQgKiBtdWx0aXBsaWVyOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQXBwbHkgZnJlbnp5IGFuZCBib29zdCBtdWx0aXBsaWVycyBpZiBhY3RpdmUNCiAgICAgICAgZG91YmxlIGZyZW56eU11bHRpcGxpZXIgPSAxLjA7DQogICAgICAgIGRvdWJsZSBib29zdE11bHRpcGxpZXIgPSAxLjA7DQoNCiAgICAgICAgaWYgKHBsdWdpbi5nZXRGcmVuenkoKSAhPSBudWxsICYmIHBsdWdpbi5nZXRGcmVuenkoKS5pc0ZyZW56eUFjdGl2ZSgpKSB7DQogICAgICAgICAgICBmcmVuenlNdWx0aXBsaWVyID0gcGx1Z2luLmdldEZyZW56eSgpLmdldEZyZW56eU11bHRpcGxpZXIoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChwbHVnaW4uZ2V0Qm9vc3RlZEJvdW50eSgpICE9IG51bGwpIHsNCiAgICAgICAgICAgIFVVSUQgY3VycmVudEJvb3N0ZWQgPSBwbHVnaW4uZ2V0Qm9vc3RlZEJvdW50eSgpLmdldEN1cnJlbnRCb29zdGVkVGFyZ2V0KCk7DQogICAgICAgICAgICBpZiAoY3VycmVudEJvb3N0ZWQgIT0gbnVsbCAmJiBjdXJyZW50Qm9vc3RlZC5lcXVhbHModGFyZ2V0VVVJRCkpIHsNCiAgICAgICAgICAgICAgICBib29zdE11bHRpcGxpZXIgPSBwbHVnaW4uZ2V0Qm9vc3RlZEJvdW50eSgpLmdldEN1cnJlbnRCb29zdE11bHRpcGxpZXIodGFyZ2V0VVVJRCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICB0b3RhbFBvb2wgKj0gZnJlbnp5TXVsdGlwbGllciAqIGJvb3N0TXVsdGlwbGllcjsNCg0KICAgICAgICAvLyBHZXQgZWFybGllc3QgZXhwaXJhdGlvbiB0aW1lDQogICAgICAgIFN0cmluZyB0aW1lVW50aWxFeHBpcnkgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1zdGF0dXMtbm8tZXhwaXJhdGlvbiIsICJObyBleHBpcmF0aW9uIik7DQogICAgICAgIGxvbmcgY3VycmVudFRpbWUgPSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKTsNCiAgICAgICAgbG9uZyBlYXJsaWVzdEV4cGlyeSA9IExvbmcuTUFYX1ZBTFVFOw0KDQogICAgICAgIGZvciAoVVVJRCBzcG9uc29yVVVJRCA6IGJvdW50aWVzLmtleVNldCgpKSB7DQogICAgICAgICAgICBsb25nIHRpbWVzdGFtcCA9IHBsdWdpbi5nZXRCb3VudGllc0NvbmZpZygpLmdldExvbmcoImJvdW50aWVzLiIgKyB0YXJnZXRVVUlEICsgIi4iICsgc3BvbnNvclVVSUQgKyAiLmV4cGlyZV90aW1lIiwgLTEpOw0KICAgICAgICAgICAgaWYgKHRpbWVzdGFtcCA+IDAgJiYgdGltZXN0YW1wIDwgZWFybGllc3RFeHBpcnkpIHsNCiAgICAgICAgICAgICAgICBlYXJsaWVzdEV4cGlyeSA9IHRpbWVzdGFtcDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChlYXJsaWVzdEV4cGlyeSAhPSBMb25nLk1BWF9WQUxVRSkgew0KICAgICAgICAgICAgbG9uZyByZW1haW5pbmdNaWxsaXMgPSBlYXJsaWVzdEV4cGlyeSAtIGN1cnJlbnRUaW1lOw0KICAgICAgICAgICAgaWYgKHJlbWFpbmluZ01pbGxpcyA+IDApIHsNCiAgICAgICAgICAgICAgICBsb25nIGRheXMgPSByZW1haW5pbmdNaWxsaXMgLyAoMTAwMCAqIDYwICogNjAgKiAyNCk7DQogICAgICAgICAgICAgICAgcmVtYWluaW5nTWlsbGlzICU9ICgxMDAwICogNjAgKiA2MCAqIDI0KTsNCiAgICAgICAgICAgICAgICBsb25nIGhvdXJzID0gcmVtYWluaW5nTWlsbGlzIC8gKDEwMDAgKiA2MCAqIDYwKTsNCiAgICAgICAgICAgICAgICByZW1haW5pbmdNaWxsaXMgJT0gKDEwMDAgKiA2MCAqIDYwKTsNCiAgICAgICAgICAgICAgICBsb25nIG1pbnV0ZXMgPSByZW1haW5pbmdNaWxsaXMgLyAoMTAwMCAqIDYwKTsNCg0KICAgICAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBwYXJ0cyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgICAgIGlmIChkYXlzID4gMCkgcGFydHMuYWRkKGRheXMgKyAoZGF5cyA9PSAxID8gIiBkYXkiIDogIiBkYXlzIikpOw0KICAgICAgICAgICAgICAgIGlmIChob3VycyA+IDApIHBhcnRzLmFkZChob3VycyArIChob3VycyA9PSAxID8gIiBob3VyIiA6ICIgaG91cnMiKSk7DQogICAgICAgICAgICAgICAgaWYgKG1pbnV0ZXMgPiAwKSBwYXJ0cy5hZGQobWludXRlcyArIChtaW51dGVzID09IDEgPyAiIG1pbnV0ZSIgOiAiIG1pbnV0ZXMiKSk7DQogICAgICAgICAgICAgICAgdGltZVVudGlsRXhwaXJ5ID0gcGFydHMuaXNFbXB0eSgpID8gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktc3RhdHVzLWxlc3MtbWludXRlIiwgIjwgMSBtaW51dGUiKSA6IFN0cmluZy5qb2luKCIsICIsIHBhcnRzKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdGltZVVudGlsRXhwaXJ5ID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktc3RhdHVzLWV4cGlyZWQiLCAiRXhwaXJlZCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gR2V0IG51bWJlciBvZiBib3VudHkgaHVudGVycyAodW5pcXVlIHNldHRlcnMpDQogICAgICAgIGludCBodW50ZXJDb3VudCA9IGJvdW50aWVzLnNpemUoKTsNCg0KICAgICAgICAvLyBCdWlsZCBQbGFjZWhvbGRlckNvbnRleHQNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAudGFyZ2V0KHRhcmdldFVVSUQpDQogICAgICAgICAgICAgICAgLnBvb2wodG90YWxQb29sKQ0KICAgICAgICAgICAgICAgIC5odW50ZXJzKGh1bnRlckNvdW50KQ0KICAgICAgICAgICAgICAgIC5mcmVuenkoZnJlbnp5TXVsdGlwbGllcikNCiAgICAgICAgICAgICAgICAuYm9vc3QoYm9vc3RNdWx0aXBsaWVyKQ0KICAgICAgICAgICAgICAgIC5leHBpcnkodGltZVVudGlsRXhwaXJ5KTsNCg0KICAgICAgICAvLyBTZW5kIGNvbnNvbGlkYXRlZCBzdGF0dXMgbWVzc2FnZQ0KICAgICAgICBMaXN0PFN0cmluZz4gc3RhdHVzTWVzc2FnZXMgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmdMaXN0KCJib3VudHktc3RhdHVzIik7DQogICAgICAgIGlmIChzdGF0dXNNZXNzYWdlcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIHN0YXR1c01lc3NhZ2VzID0gQXJyYXlzLmFzTGlzdCgNCiAgICAgICAgICAgICAgICAgICAgIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIiwNCiAgICAgICAgICAgICAgICAgICAgIiAgICAgICAgICAgICAgICAgICAgJjQmbCZuQm91bnR5IFN0YXR1cyIsDQogICAgICAgICAgICAgICAgICAgICIgICAgICAgICAgICAgICAgICY0fCAmN1Nwb25zb3JzOiAmNCVzcG9uc29ycyUiLA0KICAgICAgICAgICAgICAgICAgICAiICAgICAgICAgICAgICAgICAmNHwgJjdUb3AgMyBTcG9uc29yczogJjQldG9wM19zcG9uc29yc19udW1iZXJlZCUiLA0KICAgICAgICAgICAgICAgICAgICAiICAgICAgICAgICAgICAgICAmNHwgJjdUb3AgNSBTcG9uc29yczogJjQldG9wNV9zcG9uc29yc19udW1iZXJlZCUiLA0KICAgICAgICAgICAgICAgICAgICAiICAgICAgICAgICAgICAgICAmNHwgJjdUb3AgMTAgU3BvbnNvcnM6ICY0JXRvcDEwX3Nwb25zb3JzX251bWJlcmVkJSIsDQogICAgICAgICAgICAgICAgICAgICIgICAgICAgICAgICAgICAgICAgJjR8ICY3UG9vbDogJjQkJXBvb2wlIiwNCiAgICAgICAgICAgICAgICAgICAgIiAgICAgICAgICAgICAgICAgICAgJjR8ICY3VGltZSB0aWwgRXhwaXJ5OiAmNCVleHBpcnklIiwNCiAgICAgICAgICAgICAgICAgICAgIiAgICAgICAgICAgICAgICAgICAgJjR8ICY3QmlnZ2VzdCBFbmVtaWVzIChUb3AgMyk6ICY0JXRvcDNfc3BvbnNvcnNfY29tbWFzJSIsDQogICAgICAgICAgICAgICAgICAgICIgICAgICAgICAgICAgICAgICAgICY0fCAmN0JpZ2dlc3QgRW5lbWllcyAoVG9wIDUpOiAmNCV0b3A1X3Nwb25zb3JzX2NvbW1hcyUiLA0KICAgICAgICAgICAgICAgICAgICAiICAgICAgICAgICAgICAgICAgICAmNHwgJjdCaWdnZXN0IEVuZW1pZXMgKFRvcCAxMCk6ICY0JXRvcDEwX3Nwb25zb3JzX2NvbW1hcyUiLA0KICAgICAgICAgICAgICAgICAgICAiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogICAgICAgICAgICApOw0KICAgICAgICB9DQoNCiAgICAgICAgTGlzdDxTdHJpbmc+IGZvcm1hdHRlZE1lc3NhZ2VzID0gUGxhY2Vob2xkZXJzLmFwcGx5KHN0YXR1c01lc3NhZ2VzLCBjb250ZXh0KTsNCiAgICAgICAgZm9yIChTdHJpbmcgbWVzc2FnZSA6IGZvcm1hdHRlZE1lc3NhZ2VzKSB7DQogICAgICAgICAgICBCYXNlQ29tcG9uZW50W10gY29tcG9uZW50cyA9IFRleHRDb21wb25lbnQuZnJvbUxlZ2FjeVRleHQoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKSk7DQogICAgICAgICAgICBwbGF5ZXIuc3BpZ290KCkuc2VuZE1lc3NhZ2UoY29tcG9uZW50cyk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBBZGQgYSBibGFuayBsaW5lIGZvciBzZXBhcmF0aW9uDQogICAgICAgIHBsYXllci5zZW5kTWVzc2FnZSgiIik7DQoNCiAgICAgICAgLy8gU2VuZCBjbGlja2FibGUgcHJldmlldyBsaW5lDQogICAgICAgIFN0cmluZyBjbGlja2FibGVUZXh0ID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktc3RhdHVzLWNsaWNrYWJsZSIsICImN1tDbGljayB0byB2aWV3IHByZXZpZXddIik7DQogICAgICAgIGNsaWNrYWJsZVRleHQgPSBQbGFjZWhvbGRlcnMuYXBwbHkoY2xpY2thYmxlVGV4dCwgY29udGV4dCk7DQogICAgICAgIFRleHRDb21wb25lbnQgY2xpY2thYmxlID0gbmV3IFRleHRDb21wb25lbnQoVGV4dENvbXBvbmVudC5mcm9tTGVnYWN5VGV4dChDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGNsaWNrYWJsZVRleHQpKSk7DQogICAgICAgIGNsaWNrYWJsZS5zZXRDbGlja0V2ZW50KG5ldyBDbGlja0V2ZW50KENsaWNrRXZlbnQuQWN0aW9uLlJVTl9DT01NQU5ELCAiL2JvdW50eSBwcmV2aWV3ICIgKyB0YXJnZXROYW1lKSk7DQogICAgICAgIHBsYXllci5zcGlnb3QoKS5zZW5kTWVzc2FnZShjbGlja2FibGUpOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEhhbmRsZXMgdGhlIC9ib3VudHkgZ2l2ZSBjb21tYW5kIC8vIG5vdGU6IEdpdmVzIGEgY3VzdG9tIGl0ZW0gdG8gYSBwbGF5ZXIgd2l0aCB2YWxpZGF0aW9uDQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIGhhbmRsZUdpdmVDb21tYW5kKENvbW1hbmRTZW5kZXIgc2VuZGVyLCBTdHJpbmdbXSBhcmdzKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnID0gcGx1Z2luLmdldE1lc3NhZ2VzQ29uZmlnKCk7DQoNCiAgICAgICAgLy8gQ2hlY2sgcGVybWlzc2lvbg0KICAgICAgICBpZiAoIXNlbmRlci5oYXNQZXJtaXNzaW9uKCJib3VudGllc3BsdXMuYm91bnR5LmdpdmUiKSkgew0KICAgICAgICAgICAgU3RyaW5nIG5vUGVybWlzc2lvbiA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiZ2l2ZS1uby1wZXJtaXNzaW9uIiwgIiZjWW91IGRvbid0IGhhdmUgcGVybWlzc2lvbiB0byB1c2UgdGhpcyBjb21tYW5kLiIpOw0KICAgICAgICAgICAgc2VuZGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbm9QZXJtaXNzaW9uKSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFVzYWdlOiAvYm91bnR5IGdpdmUgPHBsYXllcj4gPGl0ZW1fbmFtZT4gPGFtb3VudD4gWzxtdWx0aXBsaWVyPiA8dGltZT4gPGZhaWx1cmU+XQ0KICAgICAgICBpZiAoYXJncy5sZW5ndGggPCA0KSB7DQogICAgICAgICAgICBTdHJpbmcgZ2l2ZVVzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJnaXZlLXVzYWdlIiwgIiZjVXNhZ2U6IC9ib3VudHkgZ2l2ZSA8cGxheWVyPiA8aXRlbV9uYW1lPiA8YW1vdW50PiBbPG11bHRpcGxpZXI+IDx0aW1lPiA8ZmFpbHVyZT5dIik7DQogICAgICAgICAgICBTdHJpbmcgYXZhaWxhYmxlSXRlbXMgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImdpdmUtYXZhaWxhYmxlLWl0ZW1zIiwgIiZlQXZhaWxhYmxlIGl0ZW1zOiB0cmFja2VyLCBqYW1tZXIsIHVhdiwgbWFudWFsLWJvb3N0LCBtYW51YWwtZnJlbnp5LCBjaHJvbm9zLXNoYXJkLCByZXZlcnNlLWJvdW50eSIpOw0KICAgICAgICAgICAgc2VuZGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgZ2l2ZVVzYWdlKSk7DQogICAgICAgICAgICBzZW5kZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBhdmFpbGFibGVJdGVtcykpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgcGxheWVyTmFtZSA9IGFyZ3NbMV07DQogICAgICAgIFN0cmluZyBpdGVtTmFtZSA9IGFyZ3NbMl0udG9Mb3dlckNhc2UoKTsNCiAgICAgICAgaW50IGFtb3VudDsNCg0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgYW1vdW50ID0gSW50ZWdlci5wYXJzZUludChhcmdzWzNdKTsNCiAgICAgICAgICAgIGlmIChhbW91bnQgPD0gMCkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBpbnZhbGlkQW1vdW50ID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJnaXZlLWludmFsaWQtYW1vdW50IiwgIiZjQW1vdW50IG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIuIik7DQogICAgICAgICAgICAgICAgc2VuZGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgaW52YWxpZEFtb3VudCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgU3RyaW5nIGludmFsaWRBbW91bnQgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImdpdmUtaW52YWxpZC1hbW91bnQtZm9ybWF0IiwgIiZjSW52YWxpZCBhbW91bnQuIFBsZWFzZSBlbnRlciBhIHZhbGlkIG51bWJlci4iKTsNCiAgICAgICAgICAgIHNlbmRlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGludmFsaWRBbW91bnQpKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgUGxheWVyIHRhcmdldFBsYXllciA9IEJ1a2tpdC5nZXRQbGF5ZXIocGxheWVyTmFtZSk7DQogICAgICAgIGlmICh0YXJnZXRQbGF5ZXIgPT0gbnVsbCkgew0KICAgICAgICAgICAgU3RyaW5nIHBsYXllck5vdEZvdW5kID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJnaXZlLXBsYXllci1ub3QtZm91bmQiLCAiJmNQbGF5ZXIgJyVwbGF5ZXIlJyBub3QgZm91bmQgb3Igbm90IG9ubGluZS4iKTsNCiAgICAgICAgICAgIHBsYXllck5vdEZvdW5kID0gcGxheWVyTm90Rm91bmQucmVwbGFjZSgiJXBsYXllciUiLCBwbGF5ZXJOYW1lKTsNCiAgICAgICAgICAgIHNlbmRlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHBsYXllck5vdEZvdW5kKSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIEl0ZW1TdGFjayBpdGVtVG9HaXZlID0gbnVsbDsNCg0KICAgICAgICAvLyBDcmVhdGUgdGhlIGFwcHJvcHJpYXRlIGl0ZW0gYmFzZWQgb24gaXRlbSBuYW1lDQogICAgICAgIHN3aXRjaCAoaXRlbU5hbWUpIHsNCiAgICAgICAgICAgIGNhc2UgInRyYWNrZXIiOg0KICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uZ2V0VHJhY2tlcigpICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgaW50IG1heFVzZXMgPSBwbHVnaW4uZ2V0SXRlbXNDb25maWcoKS5nZXRJbnQoInRyYWNrZXIubWF4LXVzZXMiLCA1KTsNCiAgICAgICAgICAgICAgICAgICAgaXRlbVRvR2l2ZSA9IHBsdWdpbi5nZXRUcmFja2VyKCkuY3JlYXRlVHJhY2tlckl0ZW0obWF4VXNlcyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAiamFtbWVyIjoNCiAgICAgICAgICAgICAgICBpZiAocGx1Z2luLmdldEphbW1lcigpICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgaXRlbVRvR2l2ZSA9IHBsdWdpbi5nZXRKYW1tZXIoKS5jcmVhdGVKYW1tZXJJdGVtKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAidWF2IjoNCiAgICAgICAgICAgICAgICBpZiAocGx1Z2luLmdldFVBVigpICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgaW50IG1heFVzZXMgPSBwbHVnaW4uZ2V0SXRlbXNDb25maWcoKS5nZXRJbnQoInVhdi5tYXgtdXNlcyIsIDMpOw0KICAgICAgICAgICAgICAgICAgICBpdGVtVG9HaXZlID0gcGx1Z2luLmdldFVBVigpLmNyZWF0ZVVBVkl0ZW0obWF4VXNlcyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAibWFudWFsLWJvb3N0IjoNCiAgICAgICAgICAgICAgICBpZiAocGx1Z2luLmdldE1hbnVhbEJvb3N0KCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBpdGVtVG9HaXZlID0gcGx1Z2luLmdldE1hbnVhbEJvb3N0KCkuY3JlYXRlTWFudWFsQm9vc3RJdGVtKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAibWFudWFsLWZyZW56eSI6DQogICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5nZXRNYW51YWxGcmVuenkoKSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBhcmUgcHJvdmlkZWQgZm9yIG1hbnVhbCBmcmVuenkNCiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID49IDcpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIG11bHRpcGxpZXIgPSBEb3VibGUucGFyc2VEb3VibGUoYXJnc1s0XSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IHRpbWUgPSBJbnRlZ2VyLnBhcnNlSW50KGFyZ3NbNV0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdWJsZSBmYWlsdXJlID0gRG91YmxlLnBhcnNlRG91YmxlKGFyZ3NbNl0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1Ub0dpdmUgPSBwbHVnaW4uZ2V0TWFudWFsRnJlbnp5KCkuY3JlYXRlTWFudWFsRnJlbnp5SXRlbShtdWx0aXBsaWVyLCB0aW1lLCBmYWlsdXJlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGludmFsaWRQYXJhbXMgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImdpdmUtaW52YWxpZC1mcmVuenktcGFyYW1zIiwgIiZjSW52YWxpZCBwYXJhbWV0ZXJzIGZvciBtYW51YWwtZnJlbnp5LiBVc2FnZTogPG11bHRpcGxpZXI+IDx0aW1lPiA8ZmFpbHVyZT4iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBpbnZhbGlkUGFyYW1zKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpdGVtVG9HaXZlID0gcGx1Z2luLmdldE1hbnVhbEZyZW56eSgpLmNyZWF0ZU1hbnVhbEZyZW56eUl0ZW0oKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgImNocm9ub3Mtc2hhcmQiOg0KICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uZ2V0RGVjcmVhc2VUaW1lKCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBpdGVtVG9HaXZlID0gcGx1Z2luLmdldERlY3JlYXNlVGltZSgpLmNyZWF0ZUNocm9ub3NTaGFyZEl0ZW0oKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBjYXNlICJyZXZlcnNlLWJvdW50eSI6DQogICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5nZXRSZXZlcnNlQm91bnR5KCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBpdGVtVG9HaXZlID0gcGx1Z2luLmdldFJldmVyc2VCb3VudHkoKS5jcmVhdGVSZXZlcnNlQm91bnR5SXRlbSgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgU3RyaW5nIHVua25vd25JdGVtID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJnaXZlLXVua25vd24taXRlbSIsICImY1Vua25vd24gaXRlbTogJWl0ZW0lIik7DQogICAgICAgICAgICAgICAgU3RyaW5nIGF2YWlsYWJsZUl0ZW1zID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJnaXZlLWF2YWlsYWJsZS1pdGVtcyIsICImZUF2YWlsYWJsZSBpdGVtczogdHJhY2tlciwgamFtbWVyLCB1YXYsIG1hbnVhbC1ib29zdCwgbWFudWFsLWZyZW56eSwgY2hyb25vcy1zaGFyZCwgcmV2ZXJzZS1ib3VudHkiKTsNCiAgICAgICAgICAgICAgICB1bmtub3duSXRlbSA9IHVua25vd25JdGVtLnJlcGxhY2UoIiVpdGVtJSIsIGl0ZW1OYW1lKTsNCiAgICAgICAgICAgICAgICBzZW5kZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCB1bmtub3duSXRlbSkpOw0KICAgICAgICAgICAgICAgIHNlbmRlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGF2YWlsYWJsZUl0ZW1zKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoaXRlbVRvR2l2ZSA9PSBudWxsKSB7DQogICAgICAgICAgICBTdHJpbmcgZmFpbGVkQ3JlYXRlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJnaXZlLWZhaWxlZC1jcmVhdGUiLCAiJmNGYWlsZWQgdG8gY3JlYXRlIGl0ZW06ICVpdGVtJS4gVGhlIGl0ZW0gc3lzdGVtIG1heSBub3QgYmUgaW5pdGlhbGl6ZWQuIik7DQogICAgICAgICAgICBmYWlsZWRDcmVhdGUgPSBmYWlsZWRDcmVhdGUucmVwbGFjZSgiJWl0ZW0lIiwgaXRlbU5hbWUpOw0KICAgICAgICAgICAgc2VuZGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgZmFpbGVkQ3JlYXRlKSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFNldCB0aGUgYW1vdW50DQogICAgICAgIGl0ZW1Ub0dpdmUuc2V0QW1vdW50KGFtb3VudCk7DQoNCiAgICAgICAgLy8gR2l2ZSB0aGUgaXRlbSB0byB0aGUgcGxheWVyDQogICAgICAgIEhhc2hNYXA8SW50ZWdlciwgSXRlbVN0YWNrPiBvdmVyZmxvdyA9IHRhcmdldFBsYXllci5nZXRJbnZlbnRvcnkoKS5hZGRJdGVtKGl0ZW1Ub0dpdmUpOw0KDQogICAgICAgIGlmICghb3ZlcmZsb3cuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBTdHJpbmcgaW52ZW50b3J5RnVsbCA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiZ2l2ZS1pbnZlbnRvcnktZnVsbCIsICImZVBsYXllcidzIGludmVudG9yeSBpcyBmdWxsLiBTb21lIGl0ZW1zIHdlcmUgZHJvcHBlZCBvbiB0aGUgZ3JvdW5kLiIpOw0KICAgICAgICAgICAgc2VuZGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgaW52ZW50b3J5RnVsbCkpOw0KICAgICAgICAgICAgZm9yIChJdGVtU3RhY2sgb3ZlcmZsb3dJdGVtIDogb3ZlcmZsb3cudmFsdWVzKCkpIHsNCiAgICAgICAgICAgICAgICB0YXJnZXRQbGF5ZXIuZ2V0V29ybGQoKS5kcm9wSXRlbU5hdHVyYWxseSh0YXJnZXRQbGF5ZXIuZ2V0TG9jYXRpb24oKSwgb3ZlcmZsb3dJdGVtKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFNlbmQgc3VjY2VzcyBtZXNzYWdlcw0KICAgICAgICBTdHJpbmcgZ2l2ZVN1Y2Nlc3MgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImdpdmUtc3VjY2VzcyIsICImYVN1Y2Nlc3NmdWxseSBnYXZlICVhbW91bnQleCAlaXRlbSUgdG8gJXBsYXllciUiKTsNCiAgICAgICAgZ2l2ZVN1Y2Nlc3MgPSBnaXZlU3VjY2Vzcy5yZXBsYWNlKCIlYW1vdW50JSIsIFN0cmluZy52YWx1ZU9mKGFtb3VudCkpDQogICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVpdGVtJSIsIGl0ZW1OYW1lKQ0KICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlcGxheWVyJSIsIHRhcmdldFBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICBzZW5kZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBnaXZlU3VjY2VzcykpOw0KDQogICAgICAgIFN0cmluZyBnaXZlUmVjZWl2ZWQgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImdpdmUtcmVjZWl2ZWQiLCAiJmFZb3UgcmVjZWl2ZWQgJWFtb3VudCV4ICVpdGVtJSBmcm9tICVzZW5kZXIlIik7DQogICAgICAgIGdpdmVSZWNlaXZlZCA9IGdpdmVSZWNlaXZlZC5yZXBsYWNlKCIlYW1vdW50JSIsIFN0cmluZy52YWx1ZU9mKGFtb3VudCkpDQogICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVpdGVtJSIsIGl0ZW1OYW1lKQ0KICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlc2VuZGVyJSIsIHNlbmRlci5nZXROYW1lKCkpOw0KICAgICAgICB0YXJnZXRQbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBnaXZlUmVjZWl2ZWQpKTsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBwcml2YXRlIGJvb2xlYW4gaGFuZGxlRnJlbnp5Q29tbWFuZChDb21tYW5kU2VuZGVyIHNlbmRlciwgU3RyaW5nW10gYXJncywgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcpIHsNCiAgICAgICAgLy8gQ2hlY2sgcGVybWlzc2lvbg0KICAgICAgICBpZiAoIXNlbmRlci5oYXNQZXJtaXNzaW9uKCJib3VudGllc3BsdXMuYWRtaW4uZnJlbnp5IikpIHsNCiAgICAgICAgICAgIHNlbmRlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsDQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygibm8tcGVybWlzc2lvbiIsICImY1lvdSBkb24ndCBoYXZlIHBlcm1pc3Npb24gdG8gdXNlIHRoaXMgY29tbWFuZCEiKSkpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDaGVjayBpZiBmcmVuenkgc3lzdGVtIGlzIGF2YWlsYWJsZQ0KICAgICAgICBpZiAocGx1Z2luLmdldEZyZW56eSgpID09IG51bGwpIHsNCiAgICAgICAgICAgIHNlbmRlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuUkVEICsgIkZyZW56eSBzeXN0ZW0gaXMgbm90IGF2YWlsYWJsZSEiKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gVmFsaWRhdGUgYXJndW1lbnRzDQogICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPSAzKSB7DQogICAgICAgICAgICBzZW5kZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLlJFRCArICJVc2FnZTogL2JvdW50eSBmcmVuenkgPHRpbWVfaW5fc2Vjb25kcz4gPG11bHRpcGxpZXI+Iik7DQogICAgICAgICAgICBzZW5kZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLkdSQVkgKyAiRXhhbXBsZTogL2JvdW50eSBmcmVuenkgNjAgMi41Iik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGludCBkdXJhdGlvbjsNCiAgICAgICAgZG91YmxlIG11bHRpcGxpZXI7DQoNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGR1cmF0aW9uID0gSW50ZWdlci5wYXJzZUludChhcmdzWzFdKTsNCiAgICAgICAgICAgIGlmIChkdXJhdGlvbiA8PSAwIHx8IGR1cmF0aW9uID4gMzYwMCkgeyAvLyBNYXggMSBob3VyDQogICAgICAgICAgICAgICAgc2VuZGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci5SRUQgKyAiRHVyYXRpb24gbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDM2MDAgc2Vjb25kcyEiKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIHNlbmRlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuUkVEICsgIkludmFsaWQgZHVyYXRpb24hIFBsZWFzZSBlbnRlciBhIHZhbGlkIG51bWJlci4iKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIG11bHRpcGxpZXIgPSBEb3VibGUucGFyc2VEb3VibGUoYXJnc1syXSk7DQogICAgICAgICAgICBpZiAobXVsdGlwbGllciA8PSAxLjAgfHwgbXVsdGlwbGllciA+IDEwLjApIHsgLy8gUmVhc29uYWJsZSBsaW1pdHMNCiAgICAgICAgICAgICAgICBzZW5kZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLlJFRCArICJNdWx0aXBsaWVyIG11c3QgYmUgYmV0d2VlbiAxLjAgYW5kIDEwLjAhIik7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICBzZW5kZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLlJFRCArICJJbnZhbGlkIG11bHRpcGxpZXIhIFBsZWFzZSBlbnRlciBhIHZhbGlkIG51bWJlci4iKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ2hlY2sgaWYgZnJlbnp5IGlzIGFscmVhZHkgYWN0aXZlDQogICAgICAgIGlmIChwbHVnaW4uZ2V0RnJlbnp5KCkuaXNGcmVuenlBY3RpdmUoKSkgew0KICAgICAgICAgICAgc2VuZGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci5SRUQgKyAiRnJlbnp5IG1vZGUgaXMgYWxyZWFkeSBhY3RpdmUhIFBsZWFzZSB3YWl0IGZvciBpdCB0byBlbmQuIik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBib3VudGllcyB0byBib29zdA0KICAgICAgICBpZiAocGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5saXN0QWxsQm91bnRpZXMoKS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIHNlbmRlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuUkVEICsgIk5vIGJvdW50aWVzIGF2YWlsYWJsZSB0byBib29zdCEiKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgYXJlIGVub3VnaCBvbmxpbmUgcGxheWVycw0KICAgICAgICBpZiAoQnVra2l0LmdldE9ubGluZVBsYXllcnMoKS5zaXplKCkgPCAyKSB7DQogICAgICAgICAgICBzZW5kZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLlJFRCArICJBdCBsZWFzdCAyIHBsYXllcnMgbXVzdCBiZSBvbmxpbmUgdG8gc3RhcnQgZnJlbnp5IG1vZGUhIik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEFjdGl2YXRlIG1hbnVhbCBmcmVuenkNCiAgICAgICAgYm9vbGVhbiBzdWNjZXNzID0gcGx1Z2luLmdldEZyZW56eSgpLmFjdGl2YXRlTWFudWFsRnJlbnp5KG11bHRpcGxpZXIsIGR1cmF0aW9uKTsNCg0KICAgICAgICBpZiAoc3VjY2Vzcykgew0KICAgICAgICAgICAgLy8gU2VuZCBjb25maXJtYXRpb24gdG8gYWRtaW4NCiAgICAgICAgICAgIHNlbmRlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuR1JFRU4gKyAiRnJlbnp5IG1vZGUgYWN0aXZhdGVkIG1hbnVhbGx5ISIpOw0KICAgICAgICAgICAgc2VuZGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci5HUkFZICsgIkR1cmF0aW9uOiAiICsgZHVyYXRpb24gKyAiIHNlY29uZHMiKTsNCiAgICAgICAgICAgIHNlbmRlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuR1JBWSArICJNdWx0aXBsaWVyOiAiICsgU3RyaW5nLmZvcm1hdCgiJS4xZngiLCBtdWx0aXBsaWVyKSk7DQoNCiAgICAgICAgICAgIC8vIExvZyB0aGUgYWRtaW4gYWN0aW9uDQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbyhzZW5kZXIuZ2V0TmFtZSgpICsgIiBtYW51YWxseSBhY3RpdmF0ZWQgZnJlbnp5IG1vZGUgKER1cmF0aW9uOiAiICsgZHVyYXRpb24gKyAicywgTXVsdGlwbGllcjogIiArIG11bHRpcGxpZXIgKyAieCkiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHNlbmRlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuUkVEICsgIkZhaWxlZCB0byBhY3RpdmF0ZSBmcmVuenkgbW9kZS4gUGxlYXNlIGNoZWNrIHRoZSBjb25zb2xlIGZvciBlcnJvcnMuIik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCg0KICAgIC8qKg0KICAgICAqIEhhbmRsZXMgdGhlIC9ib3VudHkgc2V0IGNvbW1hbmQNCiAgICAgKiAvLyBub3RlOiBQcm9jZXNzZXMgYm91bnR5IHBsYWNlbWVudCB3aXRoIHZhbGlkYXRpb24gZm9yIGFtb3VudCwgdGltZSwgYW5kIHBlcm1pc3Npb25zDQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIGhhbmRsZVNldENvbW1hbmQoUGxheWVyIHBsYXllciwgU3RyaW5nW10gYXJncywgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnLCBGaWxlQ29uZmlndXJhdGlvbiBtZXNzYWdlc0NvbmZpZykgew0KICAgICAgICBpZiAoYXJncy5sZW5ndGggPCAzKSB7DQogICAgICAgICAgICBTdHJpbmcgdXNhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS11c2FnZSIsICIlcHJlZml4JSZlVXNhZ2U6IC9ib3VudHkgc2V0IDxwbGF5ZXI+IDxhbW91bnQ+IFs8dGltZT4gPE1pbnV0ZXN8SG91cnN8RGF5cz5dIik7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCB1c2FnZS5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiY0JmxCb3VudGllcyAmNyZswrsgJjciKSkpKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgU3RyaW5nIHRhcmdldE5hbWUgPSBhcmdzWzFdOw0KICAgICAgICBQbGF5ZXIgdGFyZ2V0UGxheWVyID0gQnVra2l0LmdldFBsYXllckV4YWN0KHRhcmdldE5hbWUpOw0KICAgICAgICBPZmZsaW5lUGxheWVyIHRhcmdldDsNCiAgICAgICAgaWYgKHRhcmdldFBsYXllciAhPSBudWxsKSB7DQogICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXRQbGF5ZXI7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0YXJnZXQgPSBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcih0YXJnZXROYW1lKTsNCiAgICAgICAgICAgIGlmICghY29uZmlnLmdldEJvb2xlYW4oImFsbG93LW9mZmxpbmUtcGxheWVycyIsIHRydWUpIHx8ICF0YXJnZXQuaGFzUGxheWVkQmVmb3JlKCkpIHsNCiAgICAgICAgICAgICAgICBTdHJpbmcgbm90Rm91bmQgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1wbGF5ZXItbm90LWZvdW5kIiwgIiVwcmVmaXglJmNQbGF5ZXIgJmUldGFyZ2V0JSZjIG5vdCBmb3VuZC4iKTsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBub3RGb3VuZC5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKS5yZXBsYWNlKCIldGFyZ2V0JSIsIHRhcmdldE5hbWUpKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAodGFyZ2V0LmdldFVuaXF1ZUlkKCkuZXF1YWxzKHBsYXllci5nZXRVbmlxdWVJZCgpKSkgew0KICAgICAgICAgICAgU3RyaW5nIHNlbGZCb3VudHkgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1zZXQtc2VsZiIsICIlcHJlZml4JSZjWW91IGNhbm5vdCBwbGFjZSBhIGJvdW50eSBvbiB5b3Vyc2VsZi4iKTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHNlbGZCb3VudHkucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICIiKSkpKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ2hlY2sgaWYgcGxheWVycyBhcmUgaW4gdGhlIHNhbWUgZ3JvdXANCiAgICAgICAgQm91bnR5VGVhbUNoZWNrIHRlYW1DaGVjayA9IG5ldyBCb3VudHlUZWFtQ2hlY2socGx1Z2luKTsNCiAgICAgICAgaWYgKHRlYW1DaGVjay5hcmVQbGF5ZXJzSW5TYW1lR3JvdXAocGxheWVyLCB0YXJnZXQpKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gRXJyb3IgbWVzc2FnZSBzZW50IGJ5IEJvdW50eVRlYW1DaGVjaw0KICAgICAgICB9DQoNCiAgICAgICAgYm9vbGVhbiByZXN0cmljdFNhbWVJUCA9IGNvbmZpZy5nZXRCb29sZWFuKCJyZXN0cmljdC1zYW1lLWlwLWJvdW50aWVzIiwgdHJ1ZSk7DQogICAgICAgIGlmIChyZXN0cmljdFNhbWVJUCAmJiB0YXJnZXQuaXNPbmxpbmUoKSkgew0KICAgICAgICAgICAgU3RyaW5nIHNldHRlcklQID0gcGxheWVyLmdldEFkZHJlc3MoKS5nZXRBZGRyZXNzKCkuZ2V0SG9zdEFkZHJlc3MoKTsNCiAgICAgICAgICAgIFN0cmluZyB0YXJnZXRJUCA9IHRhcmdldFBsYXllci5nZXRBZGRyZXNzKCkuZ2V0QWRkcmVzcygpLmdldEhvc3RBZGRyZXNzKCk7DQogICAgICAgICAgICBpZiAoc2V0dGVySVAuZXF1YWxzKHRhcmdldElQKSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBzYW1lSVAgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1zYW1lLWlwIiwgIiVwcmVmaXglJmNZb3UgY2Fubm90IHBsYWNlIGEgYm91bnR5IG9uIGEgcGxheWVyIHdpdGggdGhlIHNhbWUgSVAgYWRkcmVzcy4iKTsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBzYW1lSVAucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICIiKSkpKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGRvdWJsZSBhbW91bnQ7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBhbW91bnQgPSBEb3VibGUucGFyc2VEb3VibGUoYXJnc1syXSk7DQogICAgICAgICAgICBpZiAoYW1vdW50IDw9IDApIHsNCiAgICAgICAgICAgICAgICBTdHJpbmcgaW52YWxpZEFtb3VudCA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LWludmFsaWQtYW1vdW50IiwgIiVwcmVmaXglJmNJbnZhbGlkIGFtb3VudDogJmUlYW1vdW50JSZjISBQbGVhc2UgZW50ZXIgYSBwb3NpdGl2ZSBudW1iZXIuIik7DQogICAgICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgaW52YWxpZEFtb3VudC5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKS5yZXBsYWNlKCIlYW1vdW50JSIsIGFyZ3NbMl0pKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkb3VibGUgbWluQm91bnR5QW1vdW50ID0gY29uZmlnLmdldERvdWJsZSgibW9uZXkubWluLWJvdW50eS1hbW91bnQiLCAxMDAuMCk7DQogICAgICAgICAgICBkb3VibGUgbWF4Qm91bnR5QW1vdW50ID0gY29uZmlnLmdldERvdWJsZSgibW9uZXkubWF4LWJvdW50eS1hbW91bnQiLCAxMDAwMDAwLjApOw0KICAgICAgICAgICAgYm9vbGVhbiBhbGxvd1plcm9Eb2xsYXJCb3VudGllcyA9IGNvbmZpZy5nZXRCb29sZWFuKCJtb25leS5hbGxvdy16ZXJvLWRvbGxhci1ib3VudGllcyIsIGZhbHNlKTsNCiAgICAgICAgICAgIGlmICghYWxsb3daZXJvRG9sbGFyQm91bnRpZXMgJiYgYW1vdW50IDwgbWluQm91bnR5QW1vdW50KSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIGludmFsaWRBbW91bnQgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1pbnZhbGlkLWFtb3VudCIsICIlcHJlZml4JSZjQW1vdW50IG11c3QgYmUgYXQgbGVhc3QgJCVib3VudGllc3BsdXNfbWluX2Ftb3VudCUhIik7DQogICAgICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcikubW9uZXlWYWx1ZShtaW5Cb3VudHlBbW91bnQpOw0KICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkoaW52YWxpZEFtb3VudC5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKSwgY29udGV4dCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKGFtb3VudCA+IG1heEJvdW50eUFtb3VudCkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBpbnZhbGlkQW1vdW50ID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktaW52YWxpZC1hbW91bnQiLCAiJXByZWZpeCUmY0Ftb3VudCBjYW5ub3QgZXhjZWVkICQlYm91bnRpZXNwbHVzX21heF9hbW91bnQlISIpOw0KICAgICAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpLnBsYXllcihwbGF5ZXIpLm1vbmV5VmFsdWUobWF4Qm91bnR5QW1vdW50KTsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KGludmFsaWRBbW91bnQucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICIiKSksIGNvbnRleHQpKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIFN0cmluZyBpbnZhbGlkRm9ybWF0ID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktaW52YWxpZC1hbW91bnQtZm9ybWF0IiwgIiVwcmVmaXglJmNJbnZhbGlkIGFtb3VudCBmb3JtYXQhIFBsZWFzZSBlbnRlciBhIG51bWJlci4iKTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGludmFsaWRGb3JtYXQucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICIiKSkpKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgbG9uZyBleHBpcmVUaW1lID0gLTE7DQogICAgICAgIGJvb2xlYW4gYWxsb3dUaW1lID0gY29uZmlnLmdldEJvb2xlYW4oInRpbWUuYWxsb3ctdGltZSIsIGZhbHNlKTsNCiAgICAgICAgYm9vbGVhbiByZXF1aXJlVGltZSA9IGNvbmZpZy5nZXRCb29sZWFuKCJ0aW1lLnJlcXVpcmUtdGltZSIsIGZhbHNlKTsNCiAgICAgICAgaW50IG1pbkJvdW50eVRpbWUgPSBjb25maWcuZ2V0SW50KCJ0aW1lLm1pbi1ib3VudHktdGltZSIsIDM2MDApOw0KICAgICAgICBpbnQgbWF4Qm91bnR5VGltZSA9IGNvbmZpZy5nZXRJbnQoInRpbWUubWF4LWJvdW50eS10aW1lIiwgODY0MDApOw0KICAgICAgICBpZiAoYWxsb3dUaW1lICYmIGFyZ3MubGVuZ3RoID09IDUpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgbG9uZyB0aW1lVmFsdWUgPSBMb25nLnBhcnNlTG9uZyhhcmdzWzNdKTsNCiAgICAgICAgICAgICAgICBpZiAodGltZVZhbHVlIDw9IDApIHsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGludmFsaWRUaW1lID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktaW52YWxpZC10aW1lIiwgIiVwcmVmaXglJmNJbnZhbGlkIHRpbWU6ICZlJXRpbWUlJmMhIFBsZWFzZSBlbnRlciBhIHBvc2l0aXZlIG51bWJlci4iKTsNCiAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgaW52YWxpZFRpbWUucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICIiKSkucmVwbGFjZSgiJXRpbWUlIiwgYXJnc1szXSkpKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIFN0cmluZyB1bml0ID0gYXJnc1s0XS50b0xvd2VyQ2FzZSgpOw0KICAgICAgICAgICAgICAgIGxvbmcgbWludXRlczsNCiAgICAgICAgICAgICAgICBzd2l0Y2ggKHVuaXQpIHsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAibSI6DQogICAgICAgICAgICAgICAgICAgIGNhc2UgIm1pbnV0ZXMiOg0KICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlcyA9IHRpbWVWYWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICBjYXNlICJoIjoNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiaG91cnMiOg0KICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlcyA9IHRpbWVWYWx1ZSAqIDYwOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgImQiOg0KICAgICAgICAgICAgICAgICAgICBjYXNlICJkYXlzIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSB0aW1lVmFsdWUgKiA2MCAqIDI0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcgaW52YWxpZFVuaXQgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1pbnZhbGlkLXVuaXQiLCAiJXByZWZpeCUmY0ludmFsaWQgdW5pdDogJmUldW5pdCUmYyEgVXNlIE1pbnV0ZXMsIEhvdXJzLCBvciBEYXlzLiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgaW52YWxpZFVuaXQucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICIiKSkucmVwbGFjZSgiJXVuaXQlIiwgdW5pdCkpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAobWludXRlcyA8IG1pbkJvdW50eVRpbWUpIHsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGludmFsaWRUaW1lID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktaW52YWxpZC10aW1lIiwgIiVwcmVmaXglJmNUaW1lIG11c3QgYmUgYXQgbGVhc3QgJWJvdW50aWVzcGx1c19taW5fdGltZSUhIik7DQogICAgICAgICAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpLnBsYXllcihwbGF5ZXIpLnRpbWVWYWx1ZShUaW1lRm9ybWF0dGVyLmZvcm1hdE1pbnV0ZXNUb1JlYWRhYmxlKG1pbkJvdW50eVRpbWUsIGZhbHNlKSk7DQogICAgICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkoaW52YWxpZFRpbWUucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICIiKSksIGNvbnRleHQpKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChtaW51dGVzID4gbWF4Qm91bnR5VGltZSkgew0KICAgICAgICAgICAgICAgICAgICBTdHJpbmcgaW52YWxpZFRpbWUgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1pbnZhbGlkLXRpbWUiLCAiJXByZWZpeCUmY1RpbWUgY2Fubm90IGV4Y2VlZCAlYm91bnRpZXNwbHVzX21heF90aW1lJSEiKTsNCiAgICAgICAgICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcikudGltZVZhbHVlKFRpbWVGb3JtYXR0ZXIuZm9ybWF0TWludXRlc1RvUmVhZGFibGUobWF4Qm91bnR5VGltZSwgZmFsc2UpKTsNCiAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKFBsYWNlaG9sZGVycy5hcHBseShpbnZhbGlkVGltZS5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKSwgY29udGV4dCkpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZXhwaXJlVGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpICsgbWludXRlcyAqIDYwICogMTAwMDsNCiAgICAgICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIGludmFsaWRUaW1lID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktaW52YWxpZC10aW1lIiwgIiVwcmVmaXglJmNJbnZhbGlkIHRpbWU6ICZlJXRpbWUlJmMhIFBsZWFzZSBlbnRlciBhIHBvc2l0aXZlIG51bWJlci4iKTsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBpbnZhbGlkVGltZS5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKS5yZXBsYWNlKCIldGltZSUiLCBhcmdzWzNdKSkpOw0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2UgaWYgKHJlcXVpcmVUaW1lKSB7DQogICAgICAgICAgICBTdHJpbmcgdGltZVJlcXVpcmVkID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktdGltZS1yZXF1aXJlZCIsICIlcHJlZml4JSZjQSB0aW1lIGR1cmF0aW9uIGlzIHJlcXVpcmVkIGZvciBib3VudGllcyEiKTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHRpbWVSZXF1aXJlZC5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKSkpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBUYXhNYW5hZ2VyIHRheE1hbmFnZXIgPSBwbHVnaW4uZ2V0VGF4TWFuYWdlcigpOw0KICAgICAgICBkb3VibGUgdGF4QW1vdW50ID0gdGF4TWFuYWdlci5jYWxjdWxhdGVUYXgoYW1vdW50LCBudWxsKTsNCiAgICAgICAgZG91YmxlIHRvdGFsQ29zdCA9IGFtb3VudCArIHRheEFtb3VudDsNCg0KICAgICAgICBpZiAoIXRheE1hbmFnZXIuY2FuQWZmb3JkVGF4KHBsYXllciwgYW1vdW50LCB0YXhBbW91bnQpKSB7DQogICAgICAgICAgICBTdHJpbmcgaW5zdWZmaWNpZW50RnVuZHMgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1pbnN1ZmZpY2llbnQtZnVuZHMiLCAiJXByZWZpeCUmY0luc3VmZmljaWVudCBmdW5kcyEgWW91IG5lZWQgJmUkJWNvc3QlJjcgKGluY2x1ZGluZyAmZSQldGF4JSY3IHRheCkuIFlvdXIgYmFsYW5jZTogJmUkJXZhdWx0X2Vjb19iYWxhbmNlJSIpOw0KICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAgICAgLnBsYXllcihwbGF5ZXIpDQogICAgICAgICAgICAgICAgICAgIC5tb25leVZhbHVlKHRvdGFsQ29zdCkNCiAgICAgICAgICAgICAgICAgICAgLnRheEFtb3VudCh0YXhBbW91bnQpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKFBsYWNlaG9sZGVycy5hcHBseShpbnN1ZmZpY2llbnRGdW5kcy5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKSwgY29udGV4dCkpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIXRheE1hbmFnZXIuZGVkdWN0VGF4KHBsYXllciwgYW1vdW50LCB0YXhBbW91bnQpKSB7DQogICAgICAgICAgICBTdHJpbmcgZXJyb3JNZXNzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktaW5zdWZmaWNpZW50LWZ1bmRzIiwgIiVwcmVmaXglJmNJbnN1ZmZpY2llbnQgZnVuZHMhIFlvdSBuZWVkICZlJCVjb3N0JSY3IChpbmNsdWRpbmcgJmUkJXRheCUmNyB0YXgpLiBZb3VyIGJhbGFuY2U6ICZlJCV2YXVsdF9lY29fYmFsYW5jZSUiKTsNCiAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgICAgIC5wbGF5ZXIocGxheWVyKQ0KICAgICAgICAgICAgICAgICAgICAubW9uZXlWYWx1ZSh0b3RhbENvc3QpDQogICAgICAgICAgICAgICAgICAgIC50YXhBbW91bnQodGF4QW1vdW50KTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkoZXJyb3JNZXNzYWdlLnJlcGxhY2UoIiVwcmVmaXglIiwgbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJwcmVmaXgiLCAiIikpLCBjb250ZXh0KSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuc2V0Qm91bnR5KHBsYXllci5nZXRVbmlxdWVJZCgpLCB0YXJnZXQuZ2V0VW5pcXVlSWQoKSwgKGludCkgYW1vdW50LCBleHBpcmVUaW1lKTsNCg0KICAgICAgICB0YXhNYW5hZ2VyLnNlbmRUYXhNZXNzYWdlcyhwbGF5ZXIsIHRhcmdldC5nZXRVbmlxdWVJZCgpLCBhbW91bnQsIHRheEFtb3VudCk7DQoNCiAgICAgICAgaWYgKHRhcmdldC5pc09ubGluZSgpKSB7DQogICAgICAgICAgICBTdHJpbmcgcmVjZWl2ZWQgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1yZWNlaXZlZCIsICIlcHJlZml4JSZjQSBib3VudHkgb2YgJmUlYW1vdW50JSZjIGhhcyBiZWVuIHBsYWNlZCBvbiB5b3UgYnkgJmUlc3BvbnNvciUmYyEiKTsNCiAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgICAgIC5wbGF5ZXIodGFyZ2V0UGxheWVyKQ0KICAgICAgICAgICAgICAgICAgICAubW9uZXlWYWx1ZShhbW91bnQpDQogICAgICAgICAgICAgICAgICAgIC5zZXR0ZXIocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICAgICAgdGFyZ2V0UGxheWVyLnNlbmRNZXNzYWdlKFBsYWNlaG9sZGVycy5hcHBseShyZWNlaXZlZC5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKSwgY29udGV4dCkpOw0KICAgICAgICB9DQoNCiAgICAgICAgU3RyaW5nIHN1Y2Nlc3NNZXNzYWdlID0gYWxsb3dUaW1lICYmIGV4cGlyZVRpbWUgIT0gLTEgPw0KICAgICAgICAgICAgICAgIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LXNldC1zdWNjZXNzLXRpbWVkIiwgIiVwcmVmaXglJmFZb3UgcGxhY2VkIGEgYm91bnR5IG9mICZlJCVhbW91bnQlJmEgb24gJmUldGFyZ2V0JSZhIGZvciAmZSV0aW1lJSAldW5pdCUmYSEgVGF4IG9mICZlJCV0YXglJmEgd2FzIGRlZHVjdGVkLiIpIDoNCiAgICAgICAgICAgICAgICBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1zZXQtc3VjY2VzcyIsICIlcHJlZml4JSZhWW91IHBsYWNlZCBhIGJvdW50eSBvZiAmZSQlYW1vdW50JSZhIG9uICZlJXRhcmdldCUmYSEgVGF4IG9mICZlJCV0YXglJmEgd2FzIGRlZHVjdGVkLiIpOw0KICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgIC5wbGF5ZXIocGxheWVyKQ0KICAgICAgICAgICAgICAgIC50YXJnZXQodGFyZ2V0LmdldFVuaXF1ZUlkKCkpDQogICAgICAgICAgICAgICAgLm1vbmV5VmFsdWUoYW1vdW50KQ0KICAgICAgICAgICAgICAgIC50YXhBbW91bnQodGF4QW1vdW50KTsNCiAgICAgICAgaWYgKGFsbG93VGltZSAmJiBleHBpcmVUaW1lICE9IC0xKSB7DQogICAgICAgICAgICBsb25nIHRpbWVWYWx1ZSA9IChleHBpcmVUaW1lIC0gU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkpIC8gMTAwMDsNCiAgICAgICAgICAgIFN0cmluZyB1bml0Ow0KICAgICAgICAgICAgbG9uZyBkaXNwbGF5VGltZTsNCiAgICAgICAgICAgIGlmICh0aW1lVmFsdWUgPj0gMjQgKiA2MCAqIDYwKSB7DQogICAgICAgICAgICAgICAgdW5pdCA9ICJEYXlzIjsNCiAgICAgICAgICAgICAgICBkaXNwbGF5VGltZSA9IHRpbWVWYWx1ZSAvICgyNCAqIDYwICogNjApOw0KICAgICAgICAgICAgfSBlbHNlIGlmICh0aW1lVmFsdWUgPj0gNjAgKiA2MCkgew0KICAgICAgICAgICAgICAgIHVuaXQgPSAiSG91cnMiOw0KICAgICAgICAgICAgICAgIGRpc3BsYXlUaW1lID0gdGltZVZhbHVlIC8gKDYwICogNjApOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB1bml0ID0gIk1pbnV0ZXMiOw0KICAgICAgICAgICAgICAgIGRpc3BsYXlUaW1lID0gdGltZVZhbHVlIC8gNjA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjb250ZXh0ID0gY29udGV4dC50aW1lKFN0cmluZy52YWx1ZU9mKGRpc3BsYXlUaW1lKSkudW5pdCh1bml0KTsNCiAgICAgICAgfQ0KICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KHN1Y2Nlc3NNZXNzYWdlLnJlcGxhY2UoIiVwcmVmaXglIiwgbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJwcmVmaXgiLCAiIikpLCBjb250ZXh0KSk7DQoNCiAgICAgICAgaWYgKHBsdWdpbi5pc0JvdW50eVNvdW5kRW5hYmxlZCgpKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIHBsYXllci5nZXRXb3JsZCgpLnBsYXlTb3VuZChwbGF5ZXIuZ2V0TG9jYXRpb24oKSwgU291bmQudmFsdWVPZihwbHVnaW4uZ2V0Qm91bnR5U291bmROYW1lKCkpLCBwbHVnaW4uZ2V0Qm91bnR5U291bmRWb2x1bWUoKSwgcGx1Z2luLmdldEJvdW50eVNvdW5kUGl0Y2goKSk7DQogICAgICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJJbnZhbGlkIHNvdW5kIG5hbWU6ICIgKyBwbHVnaW4uZ2V0Qm91bnR5U291bmROYW1lKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBib29sZWFuIGhhbmRsZUNoZWNrQ29tbWFuZChQbGF5ZXIgcGxheWVyLCBTdHJpbmdbXSBhcmdzLCBGaWxlQ29uZmlndXJhdGlvbiBtZXNzYWdlc0NvbmZpZykgew0KICAgICAgICBpZiAoIXBsYXllci5oYXNQZXJtaXNzaW9uKCJib3VudGllc3BsdXMuYm91bnR5LmNoZWNrIikpIHsNCiAgICAgICAgICAgIFN0cmluZyBub1Blcm1pc3Npb24gPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoIm5vLXBlcm1pc3Npb24iLCAiJXByZWZpeCUmY1lvdSBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHVzZSB0aGlzIGNvbW1hbmQuIik7DQogICAgICAgICAgICBub1Blcm1pc3Npb24gPSBub1Blcm1pc3Npb24ucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICImNCZsQm91bnRpZXMgJjcmbMK7ICY3IikpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbm9QZXJtaXNzaW9uKSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPSAyKSB7DQogICAgICAgICAgICBTdHJpbmcgdXNhZ2VNZXNzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktY2hlY2stdXNhZ2UiLCAiJXByZWZpeCUmZVVzYWdlOiAvYm91bnR5IGNoZWNrIDxwbGF5ZXI+Iik7DQogICAgICAgICAgICB1c2FnZU1lc3NhZ2UgPSB1c2FnZU1lc3NhZ2UucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICImNCZsQm91bnRpZXMgJjcmbMK7ICY3IikpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgdXNhZ2VNZXNzYWdlKSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIFN0cmluZyB0YXJnZXROYW1lID0gYXJnc1sxXTsNCiAgICAgICAgT2ZmbGluZVBsYXllciB0YXJnZXQgPSBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcih0YXJnZXROYW1lKTsNCg0KICAgICAgICBpZiAodGFyZ2V0ID09IG51bGwgfHwgIXRhcmdldC5oYXNQbGF5ZWRCZWZvcmUoKSkgew0KICAgICAgICAgICAgU3RyaW5nIHBsYXllck5vdEZvdW5kID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktcGxheWVyLW5vdC1mb3VuZCIsICIlcHJlZml4JSZjUGxheWVyICZlJXRhcmdldCUmYyBub3QgZm91bmQuIik7DQogICAgICAgICAgICBwbGF5ZXJOb3RGb3VuZCA9IHBsYXllck5vdEZvdW5kLnJlcGxhY2UoIiVwcmVmaXglIiwgbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJwcmVmaXgiLCAiJjQmbEJvdW50aWVzICY3JmzCuyAmNyIpKTsNCiAgICAgICAgICAgIHBsYXllck5vdEZvdW5kID0gcGxheWVyTm90Rm91bmQucmVwbGFjZSgiJXRhcmdldCUiLCB0YXJnZXROYW1lKTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHBsYXllck5vdEZvdW5kKSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIFVVSUQgdGFyZ2V0VVVJRCA9IHRhcmdldC5nZXRVbmlxdWVJZCgpOw0KICAgICAgICBNYXA8VVVJRCwgSW50ZWdlcj4gYm91bnRpZXMgPSBwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLmdldEJvdW50aWVzT25UYXJnZXQodGFyZ2V0VVVJRCk7DQoNCiAgICAgICAgaWYgKGJvdW50aWVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgU3RyaW5nIG5vQm91bnR5ID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktbm9uZSIsICIlcHJlZml4JSY3JXRhcmdldCUgJmFoYXMgbm8gYWN0aXZlIGJvdW50aWVzLiIpOw0KICAgICAgICAgICAgbm9Cb3VudHkgPSBub0JvdW50eS5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiY0JmxCb3VudGllcyAmNyZswrsgJjciKSk7DQogICAgICAgICAgICBub0JvdW50eSA9IG5vQm91bnR5LnJlcGxhY2UoIiV0YXJnZXQlIiwgdGFyZ2V0TmFtZSk7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBub0JvdW50eSkpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBMaXN0IG9mIFNwb25zb3JzDQogICAgICAgIExpc3Q8U3RyaW5nPiBzcG9uc29yTmFtZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgZm9yIChVVUlEIHNwb25zb3JVVUlEIDogYm91bnRpZXMua2V5U2V0KCkpIHsNCiAgICAgICAgICAgIE9mZmxpbmVQbGF5ZXIgc3BvbnNvciA9IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVyKHNwb25zb3JVVUlEKTsNCiAgICAgICAgICAgIHNwb25zb3JOYW1lcy5hZGQoc3BvbnNvci5nZXROYW1lKCkpOw0KICAgICAgICB9DQogICAgICAgIFN0cmluZyBzcG9uc29yc0xpc3QgPSBTdHJpbmcuam9pbigiLCAiLCBzcG9uc29yTmFtZXMpOw0KDQogICAgICAgIC8vIFRvdGFsIGJvdW50eSBwb29sDQogICAgICAgIGRvdWJsZSB0b3RhbFBvb2wgPSBib3VudGllcy52YWx1ZXMoKS5zdHJlYW0oKS5tYXBUb0RvdWJsZShJbnRlZ2VyOjpkb3VibGVWYWx1ZSkuc3VtKCk7DQogICAgICAgIC8vIEFwcGx5IGluZGl2aWR1YWwgbXVsdGlwbGllcnMNCiAgICAgICAgZm9yIChNYXAuRW50cnk8VVVJRCwgSW50ZWdlcj4gZW50cnkgOiBib3VudGllcy5lbnRyeVNldCgpKSB7DQogICAgICAgICAgICBVVUlEIHNldHRlclVVSUQgPSBlbnRyeS5nZXRLZXkoKTsNCiAgICAgICAgICAgIGRvdWJsZSBtdWx0aXBsaWVyID0gcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5nZXRCb3VudHlNdWx0aXBsaWVyKHNldHRlclVVSUQsIHRhcmdldFVVSUQpOw0KICAgICAgICAgICAgdG90YWxQb29sICs9IGVudHJ5LmdldFZhbHVlKCkgKiAobXVsdGlwbGllciAtIDEuMCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBFYXJsaWVzdCBleHBpcmF0aW9uIHRpbWUNCiAgICAgICAgU3RyaW5nIHRpbWVVbnRpbEV4cGlyeSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LXN0YXR1cy1uby1leHBpcmF0aW9uIiwgIk5vIGV4cGlyYXRpb24iKTsNCiAgICAgICAgbG9uZyBjdXJyZW50VGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOw0KICAgICAgICBsb25nIGVhcmxpZXN0RXhwaXJ5ID0gTG9uZy5NQVhfVkFMVUU7DQogICAgICAgIGZvciAoVVVJRCBzcG9uc29yVVVJRCA6IGJvdW50aWVzLmtleVNldCgpKSB7DQogICAgICAgICAgICBTdHJpbmcgZXhwaXJlVGltZSA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuZ2V0Qm91bnR5RXhwaXJlVGltZShzcG9uc29yVVVJRCwgdGFyZ2V0VVVJRCk7DQogICAgICAgICAgICBpZiAoIWV4cGlyZVRpbWUuZXF1YWxzKCImNCZrfHx8JjQgJjQmbURlYXRoIENvbnRyYWN0JjQgJjQma3x8fCIpKSB7DQogICAgICAgICAgICAgICAgbG9uZyB0aW1lc3RhbXAgPSBwbHVnaW4uZ2V0Qm91bnRpZXNDb25maWcoKS5nZXRMb25nKCJib3VudGllcy4iICsgdGFyZ2V0VVVJRCArICIuIiArIHNwb25zb3JVVUlEICsgIi5leHBpcmVfdGltZSIsIC0xKTsNCiAgICAgICAgICAgICAgICBpZiAodGltZXN0YW1wID4gMCAmJiB0aW1lc3RhbXAgPCBlYXJsaWVzdEV4cGlyeSkgew0KICAgICAgICAgICAgICAgICAgICBlYXJsaWVzdEV4cGlyeSA9IHRpbWVzdGFtcDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKGVhcmxpZXN0RXhwaXJ5ICE9IExvbmcuTUFYX1ZBTFVFKSB7DQogICAgICAgICAgICBsb25nIHJlbWFpbmluZ01pbGxpcyA9IGVhcmxpZXN0RXhwaXJ5IC0gY3VycmVudFRpbWU7DQogICAgICAgICAgICBpZiAocmVtYWluaW5nTWlsbGlzID4gMCkgew0KICAgICAgICAgICAgICAgIGxvbmcgZGF5cyA9IHJlbWFpbmluZ01pbGxpcyAvICgxMDAwICogNjAgKiA2MCAqIDI0KTsNCiAgICAgICAgICAgICAgICByZW1haW5pbmdNaWxsaXMgJT0gKDEwMDAgKiA2MCAqIDYwICogMjQpOw0KICAgICAgICAgICAgICAgIGxvbmcgaG91cnMgPSByZW1haW5pbmdNaWxsaXMgLyAoMTAwMCAqIDYwICogNjApOw0KICAgICAgICAgICAgICAgIHJlbWFpbmluZ01pbGxpcyAlPSAoMTAwMCAqIDYwICogNjApOw0KICAgICAgICAgICAgICAgIGxvbmcgbWludXRlcyA9IHJlbWFpbmluZ01pbGxpcyAvICgxMDAwICogNjApOw0KDQogICAgICAgICAgICAgICAgTGlzdDxTdHJpbmc+IHBhcnRzID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICAgICAgaWYgKGRheXMgPiAwKSBwYXJ0cy5hZGQoZGF5cyArIChkYXlzID09IDEgPyAiIGRheSIgOiAiIGRheXMiKSk7DQogICAgICAgICAgICAgICAgaWYgKGhvdXJzID4gMCkgcGFydHMuYWRkKGhvdXJzICsgKGhvdXJzID09IDEgPyAiIGhvdXIiIDogIiBob3VycyIpKTsNCiAgICAgICAgICAgICAgICBpZiAobWludXRlcyA+IDApIHBhcnRzLmFkZChtaW51dGVzICsgKG1pbnV0ZXMgPT0gMSA/ICIgbWludXRlIiA6ICIgbWludXRlcyIpKTsNCiAgICAgICAgICAgICAgICB0aW1lVW50aWxFeHBpcnkgPSBwYXJ0cy5pc0VtcHR5KCkgPyBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1zdGF0dXMtbGVzcy1taW51dGUiLCAiPCAxIG1pbnV0ZSIpIDogU3RyaW5nLmpvaW4oIiwgIiwgcGFydHMpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB0aW1lVW50aWxFeHBpcnkgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1zdGF0dXMtZXhwaXJlZCIsICJFeHBpcmVkIik7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyBUb3AgMyBTcG9uc29ycyBieSBib3VudHkgYW1vdW50DQogICAgICAgIExpc3Q8TWFwLkVudHJ5PFVVSUQsIEludGVnZXI+PiBzb3J0ZWRCb3VudGllcyA9IG5ldyBBcnJheUxpc3Q8Pihib3VudGllcy5lbnRyeVNldCgpKTsNCiAgICAgICAgc29ydGVkQm91bnRpZXMuc29ydCgoYSwgYikgLT4gSW50ZWdlci5jb21wYXJlKGIuZ2V0VmFsdWUoKSwgYS5nZXRWYWx1ZSgpKSk7DQogICAgICAgIExpc3Q8U3RyaW5nPiB0b3BTcG9uc29ycyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IE1hdGgubWluKDMsIHNvcnRlZEJvdW50aWVzLnNpemUoKSk7IGkrKykgew0KICAgICAgICAgICAgT2ZmbGluZVBsYXllciBzcG9uc29yID0gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIoc29ydGVkQm91bnRpZXMuZ2V0KGkpLmdldEtleSgpKTsNCiAgICAgICAgICAgIHRvcFNwb25zb3JzLmFkZChzcG9uc29yLmdldE5hbWUoKSk7DQogICAgICAgIH0NCiAgICAgICAgU3RyaW5nIGJpZ2dlc3RFbmVtaWVzID0gdG9wU3BvbnNvcnMuaXNFbXB0eSgpID8gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktc3RhdHVzLW5vbmUiLCAiTm9uZSIpIDogU3RyaW5nLmpvaW4oIiwgIiwgdG9wU3BvbnNvcnMpOw0KDQogICAgICAgIC8vIFNlbmQgZm9ybWF0dGVkIG1lc3NhZ2Ugd2l0aCBjdXN0b21pemFibGUgZm9ybWF0DQogICAgICAgIFN0cmluZyBzdGF0dXNIZWFkZXIgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1zdGF0dXMtaGVhZGVyIiwgIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIik7DQogICAgICAgIFN0cmluZyBzdGF0dXNUaXRsZSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LXN0YXR1cy10aXRsZSIsICIgICAgICAgICAgICAgICAgICAgICY0JmwmbkJvdW50eSBTdGF0dXMiKTsNCiAgICAgICAgU3RyaW5nIHN0YXR1c1Nwb25zb3JzID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktc3RhdHVzLXNwb25zb3JzIiwgIiAgICAgICAgICAgICAgICAgJjR8ICY3U3BvbnNvcnM6ICY0JXNwb25zb3JzJSIpOw0KICAgICAgICBTdHJpbmcgc3RhdHVzUG9vbCA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LXN0YXR1cy1wb29sIiwgIiAgICAgICAgICAgICAgICAgICAmNHwgJjdQb29sOiAmNCVwb29sJSQiKTsNCiAgICAgICAgU3RyaW5nIHN0YXR1c0V4cGlyeSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LXN0YXR1cy1leHBpcnkiLCAiICAgICAgICAgICAgICAgICAgICAmNHwgJjdUaW1lIHRpbCBFeHBpcnk6ICY0JWV4cGlyeSUiKTsNCiAgICAgICAgU3RyaW5nIHN0YXR1c0VuZW1pZXMgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1zdGF0dXMtZW5lbWllcyIsICIgICAgICAgICAgICAgICAgICAgICY0fCAmN0JpZ2dlc3QgRW5lbWllczogJjQlZW5lbWllcyUiKTsNCiAgICAgICAgU3RyaW5nIHN0YXR1c0Zvb3RlciA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LXN0YXR1cy1mb290ZXIiLCAiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iKTsNCg0KICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBzdGF0dXNIZWFkZXIpKTsNCiAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgc3RhdHVzVGl0bGUpKTsNCiAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgc3RhdHVzU3BvbnNvcnMucmVwbGFjZSgiJXNwb25zb3JzJSIsIHNwb25zb3JzTGlzdCkpKTsNCiAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgc3RhdHVzUG9vbC5yZXBsYWNlKCIlcG9vbCUiLCBTdHJpbmcuZm9ybWF0KCIlLjJmIiwgdG90YWxQb29sKSkpKTsNCiAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgc3RhdHVzRXhwaXJ5LnJlcGxhY2UoIiVleHBpcnklIiwgdGltZVVudGlsRXhwaXJ5KSkpOw0KICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBzdGF0dXNFbmVtaWVzLnJlcGxhY2UoIiVlbmVtaWVzJSIsIGJpZ2dlc3RFbmVtaWVzKSkpOw0KICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBzdGF0dXNGb290ZXIpKTsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBwcml2YXRlIGJvb2xlYW4gaGFuZGxlQ2FuY2VsQ29tbWFuZChQbGF5ZXIgcGxheWVyLCBGaWxlQ29uZmlndXJhdGlvbiBtZXNzYWdlc0NvbmZpZykgew0KICAgICAgICBpZiAoIXBsYXllci5oYXNQZXJtaXNzaW9uKCJib3VudGllc3BsdXMuYm91bnR5LmNhbmNlbCIpKSB7DQogICAgICAgICAgICBTdHJpbmcgbm9QZXJtaXNzaW9uID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJuby1wZXJtaXNzaW9uIiwgIiVwcmVmaXglJmNZb3UgZG8gbm90IGhhdmUgcGVybWlzc2lvbiB0byB1c2UgdGhpcyBjb21tYW5kLiIpOw0KICAgICAgICAgICAgbm9QZXJtaXNzaW9uID0gbm9QZXJtaXNzaW9uLnJlcGxhY2UoIiVwcmVmaXglIiwgbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJwcmVmaXgiLCAiJjQmbEJvdW50aWVzICY3JmzCuyAmNyIpKTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIG5vUGVybWlzc2lvbikpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgQm91bnR5Q2FuY2VsLmhhbmRsZUNhbmNlbENvbW1hbmQocGxheWVyLCBwbHVnaW4pOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBIYW5kbGVzIHRoZSAvYm91bnR5IHN0YXRzIGNvbW1hbmQNCiAgICAgKiAvLyBub3RlOiBEaXNwbGF5cyBhIHBsYXllcidzIGJvdW50eSBzdGF0aXN0aWNzDQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIGhhbmRsZVN0YXRzQ29tbWFuZChQbGF5ZXIgcGxheWVyLCBGaWxlQ29uZmlndXJhdGlvbiBtZXNzYWdlc0NvbmZpZykgew0KICAgICAgICBpZiAoIXBsYXllci5oYXNQZXJtaXNzaW9uKCJib3VudGllc3BsdXMuYm91bnR5LnN0YXRzIikpIHsNCiAgICAgICAgICAgIFN0cmluZyBub1Blcm1pc3Npb24gPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoIm5vLXBlcm1pc3Npb24iLCAiJXByZWZpeCUmY1lvdSBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHVzZSB0aGlzIGNvbW1hbmQuIik7DQogICAgICAgICAgICBub1Blcm1pc3Npb24gPSBub1Blcm1pc3Npb24ucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICImNCZsQm91bnRpZXMgJjcmbMK7ICY3IikpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbm9QZXJtaXNzaW9uKSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICBCb3VudHlTdGF0cyBzdGF0c0hhbmRsZXIgPSBuZXcgQm91bnR5U3RhdHMocGx1Z2luKTsNCiAgICAgICAgcmV0dXJuIHN0YXRzSGFuZGxlci5leGVjdXRlKHBsYXllciwgbmV3IFN0cmluZ1tde30pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEhhbmRsZXMgdGhlIC9ib3VudHkgcmVsb2FkIGNvbW1hbmQNCiAgICAgKiAvLyBub3RlOiBSZWxvYWRzIGFsbCBwbHVnaW4gY29uZmlndXJhdGlvbnMgYW5kIHN5c3RlbXMNCiAgICAgKi8NCiAgICBwcml2YXRlIGJvb2xlYW4gaGFuZGxlUmVsb2FkQ29tbWFuZChQbGF5ZXIgcGxheWVyLCBTdHJpbmdbXSBhcmdzLCBGaWxlQ29uZmlndXJhdGlvbiBtZXNzYWdlc0NvbmZpZywgYm9vbGVhbiBhbGxvd1RpbWUpIHsNCiAgICAgICAgaWYgKCFwbGF5ZXIuaGFzUGVybWlzc2lvbigiYm91bnRpZXNwbHVzLmJvdW50eS5yZWxvYWQiKSkgew0KICAgICAgICAgICAgU3RyaW5nIG5vUGVybWlzc2lvbiA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygibm8tcGVybWlzc2lvbiIsICIlcHJlZml4JSZjWW91IGRvIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gdXNlIHRoaXMgY29tbWFuZC4iKTsNCiAgICAgICAgICAgIG5vUGVybWlzc2lvbiA9IG5vUGVybWlzc2lvbi5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiY0JmxCb3VudGllcyAmNyZswrsgJjciKSk7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBub1Blcm1pc3Npb24pKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9IDEpIHsNCiAgICAgICAgICAgIFN0cmluZyB1c2FnZU1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS11c2FnZSIsICIlcHJlZml4JSZlVXNhZ2U6IC9ib3VudHkgc2V0IDxwbGF5ZXI+IDxhbW91bnQ+IiArIChhbGxvd1RpbWUgPyAiIFs8dGltZT4gPE1pbnV0ZXN8SG91cnN8RGF5cz5dIiA6ICIiKSArICIgb3IgL2JvdW50eSBjaGVjayA8cGxheWVyPiBvciAvYm91bnR5IGNhbmNlbCBvciAvYm91bnR5IHN0YXRzIG9yIC9ib3VudHkgcmVsb2FkIik7DQogICAgICAgICAgICB1c2FnZU1lc3NhZ2UgPSB1c2FnZU1lc3NhZ2UucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICImNCZsQm91bnRpZXMgJjcmbMK7ICY3IikpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgdXNhZ2VNZXNzYWdlKSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICAvLyBTYXZlIGJvdW50aWVzIGJlZm9yZSByZWxvYWRpbmcNCiAgICAgICAgICAgIHBsdWdpbi5zYXZlRXZlcnl0aGluZygpOw0KICAgICAgICAgICAgLy8gUmVsb2FkIGFsbCBjb25maWd1cmF0aW9ucyBhbmQgc3lzdGVtcw0KICAgICAgICAgICAgcGx1Z2luLnJlbG9hZEV2ZXJ5dGhpbmcoKTsNCiAgICAgICAgICAgIFN0cmluZyBzdWNjZXNzTWVzc2FnZSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LXJlbG9hZC1zdWNjZXNzIiwgIiVwcmVmaXglJmFDb25maWd1cmF0aW9uIGZpbGVzIHJlbG9hZGVkIHN1Y2Nlc3NmdWxseS4iKTsNCiAgICAgICAgICAgIHN1Y2Nlc3NNZXNzYWdlID0gc3VjY2Vzc01lc3NhZ2UucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICImNCZsQm91bnRpZXMgJjcmbMK7ICY3IikpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgc3VjY2Vzc01lc3NhZ2UpKTsNCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIFN0cmluZyBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1yZWxvYWQtZXJyb3IiLCAiJXByZWZpeCUmY0Vycm9yIHJlbG9hZGluZyBjb25maWd1cmF0aW9uIGZpbGVzOiAlZXJyb3IlIik7DQogICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBlcnJvck1lc3NhZ2UucmVwbGFjZSgiJXByZWZpeCUiLCBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInByZWZpeCIsICImNCZsQm91bnRpZXMgJjcmbMK7ICY3IikpDQogICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlZXJyb3IlIiwgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgZXJyb3JNZXNzYWdlKSk7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiRXJyb3IgcmVsb2FkaW5nIGNvbmZpZ3M6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL0JvdW50eUNyZWF0aW9uQ2hhdExpc3RlbmVyLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMjc0MDcgMTUwMjYzMzY2MDcgMDIxMjI1ACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1czsNCg0KaW1wb3J0IG5ldC5taWxrYm93bC52YXVsdC5lY29ub215LkVjb25vbXk7DQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5DaGF0Q29sb3I7DQppbXBvcnQgb3JnLmJ1a2tpdC5PZmZsaW5lUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LkV2ZW50SGFuZGxlcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50Lkxpc3RlbmVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQucGxheWVyLkFzeW5jUGxheWVyQ2hhdEV2ZW50Ow0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQucGxheWVyLlBsYXllclF1aXRFdmVudDsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkdVSXMuQm91bnR5R1VJOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuR1VJcy5DcmVhdGVHVUk7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy4qOw0KDQoNCi8qKg0KICogTGlzdGVucyBmb3IgcGxheWVyIGNoYXQgaW5wdXQgZHVyaW5nIGJvdW50eSBjcmVhdGlvbg0KICovDQpwdWJsaWMgY2xhc3MgQm91bnR5Q3JlYXRpb25DaGF0TGlzdGVuZXIgaW1wbGVtZW50cyBMaXN0ZW5lciB7DQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KDQogICAgLyoqDQogICAgICogTGlzdGVucyBmb3IgcGxheWVyIGNoYXQgaW5wdXQgZHVyaW5nIGJvdW50eSBjcmVhdGlvbg0KICAgICAqLw0KICAgIHB1YmxpYyBCb3VudHlDcmVhdGlvbkNoYXRMaXN0ZW5lcihCb3VudGllc1BsdXMgcGx1Z2luLCBFdmVudE1hbmFnZXIgZXZlbnRNYW5hZ2VyKSB7DQogICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luOw0KICAgICAgICBldmVudE1hbmFnZXIucmVnaXN0ZXIodGhpcyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBjaGF0IGlucHV0IGZvciBib3VudHkgY3JlYXRpb24gcHJvbXB0cw0KICAgICAqIC8vIG5vdGU6IFByb2Nlc3NlcyBwbGF5ZXIgaW5wdXQgZm9yIG1vbmV5LCBleHBlcmllbmNlLCB0aW1lLCBwbGF5ZXIgbmFtZSwgb3IgY2FuY2VsIGNvbmZpcm1hdGlvbg0KICAgICAqLw0KICAgIEBFdmVudEhhbmRsZXINCiAgICBwdWJsaWMgdm9pZCBvblBsYXllckNoYXQoQXN5bmNQbGF5ZXJDaGF0RXZlbnQgZXZlbnQpIHsNCiAgICAgICAgUGxheWVyIHBsYXllciA9IGV2ZW50LmdldFBsYXllcigpOw0KICAgICAgICBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbiA9IEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5nZXRTZXNzaW9uKHBsYXllcik7DQogICAgICAgIGlmIChzZXNzaW9uID09IG51bGwgfHwgIXNlc3Npb24uaXNBd2FpdGluZ0lucHV0KCkpIHJldHVybjsNCg0KICAgICAgICBldmVudC5zZXRDYW5jZWxsZWQodHJ1ZSk7IC8vIFByZXZlbnQgY2hhdCBtZXNzYWdlIGZyb20gYnJvYWRjYXN0aW5nDQogICAgICAgIFN0cmluZyBpbnB1dCA9IGV2ZW50LmdldE1lc3NhZ2UoKS50cmltKCk7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIGlmICghc2Vzc2lvbi52YWxpZGF0ZUNoYXRJbnB1dChpbnB1dCkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQm91bnR5Q3JlYXRpb25DaGF0TGlzdGVuZXJdIElnbm9yaW5nIGR1cGxpY2F0ZSBjaGF0IGlucHV0ICciICsgaW5wdXQgKyAiJyBmcm9tICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIEJvdW50eUNyZWF0aW9uQ2hhdExpc3RlbmVyXSBDaGF0IGlucHV0ICciICsgaW5wdXQgKyAiJyBmcm9tICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBmb3IgaW5wdXQgdHlwZSAiICsgc2Vzc2lvbi5nZXRBd2FpdGluZ0lucHV0KCkubmFtZSgpKTsNCg0KICAgICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uIGZvciBhbGwgaW5wdXQgdHlwZXMNCiAgICAgICAgaWYgKGlucHV0LmVxdWFsc0lnbm9yZUNhc2UoImNhbmNlbCIpKSB7DQogICAgICAgICAgICBTdHJpbmcgbWVzc2FnZUtleTsNCiAgICAgICAgICAgIHN3aXRjaCAoc2Vzc2lvbi5nZXRBd2FpdGluZ0lucHV0KCkpIHsNCiAgICAgICAgICAgICAgICBjYXNlIE1PTkVZOg0KICAgICAgICAgICAgICAgICAgICBtZXNzYWdlS2V5ID0gIm1vbmV5LWlucHV0LWNhbmNlbGxlZCI7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgRVhQRVJJRU5DRToNCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUtleSA9ICJleHBlcmllbmNlLWlucHV0LWNhbmNlbGxlZCI7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgVElNRToNCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUtleSA9ICJ0aW1lLWlucHV0LWNhbmNlbGxlZCI7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgUExBWUVSX05BTUU6DQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VLZXkgPSAicGxheWVyLXNlbGVjdGlvbi1jYW5jZWxsZWQiOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICBtZXNzYWdlS2V5ID0gbnVsbDsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAobWVzc2FnZUtleSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgbWVzc2FnZUtleSk7DQogICAgICAgICAgICAgICAgc2Vzc2lvbi5jbGVhckF3YWl0aW5nSW5wdXQoKTsNCiAgICAgICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFzayhwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgICAgICAgICAgQ3JlYXRlR1VJIG5ld0d1aSA9IG5ldyBDcmVhdGVHVUkocGxheWVyLCBwbHVnaW4uZ2V0RXZlbnRNYW5hZ2VyKCkpOw0KICAgICAgICAgICAgICAgICAgICBuZXdHdWkub3BlbkludmVudG9yeShwbGF5ZXIpOw0KICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIEJvdW50eUNyZWF0aW9uQ2hhdExpc3RlbmVyXSBSZW9wZW5lZCBDcmVhdGVHVUkgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBhZnRlciBjYW5jZWxsaW5nICIgKyBtZXNzYWdlS2V5KTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEhhbmRsZSBNT05FWSBpbnB1dA0KICAgICAgICBpZiAoc2Vzc2lvbi5nZXRBd2FpdGluZ0lucHV0KCkgPT0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLklucHV0VHlwZS5NT05FWSkgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBkb3VibGUgYW1vdW50ID0gRG91YmxlLnBhcnNlRG91YmxlKGlucHV0KTsNCiAgICAgICAgICAgICAgICBkb3VibGUgbWluQm91bnR5QW1vdW50ID0gcGx1Z2luLmdldENvbmZpZygpLmdldERvdWJsZSgibWluLWJvdW50eS1hbW91bnQiLCAxMDAuMCk7DQogICAgICAgICAgICAgICAgYm9vbGVhbiBhbGxvd1plcm9Eb2xsYXJCb3VudGllcyA9IHBsdWdpbi5nZXRDb25maWcoKS5nZXRCb29sZWFuKCJhbGxvdy16ZXJvLWRvbGxhci1ib3VudGllcyIsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICBpZiAoIWFsbG93WmVyb0RvbGxhckJvdW50aWVzICYmIGFtb3VudCA8IG1pbkJvdW50eUFtb3VudCkgew0KICAgICAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiaW52YWxpZC1tb25leS1hbW91bnQiKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBFY29ub215IGVjb25vbXkgPSBCb3VudGllc1BsdXMuZ2V0RWNvbm9teSgpOw0KICAgICAgICAgICAgICAgIGlmIChlY29ub215ICE9IG51bGwgJiYgZWNvbm9teS5nZXRCYWxhbmNlKHBsYXllcikgPCBhbW91bnQpIHsNCiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgImJvdW50eS1pbnN1ZmZpY2llbnQtZnVuZHMiKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBzZXNzaW9uLnNldE1vbmV5KGFtb3VudCk7DQogICAgICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcikubW9uZXlWYWx1ZShhbW91bnQpOw0KICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJtb25leS1zZXQiLCBjb250ZXh0KTsNCiAgICAgICAgICAgICAgICBzZXNzaW9uLmNsZWFyQXdhaXRpbmdJbnB1dCgpOw0KICAgICAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrKHBsdWdpbiwgKCkgLT4gew0KICAgICAgICAgICAgICAgICAgICBDcmVhdGVHVUkgbmV3R3VpID0gbmV3IENyZWF0ZUdVSShwbGF5ZXIsIHBsdWdpbi5nZXRFdmVudE1hbmFnZXIoKSk7DQogICAgICAgICAgICAgICAgICAgIG5ld0d1aS5vcGVuSW52ZW50b3J5KHBsYXllcik7DQogICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQm91bnR5Q3JlYXRpb25DaGF0TGlzdGVuZXJdIFJlb3BlbmVkIENyZWF0ZUdVSSBmb3IgIiArIHBsYXllci5nZXROYW1lKCkgKyAiIGFmdGVyIHNldHRpbmcgbW9uZXkgdG8gIiArIGFtb3VudCk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJpbnZhbGlkLW1vbmV5LWZvcm1hdCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIC8vIEhhbmRsZSBFWFBFUklFTkNFIGlucHV0DQogICAgICAgIGVsc2UgaWYgKHNlc3Npb24uZ2V0QXdhaXRpbmdJbnB1dCgpID09IEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5JbnB1dFR5cGUuRVhQRVJJRU5DRSkgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBpbnQgYW1vdW50ID0gSW50ZWdlci5wYXJzZUludChpbnB1dCk7DQogICAgICAgICAgICAgICAgaWYgKGFtb3VudCA8PSAwKSB7DQogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJpbnZhbGlkLWV4cGVyaWVuY2UtYW1vdW50Iik7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKHBsYXllci5nZXRMZXZlbCgpIDwgYW1vdW50KSB7DQogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJuby1leHBlcmllbmNlLWxldmVscyIpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHNlc3Npb24uc2V0RXhwZXJpZW5jZShhbW91bnQpOw0KICAgICAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpLnBsYXllcihwbGF5ZXIpLmV4cFZhbHVlKGFtb3VudCk7DQogICAgICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgImV4cGVyaWVuY2Utc2V0IiwgY29udGV4dCk7DQogICAgICAgICAgICAgICAgc2Vzc2lvbi5jbGVhckF3YWl0aW5nSW5wdXQoKTsNCiAgICAgICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFzayhwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgICAgICAgICAgQ3JlYXRlR1VJIG5ld0d1aSA9IG5ldyBDcmVhdGVHVUkocGxheWVyLCBwbHVnaW4uZ2V0RXZlbnRNYW5hZ2VyKCkpOw0KICAgICAgICAgICAgICAgICAgICBuZXdHdWkub3BlbkludmVudG9yeShwbGF5ZXIpOw0KICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIEJvdW50eUNyZWF0aW9uQ2hhdExpc3RlbmVyXSBSZW9wZW5lZCBDcmVhdGVHVUkgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBhZnRlciBzZXR0aW5nIGV4cGVyaWVuY2UgdG8gIiArIGFtb3VudCk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJpbnZhbGlkLWV4cGVyaWVuY2UtZm9ybWF0Iik7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgLy8gSGFuZGxlIFRJTUUgaW5wdXQNCiAgICAgICAgZWxzZSBpZiAoc2Vzc2lvbi5nZXRBd2FpdGluZ0lucHV0KCkgPT0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLklucHV0VHlwZS5USU1FKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIFN0cmluZyB0aW1lU3RyaW5nID0gaW5wdXQudG9Mb3dlckNhc2UoKS50cmltKCk7DQogICAgICAgICAgICAgICAgaW50IGR1cmF0aW9uTWludXRlcyA9IFRpbWVGb3JtYXR0ZXIucGFyc2VUaW1lU3RyaW5nKHRpbWVTdHJpbmcpOw0KICAgICAgICAgICAgICAgIGlmIChkdXJhdGlvbk1pbnV0ZXMgPCAwKSB7DQogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJpbnZhbGlkLXRpbWUtZm9ybWF0Iik7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgc2Vzc2lvbi5zZXRUaW1lTWludXRlcyhkdXJhdGlvbk1pbnV0ZXMpOw0KICAgICAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpLnBsYXllcihwbGF5ZXIpLnRpbWVWYWx1ZShUaW1lRm9ybWF0dGVyLmZvcm1hdE1pbnV0ZXNUb1JlYWRhYmxlKGR1cmF0aW9uTWludXRlcywgZHVyYXRpb25NaW51dGVzID09IDApKTsNCiAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAidGltZS1zZXQiLCBjb250ZXh0KTsNCiAgICAgICAgICAgICAgICBzZXNzaW9uLmNsZWFyQXdhaXRpbmdJbnB1dCgpOw0KICAgICAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrKHBsdWdpbiwgKCkgLT4gew0KICAgICAgICAgICAgICAgICAgICBDcmVhdGVHVUkgbmV3R3VpID0gbmV3IENyZWF0ZUdVSShwbGF5ZXIsIHBsdWdpbi5nZXRFdmVudE1hbmFnZXIoKSk7DQogICAgICAgICAgICAgICAgICAgIG5ld0d1aS5vcGVuSW52ZW50b3J5KHBsYXllcik7DQogICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQm91bnR5Q3JlYXRpb25DaGF0TGlzdGVuZXJdIFJlb3BlbmVkIENyZWF0ZUdVSSBmb3IgIiArIHBsYXllci5nZXROYW1lKCkgKyAiIGFmdGVyIHNldHRpbmcgdGltZSB0byAiICsgZHVyYXRpb25NaW51dGVzICsgIiBtaW51dGVzIik7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJpbnZhbGlkLXRpbWUtZm9ybWF0Iik7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgLy8gSGFuZGxlIFBMQVlFUl9OQU1FIGlucHV0DQogICAgICAgIGVsc2UgaWYgKHNlc3Npb24uZ2V0QXdhaXRpbmdJbnB1dCgpID09IEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5JbnB1dFR5cGUuUExBWUVSX05BTUUpIHsNCiAgICAgICAgICAgIE9mZmxpbmVQbGF5ZXIgdGFyZ2V0ID0gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIoaW5wdXQpOw0KICAgICAgICAgICAgaWYgKCF0YXJnZXQuaGFzUGxheWVkQmVmb3JlKCkpIHsNCiAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiYm91bnR5LXBsYXllci1ub3QtZm91bmQiKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAodGFyZ2V0LmdldFVuaXF1ZUlkKCkuZXF1YWxzKHBsYXllci5nZXRVbmlxdWVJZCgpKSkgew0KICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJib3VudHktc2V0LXNlbGYiKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBzZXNzaW9uLnNldFRhcmdldFBsYXllck9mZmxpbmUodGFyZ2V0KTsNCiAgICAgICAgICAgIGlmICghdGFyZ2V0LmlzT25saW5lKCkpIHsNCiAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAicGxheWVyLW9mZmxpbmUiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHNlc3Npb24uY2xlYXJBd2FpdGluZ0lucHV0KCk7DQogICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFzayhwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgICAgICBDcmVhdGVHVUkgbmV3R3VpID0gbmV3IENyZWF0ZUdVSShwbGF5ZXIsIHBsdWdpbi5nZXRFdmVudE1hbmFnZXIoKSk7DQogICAgICAgICAgICAgICAgbmV3R3VpLm9wZW5JbnZlbnRvcnkocGxheWVyKTsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIEJvdW50eUNyZWF0aW9uQ2hhdExpc3RlbmVyXSBSZW9wZW5lZCBDcmVhdGVHVUkgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBhZnRlciBzZWxlY3RpbmcgdGFyZ2V0ICIgKyB0YXJnZXQuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgICAgIC8vIEhhbmRsZSBDQU5DRUxfQ09ORklSTUFUSU9OIGlucHV0DQogICAgICAgIGVsc2UgaWYgKHNlc3Npb24uZ2V0QXdhaXRpbmdJbnB1dCgpID09IEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5JbnB1dFR5cGUuQ0FOQ0VMX0NPTkZJUk1BVElPTikgew0KICAgICAgICAgICAgaWYgKGlucHV0LmVxdWFsc0lnbm9yZUNhc2UoInllcyIpIHx8IGlucHV0LmVxdWFsc0lnbm9yZUNhc2UoInkiKSkgew0KICAgICAgICAgICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5yZW1vdmVTZXNzaW9uKHBsYXllcik7DQogICAgICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgImJvdW50eS1jcmVhdGlvbi1jYW5jZWxsZWQiKTsNCiAgICAgICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFzayhwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgICAgICAgICAgQm91bnR5R1VJLm9wZW5Cb3VudHlHVUkocGxheWVyLCBCb3VudHlHVUkuZ2V0RmlsdGVySGlnaFRvTG93KCksIEJvdW50eUdVSS5nZXRTaG93T25seU9ubGluZSgpLCBCb3VudHlHVUkuZ2V0Q3VycmVudFBhZ2UoKSk7DQogICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQm91bnR5Q3JlYXRpb25DaGF0TGlzdGVuZXJdIENhbmNlbGxlZCBib3VudHkgY3JlYXRpb24gZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiwgb3BlbmVkIEJvdW50eUdVSSIpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5lcXVhbHNJZ25vcmVDYXNlKCJubyIpIHx8IGlucHV0LmVxdWFsc0lnbm9yZUNhc2UoIm4iKSkgew0KICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJib3VudHktcmVzdW1lZCIpOw0KICAgICAgICAgICAgICAgIHNlc3Npb24uY2xlYXJBd2FpdGluZ0lucHV0KCk7DQogICAgICAgICAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2socGx1Z2luLCAoKSAtPiB7DQogICAgICAgICAgICAgICAgICAgIENyZWF0ZUdVSSBuZXdHdWkgPSBuZXcgQ3JlYXRlR1VJKHBsYXllciwgcGx1Z2luLmdldEV2ZW50TWFuYWdlcigpKTsNCiAgICAgICAgICAgICAgICAgICAgbmV3R3VpLm9wZW5JbnZlbnRvcnkocGxheWVyKTsNCiAgICAgICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBCb3VudHlDcmVhdGlvbkNoYXRMaXN0ZW5lcl0gUmVzdW1lZCBDcmVhdGVHVUkgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgImludmFsaWQtY2FuY2VsLXJlc3BvbnNlIik7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgLy8gSGFuZGxlIEFOT05ZTU9VU19DT05GSVJNQVRJT04gaW5wdXQNCiAgICAgICAgZWxzZSBpZiAoc2Vzc2lvbi5nZXRBd2FpdGluZ0lucHV0KCkgPT0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLklucHV0VHlwZS5BTk9OWU1PVVNfQ09ORklSTUFUSU9OKSB7DQogICAgICAgICAgICBBbm9ueW1vdXNCb3VudHkgYW5vbnltb3VzQm91bnR5ID0gcGx1Z2luLmdldEFub255bW91c0JvdW50eSgpOw0KICAgICAgICAgICAgQW5vbnltb3VzQm91bnR5LkFub255bW91c1Nlc3Npb24gYW5vbnltb3VzU2Vzc2lvbiA9IGFub255bW91c0JvdW50eS5nZXRQZW5kaW5nU2Vzc2lvbihwbGF5ZXIuZ2V0VW5pcXVlSWQoKSk7DQogICAgICAgICAgICBpZiAoYW5vbnltb3VzU2Vzc2lvbiA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgImFub255bW91cy1wcm9tcHQtY2FuY2VsbGVkIik7DQogICAgICAgICAgICAgICAgc2Vzc2lvbi5jbGVhckF3YWl0aW5nSW5wdXQoKTsNCiAgICAgICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFzayhwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgICAgICAgICAgQ3JlYXRlR1VJIG5ld0d1aSA9IG5ldyBDcmVhdGVHVUkocGxheWVyLCBwbHVnaW4uZ2V0RXZlbnRNYW5hZ2VyKCkpOw0KICAgICAgICAgICAgICAgICAgICBuZXdHdWkub3BlbkludmVudG9yeShwbGF5ZXIpOw0KICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIEJvdW50eUNyZWF0aW9uQ2hhdExpc3RlbmVyXSBSZW9wZW5lZCBDcmVhdGVHVUkgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBkdWUgdG8gbWlzc2luZyBhbm9ueW1vdXMgc2Vzc2lvbiIpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBhbm9ueW1vdXNCb3VudHkucHJvY2Vzc0Fub255bW91c0lucHV0KHBsYXllciwgYW5vbnltb3VzU2Vzc2lvbiwgaW5wdXQpOw0KICAgICAgICAgICAgICAgIHNlc3Npb24uY2xlYXJBd2FpdGluZ0lucHV0KCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQogICAgLyoqDQogICAgICogSGFuZGxlcyBwbGF5ZXIgcXVpdCBldmVudHMsIGNsZWFuaW5nIHVwIHNlc3Npb25zDQogICAgICovDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uUGxheWVyUXVpdChQbGF5ZXJRdWl0RXZlbnQgZXZlbnQpIHsNCiAgICAgICAgQm91bnR5Q3JlYXRpb25TZXNzaW9uLnJlbW92ZVNlc3Npb24oZXZlbnQuZ2V0UGxheWVyKCkpOw0KICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiUmVtb3ZlZCBzZXNzaW9uIGZvciAiICsgZXZlbnQuZ2V0UGxheWVyKCkuZ2V0TmFtZSgpICsgIiBvbiBxdWl0Iik7DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRvbnkyNi9ib3VudGllc1BsdXMvQm91bnR5Q3JlYXRpb25TZXNzaW9uLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDA0NDQ2NiAxNTAyNjMzNDYwNiAwMjAyNjQAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzOw0KDQppbXBvcnQgb3JnLmJ1a2tpdC5DaGF0Q29sb3I7DQppbXBvcnQgb3JnLmJ1a2tpdC5PZmZsaW5lUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JdGVtU3RhY2s7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5HVUlzLkNyZWF0ZUdVSTsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLkN1cnJlbmN5VXRpbDsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlBsYWNlaG9sZGVyQ29udGV4dDsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlBsYWNlaG9sZGVyczsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlRpbWVGb3JtYXR0ZXI7DQoNCmltcG9ydCBqYXZhLnV0aWwuKjsNCg0KLyoqDQogLyoqDQogKiBNYW5hZ2VzIHRoZSBjcmVhdGlvbiBvZiBhIGJvdW50eSBmb3IgYSBwbGF5ZXINCiAqIC8vIG5vdGU6IFRyYWNrcyBtb25leSwgZXhwZXJpZW5jZSwgaXRlbXMsIHRpbWUsIGFuZCB0YXJnZXQgZm9yIGEgcGxheWVyJ3MgYm91bnR5IGNyZWF0aW9uIHByb2Nlc3MNCiAqLw0KcHVibGljIGNsYXNzIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiB7DQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgTWFwPFVVSUQsIEJvdW50eUNyZWF0aW9uU2Vzc2lvbj4gc2Vzc2lvbnMgPSBuZXcgSGFzaE1hcDw+KCk7DQogICAgcHJpdmF0ZSBmaW5hbCBQbGF5ZXIgcGxheWVyOw0KICAgIHByaXZhdGUgZG91YmxlIG1vbmV5ID0gMDsNCiAgICBwcml2YXRlIGludCBleHBlcmllbmNlTGV2ZWxzID0gMDsNCiAgICBwcml2YXRlIGludCB0aW1lTWludXRlcyA9IDA7DQogICAgcHJpdmF0ZSBVVUlEIHRhcmdldFVVSUQgPSBudWxsOw0KICAgIHByaXZhdGUgU3RyaW5nIHRhcmdldE5hbWUgPSBudWxsOw0KICAgIHByaXZhdGUgTGlzdDxJdGVtU3RhY2s+IGl0ZW1SZXdhcmRzID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgcHJpdmF0ZSBib29sZWFuIGNvbmZpcm1QcmVzc2VkID0gZmFsc2U7DQogICAgcHJpdmF0ZSBJbnB1dFR5cGUgYXdhaXRpbmdJbnB1dCA9IG51bGw7DQogICAgcHJpdmF0ZSBmaW5hbCBNYXA8U3RyaW5nLCBTdHJpbmc+IGJ1dHRvbkZhaWx1cmVzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgIHByaXZhdGUgYm9vbGVhbiBpc0d1aUFjdGl2ZSA9IGZhbHNlOw0KICAgIHByaXZhdGUgZmluYWwgbG9uZyBjcmVhdGlvblRpbWUgPSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKTsNCiAgICBwcml2YXRlIFN0cmluZyBsYXN0Q2hhdElucHV0ID0gbnVsbDsNCiAgICBwcml2YXRlIGxvbmcgbGFzdENoYXRUaW1lc3RhbXAgPSAwOw0KDQogICAgcHVibGljIGVudW0gSW5wdXRUeXBlIHsNCiAgICAgICAgTU9ORVksDQogICAgICAgIEVYUEVSSUVOQ0UsDQogICAgICAgIFRJTUUsDQogICAgICAgIFBMQVlFUl9OQU1FLA0KICAgICAgICBDQU5DRUxfQ09ORklSTUFUSU9OLA0KICAgICAgICBBTk9OWU1PVVNfQ09ORklSTUFUSU9OLA0KICAgICAgICBOT19FWFBFUklFTkNFX1RJVExFDQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ29uc3RydWN0cyBhIG5ldyBib3VudHkgY3JlYXRpb24gc2Vzc2lvbiBmb3IgYSBwbGF5ZXINCiAgICAgKiAvLyBub3RlOiBJbml0aWFsaXplcyBhbiBlbXB0eSBzZXNzaW9uIGZvciBib3VudHkgY3JlYXRpb24NCiAgICAgKi8NCiAgICBwcml2YXRlIEJvdW50eUNyZWF0aW9uU2Vzc2lvbihQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIHRoaXMucGxheWVyID0gcGxheWVyOw0KICAgICAgICB0aGlzLmxhc3RDaGF0SW5wdXQgPSBudWxsOw0KICAgICAgICB0aGlzLmxhc3RDaGF0VGltZXN0YW1wID0gMDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIG9yIGNyZWF0ZXMgYSBib3VudHkgY3JlYXRpb24gc2Vzc2lvbiBmb3IgYSBwbGF5ZXINCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIGV4aXN0aW5nIHNlc3Npb24gb3IgY3JlYXRlcyBhIG5ldyBvbmUgaWYgbm9uZSBleGlzdHMNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBnZXRPckNyZWF0ZVNlc3Npb24oUGxheWVyIHBsYXllcikgew0KICAgICAgICBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbiA9IHNlc3Npb25zLmdldChwbGF5ZXIuZ2V0VW5pcXVlSWQoKSk7DQogICAgICAgIGlmIChzZXNzaW9uID09IG51bGwpIHsNCiAgICAgICAgICAgIHNlc3Npb24gPSBuZXcgQm91bnR5Q3JlYXRpb25TZXNzaW9uKHBsYXllcik7DQogICAgICAgICAgICBzZXNzaW9ucy5wdXQocGxheWVyLmdldFVuaXF1ZUlkKCksIHNlc3Npb24pOw0KICAgICAgICAgICAgaWYgKEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldENvbmZpZygpLmdldEJvb2xlYW4oImRlYnVnLWVuYWJsZWQiLCBmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiW0RFQlVHXSBDcmVhdGVkIG5ldyBib3VudHkgY3JlYXRpb24gc2Vzc2lvbiBmb3IgIiArIHBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBzZXNzaW9uOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYW4gZXhpc3RpbmcgYm91bnR5IGNyZWF0aW9uIHNlc3Npb24gZm9yIGEgcGxheWVyDQogICAgICogLy8gbm90ZTogUmV0dXJucyB0aGUgc2Vzc2lvbiBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSBudWxsDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBCb3VudHlDcmVhdGlvblNlc3Npb24gZ2V0U2Vzc2lvbihQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIHJldHVybiBzZXNzaW9ucy5nZXQocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbW92ZXMgYSBwbGF5ZXIncyBib3VudHkgY3JlYXRpb24gc2Vzc2lvbg0KICAgICAqIC8vIG5vdGU6IENsZWFycyB0aGUgc2Vzc2lvbiBmcm9tIHRoZSBzZXNzaW9ucyBtYXANCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgcmVtb3ZlU2Vzc2lvbihQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIHNlc3Npb25zLnJlbW92ZShwbGF5ZXIuZ2V0VW5pcXVlSWQoKSk7DQogICAgICAgIGlmIChCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRDb25maWcoKS5nZXRCb29sZWFuKCJkZWJ1Zy1lbmFibGVkIiwgZmFsc2UpKSB7DQogICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiW0RFQlVHXSBSZW1vdmVkIGJvdW50eSBjcmVhdGlvbiBzZXNzaW9uIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGVja3MgaWYgdGhlIHNlc3Npb24gaXMgYXdhaXRpbmcgaW5wdXQNCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIHRydWUgaWYgdGhlIHNlc3Npb24gaXMgd2FpdGluZyBmb3IgcGxheWVyIGlucHV0IChlLmcuLCBtb25leSwgZXhwZXJpZW5jZSkNCiAgICAgKi8NCiAgICBwdWJsaWMgYm9vbGVhbiBpc0F3YWl0aW5nSW5wdXQoKSB7DQogICAgICAgIHJldHVybiBhd2FpdGluZ0lucHV0ICE9IG51bGw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB0aGUgdHlwZSBvZiBpbnB1dCB0aGUgc2Vzc2lvbiBpcyBhd2FpdGluZw0KICAgICAqIC8vIG5vdGU6IFJldHVybnMgdGhlIGN1cnJlbnQgaW5wdXQgdHlwZSBvciBudWxsIGlmIG5vdCBhd2FpdGluZyBpbnB1dA0KICAgICAqLw0KICAgIHB1YmxpYyBJbnB1dFR5cGUgZ2V0QXdhaXRpbmdJbnB1dCgpIHsNCiAgICAgICAgcmV0dXJuIGF3YWl0aW5nSW5wdXQ7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2V0cyB0aGUgdHlwZSBvZiBpbnB1dCB0aGUgc2Vzc2lvbiBpcyBhd2FpdGluZw0KICAgICAqIC8vIG5vdGU6IFVwZGF0ZXMgdGhlIHNlc3Npb24gdG8gd2FpdCBmb3Igc3BlY2lmaWMgcGxheWVyIGlucHV0DQogICAgICovDQogICAgcHVibGljIHZvaWQgc2V0QXdhaXRpbmdJbnB1dChJbnB1dFR5cGUgaW5wdXRUeXBlKSB7DQogICAgICAgIHRoaXMuYXdhaXRpbmdJbnB1dCA9IGlucHV0VHlwZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGVja3MgaWYgdGhlIHNlc3Npb24gaGFzIGEgdGFyZ2V0IHNlbGVjdGVkDQogICAgICogLy8gbm90ZTogUmV0dXJucyB0cnVlIGlmIGEgdGFyZ2V0IHBsYXllciBVVUlEIGlzIHNldA0KICAgICAqLw0KICAgIHB1YmxpYyBib29sZWFuIGhhc1RhcmdldCgpIHsNCiAgICAgICAgcmV0dXJuIHRhcmdldFVVSUQgIT0gbnVsbDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSB0YXJnZXQgcGxheWVyJ3MgVVVJRA0KICAgICAqIC8vIG5vdGU6IFJldHVybnMgdGhlIFVVSUQgb2YgdGhlIHNlbGVjdGVkIHRhcmdldCBwbGF5ZXINCiAgICAgKi8NCiAgICBwdWJsaWMgVVVJRCBnZXRUYXJnZXRVVUlEKCkgew0KICAgICAgICByZXR1cm4gdGFyZ2V0VVVJRDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSB0YXJnZXQgcGxheWVyJ3MgbmFtZQ0KICAgICAqIC8vIG5vdGU6IFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIHNlbGVjdGVkIHRhcmdldCBwbGF5ZXINCiAgICAgKi8NCiAgICBwdWJsaWMgU3RyaW5nIGdldFRhcmdldE5hbWUoKSB7DQogICAgICAgIHJldHVybiB0YXJnZXROYW1lOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHMgdGhlIHRhcmdldCBwbGF5ZXIgZm9yIHRoZSBib3VudHkNCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIHRoZSB0YXJnZXQgVVVJRCBhbmQgbmFtZSBmb3IgdGhlIHNlc3Npb24NCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBzZXRUYXJnZXQoVVVJRCB0YXJnZXRVVUlELCBTdHJpbmcgdGFyZ2V0TmFtZSkgew0KICAgICAgICB0aGlzLnRhcmdldFVVSUQgPSB0YXJnZXRVVUlEOw0KICAgICAgICB0aGlzLnRhcmdldE5hbWUgPSB0YXJnZXROYW1lOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdGhlIG1vbmV5IGFtb3VudCBmb3IgdGhlIGJvdW50eQ0KICAgICAqIC8vIG5vdGU6IFJldHVybnMgdGhlIG1vbmV0YXJ5IHZhbHVlIHNldCBmb3IgdGhlIGJvdW50eQ0KICAgICAqLw0KICAgIHB1YmxpYyBkb3VibGUgZ2V0TW9uZXkoKSB7DQogICAgICAgIHJldHVybiBtb25leTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIHRoZSBtb25leSBhbW91bnQgZm9yIHRoZSBib3VudHkNCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIHRoZSBtb25ldGFyeSB2YWx1ZSBhbmQgY2xlYXJzIHJlbGF0ZWQgYnV0dG9uIGZhaWx1cmVzDQogICAgICovDQogICAgcHVibGljIHZvaWQgc2V0TW9uZXkoZG91YmxlIG1vbmV5KSB7DQogICAgICAgIHRoaXMubW9uZXkgPSBtb25leTsNCiAgICAgICAgY2xlYXJCdXR0b25GYWlsdXJlcygibW9uZXkiKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSBleHBlcmllbmNlIGxldmVscyBmb3IgdGhlIGJvdW50eQ0KICAgICAqIC8vIG5vdGU6IFJldHVybnMgdGhlIGV4cGVyaWVuY2UgbGV2ZWxzIHNldCBmb3IgdGhlIGJvdW50eQ0KICAgICAqLw0KICAgIHB1YmxpYyBpbnQgZ2V0RXhwZXJpZW5jZSgpIHsNCiAgICAgICAgcmV0dXJuIGV4cGVyaWVuY2VMZXZlbHM7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2V0cyB0aGUgZXhwZXJpZW5jZSBsZXZlbHMgZm9yIHRoZSBib3VudHkNCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIHRoZSBleHBlcmllbmNlIGxldmVscyBhbmQgY2xlYXJzIHJlbGF0ZWQgYnV0dG9uIGZhaWx1cmVzDQogICAgICovDQogICAgcHVibGljIHZvaWQgc2V0RXhwZXJpZW5jZShpbnQgZXhwZXJpZW5jZUxldmVscykgew0KICAgICAgICB0aGlzLmV4cGVyaWVuY2VMZXZlbHMgPSBleHBlcmllbmNlTGV2ZWxzOw0KICAgICAgICBjbGVhckJ1dHRvbkZhaWx1cmVzKCJleHBlcmllbmNlIik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB0aGUgdGltZSBkdXJhdGlvbiBmb3IgdGhlIGJvdW50eSBpbiBtaW51dGVzDQogICAgICogLy8gbm90ZTogUmV0dXJucyB0aGUgZHVyYXRpb24gc2V0IGZvciB0aGUgYm91bnR5DQogICAgICovDQogICAgcHVibGljIGludCBnZXRUaW1lTWludXRlcygpIHsNCiAgICAgICAgcmV0dXJuIHRpbWVNaW51dGVzOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHMgdGhlIHRpbWUgZHVyYXRpb24gZm9yIHRoZSBib3VudHkgaW4gbWludXRlcw0KICAgICAqIC8vIG5vdGU6IFVwZGF0ZXMgdGhlIGR1cmF0aW9uIGFuZCBjbGVhcnMgcmVsYXRlZCBidXR0b24gZmFpbHVyZXMNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBzZXRUaW1lTWludXRlcyhpbnQgdGltZU1pbnV0ZXMpIHsNCiAgICAgICAgdGhpcy50aW1lTWludXRlcyA9IHRpbWVNaW51dGVzOw0KICAgICAgICBjbGVhckJ1dHRvbkZhaWx1cmVzKCJ0aW1lIik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIHRoZSBib3VudHkgaXMgcGVybWFuZW50DQogICAgICogLy8gbm90ZTogUmV0dXJucyB0cnVlIGlmIG5vIHRpbWUgZHVyYXRpb24gaXMgc2V0DQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gaXNQZXJtYW5lbnQoKSB7DQogICAgICAgIHJldHVybiB0aW1lTWludXRlcyA9PSAwOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdGhlIGl0ZW0gcmV3YXJkcyBmb3IgdGhlIGJvdW50eQ0KICAgICAqIC8vIG5vdGU6IFJldHVybnMgdGhlIGxpc3Qgb2YgaXRlbXMgc2V0IGFzIGJvdW50eSByZXdhcmRzDQogICAgICovDQogICAgcHVibGljIExpc3Q8SXRlbVN0YWNrPiBnZXRJdGVtUmV3YXJkcygpIHsNCiAgICAgICAgcmV0dXJuIG5ldyBBcnJheUxpc3Q8PihpdGVtUmV3YXJkcyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIHRoZSBzZXNzaW9uIGhhcyBpdGVtIHJld2FyZHMNCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIHRydWUgaWYgYW55IGl0ZW1zIGFyZSBzZXQgYXMgcmV3YXJkcw0KICAgICAqLw0KICAgIHB1YmxpYyBib29sZWFuIGhhc0l0ZW1SZXdhcmRzKCkgew0KICAgICAgICByZXR1cm4gIWl0ZW1SZXdhcmRzLmlzRW1wdHkoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIHRoZSBpdGVtIHJld2FyZHMgZm9yIHRoZSBib3VudHkNCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIHRoZSBsaXN0IG9mIGl0ZW1zIGFuZCBjbGVhcnMgcmVsYXRlZCBidXR0b24gZmFpbHVyZXMNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBzZXRJdGVtUmV3YXJkcyhMaXN0PEl0ZW1TdGFjaz4gaXRlbVJld2FyZHMpIHsNCiAgICAgICAgdGhpcy5pdGVtUmV3YXJkcyA9IGl0ZW1SZXdhcmRzICE9IG51bGwgPyBuZXcgQXJyYXlMaXN0PD4oaXRlbVJld2FyZHMpIDogbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgIGNsZWFyQnV0dG9uRmFpbHVyZXMoIml0ZW1zIik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIHRoZSBjb25maXJtIGJ1dHRvbiB3YXMgcHJlc3NlZA0KICAgICAqIC8vIG5vdGU6IFJldHVybnMgdHJ1ZSBpZiB0aGUgcGxheWVyIGNvbmZpcm1lZCB0aGUgYm91bnR5DQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gaXNDb25maXJtUHJlc3NlZCgpIHsNCiAgICAgICAgcmV0dXJuIGNvbmZpcm1QcmVzc2VkOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHMgdGhlIGNvbmZpcm0gYnV0dG9uIHByZXNzZWQgc3RhdGUNCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIHdoZXRoZXIgdGhlIHBsYXllciBjb25maXJtZWQgdGhlIGJvdW50eQ0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIHNldENvbmZpcm1QcmVzc2VkKGJvb2xlYW4gY29uZmlybVByZXNzZWQpIHsNCiAgICAgICAgdGhpcy5jb25maXJtUHJlc3NlZCA9IGNvbmZpcm1QcmVzc2VkOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiB0aGUgc2Vzc2lvbiBoYXMgY2hhbmdlcw0KICAgICAqIC8vIG5vdGU6IFJldHVybnMgdHJ1ZSBpZiBtb25leSwgZXhwZXJpZW5jZSwgdGltZSwgdGFyZ2V0LCBvciBpdGVtcyBhcmUgc2V0DQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gaGFzQ2hhbmdlcygpIHsNCiAgICAgICAgcmV0dXJuIG1vbmV5ID4gMCB8fCBleHBlcmllbmNlTGV2ZWxzID4gMCB8fCB0aW1lTWludXRlcyA+IDAgfHwgaGFzVGFyZ2V0KCkgfHwgaGFzSXRlbVJld2FyZHMoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBWYWxpZGF0ZXMgdGhlIGJvdW50eSBmb3IgY29tcGxldGVuZXNzDQogICAgICogLy8gbm90ZTogUmV0dXJucyB0cnVlIGlmIHRoZSBib3VudHkgbWVldHMgYWxsIHJlcXVpcmVtZW50cw0KICAgICAqLw0KICAgIHB1YmxpYyBib29sZWFuIGlzQ29tcGxldGUoKSB7DQogICAgICAgIHJldHVybiBpc1ZhbGlkKCkgJiYgKG1vbmV5ID4gMCB8fCBleHBlcmllbmNlTGV2ZWxzID4gMCB8fCBoYXNJdGVtUmV3YXJkcygpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBWYWxpZGF0ZXMgdGhlIGJvdW50eSBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogUmV0dXJucyB0cnVlIGlmIHRoZSBib3VudHkgaXMgdmFsaWQgYmFzZWQgb24gY29uZmlnIHNldHRpbmdzDQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gaXNWYWxpZCgpIHsNCiAgICAgICAgQm91bnRpZXNQbHVzIHBsdWdpbiA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Q29uZmlnKCk7DQoNCiAgICAgICAgaWYgKCFoYXNUYXJnZXQoKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCFjb25maWcuZ2V0Qm9vbGVhbigibW9uZXkuYWxsb3ctemVyby1kb2xsYXItYm91bnRpZXMiLCB0cnVlKSAmJiBtb25leSA9PSAwICYmICFoYXNJdGVtUmV3YXJkcygpICYmIGV4cGVyaWVuY2VMZXZlbHMgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKG1vbmV5IDwgMCB8fCBleHBlcmllbmNlTGV2ZWxzIDwgMCB8fCB0aW1lTWludXRlcyA8IDApIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChjb25maWcuZ2V0Qm9vbGVhbigidGltZS5yZXF1aXJlLXRpbWUiLCBmYWxzZSkgJiYgdGltZU1pbnV0ZXMgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKG1vbmV5ID4gY29uZmlnLmdldERvdWJsZSgibWF4LWJvdW50eS1hbW91bnQiLCAxMDAwMDAwLjApKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICBkb3VibGUgdG90YWxJdGVtVmFsdWUgPSBpdGVtUmV3YXJkcy5zdHJlYW0oKQ0KICAgICAgICAgICAgICAgIC5maWx0ZXIoT2JqZWN0czo6bm9uTnVsbCkNCiAgICAgICAgICAgICAgICAubWFwVG9Eb3VibGUoaXRlbSAtPiBwbHVnaW4uZ2V0SXRlbVZhbHVlQ2FsY3VsYXRvcigpLmNhbGN1bGF0ZUl0ZW1WYWx1ZShpdGVtKSkNCiAgICAgICAgICAgICAgICAuc3VtKCk7DQogICAgICAgIGlmIChtb25leSArIHRvdGFsSXRlbVZhbHVlID4gY29uZmlnLmdldERvdWJsZSgibWF4LWJvdW50eS1hbW91bnQiLCAxMDAwMDAwLjApKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSB2YWxpZGF0aW9uIGVycm9yIG1lc3NhZ2UNCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIGEgbWVzc2FnZSBleHBsYWluaW5nIHdoeSB0aGUgYm91bnR5IGlzIGludmFsaWQNCiAgICAgKi8NCiAgICBwdWJsaWMgU3RyaW5nIGdldFZhbGlkYXRpb25FcnJvcigpIHsNCiAgICAgICAgQm91bnRpZXNQbHVzIHBsdWdpbiA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Q29uZmlnKCk7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzID0gcGx1Z2luLmdldE1lc3NhZ2VzQ29uZmlnKCk7DQoNCiAgICAgICAgaWYgKCFoYXNUYXJnZXQoKSkgew0KICAgICAgICAgICAgcmV0dXJuIENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywNCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXMuZ2V0U3RyaW5nKCJuby10YXJnZXQtc2VsZWN0ZWQiLCAiJmNZb3UgbXVzdCBzZWxlY3QgYSB0YXJnZXQgcGxheWVyISIpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghY29uZmlnLmdldEJvb2xlYW4oIm1vbmV5LmFsbG93LXplcm8tZG9sbGFyLWJvdW50aWVzIiwgdHJ1ZSkgJiYgbW9uZXkgPT0gMCAmJiAhaGFzSXRlbVJld2FyZHMoKSAmJiBleHBlcmllbmNlTGV2ZWxzID09IDApIHsNCiAgICAgICAgICAgIHJldHVybiBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsDQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzLmdldFN0cmluZygiemVyby1kb2xsYXItYm91bnR5IiwgIiZjQm91bnRpZXMgbXVzdCBpbmNsdWRlIG1vbmV5LCBpdGVtcywgb3IgZXhwZXJpZW5jZSEiKSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAobW9uZXkgPCAwKSB7DQogICAgICAgICAgICByZXR1cm4gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLA0KICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcy5nZXRTdHJpbmcoIm5lZ2F0aXZlLW1vbmV5IiwgIiZjQm91bnR5IG1vbmV5IGNhbm5vdCBiZSBuZWdhdGl2ZSEiKSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoZXhwZXJpZW5jZUxldmVscyA8IDApIHsNCiAgICAgICAgICAgIHJldHVybiBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsDQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzLmdldFN0cmluZygibmVnYXRpdmUtZXhwZXJpZW5jZSIsICImY0JvdW50eSBleHBlcmllbmNlIGNhbm5vdCBiZSBuZWdhdGl2ZSEiKSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAodGltZU1pbnV0ZXMgPCAwKSB7DQogICAgICAgICAgICByZXR1cm4gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLA0KICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcy5nZXRTdHJpbmcoIm5lZ2F0aXZlLXRpbWUiLCAiJmNCb3VudHkgdGltZSBjYW5ub3QgYmUgbmVnYXRpdmUhIikpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGNvbmZpZy5nZXRCb29sZWFuKCJ0aW1lLnJlcXVpcmUtdGltZSIsIGZhbHNlKSAmJiB0aW1lTWludXRlcyA9PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLA0KICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcy5nZXRTdHJpbmcoInRpbWUtcmVxdWlyZWQiLCAiJmNZb3UgbXVzdCBzZXQgYSB0aW1lIGR1cmF0aW9uIGZvciB0aGUgYm91bnR5ISIpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGRvdWJsZSBtYXhCb3VudHlBbW91bnQgPSBjb25maWcuZ2V0RG91YmxlKCJtYXgtYm91bnR5LWFtb3VudCIsIDEwMDAwMDAuMCk7DQogICAgICAgIGlmIChtb25leSA+IG1heEJvdW50eUFtb3VudCkgew0KICAgICAgICAgICAgcmV0dXJuIENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywNCiAgICAgICAgICAgICAgICAgICAgUGxhY2Vob2xkZXJzLmFwcGx5KA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzLmdldFN0cmluZygiYm91bnR5LWludmFsaWQtYW1vdW50IiwgIiZjVG90YWwgYm91bnR5IHZhbHVlIGNhbm5vdCBleGNlZWQgJCVib3VudGllc3BsdXNfbWF4X2Ftb3VudCUhIiksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpLndpdGhBbW91bnQobWF4Qm91bnR5QW1vdW50KSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgZG91YmxlIHRvdGFsSXRlbVZhbHVlID0gaXRlbVJld2FyZHMuc3RyZWFtKCkNCiAgICAgICAgICAgICAgICAuZmlsdGVyKE9iamVjdHM6Om5vbk51bGwpDQogICAgICAgICAgICAgICAgLm1hcFRvRG91YmxlKGl0ZW0gLT4gcGx1Z2luLmdldEl0ZW1WYWx1ZUNhbGN1bGF0b3IoKS5jYWxjdWxhdGVJdGVtVmFsdWUoaXRlbSkpDQogICAgICAgICAgICAgICAgLnN1bSgpOw0KICAgICAgICBpZiAobW9uZXkgKyB0b3RhbEl0ZW1WYWx1ZSA+IG1heEJvdW50eUFtb3VudCkgew0KICAgICAgICAgICAgcmV0dXJuIENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywNCiAgICAgICAgICAgICAgICAgICAgUGxhY2Vob2xkZXJzLmFwcGx5KA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzLmdldFN0cmluZygiYm91bnR5LWludmFsaWQtYW1vdW50IiwgIiZjVG90YWwgYm91bnR5IHZhbHVlIGNhbm5vdCBleGNlZWQgJCVib3VudGllc3BsdXNfbWF4X2Ftb3VudCUhIiksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpLndpdGhBbW91bnQobWF4Qm91bnR5QW1vdW50KSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywNCiAgICAgICAgICAgICAgICBtZXNzYWdlcy5nZXRTdHJpbmcoImludmFsaWQtYm91bnR5IiwgIiZjSW52YWxpZCBib3VudHkgY29uZmlndXJhdGlvbiEiKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogVmFsaWRhdGVzIGlmIGEgY2hhdCBpbnB1dCBpcyB1bmlxdWUgdG8gcHJldmVudCBkdXBsaWNhdGUgcHJvY2Vzc2luZw0KICAgICAqIC8vIG5vdGU6IENoZWNrcyBpZiB0aGUgaW5wdXQgaXMgd2l0aGluIGEgNTBtcyB3aW5kb3cgdG8gZGVib3VuY2UgZHVwbGljYXRlcw0KICAgICAqLw0KICAgIHB1YmxpYyBib29sZWFuIHZhbGlkYXRlQ2hhdElucHV0KFN0cmluZyBpbnB1dCkgew0KICAgICAgICBsb25nIGN1cnJlbnRUaW1lID0gU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCk7DQogICAgICAgIGlmIChsYXN0Q2hhdElucHV0ICE9IG51bGwgJiYgbGFzdENoYXRJbnB1dC5lcXVhbHMoaW5wdXQpICYmIChjdXJyZW50VGltZSAtIGxhc3RDaGF0VGltZXN0YW1wIDwgNTApKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgbGFzdENoYXRJbnB1dCA9IGlucHV0Ow0KICAgICAgICBsYXN0Q2hhdFRpbWVzdGFtcCA9IGN1cnJlbnRUaW1lOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZXR1cm5zIHRoZSBwbGF5ZXIgdG8gdGhlIENyZWF0ZUdVSQ0KICAgICAqIC8vIG5vdGU6IFJlb3BlbnMgdGhlIENyZWF0ZUdVSSBmb3IgdGhlIHBsYXllcg0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIHJldHVyblRvQ3JlYXRlR1VJKCkgew0KICAgICAgICBDcmVhdGVHVUkgY3JlYXRlR1VJID0gbmV3IENyZWF0ZUdVSShwbGF5ZXIsIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldEV2ZW50TWFuYWdlcigpKTsNCiAgICAgICAgY3JlYXRlR1VJLm9wZW5JbnZlbnRvcnkocGxheWVyKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIGEgYnV0dG9uIGZhaWx1cmUgbWVzc2FnZQ0KICAgICAqIC8vIG5vdGU6IFN0b3JlcyBhIGZhaWx1cmUgbWVzc2FnZSBmb3IgYSBzcGVjaWZpYyBidXR0b24gYWN0aW9uDQogICAgICovDQogICAgcHVibGljIHZvaWQgYWRkQnV0dG9uRmFpbHVyZShTdHJpbmcgYnV0dG9uLCBTdHJpbmcgbWVzc2FnZSkgew0KICAgICAgICBidXR0b25GYWlsdXJlcy5wdXQoYnV0dG9uLCBtZXNzYWdlKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDbGVhcnMgYWxsIGJ1dHRvbiBmYWlsdXJlIG1lc3NhZ2VzDQogICAgICogLy8gbm90ZTogUmVtb3ZlcyBhbGwgZmFpbHVyZSBtZXNzYWdlcyBmb3IgYnV0dG9ucyBpbiB0aGUgc2Vzc2lvbg0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGNsZWFyQnV0dG9uRmFpbHVyZXMoKSB7DQogICAgICAgIGJ1dHRvbkZhaWx1cmVzLmNsZWFyKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2xlYXJzIGJ1dHRvbiBmYWlsdXJlIG1lc3NhZ2VzIGZvciBhIHNwZWNpZmljIGJ1dHRvbg0KICAgICAqIC8vIG5vdGU6IFJlbW92ZXMgZmFpbHVyZSBtZXNzYWdlcyBmb3IgYSBzcGVjaWZpYyBidXR0b24NCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBjbGVhckJ1dHRvbkZhaWx1cmVzKFN0cmluZyBidXR0b24pIHsNCiAgICAgICAgYnV0dG9uRmFpbHVyZXMucmVtb3ZlKGJ1dHRvbik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB0aGUgYnV0dG9uIGZhaWx1cmUgbWVzc2FnZXMNCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIGEgbGlzdCBvZiBmYWlsdXJlIG1lc3NhZ2VzIGZvciBidXR0b25zDQogICAgICovDQogICAgcHVibGljIExpc3Q8U3RyaW5nPiBnZXRCdXR0b25GYWlsdXJlcygpIHsNCiAgICAgICAgcmV0dXJuIG5ldyBBcnJheUxpc3Q8PihidXR0b25GYWlsdXJlcy52YWx1ZXMoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB3aGV0aGVyIHRoZSBHVUkgaXMgYWN0aXZlbHkgb3Blbg0KICAgICAqIC8vIG5vdGU6IEluZGljYXRlcyBpZiB0aGUgQ3JlYXRlR1VJIGlzIGN1cnJlbnRseSBkaXNwbGF5ZWQgZm9yIHRoZSBwbGF5ZXINCiAgICAgKi8NCiAgICBwdWJsaWMgYm9vbGVhbiBpc0d1aUFjdGl2ZSgpIHsNCiAgICAgICAgcmV0dXJuIGlzR3VpQWN0aXZlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHMgd2hldGhlciB0aGUgR1VJIGlzIGFjdGl2ZWx5IG9wZW4NCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgQ3JlYXRlR1VJIGRpc3BsYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBzZXRHdWlBY3RpdmUoYm9vbGVhbiBpc0d1aUFjdGl2ZSkgew0KICAgICAgICB0aGlzLmlzR3VpQWN0aXZlID0gaXNHdWlBY3RpdmU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRm9ybWF0cyB0aGUgbW9uZXkgYW1vdW50IGZvciBkaXNwbGF5DQogICAgICogLy8gbm90ZTogUmV0dXJucyB0aGUgZm9ybWF0dGVkIG1vbmV5IHZhbHVlIHVzaW5nIEN1cnJlbmN5VXRpbA0KICAgICAqLw0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0Rm9ybWF0dGVkTW9uZXkoKSB7DQogICAgICAgIHJldHVybiBDdXJyZW5jeVV0aWwuZm9ybWF0TW9uZXkobW9uZXkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZvcm1hdHMgdGhlIGV4cGVyaWVuY2UgbGV2ZWxzIGZvciBkaXNwbGF5DQogICAgICogLy8gbm90ZTogUmV0dXJucyB0aGUgZm9ybWF0dGVkIGV4cGVyaWVuY2UgdmFsdWUgd2l0aCBhcHByb3ByaWF0ZSB1bml0cw0KICAgICAqLw0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0Rm9ybWF0dGVkRXhwZXJpZW5jZSgpIHsNCiAgICAgICAgcmV0dXJuIGV4cGVyaWVuY2VMZXZlbHMgPT0gMCA/ICIwIFhQIExldmVscyIgOiBleHBlcmllbmNlTGV2ZWxzICsgIiBYUCBMZXZlbCIgKyAoZXhwZXJpZW5jZUxldmVscyA+IDEgPyAicyIgOiAiIik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRm9ybWF0cyB0aGUgdGltZSBkdXJhdGlvbiBmb3IgZGlzcGxheQ0KICAgICAqIC8vIG5vdGU6IFJldHVybnMgdGhlIGZvcm1hdHRlZCBkdXJhdGlvbiB1c2luZyBUaW1lRm9ybWF0dGVyIG9yICdQZXJtYW5lbnQnIGlmIG5vbmUgc2V0DQogICAgICovDQogICAgcHVibGljIFN0cmluZyBnZXRGb3JtYXR0ZWRUaW1lKCkgew0KICAgICAgICByZXR1cm4gVGltZUZvcm1hdHRlci5mb3JtYXRNaW51dGVzVG9SZWFkYWJsZSh0aW1lTWludXRlcywgaXNQZXJtYW5lbnQoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQWRkcyBtb25leSB0byB0aGUgZXhpc3RpbmcgYm91bnR5IGFtb3VudA0KICAgICAqIC8vIG5vdGU6IEFjY3VtdWxhdGVzIHRoZSBtb25leSB2YWx1ZSBhbmQgY2xlYXJzIHJlbGF0ZWQgYnV0dG9uIGZhaWx1cmVzDQogICAgICovDQogICAgcHVibGljIHZvaWQgYWRkTW9uZXkoZG91YmxlIGFtb3VudCkgew0KICAgICAgICB0aGlzLm1vbmV5ICs9IGFtb3VudDsNCiAgICAgICAgY2xlYXJCdXR0b25GYWlsdXJlcygibW9uZXkiKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIGV4cGVyaWVuY2UgbGV2ZWxzIHRvIHRoZSBleGlzdGluZyBib3VudHkNCiAgICAgKiAvLyBub3RlOiBBY2N1bXVsYXRlcyB0aGUgZXhwZXJpZW5jZSBsZXZlbHMgYW5kIGNsZWFycyByZWxhdGVkIGJ1dHRvbiBmYWlsdXJlcw0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGFkZEV4cGVyaWVuY2UoaW50IGxldmVscykgew0KICAgICAgICB0aGlzLmV4cGVyaWVuY2VMZXZlbHMgKz0gbGV2ZWxzOw0KICAgICAgICBjbGVhckJ1dHRvbkZhaWx1cmVzKCJleHBlcmllbmNlIik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2V0cyB0aGUgZHVyYXRpb24gYmFzZWQgb24gYW1vdW50IGFuZCB1bml0DQogICAgICogLy8gbm90ZTogQ29udmVydHMgaW5wdXQgYW1vdW50IGFuZCB1bml0IHRvIG1pbnV0ZXMgYW5kIHVwZGF0ZXMgdGhlIHNlc3Npb24NCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBzZXREdXJhdGlvbihpbnQgYW1vdW50LCBTdHJpbmcgdW5pdCkgew0KICAgICAgICBpbnQgbWludXRlczsNCiAgICAgICAgc3dpdGNoICh1bml0LnRvTG93ZXJDYXNlKCkpIHsNCiAgICAgICAgICAgIGNhc2UgImQiOg0KICAgICAgICAgICAgY2FzZSAiZGF5IjoNCiAgICAgICAgICAgIGNhc2UgImRheXMiOg0KICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBhbW91bnQgKiAyNCAqIDYwOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSAiaCI6DQogICAgICAgICAgICBjYXNlICJob3VyIjoNCiAgICAgICAgICAgIGNhc2UgImhvdXJzIjoNCiAgICAgICAgICAgIGNhc2UgImhyIjoNCiAgICAgICAgICAgICAgICBtaW51dGVzID0gYW1vdW50ICogNjA7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBjYXNlICJtIjoNCiAgICAgICAgICAgIGNhc2UgIm1pbiI6DQogICAgICAgICAgICBjYXNlICJtaW51dGVzIjoNCiAgICAgICAgICAgIGNhc2UgIiI6DQogICAgICAgICAgICAgICAgbWludXRlcyA9IGFtb3VudDsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgbWludXRlcyA9IGFtb3VudDsgLy8gRGVmYXVsdCB0byBtaW51dGVzIGlmIHVuaXQgaXMgdW5yZWNvZ25pemVkDQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIH0NCiAgICAgICAgc2V0VGltZU1pbnV0ZXMobWludXRlcyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2V0cyB0aGUgdGFyZ2V0IHBsYXllciAob25saW5lKQ0KICAgICAqIC8vIG5vdGU6IFVwZGF0ZXMgdGhlIHRhcmdldCBVVUlEIGFuZCBuYW1lIGZvciBhbiBvbmxpbmUgcGxheWVyDQogICAgICovDQogICAgcHVibGljIHZvaWQgc2V0VGFyZ2V0UGxheWVyKFBsYXllciB0YXJnZXQpIHsNCiAgICAgICAgaWYgKHRhcmdldCAhPSBudWxsKSB7DQogICAgICAgICAgICB0aGlzLnRhcmdldFVVSUQgPSB0YXJnZXQuZ2V0VW5pcXVlSWQoKTsNCiAgICAgICAgICAgIHRoaXMudGFyZ2V0TmFtZSA9IHRhcmdldC5nZXROYW1lKCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0aGlzLnRhcmdldFVVSUQgPSBudWxsOw0KICAgICAgICAgICAgdGhpcy50YXJnZXROYW1lID0gbnVsbDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHMgdGhlIHRhcmdldCBwbGF5ZXIgKG9mZmxpbmUpDQogICAgICogLy8gbm90ZTogVXBkYXRlcyB0aGUgdGFyZ2V0IFVVSUQgYW5kIG5hbWUgZm9yIGFuIG9mZmxpbmUgcGxheWVyDQogICAgICovDQogICAgcHVibGljIHZvaWQgc2V0VGFyZ2V0UGxheWVyT2ZmbGluZShPZmZsaW5lUGxheWVyIHRhcmdldCkgew0KICAgICAgICBpZiAodGFyZ2V0ICE9IG51bGwpIHsNCiAgICAgICAgICAgIHRoaXMudGFyZ2V0VVVJRCA9IHRhcmdldC5nZXRVbmlxdWVJZCgpOw0KICAgICAgICAgICAgdGhpcy50YXJnZXROYW1lID0gdGFyZ2V0LmdldE5hbWUoKSAhPSBudWxsID8gdGFyZ2V0LmdldE5hbWUoKSA6ICJVbmtub3duIjsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRoaXMudGFyZ2V0VVVJRCA9IG51bGw7DQogICAgICAgICAgICB0aGlzLnRhcmdldE5hbWUgPSBudWxsOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2xlYXJzIHRoZSBhd2FpdGluZyBpbnB1dCBzdGF0ZQ0KICAgICAqIC8vIG5vdGU6IFJlc2V0cyB0aGUgaW5wdXQgdHlwZSB0byBudWxsDQogICAgICovDQogICAgcHVibGljIHZvaWQgY2xlYXJBd2FpdGluZ0lucHV0KCkgew0KICAgICAgICB0aGlzLmF3YWl0aW5nSW5wdXQgPSBudWxsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENhbmNlbHMgaW5wdXQgYW5kIHJldHVybnMgdG8gQ3JlYXRlR1VJDQogICAgICogLy8gbm90ZTogQ2xlYXJzIGF3YWl0aW5nIGlucHV0IGFuZCByZW9wZW5zIHRoZSBDcmVhdGVHVUkNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBjYW5jZWxJbnB1dEFuZFJldHVybigpIHsNCiAgICAgICAgY2xlYXJBd2FpdGluZ0lucHV0KCk7DQogICAgICAgIHJldHVyblRvQ3JlYXRlR1VJKCk7DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL0JvdW50eU1hbmFnZXIuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwNzQwNDEgMTUwMjU0NDMwMDQgMDE2NTA2ACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0KcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzOw0KDQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5NYXRlcmlhbDsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5GaWxlQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0Lk9mZmxpbmVQbGF5ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbVN0YWNrOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLkRlYnVnTWFuYWdlcjsNCg0KaW1wb3J0IGphdmEudGV4dC5TaW1wbGVEYXRlRm9ybWF0Ow0KaW1wb3J0IGphdmEudXRpbC4qOw0KaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uQ29sbGVjdG9yczsNCg0KcHVibGljIGNsYXNzIEJvdW50eU1hbmFnZXIgew0KDQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIEJvdW50eT4gYm91bnRpZXMgPSBuZXcgSGFzaE1hcDw+KCk7DQogICAgcHJpdmF0ZSBmaW5hbCBNYXA8VVVJRCwgRG91YmxlPiBtYW51YWxNb25leUJvb3N0cyA9IG5ldyBIYXNoTWFwPD4oKTsNCiAgICBwcml2YXRlIGZpbmFsIE1hcDxVVUlELCBEb3VibGU+IG1hbnVhbFhwQm9vc3RzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIExvbmc+IG1hbnVhbEJvb3N0RXhwaXJlVGltZXMgPSBuZXcgSGFzaE1hcDw+KCk7DQoNCiAgICAvKioNCiAgICAgKiBDb25zdHJ1Y3RzIHRoZSBCb3VudHlNYW5hZ2VyDQogICAgICogLy8gbm90ZTogSW5pdGlhbGl6ZXMgYm91bnR5IG1hbmFnZW1lbnQgYW5kIGxvYWRzIGJvdW50aWVzIGZyb20gc3RvcmFnZQ0KICAgICAqLw0KICAgIHB1YmxpYyBCb3VudHlNYW5hZ2VyKEJvdW50aWVzUGx1cyBwbHVnaW4sIExpc3Q8U3RyaW5nPiB3YXJuaW5ncykgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICAgICAgbG9hZEJvdW50aWVzKHdhcm5pbmdzKTsNCiAgICAgICAgc3RhcnRFeHBpcnlDaGVjaygpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdGhlIG1hbnVhbCBYUCBib29zdCBtdWx0aXBsaWVyIGZvciBhIHBsYXllcg0KICAgICAqLw0KICAgIHB1YmxpYyBkb3VibGUgZ2V0TWFudWFsWHBCb29zdE11bHRpcGxpZXIoVVVJRCB0YXJnZXRVVUlEKSB7DQogICAgICAgIExvbmcgZXhwaXJlVGltZSA9IG1hbnVhbEJvb3N0RXhwaXJlVGltZXMuZ2V0KHRhcmdldFVVSUQpOw0KICAgICAgICBpZiAoZXhwaXJlVGltZSAhPSBudWxsICYmIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpID4gZXhwaXJlVGltZSkgew0KICAgICAgICAgICAgcmVtb3ZlTWFudWFsQm9vc3QodGFyZ2V0VVVJRCwgIlhQIik7DQogICAgICAgICAgICByZXR1cm4gMS4wOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBtYW51YWxYcEJvb3N0cy5nZXRPckRlZmF1bHQodGFyZ2V0VVVJRCwgMS4wKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSBtYW51YWwgbW9uZXkgYm9vc3QgbXVsdGlwbGllciBmb3IgYSBwbGF5ZXINCiAgICAgKi8NCiAgICBwdWJsaWMgZG91YmxlIGdldE1hbnVhbE1vbmV5Qm9vc3RNdWx0aXBsaWVyKFVVSUQgdGFyZ2V0VVVJRCkgew0KICAgICAgICBMb25nIGV4cGlyZVRpbWUgPSBtYW51YWxCb29zdEV4cGlyZVRpbWVzLmdldCh0YXJnZXRVVUlEKTsNCiAgICAgICAgaWYgKGV4cGlyZVRpbWUgIT0gbnVsbCAmJiBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSA+IGV4cGlyZVRpbWUpIHsNCiAgICAgICAgICAgIHJlbW92ZU1hbnVhbEJvb3N0KHRhcmdldFVVSUQsICJNT05FWSIpOw0KICAgICAgICAgICAgcmV0dXJuIDEuMDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbWFudWFsTW9uZXlCb29zdHMuZ2V0T3JEZWZhdWx0KHRhcmdldFVVSUQsIDEuMCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQXBwbGllcyBhIG1hbnVhbCBib29zdCB0byBhIHBsYXllcidzIGJvdW50eQ0KICAgICAqIC8vIG5vdGU6IFVwZGF0ZXMgbXVsdGlwbGllciBhbmQgZXhwaXJlIHRpbWUgaW4gc3RvcmFnZQ0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGFwcGx5TWFudWFsQm9vc3QoVVVJRCB0YXJnZXRVVUlELCBkb3VibGUgbXVsdGlwbGllciwgU3RyaW5nIGJvb3N0VHlwZSwgaW50IHRpbWVNaW51dGVzKSB7DQogICAgICAgIGxvbmcgZXhwaXJlVGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpICsgKHRpbWVNaW51dGVzICogNjAgKiAxMDAwTCk7DQogICAgICAgIEJvdW50eSBib3VudHkgPSBib3VudGllcy5jb21wdXRlSWZBYnNlbnQodGFyZ2V0VVVJRCwgayAtPiBuZXcgQm91bnR5KHBsdWdpbiwgdGFyZ2V0VVVJRCkpOw0KICAgICAgICBpZiAoYm9vc3RUeXBlLmVxdWFsc0lnbm9yZUNhc2UoIk1PTkVZIikgfHwgYm9vc3RUeXBlLmVxdWFsc0lnbm9yZUNhc2UoImJvdGgiKSkgew0KICAgICAgICAgICAgbWFudWFsTW9uZXlCb29zdHMucHV0KHRhcmdldFVVSUQsIG11bHRpcGxpZXIpOw0KICAgICAgICB9DQogICAgICAgIGlmIChib29zdFR5cGUuZXF1YWxzSWdub3JlQ2FzZSgiWFAiKSB8fCBib29zdFR5cGUuZXF1YWxzSWdub3JlQ2FzZSgiYm90aCIpKSB7DQogICAgICAgICAgICBtYW51YWxYcEJvb3N0cy5wdXQodGFyZ2V0VVVJRCwgbXVsdGlwbGllcik7DQogICAgICAgIH0NCiAgICAgICAgbWFudWFsQm9vc3RFeHBpcmVUaW1lcy5wdXQodGFyZ2V0VVVJRCwgZXhwaXJlVGltZSk7DQogICAgICAgIGZvciAoQm91bnR5LlNwb25zb3Igc3BvbnNvciA6IGJvdW50eS5nZXRTcG9uc29ycygpKSB7DQogICAgICAgICAgICBpZiAoYm9vc3RUeXBlLmVxdWFsc0lnbm9yZUNhc2UoIk1PTkVZIikgfHwgYm9vc3RUeXBlLmVxdWFsc0lnbm9yZUNhc2UoImJvdGgiKSkgew0KICAgICAgICAgICAgICAgIHNwb25zb3Iuc2V0TXVsdGlwbGllcihtdWx0aXBsaWVyKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChib29zdFR5cGUuZXF1YWxzSWdub3JlQ2FzZSgiWFAiKSB8fCBib29zdFR5cGUuZXF1YWxzSWdub3JlQ2FzZSgiYm90aCIpKSB7DQogICAgICAgICAgICAgICAgc3BvbnNvci5zZXRNdWx0aXBsaWVyKG11bHRpcGxpZXIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgc3BvbnNvci5zZXRFeHBpcmVUaW1lKGV4cGlyZVRpbWUpOw0KICAgICAgICB9DQogICAgICAgIGlmIChwbHVnaW4uZ2V0TXlTUUwoKS5pc0VuYWJsZWQoKSkgew0KICAgICAgICAgICAgc2F2ZU1hbnVhbEJvb3N0VG9ZQU1MKHRhcmdldFVVSUQsIG11bHRpcGxpZXIsIGV4cGlyZVRpbWUpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgc2F2ZU1hbnVhbEJvb3N0VG9ZQU1MKHRhcmdldFVVSUQsIG11bHRpcGxpZXIsIGV4cGlyZVRpbWUpOw0KICAgICAgICB9DQogICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrTGF0ZXIocGx1Z2luLCAoKSAtPiB7DQogICAgICAgICAgICByZW1vdmVNYW51YWxCb29zdCh0YXJnZXRVVUlELCBib29zdFR5cGUpOw0KICAgICAgICB9LCB0aW1lTWludXRlcyAqIDYwICogMjBMKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZW1vdmVzIGEgbWFudWFsIGJvb3N0IGZyb20gYSBwbGF5ZXIncyBib3VudHkNCiAgICAgKiAvLyBub3RlOiBSZXNldHMgbXVsdGlwbGllciBhbmQgZXhwaXJlIHRpbWUgaW4gc3RvcmFnZQ0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIHJlbW92ZU1hbnVhbEJvb3N0KFVVSUQgdGFyZ2V0VVVJRCwgU3RyaW5nIGJvb3N0VHlwZSkgew0KICAgICAgICBCb3VudHkgYm91bnR5ID0gYm91bnRpZXMuZ2V0KHRhcmdldFVVSUQpOw0KICAgICAgICBpZiAoYm9vc3RUeXBlLmVxdWFsc0lnbm9yZUNhc2UoIk1PTkVZIikgfHwgYm9vc3RUeXBlLmVxdWFsc0lnbm9yZUNhc2UoImJvdGgiKSkgew0KICAgICAgICAgICAgbWFudWFsTW9uZXlCb29zdHMucmVtb3ZlKHRhcmdldFVVSUQpOw0KICAgICAgICB9DQogICAgICAgIGlmIChib29zdFR5cGUuZXF1YWxzSWdub3JlQ2FzZSgiWFAiKSB8fCBib29zdFR5cGUuZXF1YWxzSWdub3JlQ2FzZSgiYm90aCIpKSB7DQogICAgICAgICAgICBtYW51YWxYcEJvb3N0cy5yZW1vdmUodGFyZ2V0VVVJRCk7DQogICAgICAgIH0NCiAgICAgICAgbWFudWFsQm9vc3RFeHBpcmVUaW1lcy5yZW1vdmUodGFyZ2V0VVVJRCk7DQogICAgICAgIGlmIChib3VudHkgIT0gbnVsbCkgew0KICAgICAgICAgICAgZm9yIChCb3VudHkuU3BvbnNvciBzcG9uc29yIDogYm91bnR5LmdldFNwb25zb3JzKCkpIHsNCiAgICAgICAgICAgICAgICBpZiAoYm9vc3RUeXBlLmVxdWFsc0lnbm9yZUNhc2UoIk1PTkVZIikgfHwgYm9vc3RUeXBlLmVxdWFsc0lnbm9yZUNhc2UoImJvdGgiKSkgew0KICAgICAgICAgICAgICAgICAgICBzcG9uc29yLnNldE11bHRpcGxpZXIoMS4wKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKGJvb3N0VHlwZS5lcXVhbHNJZ25vcmVDYXNlKCJYUCIpIHx8IGJvb3N0VHlwZS5lcXVhbHNJZ25vcmVDYXNlKCJib3RoIikpIHsNCiAgICAgICAgICAgICAgICAgICAgc3BvbnNvci5zZXRNdWx0aXBsaWVyKDEuMCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHNwb25zb3Iuc2V0RXhwaXJlVGltZSgtMUwpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHBsdWdpbi5nZXRNeVNRTCgpLmlzRW5hYmxlZCgpKSB7DQogICAgICAgICAgICAgICAgcmVtb3ZlTWFudWFsQm9vc3RGcm9tWUFNTCh0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcmVtb3ZlTWFudWFsQm9vc3RGcm9tWUFNTCh0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiBhIHBsYXllciBoYXMgYW4gYWN0aXZlIG1hbnVhbCBib29zdA0KICAgICAqIC8vIG5vdGU6IFZlcmlmaWVzIGlmIGEgbWFudWFsIGJvb3N0IGlzIGFjdGl2ZSBmb3IgYSBwbGF5ZXINCiAgICAgKi8NCiAgICBwdWJsaWMgYm9vbGVhbiBoYXNBY3RpdmVNYW51YWxCb29zdChVVUlEIHRhcmdldFVVSUQpIHsNCiAgICAgICAgQm91bnR5IGJvdW50eSA9IGJvdW50aWVzLmdldCh0YXJnZXRVVUlEKTsNCiAgICAgICAgaWYgKGJvdW50eSA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgbG9uZyBjdXJyZW50VGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Qm91bnRpZXNDb25maWcoKTsNCiAgICAgICAgaWYgKGNvbmZpZyA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgZm9yIChCb3VudHkuU3BvbnNvciBzcG9uc29yIDogYm91bnR5LmdldFNwb25zb3JzKCkpIHsNCiAgICAgICAgICAgIGxvbmcgZXhwaXJlVGltZSA9IGNvbmZpZy5nZXRMb25nKCJib3VudGllcy4iICsgdGFyZ2V0VVVJRCArICIuIiArIHNwb25zb3IuZ2V0UGxheWVyVVVJRCgpICsgIi5leHBpcmVfdGltZSIsIC0xKTsNCiAgICAgICAgICAgIGlmIChleHBpcmVUaW1lID4gMCAmJiBjdXJyZW50VGltZSA8IGV4cGlyZVRpbWUpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmVtb3ZlcyBhIHNwZWNpZmljIGJvdW50eSBjb250cmlidXRpb24NCiAgICAgKiAvLyBub3RlOiBSZW1vdmVzIGEgc3BvbnNvcidzIGJvdW50eSBhbmQgdXBkYXRlcyB0YWJsaXN0DQogICAgICovDQogICAgcHVibGljIHZvaWQgcmVtb3ZlQm91bnR5KFVVSUQgc2V0dGVyLCBVVUlEIHRhcmdldCkgew0KICAgICAgICBCb3VudHkgYm91bnR5ID0gYm91bnRpZXMuZ2V0KHRhcmdldCk7DQogICAgICAgIGlmIChib3VudHkgIT0gbnVsbCkgew0KICAgICAgICAgICAgaWYgKGJvdW50eS5yZW1vdmVTcG9uc29yKHNldHRlcikpIHsNCiAgICAgICAgICAgICAgICBpZiAocGx1Z2luLmdldE15U1FMKCkuaXNFbmFibGVkKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldE15U1FMKCkucmVtb3ZlQm91bnR5QXN5bmMoc2V0dGVyLCB0YXJnZXQpLmV4Y2VwdGlvbmFsbHkoZSAtPiB7DQogICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBNeVNRTCBFcnJvcjogRmFpbGVkIHRvIHJlbW92ZSBib3VudHkgYXN5bmNocm9ub3VzbHk6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVGcm9tWUFNTChzZXR0ZXIsIHRhcmdldCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRnJvbVlBTUwoc2V0dGVyLCB0YXJnZXQpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoYm91bnR5LmdldFNwb25zb3JzKCkuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgICAgIGJvdW50aWVzLnJlbW92ZSh0YXJnZXQpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBQbGF5ZXIgdGFyZ2V0UGxheWVyID0gQnVra2l0LmdldFBsYXllcih0YXJnZXQpOw0KICAgICAgICAgICAgICAgIGlmICh0YXJnZXRQbGF5ZXIgIT0gbnVsbCAmJiAhaGFzQm91bnR5KHRhcmdldCkpIHsNCiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldFRhYmxpc3RNYW5hZ2VyKCkucmVtb3ZlVGFibGlzdE5hbWUodGFyZ2V0UGxheWVyKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBMb2FkcyBib3VudGllcyBmcm9tIGNvbmZpZ3VyYXRpb24gb3IgTXlTUUwNCiAgICAgKiAvLyBub3RlOiBQb3B1bGF0ZXMgdGhlIGJvdW50aWVzIG1hcCBmcm9tIHN0b3JhZ2UNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgbG9hZEJvdW50aWVzKExpc3Q8U3RyaW5nPiB3YXJuaW5ncykgew0KICAgICAgICBib3VudGllcy5jbGVhcigpOw0KICAgICAgICBpZiAocGx1Z2luLmdldE15U1FMKCkuaXNFbmFibGVkKCkpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRNeVNRTCgpLmxvYWRCb3VudGllc0FzeW5jKCkudGhlbkFjY2VwdChsb2FkZWRCb3VudGllcyAtPiB7DQogICAgICAgICAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2socGx1Z2luLCAoKSAtPiB7DQogICAgICAgICAgICAgICAgICAgIGZvciAoTWFwLkVudHJ5PFVVSUQsIE1hcDxVVUlELCBJbnRlZ2VyPj4gZW50cnkgOiBsb2FkZWRCb3VudGllcy5lbnRyeVNldCgpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBVVUlEIHRhcmdldFVVSUQgPSBlbnRyeS5nZXRLZXkoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIEJvdW50eSBib3VudHkgPSBuZXcgQm91bnR5KHBsdWdpbiwgdGFyZ2V0VVVJRCk7DQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKE1hcC5FbnRyeTxVVUlELCBJbnRlZ2VyPiBzcG9uc29yRW50cnkgOiBlbnRyeS5nZXRWYWx1ZSgpLmVudHJ5U2V0KCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVVUlEIHNldHRlclVVSUQgPSBzcG9uc29yRW50cnkuZ2V0S2V5KCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IGFtb3VudCA9IHNwb25zb3JFbnRyeS5nZXRWYWx1ZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdW50eS5hZGRDb250cmlidXRpb24oc2V0dGVyVVVJRCwgYW1vdW50LCAwLCAwLCBuZXcgQXJyYXlMaXN0PD4oKSwgZmFsc2UsIHRydWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFib3VudHkuZ2V0U3BvbnNvcnMoKS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3VudGllcy5wdXQodGFyZ2V0VVVJRCwgYm91bnR5KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiTG9hZGVkICIgKyBib3VudGllcy5zaXplKCkgKyAiIGJvdW50aWVzIGZyb20gTXlTUUwuIik7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9KS5leGNlcHRpb25hbGx5KGUgLT4gew0KICAgICAgICAgICAgICAgIHdhcm5pbmdzLmFkZCgiRmFpbGVkIHRvIGxvYWQgYm91bnRpZXMgZnJvbSBNeVNRTDogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgICAgICBsb2FkQm91bnRpZXNGcm9tWUFNTCh3YXJuaW5ncyk7DQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGxvYWRCb3VudGllc0Zyb21ZQU1MKHdhcm5pbmdzKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIExvYWRzIGJvdW50aWVzIGZyb20gWUFNTCBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogRmFsbGJhY2sgbWV0aG9kIHRvIGxvYWQgYm91bnRpZXMgZnJvbSBCb3VudHlTdG9yYWdlLnltbA0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBsb2FkQm91bnRpZXNGcm9tWUFNTChMaXN0PFN0cmluZz4gd2FybmluZ3MpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldEJvdW50aWVzQ29uZmlnKCk7DQogICAgICAgIGlmIChjb25maWcgPT0gbnVsbCkgew0KICAgICAgICAgICAgd2FybmluZ3MuYWRkKCJCb3VudHlTdG9yYWdlLnltbCBub3QgbG9hZGVkLCBjYW5ub3QgbG9hZCBib3VudGllcyEiKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoIWNvbmZpZy5pc0NvbmZpZ3VyYXRpb25TZWN0aW9uKCJib3VudGllcyIpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgZm9yIChTdHJpbmcgdGFyZ2V0VVVJRFN0ciA6IGNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiYm91bnRpZXMiKS5nZXRLZXlzKGZhbHNlKSkgew0KICAgICAgICAgICAgVVVJRCB0YXJnZXRVVUlEOw0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICB0YXJnZXRVVUlEID0gVVVJRC5mcm9tU3RyaW5nKHRhcmdldFVVSURTdHIpOw0KICAgICAgICAgICAgfSBjYXRjaCAoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICB3YXJuaW5ncy5hZGQoIkludmFsaWQgVVVJRCBpbiBCb3VudHlTdG9yYWdlLnltbDogIiArIHRhcmdldFVVSURTdHIpOw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgQm91bnR5IGJvdW50eSA9IG5ldyBCb3VudHkocGx1Z2luLCB0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgIGZvciAoU3RyaW5nIHNldHRlclVVSURTdHIgOiBjb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oImJvdW50aWVzLiIgKyB0YXJnZXRVVUlEU3RyKS5nZXRLZXlzKGZhbHNlKSkgew0KICAgICAgICAgICAgICAgIFVVSUQgc2V0dGVyVVVJRDsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBzZXR0ZXJVVUlEID0gVVVJRC5mcm9tU3RyaW5nKHNldHRlclVVSURTdHIpOw0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzLmFkZCgiSW52YWxpZCBzZXR0ZXIgVVVJRCBpbiBCb3VudHlTdG9yYWdlLnltbDogIiArIHNldHRlclVVSURTdHIpOw0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZG91YmxlIGFtb3VudCA9IGNvbmZpZy5nZXREb3VibGUoImJvdW50aWVzLiIgKyB0YXJnZXRVVUlEU3RyICsgIi4iICsgc2V0dGVyVVVJRFN0ciArICIuYW1vdW50IiwgMC4wKTsNCiAgICAgICAgICAgICAgICBpbnQgeHAgPSBjb25maWcuZ2V0SW50KCJib3VudGllcy4iICsgdGFyZ2V0VVVJRFN0ciArICIuIiArIHNldHRlclVVSURTdHIgKyAiLnhwIiwgMCk7DQogICAgICAgICAgICAgICAgaW50IGR1cmF0aW9uTWludXRlcyA9IGNvbmZpZy5nZXRJbnQoImJvdW50aWVzLiIgKyB0YXJnZXRVVUlEU3RyICsgIi4iICsgc2V0dGVyVVVJRFN0ciArICIuZHVyYXRpb24iLCAwKTsNCiAgICAgICAgICAgICAgICBib29sZWFuIGlzQW5vbnltb3VzID0gY29uZmlnLmdldEJvb2xlYW4oImFub255bW91cy1ib3VudGllcy4iICsgdGFyZ2V0VVVJRFN0ciArICIuIiArIHNldHRlclVVSURTdHIsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICBsb25nIHNldFRpbWUgPSBjb25maWcuZ2V0TG9uZygiYm91bnRpZXMuIiArIHRhcmdldFVVSURTdHIgKyAiLiIgKyBzZXR0ZXJVVUlEU3RyICsgIi5zZXRfdGltZSIsIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpKTsNCiAgICAgICAgICAgICAgICBsb25nIGV4cGlyZVRpbWUgPSBjb25maWcuZ2V0TG9uZygiYm91bnRpZXMuIiArIHRhcmdldFVVSURTdHIgKyAiLiIgKyBzZXR0ZXJVVUlEU3RyICsgIi5leHBpcmVfdGltZSIsIC0xKTsNCiAgICAgICAgICAgICAgICBkb3VibGUgbXVsdGlwbGllciA9IGNvbmZpZy5nZXREb3VibGUoImJvdW50aWVzLiIgKyB0YXJnZXRVVUlEU3RyICsgIi4iICsgc2V0dGVyVVVJRFN0ciArICIubXVsdGlwbGllciIsIDEuMCk7DQogICAgICAgICAgICAgICAgTGlzdDxJdGVtU3RhY2s+IGl0ZW1zID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGl0ZW1TdHJpbmdzID0gY29uZmlnLmdldFN0cmluZ0xpc3QoImJvdW50aWVzLiIgKyB0YXJnZXRVVUlEU3RyICsgIi4iICsgc2V0dGVyVVVJRFN0ciArICIuaXRlbXMiKTsNCiAgICAgICAgICAgICAgICBmb3IgKFN0cmluZyBpdGVtU3RyIDogaXRlbVN0cmluZ3MpIHsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nW10gcGFydHMgPSBpdGVtU3RyLnNwbGl0KCI6Iik7DQogICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT0gMikgew0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRlcmlhbCBtYXRlcmlhbCA9IE1hdGVyaWFsLnZhbHVlT2YocGFydHNbMF0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCBpdGVtQW1vdW50ID0gSW50ZWdlci5wYXJzZUludChwYXJ0c1sxXSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMuYWRkKG5ldyBJdGVtU3RhY2sobWF0ZXJpYWwsIGl0ZW1BbW91bnQpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ3MuYWRkKCJJbnZhbGlkIGl0ZW0gaW4gQm91bnR5U3RvcmFnZS55bWw6ICIgKyBpdGVtU3RyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoYW1vdW50ID4gMCB8fCB4cCA+IDAgfHwgZHVyYXRpb25NaW51dGVzID4gMCB8fCAhaXRlbXMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgICAgIGJvdW50eS5hZGRDb250cmlidXRpb24oc2V0dGVyVVVJRCwgYW1vdW50LCB4cCwgZHVyYXRpb25NaW51dGVzLCBpdGVtcywgaXNBbm9ueW1vdXMsIHRydWUpOw0KICAgICAgICAgICAgICAgICAgICBCb3VudHkuU3BvbnNvciBzcG9uc29yID0gYm91bnR5LmdldFNwb25zb3JzKCkuc3RyZWFtKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHMgLT4gcy5nZXRQbGF5ZXJVVUlEKCkuZXF1YWxzKHNldHRlclVVSUQpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kRmlyc3QoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vckVsc2UobnVsbCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChzcG9uc29yICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNwb25zb3Iuc2V0U2V0VGltZShzZXRUaW1lKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNwb25zb3Iuc2V0RXhwaXJlVGltZShleHBpcmVUaW1lKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNwb25zb3Iuc2V0TXVsdGlwbGllcihtdWx0aXBsaWVyKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICghYm91bnR5LmdldFNwb25zb3JzKCkuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgYm91bnRpZXMucHV0KHRhcmdldFVVSUQsIGJvdW50eSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIkxvYWRlZCAiICsgYm91bnRpZXMuc2l6ZSgpICsgIiBib3VudGllcyBmcm9tIFlBTUwuIik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2V0cyBhIGJvdW50eSB3aXRoIHNwZWNpZmllZCBwYXJhbWV0ZXJzDQogICAgICogLy8gbm90ZTogQ3JlYXRlcyBvciB1cGRhdGVzIGEgYm91bnR5IGluIHN0b3JhZ2UgYW5kIHVwZGF0ZXMgdGFibGlzdA0KICAgICAqLw0KICAgIC8qKg0KICAgICAqIFNldHMgYSBib3VudHkgd2l0aCBzcGVjaWZpZWQgcGFyYW1ldGVycw0KICAgICAqIC8vIG5vdGU6IENyZWF0ZXMgb3IgdXBkYXRlcyBhIGJvdW50eSBpbiBzdG9yYWdlIGFuZCB1cGRhdGVzIHRhYmxpc3QNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBzZXRCb3VudHkoVVVJRCBzZXR0ZXIsIFVVSUQgdGFyZ2V0LCBpbnQgYW1vdW50LCBsb25nIGV4cGlyZVRpbWUpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbQm91bnR5TWFuYWdlcl0gU2V0dGluZyBib3VudHk6IHNldHRlcj0iICsgc2V0dGVyICsgIiwgdGFyZ2V0PSIgKyB0YXJnZXQgKyAiLCBhbW91bnQ9IiArIGFtb3VudCArICIsIGV4cGlyZVRpbWU9IiArIGV4cGlyZVRpbWUpOw0KICAgICAgICBCb3VudHkgYm91bnR5ID0gYm91bnRpZXMuY29tcHV0ZUlmQWJzZW50KHRhcmdldCwgayAtPiBuZXcgQm91bnR5KHBsdWdpbiwgdGFyZ2V0KSk7DQogICAgICAgIGJvdW50eS5hZGRDb250cmlidXRpb24oc2V0dGVyLCBhbW91bnQsIDAsIDAsIG5ldyBBcnJheUxpc3Q8PigpLCBmYWxzZSwgIWJvdW50aWVzLmNvbnRhaW5zS2V5KHRhcmdldCkpOw0KICAgICAgICBpZiAocGx1Z2luLmdldE15U1FMKCkuaXNFbmFibGVkKCkpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRNeVNRTCgpLnNldEJvdW50eUFzeW5jKHNldHRlciwgdGFyZ2V0LCBhbW91bnQsIGV4cGlyZVRpbWUpLmV4Y2VwdGlvbmFsbHkoZSAtPiB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIltERUJVR10gTXlTUUwgRXJyb3I6IEZhaWxlZCB0byBzZXQgYm91bnR5IGFzeW5jaHJvbm91c2x5OiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgICAgIHNhdmVUb1lBTUwoc2V0dGVyLCB0YXJnZXQsIGFtb3VudCwgMCwgMCwgZmFsc2UsIGV4cGlyZVRpbWUsIG5ldyBBcnJheUxpc3Q8PigpKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgc2F2ZVRvWUFNTChzZXR0ZXIsIHRhcmdldCwgYW1vdW50LCAwLCAwLCBmYWxzZSwgZXhwaXJlVGltZSwgbmV3IEFycmF5TGlzdDw+KCkpOw0KICAgICAgICB9DQogICAgICAgIFBsYXllciB0YXJnZXRQbGF5ZXIgPSBCdWtraXQuZ2V0UGxheWVyKHRhcmdldCk7DQogICAgICAgIGlmICh0YXJnZXRQbGF5ZXIgIT0gbnVsbCkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbQm91bnR5TWFuYWdlcl0gVGFyZ2V0IHBsYXllciAiICsgdGFyZ2V0UGxheWVyLmdldE5hbWUoKSArICIgaXMgb25saW5lLCBzY2hlZHVsaW5nIHRhYmxpc3QgdXBkYXRlIik7DQogICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFza0xhdGVyKHBsdWdpbiwgKCkgLT4gew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRUYWJsaXN0TWFuYWdlcigpLmFwcGx5VGFibGlzdE5hbWUodGFyZ2V0UGxheWVyKTsNCiAgICAgICAgICAgIH0sIDEwTCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltCb3VudHlNYW5hZ2VyXSBUYXJnZXQgcGxheWVyICIgKyB0YXJnZXQgKyAiIGlzIG9mZmxpbmUsIHRhYmxpc3QgdXBkYXRlIHNraXBwZWQiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEFkZHMgYSByZWd1bGFyIGJvdW50eQ0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGFkZEJvdW50eShVVUlEIHRhcmdldCwgVVVJRCBzZXR0ZXIsIGludCBhbW91bnQpIHsNCiAgICAgICAgc2V0Qm91bnR5KHNldHRlciwgdGFyZ2V0LCBhbW91bnQsIC0xKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIGFuIGFub255bW91cyBib3VudHkNCiAgICAgKiAvLyBub3RlOiBDcmVhdGVzIGEgYm91bnR5IHdpdGggbW9uZXksIGl0ZW1zLCBYUCwgYW5kIGR1cmF0aW9uLCBtYXJraW5nIGl0IGFzIGFub255bW91cyBhbmQgdXBkYXRlcyB0YWJsaXN0DQogICAgICovDQogICAgcHVibGljIHZvaWQgYWRkQW5vbnltb3VzQm91bnR5KFVVSUQgdGFyZ2V0LCBVVUlEIHNldHRlciwgZG91YmxlIGFtb3VudCwgaW50IHhwLCBpbnQgZHVyYXRpb25NaW51dGVzLCBMaXN0PEl0ZW1TdGFjaz4gaXRlbXMpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgYm9vbGVhbiB1c2VYcExldmVscyA9IHBsdWdpbi5nZXRDb25maWcoKS5nZXRCb29sZWFuKCJ1c2UteHAtbGV2ZWxzIiwgZmFsc2UpOw0KICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltCb3VudHlNYW5hZ2VyXSBBZGRpbmcgYW5vbnltb3VzIGJvdW50eSBmb3IgdGFyZ2V0OiAiICsgdGFyZ2V0ICsNCiAgICAgICAgICAgICAgICAiLCBzZXR0ZXI6ICIgKyBzZXR0ZXIgKyAiLCBhbW91bnQ6ICQiICsgYW1vdW50ICsgIiwgIiArICh1c2VYcExldmVscyA/ICJsZXZlbHM6ICIgOiAieHA6ICIpICsgeHAgKw0KICAgICAgICAgICAgICAgICIsIGR1cmF0aW9uOiAiICsgZHVyYXRpb25NaW51dGVzICsgIiBtaW51dGVzLCBpdGVtczogIiArIGl0ZW1zLnNpemUoKSk7DQogICAgICAgIEJvdW50eSBib3VudHkgPSBib3VudGllcy5jb21wdXRlSWZBYnNlbnQodGFyZ2V0LCBrIC0+IG5ldyBCb3VudHkocGx1Z2luLCB0YXJnZXQpKTsNCiAgICAgICAgYm91bnR5LmFkZENvbnRyaWJ1dGlvbihzZXR0ZXIsIGFtb3VudCwgeHAsIGR1cmF0aW9uTWludXRlcywgaXRlbXMsIHRydWUsICFib3VudGllcy5jb250YWluc0tleSh0YXJnZXQpKTsNCiAgICAgICAgaWYgKHBsdWdpbi5nZXRNeVNRTCgpLmlzRW5hYmxlZCgpKSB7DQogICAgICAgICAgICBzYXZlVG9ZQU1MKHNldHRlciwgdGFyZ2V0LCBhbW91bnQsIHhwLCBkdXJhdGlvbk1pbnV0ZXMsIHRydWUsIC0xLCBpdGVtcyk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBzYXZlVG9ZQU1MKHNldHRlciwgdGFyZ2V0LCBhbW91bnQsIHhwLCBkdXJhdGlvbk1pbnV0ZXMsIHRydWUsIC0xLCBpdGVtcyk7DQogICAgICAgIH0NCiAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbQm91bnR5TWFuYWdlcl0gU2F2ZWQgYW5vbnltb3VzIGJvdW50eSBmb3IgdGFyZ2V0OiAiICsgdGFyZ2V0KTsNCiAgICAgICAgUGxheWVyIHRhcmdldFBsYXllciA9IEJ1a2tpdC5nZXRQbGF5ZXIodGFyZ2V0KTsNCiAgICAgICAgaWYgKHRhcmdldFBsYXllciAhPSBudWxsKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltCb3VudHlNYW5hZ2VyXSBUYXJnZXQgcGxheWVyICIgKyB0YXJnZXRQbGF5ZXIuZ2V0TmFtZSgpICsgIiBpcyBvbmxpbmUsIHNjaGVkdWxpbmcgdGFibGlzdCB1cGRhdGUiKTsNCiAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrTGF0ZXIocGx1Z2luLCAoKSAtPiB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldFRhYmxpc3RNYW5hZ2VyKCkuYXBwbHlUYWJsaXN0TmFtZSh0YXJnZXRQbGF5ZXIpOw0KICAgICAgICAgICAgfSwgMTBMKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0JvdW50eU1hbmFnZXJdIFRhcmdldCBwbGF5ZXIgIiArIHRhcmdldCArICIgaXMgb2ZmbGluZSwgdGFibGlzdCB1cGRhdGUgc2tpcHBlZCIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB0aGUgYm91bnR5IGZvciBhIHRhcmdldA0KICAgICAqLw0KICAgIHB1YmxpYyBCb3VudHkgZ2V0Qm91bnR5KFVVSUQgdGFyZ2V0KSB7DQogICAgICAgIHJldHVybiBib3VudGllcy5nZXQodGFyZ2V0KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDbGVhcnMgYWxsIGJvdW50aWVzIG9uIGEgdGFyZ2V0DQogICAgICogLy8gbm90ZTogUmVtb3ZlcyBhbGwgYm91bnRpZXMgYW5kIHVwZGF0ZXMgdGFibGlzdA0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGNsZWFyQm91bnRpZXMoVVVJRCB0YXJnZXQpIHsNCiAgICAgICAgYm91bnRpZXMucmVtb3ZlKHRhcmdldCk7DQogICAgICAgIGlmIChwbHVnaW4uZ2V0TXlTUUwoKS5pc0VuYWJsZWQoKSkgew0KICAgICAgICAgICAgcGx1Z2luLmdldE15U1FMKCkuY2xlYXJCb3VudGllc0FzeW5jKHRhcmdldCkuZXhjZXB0aW9uYWxseShlIC0+IHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBNeVNRTCBFcnJvcjogRmFpbGVkIHRvIGNsZWFyIGJvdW50aWVzIGFzeW5jaHJvbm91c2x5OiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgICAgIGNsZWFyRnJvbVlBTUwodGFyZ2V0KTsNCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgY2xlYXJGcm9tWUFNTCh0YXJnZXQpOw0KICAgICAgICB9DQogICAgICAgIFBsYXllciB0YXJnZXRQbGF5ZXIgPSBCdWtraXQuZ2V0UGxheWVyKHRhcmdldCk7DQogICAgICAgIGlmICh0YXJnZXRQbGF5ZXIgIT0gbnVsbCkgew0KICAgICAgICAgICAgcGx1Z2luLmdldFRhYmxpc3RNYW5hZ2VyKCkucmVtb3ZlVGFibGlzdE5hbWUodGFyZ2V0UGxheWVyKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBNYXA8VVVJRCwgSW50ZWdlcj4gZ2V0Qm91bnRpZXNPblRhcmdldChVVUlEIHRhcmdldCkgew0KICAgICAgICBCb3VudHkgYm91bnR5ID0gYm91bnRpZXMuZ2V0KHRhcmdldCk7DQogICAgICAgIGlmIChib3VudHkgPT0gbnVsbCkgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBIYXNoTWFwPD4oKTsNCiAgICAgICAgfQ0KICAgICAgICBNYXA8VVVJRCwgSW50ZWdlcj4gdGFyZ2V0Qm91bnRpZXMgPSBuZXcgSGFzaE1hcDw+KCk7DQogICAgICAgIGZvciAoQm91bnR5LlNwb25zb3Igc3BvbnNvciA6IGJvdW50eS5nZXRTcG9uc29ycygpKSB7DQogICAgICAgICAgICB0YXJnZXRCb3VudGllcy5wdXQoc3BvbnNvci5nZXRQbGF5ZXJVVUlEKCksIChpbnQpIHNwb25zb3IuZ2V0TW9uZXkoKSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRhcmdldEJvdW50aWVzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBNYXA8VVVJRCwgTWFwPFVVSUQsIEludGVnZXI+PiBsaXN0QWxsQm91bnRpZXMoKSB7DQogICAgICAgIE1hcDxVVUlELCBNYXA8VVVJRCwgSW50ZWdlcj4+IGFsbEJvdW50aWVzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgICAgICBmb3IgKE1hcC5FbnRyeTxVVUlELCBCb3VudHk+IGVudHJ5IDogYm91bnRpZXMuZW50cnlTZXQoKSkgew0KICAgICAgICAgICAgVVVJRCB0YXJnZXQgPSBlbnRyeS5nZXRLZXkoKTsNCiAgICAgICAgICAgIEJvdW50eSBib3VudHkgPSBlbnRyeS5nZXRWYWx1ZSgpOw0KICAgICAgICAgICAgTWFwPFVVSUQsIEludGVnZXI+IHRhcmdldEJvdW50aWVzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgICAgICAgICAgZm9yIChCb3VudHkuU3BvbnNvciBzcG9uc29yIDogYm91bnR5LmdldFNwb25zb3JzKCkpIHsNCiAgICAgICAgICAgICAgICB0YXJnZXRCb3VudGllcy5wdXQoc3BvbnNvci5nZXRQbGF5ZXJVVUlEKCksIChpbnQpIHNwb25zb3IuZ2V0TW9uZXkoKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBhbGxCb3VudGllcy5wdXQodGFyZ2V0LCB0YXJnZXRCb3VudGllcyk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGFsbEJvdW50aWVzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0Qm91bnR5U2V0VGltZShVVUlEIHNldHRlciwgVVVJRCB0YXJnZXQpIHsNCiAgICAgICAgQm91bnR5IGJvdW50eSA9IGJvdW50aWVzLmdldCh0YXJnZXQpOw0KICAgICAgICBpZiAoYm91bnR5ID09IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICB9DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRCb3VudGllc0NvbmZpZygpOw0KICAgICAgICBsb25nIHNldFRpbWUgPSBjb25maWcuZ2V0TG9uZygiYm91bnRpZXMuIiArIHRhcmdldCArICIuIiArIHNldHRlciArICIuc2V0X3RpbWUiLCAtMSk7DQogICAgICAgIGlmIChzZXRUaW1lID09IC0xKSB7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbmV3IFNpbXBsZURhdGVGb3JtYXQoInl5eXktTU0tZGQgSEg6bW06c3MiKS5mb3JtYXQobmV3IERhdGUoc2V0VGltZSkpOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0Qm91bnR5RXhwaXJlVGltZShVVUlEIHNldHRlciwgVVVJRCB0YXJnZXQpIHsNCiAgICAgICAgQm91bnR5IGJvdW50eSA9IGJvdW50aWVzLmdldCh0YXJnZXQpOw0KICAgICAgICBpZiAoYm91bnR5ID09IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiAiJjQma3x8fCY0ICY0Jm1EZWF0aCBDb250cmFjdCY0ICY0Jmt8fHwiOw0KICAgICAgICB9DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRCb3VudGllc0NvbmZpZygpOw0KICAgICAgICBsb25nIGV4cGlyZVRpbWUgPSBjb25maWcuZ2V0TG9uZygiYm91bnRpZXMuIiArIHRhcmdldCArICIuIiArIHNldHRlciArICIuZXhwaXJlX3RpbWUiLCAtMSk7DQogICAgICAgIGlmIChleHBpcmVUaW1lIDw9IDApIHsNCiAgICAgICAgICAgIHJldHVybiAiJjQma3x8fCY0ICY0Jm1EZWF0aCBDb250cmFjdCY0ICY0Jmt8fHwiOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBuZXcgU2ltcGxlRGF0ZUZvcm1hdCgieXl5eS1NTS1kZCBISDptbTpzcyIpLmZvcm1hdChuZXcgRGF0ZShleHBpcmVUaW1lKSk7DQogICAgfQ0KDQogICAgcHVibGljIGRvdWJsZSBnZXRCb3VudHlNdWx0aXBsaWVyKFVVSUQgc2V0dGVyLCBVVUlEIHRhcmdldCkgew0KICAgICAgICBCb3VudHkgYm91bnR5ID0gYm91bnRpZXMuZ2V0KHRhcmdldCk7DQogICAgICAgIGlmIChib3VudHkgPT0gbnVsbCkgew0KICAgICAgICAgICAgcmV0dXJuIDEuMDsNCiAgICAgICAgfQ0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Qm91bnRpZXNDb25maWcoKTsNCiAgICAgICAgcmV0dXJuIGNvbmZpZy5nZXREb3VibGUoImJvdW50aWVzLiIgKyB0YXJnZXQgKyAiLiIgKyBzZXR0ZXIgKyAiLm11bHRpcGxpZXIiLCAxLjApOw0KICAgIH0NCg0KICAgIHB1YmxpYyBib29sZWFuIGhhc0JvdW50eShVVUlEIHNldHRlciwgVVVJRCB0YXJnZXQpIHsNCiAgICAgICAgQm91bnR5IGJvdW50eSA9IGJvdW50aWVzLmdldCh0YXJnZXQpOw0KICAgICAgICBpZiAoYm91bnR5ID09IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gYm91bnR5LmdldFNwb25zb3JzKCkuc3RyZWFtKCkuYW55TWF0Y2goc3BvbnNvciAtPiBzcG9uc29yLmdldFBsYXllclVVSUQoKS5lcXVhbHMoc2V0dGVyKSk7DQogICAgfQ0KDQogICAgcHVibGljIGJvb2xlYW4gaGFzQm91bnR5KFVVSUQgdGFyZ2V0KSB7DQogICAgICAgIEJvdW50eSBib3VudHkgPSBib3VudGllcy5nZXQodGFyZ2V0KTsNCiAgICAgICAgcmV0dXJuIGJvdW50eSAhPSBudWxsICYmICFib3VudHkuZ2V0U3BvbnNvcnMoKS5pc0VtcHR5KCk7DQogICAgfQ0KDQogICAgcHVibGljIGludCBnZXRCb3VudHlBbW91bnQoVVVJRCBzZXR0ZXIsIFVVSUQgdGFyZ2V0KSB7DQogICAgICAgIEJvdW50eSBib3VudHkgPSBib3VudGllcy5nZXQodGFyZ2V0KTsNCiAgICAgICAgaWYgKGJvdW50eSA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfQ0KICAgICAgICBmb3IgKEJvdW50eS5TcG9uc29yIHNwb25zb3IgOiBib3VudHkuZ2V0U3BvbnNvcnMoKSkgew0KICAgICAgICAgICAgaWYgKHNwb25zb3IuZ2V0UGxheWVyVVVJRCgpLmVxdWFscyhzZXR0ZXIpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIChpbnQpIHNwb25zb3IuZ2V0TW9uZXkoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gMDsNCiAgICB9DQoNCiAgICBwdWJsaWMgaW50IGdldFRvdGFsQm91bnR5QW1vdW50KFVVSUQgdGFyZ2V0KSB7DQogICAgICAgIEJvdW50eSBib3VudHkgPSBib3VudGllcy5nZXQodGFyZ2V0KTsNCiAgICAgICAgaWYgKGJvdW50eSA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gKGludCkgYm91bnR5LmdldEN1cnJlbnRNb25leSgpOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTZXQ8VVVJRD4gZ2V0VGFyZ2V0c1dpdGhCb3VudGllcygpIHsNCiAgICAgICAgcmV0dXJuIG5ldyBIYXNoU2V0PD4oYm91bnRpZXMua2V5U2V0KCkpOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTZXQ8VVVJRD4gZ2V0Qm91bnR5U2V0dGVycyhVVUlEIHRhcmdldCkgew0KICAgICAgICBCb3VudHkgYm91bnR5ID0gYm91bnRpZXMuZ2V0KHRhcmdldCk7DQogICAgICAgIGlmIChib3VudHkgPT0gbnVsbCkgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBIYXNoU2V0PD4oKTsNCiAgICAgICAgfQ0KICAgICAgICBTZXQ8VVVJRD4gc2V0dGVycyA9IG5ldyBIYXNoU2V0PD4oKTsNCiAgICAgICAgZm9yIChCb3VudHkuU3BvbnNvciBzcG9uc29yIDogYm91bnR5LmdldFNwb25zb3JzKCkpIHsNCiAgICAgICAgICAgIHNldHRlcnMuYWRkKHNwb25zb3IuZ2V0UGxheWVyVVVJRCgpKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gc2V0dGVyczsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgc3RhcnRFeHBpcnlDaGVjaygpIHsNCiAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2tUaW1lcihwbHVnaW4sIHRoaXM6OmNoZWNrRXhwaXJlZEJvdW50aWVzLCA2MDAwTCwgNjAwMEwpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBjaGVja0V4cGlyZWRCb3VudGllcygpIHsNCiAgICAgICAgbG9uZyBjdXJyZW50VGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOw0KICAgICAgICBMaXN0PFVVSUQ+IHRhcmdldHNUb1JlbW92ZSA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Qm91bnRpZXNDb25maWcoKTsNCg0KICAgICAgICBmb3IgKE1hcC5FbnRyeTxVVUlELCBCb3VudHk+IGVudHJ5IDogYm91bnRpZXMuZW50cnlTZXQoKSkgew0KICAgICAgICAgICAgVVVJRCB0YXJnZXQgPSBlbnRyeS5nZXRLZXkoKTsNCiAgICAgICAgICAgIEJvdW50eSBib3VudHkgPSBlbnRyeS5nZXRWYWx1ZSgpOw0KICAgICAgICAgICAgTGlzdDxVVUlEPiBzZXR0ZXJzVG9SZW1vdmUgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCg0KICAgICAgICAgICAgZm9yIChCb3VudHkuU3BvbnNvciBzcG9uc29yIDogYm91bnR5LmdldFNwb25zb3JzKCkpIHsNCiAgICAgICAgICAgICAgICBVVUlEIHNldHRlciA9IHNwb25zb3IuZ2V0UGxheWVyVVVJRCgpOw0KICAgICAgICAgICAgICAgIGxvbmcgZXhwaXJlVGltZSA9IGNvbmZpZy5nZXRMb25nKCJib3VudGllcy4iICsgdGFyZ2V0ICsgIi4iICsgc2V0dGVyICsgIi5leHBpcmVfdGltZSIsIC0xKTsNCiAgICAgICAgICAgICAgICBpZiAoZXhwaXJlVGltZSA+IDAgJiYgY3VycmVudFRpbWUgPiBleHBpcmVUaW1lKSB7DQogICAgICAgICAgICAgICAgICAgIHNldHRlcnNUb1JlbW92ZS5hZGQoc2V0dGVyKTsNCiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIkJvdW50eSBleHBpcmVkOiAiICsgc2V0dGVyICsgIiAtPiAiICsgdGFyZ2V0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZvciAoVVVJRCBzZXR0ZXIgOiBzZXR0ZXJzVG9SZW1vdmUpIHsNCiAgICAgICAgICAgICAgICBjb25maWcuc2V0KCJib3VudGllcy4iICsgdGFyZ2V0ICsgIi4iICsgc2V0dGVyLCBudWxsKTsNCiAgICAgICAgICAgICAgICBjb25maWcuc2V0KCJhbm9ueW1vdXMtYm91bnRpZXMuIiArIHRhcmdldCArICIuIiArIHNldHRlciwgbnVsbCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChzZXR0ZXJzVG9SZW1vdmUuc2l6ZSgpID09IGJvdW50eS5nZXRTcG9uc29ycygpLnNpemUoKSkgew0KICAgICAgICAgICAgICAgIHRhcmdldHNUb1JlbW92ZS5hZGQodGFyZ2V0KTsNCiAgICAgICAgICAgICAgICBjb25maWcuc2V0KCJib3VudGllcy4iICsgdGFyZ2V0LCBudWxsKTsNCiAgICAgICAgICAgICAgICBjb25maWcuc2V0KCJhbm9ueW1vdXMtYm91bnRpZXMuIiArIHRhcmdldCwgbnVsbCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBmb3IgKFVVSUQgdGFyZ2V0IDogdGFyZ2V0c1RvUmVtb3ZlKSB7DQogICAgICAgICAgICBib3VudGllcy5yZW1vdmUodGFyZ2V0KTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghdGFyZ2V0c1RvUmVtb3ZlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgcGx1Z2luLnNhdmVFdmVyeXRoaW5nKCk7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiUmVtb3ZlZCAiICsgdGFyZ2V0c1RvUmVtb3ZlLnNpemUoKSArICIgZXhwaXJlZCBib3VudHkgdGFyZ2V0cyIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmV0cmlldmVzIGl0ZW1zIGNvbnRyaWJ1dGVkIHRvIGEgYm91bnR5IGJ5IGEgc2V0dGVyDQogICAgICogLy8gbm90ZTogUmV0dXJucyB0aGUgbGlzdCBvZiBpdGVtcyBmcm9tIGEgc3BlY2lmaWMgc3BvbnNvcuKAmXMgY29udHJpYnV0aW9uDQogICAgICovDQogICAgcHVibGljIExpc3Q8SXRlbVN0YWNrPiBnZXRCb3VudHlJdGVtcyhVVUlEIHRhcmdldFVVSUQsIFVVSUQgc2V0dGVyVVVJRCkgew0KICAgICAgICBCb3VudHkgYm91bnR5ID0gYm91bnRpZXMuZ2V0KHRhcmdldFVVSUQpOw0KICAgICAgICBpZiAoYm91bnR5ID09IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgfQ0KICAgICAgICBmb3IgKEJvdW50eS5TcG9uc29yIHNwb25zb3IgOiBib3VudHkuZ2V0U3BvbnNvcnMoKSkgew0KICAgICAgICAgICAgaWYgKHNwb25zb3IuZ2V0UGxheWVyVVVJRCgpLmVxdWFscyhzZXR0ZXJVVUlEKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBzcG9uc29yLmdldEl0ZW1zKCkuc3RyZWFtKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoQm91bnR5LkJvdW50eUl0ZW06OmdldEl0ZW0pDQogICAgICAgICAgICAgICAgICAgICAgICAuY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2F2ZXMgYSBib3VudHkgdG8gWUFNTA0KICAgICAqIC8vIG5vdGU6IFVwZGF0ZXMgQm91bnR5U3RvcmFnZS55bWwgd2l0aCBib3VudHkgZGF0YQ0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBzYXZlVG9ZQU1MKFVVSUQgc2V0dGVyLCBVVUlEIHRhcmdldCwgZG91YmxlIGFtb3VudCwgaW50IHhwLCBpbnQgZHVyYXRpb25NaW51dGVzLCBib29sZWFuIGlzQW5vbnltb3VzLCBsb25nIGV4cGlyZVRpbWUsIExpc3Q8SXRlbVN0YWNrPiBpdGVtcykgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Qm91bnRpZXNDb25maWcoKTsNCiAgICAgICAgaWYgKGNvbmZpZyA9PSBudWxsKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiQm91bnR5U3RvcmFnZS55bWwgbm90IGxvYWRlZCwgY2Fubm90IHNhdmUgYm91bnR5IGZvciAiICsgdGFyZ2V0KTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBsb25nIHNldFRpbWUgPSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKTsNCiAgICAgICAgU3RyaW5nIHBhdGggPSAiYm91bnRpZXMuIiArIHRhcmdldCArICIuIiArIHNldHRlcjsNCiAgICAgICAgY29uZmlnLnNldChwYXRoICsgIi5hbW91bnQiLCBhbW91bnQpOw0KICAgICAgICBjb25maWcuc2V0KHBhdGggKyAiLnhwIiwgeHApOw0KICAgICAgICBjb25maWcuc2V0KHBhdGggKyAiLmR1cmF0aW9uIiwgZHVyYXRpb25NaW51dGVzKTsNCiAgICAgICAgY29uZmlnLnNldChwYXRoICsgIi5zZXRfdGltZSIsIHNldFRpbWUpOw0KICAgICAgICBjb25maWcuc2V0KHBhdGggKyAiLmV4cGlyZV90aW1lIiwgZXhwaXJlVGltZSk7DQogICAgICAgIGNvbmZpZy5zZXQocGF0aCArICIubXVsdGlwbGllciIsIDEuMCk7DQogICAgICAgIGNvbmZpZy5zZXQoImFub255bW91cy1ib3VudGllcy4iICsgdGFyZ2V0ICsgIi4iICsgc2V0dGVyLCBpc0Fub255bW91cyk7DQogICAgICAgIExpc3Q8U3RyaW5nPiBpdGVtU3RyaW5ncyA9IGl0ZW1zLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtIC0+IGl0ZW0gIT0gbnVsbCAmJiAhaXRlbS5nZXRUeXBlKCkuZXF1YWxzKE1hdGVyaWFsLkFJUikpDQogICAgICAgICAgICAgICAgLm1hcChpdGVtIC0+IGl0ZW0uZ2V0VHlwZSgpLm5hbWUoKSArICI6IiArIGl0ZW0uZ2V0QW1vdW50KCkpDQogICAgICAgICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSk7DQogICAgICAgIGNvbmZpZy5zZXQocGF0aCArICIuaXRlbXMiLCBpdGVtU3RyaW5ncyk7DQogICAgICAgIHBsdWdpbi5zYXZlRXZlcnl0aGluZygpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbW92ZXMgYSBib3VudHkgZnJvbSBZQU1MDQogICAgICogLy8gbm90ZTogRGVsZXRlcyBhIGJvdW50eSByZWNvcmQgZnJvbSBCb3VudHlTdG9yYWdlLnltbA0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCByZW1vdmVGcm9tWUFNTChVVUlEIHNldHRlciwgVVVJRCB0YXJnZXQpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldEJvdW50aWVzQ29uZmlnKCk7DQogICAgICAgIGlmIChjb25maWcgPT0gbnVsbCkgew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkJvdW50eVN0b3JhZ2UueW1sIG5vdCBsb2FkZWQsIGNhbm5vdCByZW1vdmUgYm91bnR5IGZvciAiICsgdGFyZ2V0KTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBjb25maWcuc2V0KCJib3VudGllcy4iICsgdGFyZ2V0ICsgIi4iICsgc2V0dGVyLCBudWxsKTsNCiAgICAgICAgY29uZmlnLnNldCgiYW5vbnltb3VzLWJvdW50aWVzLiIgKyB0YXJnZXQgKyAiLiIgKyBzZXR0ZXIsIG51bGwpOw0KICAgICAgICBpZiAoY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJib3VudGllcy4iICsgdGFyZ2V0KSA9PSBudWxsIHx8IGNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiYm91bnRpZXMuIiArIHRhcmdldCkuZ2V0S2V5cyhmYWxzZSkuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBjb25maWcuc2V0KCJib3VudGllcy4iICsgdGFyZ2V0LCBudWxsKTsNCiAgICAgICAgICAgIGNvbmZpZy5zZXQoImFub255bW91cy1ib3VudGllcy4iICsgdGFyZ2V0LCBudWxsKTsNCiAgICAgICAgfQ0KICAgICAgICBwbHVnaW4uc2F2ZUV2ZXJ5dGhpbmcoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDbGVhcnMgYWxsIGJvdW50aWVzIGZvciBhIHRhcmdldCBmcm9tIFlBTUwNCiAgICAgKiAvLyBub3RlOiBEZWxldGVzIGFsbCBib3VudHkgcmVjb3JkcyBmb3IgYSB0YXJnZXQgZnJvbSBCb3VudHlTdG9yYWdlLnltbA0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBjbGVhckZyb21ZQU1MKFVVSUQgdGFyZ2V0KSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRCb3VudGllc0NvbmZpZygpOw0KICAgICAgICBpZiAoY29uZmlnID09IG51bGwpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJCb3VudHlTdG9yYWdlLnltbCBub3QgbG9hZGVkLCBjYW5ub3QgY2xlYXIgYm91bnRpZXMgZm9yICIgKyB0YXJnZXQpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGNvbmZpZy5zZXQoImJvdW50aWVzLiIgKyB0YXJnZXQsIG51bGwpOw0KICAgICAgICBjb25maWcuc2V0KCJhbm9ueW1vdXMtYm91bnRpZXMuIiArIHRhcmdldCwgbnVsbCk7DQogICAgICAgIHBsdWdpbi5zYXZlRXZlcnl0aGluZygpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNhdmVzIGEgbWFudWFsIGJvb3N0IHRvIFlBTUwNCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIEJvdW50eVN0b3JhZ2UueW1sIHdpdGggbWFudWFsIGJvb3N0IGRhdGENCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgc2F2ZU1hbnVhbEJvb3N0VG9ZQU1MKFVVSUQgdGFyZ2V0VVVJRCwgZG91YmxlIG11bHRpcGxpZXIsIGxvbmcgZXhwaXJlVGltZSkgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Qm91bnRpZXNDb25maWcoKTsNCiAgICAgICAgaWYgKGNvbmZpZyA9PSBudWxsKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiQm91bnR5U3RvcmFnZS55bWwgbm90IGxvYWRlZCwgY2Fubm90IHNhdmUgbWFudWFsIGJvb3N0IGZvciAiICsgdGFyZ2V0VVVJRCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgZm9yIChCb3VudHkuU3BvbnNvciBzcG9uc29yIDogYm91bnRpZXMuZ2V0T3JEZWZhdWx0KHRhcmdldFVVSUQsIG5ldyBCb3VudHkocGx1Z2luLCB0YXJnZXRVVUlEKSkuZ2V0U3BvbnNvcnMoKSkgew0KICAgICAgICAgICAgY29uZmlnLnNldCgiYm91bnRpZXMuIiArIHRhcmdldFVVSUQgKyAiLiIgKyBzcG9uc29yLmdldFBsYXllclVVSUQoKSArICIubXVsdGlwbGllciIsIG11bHRpcGxpZXIpOw0KICAgICAgICAgICAgY29uZmlnLnNldCgiYm91bnRpZXMuIiArIHRhcmdldFVVSUQgKyAiLiIgKyBzcG9uc29yLmdldFBsYXllclVVSUQoKSArICIuZXhwaXJlX3RpbWUiLCBleHBpcmVUaW1lKTsNCiAgICAgICAgfQ0KICAgICAgICBwbHVnaW4uc2F2ZUV2ZXJ5dGhpbmcoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZW1vdmVzIGEgbWFudWFsIGJvb3N0IGZyb20gWUFNTA0KICAgICAqIC8vIG5vdGU6IFJlc2V0cyBtYW51YWwgYm9vc3QgZGF0YSBpbiBCb3VudHlTdG9yYWdlLnltbA0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCByZW1vdmVNYW51YWxCb29zdEZyb21ZQU1MKFVVSUQgdGFyZ2V0VVVJRCkgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Qm91bnRpZXNDb25maWcoKTsNCiAgICAgICAgaWYgKGNvbmZpZyA9PSBudWxsKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiQm91bnR5U3RvcmFnZS55bWwgbm90IGxvYWRlZCwgY2Fubm90IHJlbW92ZSBtYW51YWwgYm9vc3QgZm9yICIgKyB0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBmb3IgKEJvdW50eS5TcG9uc29yIHNwb25zb3IgOiBib3VudGllcy5nZXRPckRlZmF1bHQodGFyZ2V0VVVJRCwgbmV3IEJvdW50eShwbHVnaW4sIHRhcmdldFVVSUQpKS5nZXRTcG9uc29ycygpKSB7DQogICAgICAgICAgICBjb25maWcuc2V0KCJib3VudGllcy4iICsgdGFyZ2V0VVVJRCArICIuIiArIHNwb25zb3IuZ2V0UGxheWVyVVVJRCgpICsgIi5tdWx0aXBsaWVyIiwgMS4wKTsNCiAgICAgICAgICAgIGNvbmZpZy5zZXQoImJvdW50aWVzLiIgKyB0YXJnZXRVVUlEICsgIi4iICsgc3BvbnNvci5nZXRQbGF5ZXJVVUlEKCkgKyAiLmV4cGlyZV90aW1lIiwgLTEpOw0KICAgICAgICB9DQogICAgICAgIHBsdWdpbi5zYXZlRXZlcnl0aGluZygpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbG9hZHMgYm91bnRpZXMgZnJvbSBzdG9yYWdlDQogICAgICogLy8gbm90ZTogUmVmcmVzaGVzIHRoZSBib3VudGllcyBtYXANCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCByZWxvYWQoTGlzdDxTdHJpbmc+IHdhcm5pbmdzKSB7DQogICAgICAgIGxvYWRCb3VudGllcyh3YXJuaW5ncyk7DQogICAgfQ0KICAgIC8qKg0KICAgICAqIENsZWFucyB1cCB0aGUgYm91bnR5IG1hbmFnZXINCiAgICAgKiAvLyBub3RlOiBTYXZlcyBib3VudGllcyBhbmQgY2xlYXJzIHRoZSBib3VudGllcyBtYXANCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBjbGVhbnVwKCkgew0KICAgICAgICBzYXZlQm91bnRpZXMoKTsNCiAgICAgICAgYm91bnRpZXMuY2xlYXIoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTYXZlcyBhbGwgYm91bnR5IGRhdGEgdG8gc3RvcmFnZSAvLyBub3RlOiBQZXJzaXN0cyBhY3RpdmUgYm91bnRpZXMgYW5kIGl0ZW1zIHRvIFlBTUwNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBzYXZlQm91bnRpZXMoKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIHN0b3JhZ2UgPSBwbHVnaW4uZ2V0Qm91bnRpZXNDb25maWcoKTsNCiAgICAgICAgc3RvcmFnZS5zZXQoImJvdW50aWVzIiwgbnVsbCk7IC8vIENsZWFyIGV4aXN0aW5nIGRhdGENCiAgICAgICAgc3RvcmFnZS5zZXQoImFub255bW91cy1ib3VudGllcyIsIG51bGwpOyAvLyBDbGVhciBhbm9ueW1vdXMgZGF0YQ0KICAgICAgICBmb3IgKE1hcC5FbnRyeTxVVUlELCBCb3VudHk+IGJvdW50eUVudHJ5IDogYm91bnRpZXMuZW50cnlTZXQoKSkgew0KICAgICAgICAgICAgVVVJRCB0YXJnZXRVVUlEID0gYm91bnR5RW50cnkuZ2V0S2V5KCk7DQogICAgICAgICAgICBCb3VudHkgYm91bnR5ID0gYm91bnR5RW50cnkuZ2V0VmFsdWUoKTsNCiAgICAgICAgICAgIGZvciAoQm91bnR5LlNwb25zb3Igc3BvbnNvciA6IGJvdW50eS5nZXRTcG9uc29ycygpKSB7DQogICAgICAgICAgICAgICAgVVVJRCBzZXR0ZXJVVUlEID0gc3BvbnNvci5nZXRQbGF5ZXJVVUlEKCk7DQogICAgICAgICAgICAgICAgU3RyaW5nIHBhdGggPSAiYm91bnRpZXMuIiArIHRhcmdldFVVSUQgKyAiLiIgKyBzZXR0ZXJVVUlEOw0KICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0KHBhdGggKyAiLmFtb3VudCIsIHNwb25zb3IuZ2V0TW9uZXkoKSk7DQogICAgICAgICAgICAgICAgc3RvcmFnZS5zZXQocGF0aCArICIueHAiLCBzcG9uc29yLmdldFhQKCkpOw0KICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0KHBhdGggKyAiLmR1cmF0aW9uIiwgc3BvbnNvci5nZXREdXJhdGlvbk1pbnV0ZXMoKSk7DQogICAgICAgICAgICAgICAgc3RvcmFnZS5zZXQocGF0aCArICIuc2V0X3RpbWUiLCBzcG9uc29yLmdldFNldFRpbWUoKSk7DQogICAgICAgICAgICAgICAgc3RvcmFnZS5zZXQocGF0aCArICIuZXhwaXJlX3RpbWUiLCBzcG9uc29yLmdldEV4cGlyZVRpbWUoKSk7DQogICAgICAgICAgICAgICAgc3RvcmFnZS5zZXQocGF0aCArICIubXVsdGlwbGllciIsIHNwb25zb3IuZ2V0TXVsdGlwbGllcigpKTsNCiAgICAgICAgICAgICAgICBzdG9yYWdlLnNldCgiYW5vbnltb3VzLWJvdW50aWVzLiIgKyB0YXJnZXRVVUlEICsgIi4iICsgc2V0dGVyVVVJRCwgc3BvbnNvci5pc0Fub255bW91cygpKTsNCiAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gaXRlbVN0cmluZ3MgPSBzcG9uc29yLmdldEl0ZW1zKCkuc3RyZWFtKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoaXRlbSAtPiBpdGVtLmdldEl0ZW0oKSAhPSBudWxsICYmICFpdGVtLmdldEl0ZW0oKS5nZXRUeXBlKCkuZXF1YWxzKE1hdGVyaWFsLkFJUikpDQogICAgICAgICAgICAgICAgICAgICAgICAubWFwKGl0ZW0gLT4gaXRlbS5nZXRJdGVtKCkuZ2V0VHlwZSgpLm5hbWUoKSArICI6IiArIGl0ZW0uZ2V0SXRlbSgpLmdldEFtb3VudCgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSk7DQogICAgICAgICAgICAgICAgc3RvcmFnZS5zZXQocGF0aCArICIuaXRlbXMiLCBpdGVtU3RyaW5ncyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcGx1Z2luLnNhdmVFdmVyeXRoaW5nKCk7DQogICAgfQ0KfdG9ueTI2L2JvdW50aWVzUGx1cy9Cb3VudHlTdGF0cy5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDA2NzU2IDE1MDI0MjE3NTQzIDAxNjI1MAAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXM7DQoNCmltcG9ydCBvcmcuYnVra2l0LkJ1a2tpdDsNCmltcG9ydCBvcmcuYnVra2l0LmNvbW1hbmQuQ29tbWFuZFNlbmRlcjsNCmltcG9ydCBvcmcuYnVra2l0LmVudGl0eS5QbGF5ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5DaGF0Q29sb3I7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy5NZXNzYWdlVXRpbHM7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy5QbGFjZWhvbGRlckNvbnRleHQ7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy5QbGFjZWhvbGRlcnM7DQoNCmltcG9ydCBqYXZhLnV0aWwuQXJyYXlzOw0KaW1wb3J0IGphdmEudXRpbC5MaXN0Ow0KaW1wb3J0IGphdmEudXRpbC5VVUlEOw0KaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlOw0KDQpwdWJsaWMgY2xhc3MgQm91bnR5U3RhdHMgew0KDQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KDQogICAgcHVibGljIEJvdW50eVN0YXRzKEJvdW50aWVzUGx1cyBwbHVnaW4pIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRXhlY3V0ZXMgdGhlIC9ib3VudHkgc3RhdHMgY29tbWFuZA0KICAgICAqIC8vIG5vdGU6IERpc3BsYXlzIGEgcGxheWVyJ3MgYm91bnR5IHN0YXRpc3RpY3MNCiAgICAgKi8NCiAgICAvKioNCiAgICAgKiBFeGVjdXRlcyB0aGUgL2JvdW50eSBzdGF0cyBjb21tYW5kDQogICAgICogLy8gbm90ZTogRGlzcGxheXMgYSBwbGF5ZXIncyBib3VudHkgc3RhdGlzdGljcw0KICAgICAqLw0KICAgIHB1YmxpYyBib29sZWFuIGV4ZWN1dGUoQ29tbWFuZFNlbmRlciBzZW5kZXIsIFN0cmluZ1tdIGFyZ3MpIHsNCiAgICAgICAgaWYgKCEoc2VuZGVyIGluc3RhbmNlb2YgUGxheWVyKSkgew0KICAgICAgICAgICAgc2VuZGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci5SRUQgKyAiVGhpcyBjb21tYW5kIGNhbiBvbmx5IGJlIHVzZWQgYnkgcGxheWVycyEiKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgUGxheWVyIHBsYXllciA9IChQbGF5ZXIpIHNlbmRlcjsNCiAgICAgICAgVVVJRCBwbGF5ZXJVVUlEID0gcGxheWVyLmdldFVuaXF1ZUlkKCk7DQoNCiAgICAgICAgaWYgKCFwbGF5ZXIuaGFzUGVybWlzc2lvbigiYm91bnRpZXNwbHVzLnN0YXRzIikpIHsNCiAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJuby1wZXJtaXNzaW9uIik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIENvbXBsZXRhYmxlRnV0dXJlLnJ1bkFzeW5jKCgpIC0+IHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgaW50IGNsYWltZWQgPSBwbHVnaW4uZ2V0TXlTUUwoKS5nZXRDbGFpbWVkKHBsYXllclVVSUQpLmdldCgpOw0KICAgICAgICAgICAgICAgIGludCBzdXJ2aXZlZCA9IHBsdWdpbi5nZXRNeVNRTCgpLmdldFN1cnZpdmVkKHBsYXllclVVSUQpLmdldCgpOw0KICAgICAgICAgICAgICAgIGRvdWJsZSBtb25leUVhcm5lZCA9IHBsdWdpbi5nZXRNeVNRTCgpLmdldE1vbmV5RWFybmVkKHBsYXllclVVSUQpLmdldCgpOw0KICAgICAgICAgICAgICAgIGludCB4cEVhcm5lZCA9IHBsdWdpbi5nZXRNeVNRTCgpLmdldFhQRWFybmVkKHBsYXllclVVSUQpLmdldCgpOw0KICAgICAgICAgICAgICAgIGRvdWJsZSB0b3RhbFZhbHVlRWFybmVkID0gcGx1Z2luLmdldE15U1FMKCkuZ2V0VG90YWxWYWx1ZUVhcm5lZChwbGF5ZXJVVUlEKS5nZXQoKTsNCg0KICAgICAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBtZXNzYWdlcyA9IHBsdWdpbi5nZXRNZXNzYWdlc0NvbmZpZygpLmdldFN0cmluZ0xpc3QoInN0YXRzLW1lc3NhZ2UiKTsNCiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZXMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzID0gQXJyYXlzLmFzTGlzdCgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjYmbFlvdXIgQm91bnR5IFN0YXRpc3RpY3M6IiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjdCb3VudGllcyBDbGFpbWVkOiAmZSVjbGFpbWVkJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiY3Qm91bnRpZXMgU3Vydml2ZWQ6ICZlJXN1cnZpdmVkJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiY3TW9uZXkgRWFybmVkOiAmYSQlbW9uZXlfZWFybmVkJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiY3WFAgRWFybmVkOiAmZSV4cF9lYXJuZWQlIExldmVscyIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiY3VG90YWwgVmFsdWUgRWFybmVkOiAmYSQldG90YWxfdmFsdWVfZWFybmVkJSINCiAgICAgICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnBsYXllcihwbGF5ZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAuYm91bnR5Q291bnQoY2xhaW1lZCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5ib3VudHlDb3VudChzdXJ2aXZlZCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC53aXRoQW1vdW50KG1vbmV5RWFybmVkKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmV4cFZhbHVlKHhwRWFybmVkKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnRvdGFsQm91bnR5QW1vdW50KHRvdGFsVmFsdWVFYXJuZWQpOw0KDQogICAgICAgICAgICAgICAgTGlzdDxTdHJpbmc+IHByb2Nlc3NlZE1lc3NhZ2VzID0gUGxhY2Vob2xkZXJzLmFwcGx5KG1lc3NhZ2VzLCBjb250ZXh0KTsNCiAgICAgICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFzayhwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgICAgICAgICAgZm9yIChTdHJpbmcgbWVzc2FnZSA6IHByb2Nlc3NlZE1lc3NhZ2VzKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkZhaWxlZCB0byBmZXRjaCBzdGF0cyBmb3IgIiArIHBsYXllclVVSUQgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrKHBsdWdpbiwgKCkgLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuUkVEICsgIkZhaWxlZCB0byByZXRyaWV2ZSB5b3VyIHN0YXRzISIpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAHRvbnkyNi9ib3VudGllc1BsdXMvQm91bnR5VGFiQ29tcGxldGVyLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAxMzMwNCAxNTAyNDE3NzM0MCAwMTc1MTYAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzOw0KaW1wb3J0IG9yZy5idWtraXQuQnVra2l0Ow0KaW1wb3J0IG9yZy5idWtraXQuY29tbWFuZC5Db21tYW5kOw0KaW1wb3J0IG9yZy5idWtraXQuY29tbWFuZC5Db21tYW5kU2VuZGVyOw0KaW1wb3J0IG9yZy5idWtraXQuY29tbWFuZC5UYWJDb21wbGV0ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KDQppbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDsNCmltcG9ydCBqYXZhLnV0aWwuQXJyYXlzOw0KaW1wb3J0IGphdmEudXRpbC5MaXN0Ow0KaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uQ29sbGVjdG9yczsNCg0KcHVibGljIGNsYXNzIEJvdW50eVRhYkNvbXBsZXRlciBpbXBsZW1lbnRzIFRhYkNvbXBsZXRlciB7DQoNCiAgICBAT3ZlcnJpZGUNCiAgICBwdWJsaWMgTGlzdDxTdHJpbmc+IG9uVGFiQ29tcGxldGUoQ29tbWFuZFNlbmRlciBzZW5kZXIsIENvbW1hbmQgY29tbWFuZCwgU3RyaW5nIGFsaWFzLCBTdHJpbmdbXSBhcmdzKSB7DQogICAgICAgIExpc3Q8U3RyaW5nPiBjb21wbGV0aW9ucyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KDQogICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PSAxKSB7DQogICAgICAgICAgICAvLyBNYWluIHN1YmNvbW1hbmRzDQogICAgICAgICAgICBpZiAoc2VuZGVyLmhhc1Blcm1pc3Npb24oImJvdW50aWVzcGx1cy5ib3VudHkiKSkgew0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgic2V0Iik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoc2VuZGVyLmhhc1Blcm1pc3Npb24oImJvdW50aWVzcGx1cy5ib3VudHkuYm9vc3QiKSkgew0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiYm9vc3QiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChzZW5kZXIuaGFzUGVybWlzc2lvbigiYm91bnRpZXNwbHVzLmJvdW50eS5jaGVjayIpKSB7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCJjaGVjayIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHNlbmRlci5oYXNQZXJtaXNzaW9uKCJib3VudGllc3BsdXMuYm91bnR5LmNhbmNlbCIpKSB7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCJjYW5jZWwiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChzZW5kZXIuaGFzUGVybWlzc2lvbigiYm91bnRpZXNwbHVzLmJvdW50eS5zdGF0cyIpKSB7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCJzdGF0cyIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHNlbmRlci5oYXNQZXJtaXNzaW9uKCJib3VudGllc3BsdXMuYm91bnR5LnN0YXR1cyIpKSB7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCJzdGF0dXMiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChzZW5kZXIuaGFzUGVybWlzc2lvbigiYm91bnRpZXNwbHVzLmJvdW50eS5naXZlIikpIHsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoImdpdmUiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChzZW5kZXIuaGFzUGVybWlzc2lvbigiYm91bnRpZXNwbHVzLmJvdW50eS5yZWxvYWQiKSkgew0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgicmVsb2FkIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoc2VuZGVyLmhhc1Blcm1pc3Npb24oImJvdW50aWVzcGx1cy5hZG1pbi5mcmVuenkiKSkgew0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiZnJlbnp5Iik7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT0gMikgew0KICAgICAgICAgICAgLy8gUGxheWVyIG5hbWVzIGZvciBzZXQsIGNoZWNrLCBib29zdCBjb21tYW5kcw0KICAgICAgICAgICAgaWYgKGFyZ3NbMF0uZXF1YWxzSWdub3JlQ2FzZSgic2V0IikgfHwgYXJnc1swXS5lcXVhbHNJZ25vcmVDYXNlKCJjaGVjayIpIHx8DQogICAgICAgICAgICAgICAgICAgIGFyZ3NbMF0uZXF1YWxzSWdub3JlQ2FzZSgiYm9vc3QiKSB8fCBhcmdzWzBdLmVxdWFsc0lnbm9yZUNhc2UoImdpdmUiKSkgew0KICAgICAgICAgICAgICAgIGZvciAoUGxheWVyIHBsYXllciA6IEJ1a2tpdC5nZXRPbmxpbmVQbGF5ZXJzKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKHBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJnc1swXS5lcXVhbHNJZ25vcmVDYXNlKCJmcmVuenkiKSkgew0KICAgICAgICAgICAgICAgIC8vIER1cmF0aW9uIHN1Z2dlc3Rpb25zIGZvciBmcmVuenkgY29tbWFuZCAoaW4gc2Vjb25kcykNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGRBbGwoQXJyYXlzLmFzTGlzdCgiMzAiLCAiNjAiLCAiMTIwIiwgIjMwMCIsICI2MDAiKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT0gMykgew0KICAgICAgICAgICAgaWYgKGFyZ3NbMF0uZXF1YWxzSWdub3JlQ2FzZSgiYm9vc3QiKSkgew0KICAgICAgICAgICAgICAgIC8vIEJvb3N0IHR5cGUgb3B0aW9ucw0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiTW9uZXkiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoIlhQIik7DQogICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3NbMF0uZXF1YWxzSWdub3JlQ2FzZSgiZ2l2ZSIpKSB7DQogICAgICAgICAgICAgICAgLy8gQXZhaWxhYmxlIGl0ZW1zIGZvciBnaXZlIGNvbW1hbmQNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoInRyYWNrZXIiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoImphbW1lciIpOw0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgidWF2Iik7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCJtYW51YWwtYm9vc3QiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoIm1hbnVhbC1mcmVuenkiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoImNocm9ub3Mtc2hhcmQiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoInJldmVyc2UtYm91bnR5Iik7DQogICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3NbMF0uZXF1YWxzSWdub3JlQ2FzZSgiZnJlbnp5IikpIHsNCiAgICAgICAgICAgICAgICAvLyBNdWx0aXBsaWVyIHN1Z2dlc3Rpb25zIGZvciBmcmVuenkgY29tbWFuZA0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZEFsbChBcnJheXMuYXNMaXN0KCIxLjUiLCAiMi4wIiwgIjIuNSIsICIzLjAiLCAiNC4wIiwgIjUuMCIpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PSA0KSB7DQogICAgICAgICAgICBpZiAoYXJnc1swXS5lcXVhbHNJZ25vcmVDYXNlKCJib29zdCIpKSB7DQogICAgICAgICAgICAgICAgLy8gTXVsdGlwbGllciBzdWdnZXN0aW9ucw0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiMS41Iik7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCIyLjAiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoIjMuMCIpOw0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiNS4wIik7DQogICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3NbMF0uZXF1YWxzSWdub3JlQ2FzZSgiZ2l2ZSIpKSB7DQogICAgICAgICAgICAgICAgLy8gQW1vdW50IHN1Z2dlc3Rpb25zIGZvciBnaXZlIGNvbW1hbmQNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoIjEiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoIjUiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoIjEwIik7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCIxNiIpOw0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiMzIiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoIjY0Iik7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT0gNSkgew0KICAgICAgICAgICAgaWYgKGFyZ3NbMF0uZXF1YWxzSWdub3JlQ2FzZSgiYm9vc3QiKSkgew0KICAgICAgICAgICAgICAgIC8vIFRpbWUgc3VnZ2VzdGlvbnMgKGluIG1pbnV0ZXMpDQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCI1Iik7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCIxMCIpOw0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiMzAiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoIjYwIik7DQogICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3NbMF0uZXF1YWxzSWdub3JlQ2FzZSgiZ2l2ZSIpICYmIGFyZ3NbMl0uZXF1YWxzSWdub3JlQ2FzZSgibWFudWFsLWZyZW56eSIpKSB7DQogICAgICAgICAgICAgICAgLy8gTXVsdGlwbGllciBzdWdnZXN0aW9ucyBmb3IgbWFudWFsLWZyZW56eQ0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiMS41Iik7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCIyLjAiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoIjIuNSIpOw0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiMy4wIik7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCI1LjAiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PSA2KSB7DQogICAgICAgICAgICBpZiAoYXJnc1swXS5lcXVhbHNJZ25vcmVDYXNlKCJnaXZlIikgJiYgYXJnc1syXS5lcXVhbHNJZ25vcmVDYXNlKCJtYW51YWwtZnJlbnp5IikpIHsNCiAgICAgICAgICAgICAgICAvLyBUaW1lIHN1Z2dlc3Rpb25zIGZvciBtYW51YWwtZnJlbnp5IChpbiBtaW51dGVzKQ0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiNSIpOw0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiMTAiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoIjE1Iik7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCIzMCIpOw0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiNjAiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PSA3KSB7DQogICAgICAgICAgICBpZiAoYXJnc1swXS5lcXVhbHNJZ25vcmVDYXNlKCJnaXZlIikgJiYgYXJnc1syXS5lcXVhbHNJZ25vcmVDYXNlKCJtYW51YWwtZnJlbnp5IikpIHsNCiAgICAgICAgICAgICAgICAvLyBGYWlsdXJlIGNoYW5jZSBzdWdnZXN0aW9ucyBmb3IgbWFudWFsLWZyZW56eQ0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiMC4wIik7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCIwLjEiKTsNCiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5hZGQoIjAuMiIpOw0KICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLmFkZCgiMC4zIik7DQogICAgICAgICAgICAgICAgY29tcGxldGlvbnMuYWRkKCIwLjUiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEZpbHRlciBjb21wbGV0aW9ucyBiYXNlZCBvbiB3aGF0IHRoZSB1c2VyIGhhcyB0eXBlZA0KICAgICAgICByZXR1cm4gY29tcGxldGlvbnMuc3RyZWFtKCkNCiAgICAgICAgICAgICAgICAuZmlsdGVyKGNvbXBsZXRpb24gLT4gY29tcGxldGlvbi50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYXJnc1thcmdzLmxlbmd0aCAtIDFdLnRvTG93ZXJDYXNlKCkpKQ0KICAgICAgICAgICAgICAgIC5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpOw0KICAgIH0NCn0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy9Cb3VudHlUZWFtQ2hlY2suamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDEyMTczIDE1MDI0Mzc0MTAwIDAxNjc1NQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXM7DQoNCmltcG9ydCBvcmcuYnVra2l0LkJ1a2tpdDsNCmltcG9ydCBvcmcuYnVra2l0Lk9mZmxpbmVQbGF5ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLkNvbmZpZ3VyYXRpb25TZWN0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LnNjb3JlYm9hcmQuU2NvcmVib2FyZDsNCmltcG9ydCBvcmcuYnVra2l0LnNjb3JlYm9hcmQuVGVhbTsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLk1lc3NhZ2VVdGlsczsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlBsYWNlaG9sZGVyQ29udGV4dDsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlBsYWNlaG9sZGVyczsNCg0KcHVibGljIGNsYXNzIEJvdW50eVRlYW1DaGVjayB7DQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KDQogICAgcHVibGljIEJvdW50eVRlYW1DaGVjayhCb3VudGllc1BsdXMgcGx1Z2luKSB7DQogICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiB0d28gcGxheWVycyBhcmUgaW4gdGhlIHNhbWUgZ3JvdXAgYmFzZWQgb24gc2V0dGluZ3MgaW4gQm91bnR5VGVhbUNoZWNrcy55bWwuDQogICAgICogQHBhcmFtIHNldHRlciBUaGUgcGxheWVyIHNldHRpbmcgdGhlIGJvdW50eSBvciBjbGFpbWluZyBpdC4NCiAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgcGxheWVyLg0KICAgICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGV5IGFyZSBpbiB0aGUgc2FtZSBncm91cCBhbmQgdGhlIGFjdGlvbiBzaG91bGQgYmUgYmxvY2tlZCwgZmFsc2Ugb3RoZXJ3aXNlLg0KICAgICAqLw0KICAgIHB1YmxpYyBib29sZWFuIGFyZVBsYXllcnNJblNhbWVHcm91cChQbGF5ZXIgc2V0dGVyLCBPZmZsaW5lUGxheWVyIHRhcmdldCkgew0KICAgICAgICBpZiAoIXRhcmdldC5pc09ubGluZSgpKSB7DQogICAgICAgICAgICAvLyBTa2lwIGNoZWNrcyBmb3Igb2ZmbGluZSBwbGF5ZXJzOyBhc3N1bWUgbm90IGluIHNhbWUgZ3JvdXANCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICBQbGF5ZXIgdGFyZ2V0UGxheWVyID0gdGFyZ2V0LmdldFBsYXllcigpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0VGVhbUNoZWNrc0NvbmZpZygpOw0KICAgICAgICBDb25maWd1cmF0aW9uU2VjdGlvbiBjaGVja3MgPSBjb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oImdyb3VwLWNoZWNrcyIpOw0KICAgICAgICBpZiAoY2hlY2tzID09IG51bGwpIHJldHVybiBmYWxzZTsNCg0KICAgICAgICBmb3IgKFN0cmluZyBjaGVja05hbWUgOiBjaGVja3MuZ2V0S2V5cyhmYWxzZSkpIHsNCiAgICAgICAgICAgIENvbmZpZ3VyYXRpb25TZWN0aW9uIGNoZWNrID0gY2hlY2tzLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKGNoZWNrTmFtZSk7DQogICAgICAgICAgICBTdHJpbmcgdHlwZSA9IGNoZWNrLmdldFN0cmluZygidHlwZSIsICIiKS50b0xvd2VyQ2FzZSgpOw0KDQogICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHsNCiAgICAgICAgICAgICAgICBjYXNlICJzY29yZWJvYXJkIjoNCiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrU2NvcmVib2FyZChzZXR0ZXIsIHRhcmdldFBsYXllciwgY2hlY2spKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICJwZXJtaXNzaW9uIjoNCiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrUGVybWlzc2lvbihzZXR0ZXIsIHRhcmdldFBsYXllciwgY2hlY2spKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICJjb21tYW5kIjoNCiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrQ29tbWFuZChzZXR0ZXIsIHRhcmdldFBsYXllciwgY2hlY2spKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBib29sZWFuIGNoZWNrU2NvcmVib2FyZChQbGF5ZXIgc2V0dGVyLCBQbGF5ZXIgdGFyZ2V0LCBDb25maWd1cmF0aW9uU2VjdGlvbiBjaGVjaykgew0KICAgICAgICBTdHJpbmcgcHJlZml4ID0gY2hlY2suZ2V0U3RyaW5nKCJ0ZWFtLXByZWZpeCIsICIiKTsNCiAgICAgICAgU2NvcmVib2FyZCBzY29yZWJvYXJkID0gc2V0dGVyLmdldFNjb3JlYm9hcmQoKTsNCiAgICAgICAgVGVhbSBzZXR0ZXJUZWFtID0gc2NvcmVib2FyZC5nZXRFbnRyeVRlYW0oc2V0dGVyLmdldE5hbWUoKSk7DQogICAgICAgIFRlYW0gdGFyZ2V0VGVhbSA9IHNjb3JlYm9hcmQuZ2V0RW50cnlUZWFtKHRhcmdldC5nZXROYW1lKCkpOw0KDQogICAgICAgIGlmIChzZXR0ZXJUZWFtICE9IG51bGwgJiYgdGFyZ2V0VGVhbSAhPSBudWxsICYmDQogICAgICAgICAgICAgICAgc2V0dGVyVGVhbS5nZXROYW1lKCkuc3RhcnRzV2l0aChwcmVmaXgpICYmIHNldHRlclRlYW0uZXF1YWxzKHRhcmdldFRlYW0pKSB7DQogICAgICAgICAgICBzZW5kRXJyb3JNZXNzYWdlKHNldHRlciwgY2hlY2suZ2V0U3RyaW5nKCJlcnJvci1tZXNzYWdlIiwgIllvdSBjYW5ub3QgdGFyZ2V0IGEgdGVhbW1hdGUhIiksIHRhcmdldCk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBib29sZWFuIGNoZWNrUGVybWlzc2lvbihQbGF5ZXIgc2V0dGVyLCBQbGF5ZXIgdGFyZ2V0LCBDb25maWd1cmF0aW9uU2VjdGlvbiBjaGVjaykgew0KICAgICAgICBTdHJpbmcgbm9kZSA9IGNoZWNrLmdldFN0cmluZygibm9kZSIsICIiKTsNCiAgICAgICAgaWYgKCFub2RlLmlzRW1wdHkoKSAmJiBzZXR0ZXIuaGFzUGVybWlzc2lvbihub2RlKSAmJiB0YXJnZXQuaGFzUGVybWlzc2lvbihub2RlKSkgew0KICAgICAgICAgICAgc2VuZEVycm9yTWVzc2FnZShzZXR0ZXIsIGNoZWNrLmdldFN0cmluZygiZXJyb3ItbWVzc2FnZSIsICJZb3UgY2Fubm90IHRhcmdldCBzb21lb25lIHdpdGggdGhlIHNhbWUgcGVybWlzc2lvbiEiKSwgdGFyZ2V0KTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICBwcml2YXRlIGJvb2xlYW4gY2hlY2tDb21tYW5kKFBsYXllciBzZXR0ZXIsIFBsYXllciB0YXJnZXQsIENvbmZpZ3VyYXRpb25TZWN0aW9uIGNoZWNrKSB7DQogICAgICAgIFN0cmluZyBjb21tYW5kID0gY2hlY2suZ2V0U3RyaW5nKCJjb21tYW5kIiwgIiIpOw0KICAgICAgICBTdHJpbmcgcmVnZXggPSBjaGVjay5nZXRTdHJpbmcoInJlZ2V4IiwgIiIpOw0KICAgICAgICBpZiAoY29tbWFuZC5pc0VtcHR5KCkgfHwgcmVnZXguaXNFbXB0eSgpKSByZXR1cm4gZmFsc2U7DQoNCiAgICAgICAgLy8gUGxhY2Vob2xkZXIgcmVwbGFjZW1lbnQgZm9yIGNvbW1hbmQNCiAgICAgICAgU3RyaW5nIHNldHRlckNvbW1hbmQgPSBjb21tYW5kLnJlcGxhY2UoIiVwbGF5ZXIlIiwgc2V0dGVyLmdldE5hbWUoKSk7DQogICAgICAgIFN0cmluZyB0YXJnZXRDb21tYW5kID0gY29tbWFuZC5yZXBsYWNlKCIlcGxheWVyJSIsIHRhcmdldC5nZXROYW1lKCkpOw0KDQogICAgICAgIC8vIEV4ZWN1dGUgY29tbWFuZHMgc3luY2hyb25vdXNseSBhbmQgcGFyc2Ugb3V0cHV0IChwbGFjZWhvbGRlciBpbXBsZW1lbnRhdGlvbikNCiAgICAgICAgU3RyaW5nIHNldHRlckdyb3VwID0gZXhlY3V0ZUNvbW1hbmRBbmRQYXJzZShzZXR0ZXJDb21tYW5kLCByZWdleCk7DQogICAgICAgIFN0cmluZyB0YXJnZXRHcm91cCA9IGV4ZWN1dGVDb21tYW5kQW5kUGFyc2UodGFyZ2V0Q29tbWFuZCwgcmVnZXgpOw0KDQogICAgICAgIGlmIChzZXR0ZXJHcm91cCAhPSBudWxsICYmIHNldHRlckdyb3VwLmVxdWFscyh0YXJnZXRHcm91cCkpIHsNCiAgICAgICAgICAgIHNlbmRFcnJvck1lc3NhZ2Uoc2V0dGVyLCBjaGVjay5nZXRTdHJpbmcoImVycm9yLW1lc3NhZ2UiLCAiWW91IGNhbm5vdCB0YXJnZXQgc29tZW9uZSBpbiB5b3VyIGdyb3VwISIpLCB0YXJnZXQpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIHByaXZhdGUgU3RyaW5nIGV4ZWN1dGVDb21tYW5kQW5kUGFyc2UoU3RyaW5nIGNvbW1hbmQsIFN0cmluZyByZWdleCkgew0KICAgICAgICAvLyBUaGlzIGlzIGEgcGxhY2Vob2xkZXI7IGFjdHVhbCBpbXBsZW1lbnRhdGlvbiByZXF1aXJlcyBjYXB0dXJpbmcgY29tbWFuZCBvdXRwdXQNCiAgICAgICAgLy8gRm9yIG5vdywgcmV0dXJuIG51bGwgdG8gaW5kaWNhdGUgdW5pbXBsZW1lbnRlZA0KICAgICAgICAvLyBZb3Ugd291bGQgbmVlZCB0byB1c2UgQnVra2l0LmRpc3BhdGNoQ29tbWFuZCBhbmQgYSBjdXN0b20gQ29tbWFuZFNlbmRlciB0byBjYXB0dXJlIG91dHB1dA0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgc2VuZEVycm9yTWVzc2FnZShQbGF5ZXIgc2VuZGVyLCBTdHJpbmcgbWVzc2FnZSwgUGxheWVyIHRhcmdldCkgew0KICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgIC5wbGF5ZXIoc2VuZGVyKQ0KICAgICAgICAgICAgICAgIC50YXJnZXQodGFyZ2V0LmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICBTdHJpbmcgZm9ybWF0dGVkTWVzc2FnZSA9IFBsYWNlaG9sZGVycy5hcHBseShtZXNzYWdlLCBjb250ZXh0KTsNCiAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHNlbmRlciwgZm9ybWF0dGVkTWVzc2FnZSk7DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy9GcmVuenkuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDM3MDU0IDE1MDI1MjI0MzI3IDAxNTIyMAAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXM7DQoNCmltcG9ydCBvcmcuYnVra2l0LkJ1a2tpdDsNCmltcG9ydCBvcmcuYnVra2l0LkNoYXRDb2xvcjsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uQ29uZmlndXJhdGlvblNlY3Rpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuRmlsZUNvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuc2NoZWR1bGVyLkJ1a2tpdFJ1bm5hYmxlOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuVmVyc2lvblV0aWxzOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuVGltZUZvcm1hdHRlcjsNCg0KDQppbXBvcnQgamF2YS51dGlsLio7DQoNCnB1YmxpYyBjbGFzcyBGcmVuenkgew0KDQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KICAgIHByaXZhdGUgT2JqZWN0IGJvc3NCYXI7IC8vIFVzaW5nIE9iamVjdCBmb3IgdmVyc2lvbiBjb21wYXRpYmlsaXR5DQogICAgcHJpdmF0ZSBpbnQgZnJlbnp5SW50ZXJ2YWw7DQogICAgcHJpdmF0ZSBpbnQgZnJlbnp5RHVyYXRpb247DQogICAgcHJpdmF0ZSBSYW5kb20gcmFuZG9tID0gbmV3IFJhbmRvbSgpOw0KICAgIHByaXZhdGUgTWFwPERvdWJsZSwgRG91YmxlPiBtdWx0aXBsaWVyQ2hhbmNlczsNCiAgICBwcml2YXRlIFN0cmluZyBmcmVuenlUaXRsZTsNCiAgICBwcml2YXRlIFN0cmluZyBmcmVuenlTdWJ0aXRsZTsNCiAgICBwcml2YXRlIGJvb2xlYW4gZW5hYmxlVGl0bGVTdWJ0aXRsZTsNCiAgICBwcml2YXRlIGJvb2xlYW4gYm9zc2JhckVuYWJsZWQ7DQogICAgcHJpdmF0ZSBpbnQgZGlzcGxheUJlZm9yZUZyZW56eTsNCiAgICBwcml2YXRlIFN0cmluZyBib3NzYmFyTWVzc2FnZTsNCiAgICBwcml2YXRlIGZpbmFsIFNldDxQbGF5ZXI+IG9ubGluZVBsYXllcnMgPSBuZXcgSGFzaFNldDw+KCk7DQogICAgcHJpdmF0ZSBpbnQgdGFza0lkID0gLTE7DQogICAgcHJpdmF0ZSBib29sZWFuIGZyZW56eUFjdGl2ZSA9IGZhbHNlOw0KICAgIHByaXZhdGUgZG91YmxlIGN1cnJlbnRGcmVuenlNdWx0aXBsaWVyID0gMS4wOw0KICAgIHByaXZhdGUgbG9uZyBmcmVuenlTdGFydFRpbWUgPSAwOw0KICAgIHByaXZhdGUgbG9uZyBmcmVuenlFbmRUaW1lID0gMDsNCiAgICBwcml2YXRlIGJvb2xlYW4gaXNNYW51YWxGcmVuenkgPSBmYWxzZTsgLy8gVHJhY2sgaWYgY3VycmVudCBmcmVuenkgaXMgbWFudWFsDQoNCiAgICAvLyBUcmFja2luZyBmb3IgbGFzdCBmcmVuenkgaW5mbw0KICAgIHByaXZhdGUgZG91YmxlIGxhc3RGcmVuenlNdWx0aXBsaWVyID0gMS4wOw0KICAgIHByaXZhdGUgbG9uZyBsYXN0RnJlbnp5VGltZSA9IDA7DQogICAgcHJpdmF0ZSBsb25nIGxhc3RGcmVuenlTdGFydFRpbWUgPSAwOw0KDQogICAgLyoqDQogICAgICogQ29uc3RydWN0cyB0aGUgRnJlbnp5IG1hbmFnZXINCiAgICAgKiAvLyBub3RlOiBJbml0aWFsaXplcyBmcmVuenkgbW9kZSBhbmQgc3RhcnRzIHRoZSBmcmVuenkgY3ljbGUNCiAgICAgKi8NCiAgICBwdWJsaWMgRnJlbnp5KEJvdW50aWVzUGx1cyBwbHVnaW4sIExpc3Q8U3RyaW5nPiB3YXJuaW5ncykgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICAgICAgbG9hZENvbmZpZyh3YXJuaW5ncyk7DQogICAgICAgIHN0YXJ0RnJlbnp5Q3ljbGUoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBMb2FkcyBmcmVuenkgY29uZmlndXJhdGlvbiBmcm9tIGNvbmZpZy55bWwNCiAgICAgKiAvLyBub3RlOiBJbml0aWFsaXplcyBmcmVuenkgc2V0dGluZ3MgYW5kIGNvbGxlY3RzIHdhcm5pbmdzIGZvciBtaXNzaW5nIG9yIGludmFsaWQgY29uZmlndXJhdGlvbnMNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgbG9hZENvbmZpZyhMaXN0PFN0cmluZz4gd2FybmluZ3MpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldENvbmZpZygpOw0KICAgICAgICBmcmVuenlJbnRlcnZhbCA9IE1hdGgubWF4KDEsIGNvbmZpZy5nZXRJbnQoImZyZW56eS1tb2RlLmZyZW56eS1pbnRlcnZhbCIsIDMwMCkpOyAvLyA1IG1pbnV0ZXMgZGVmYXVsdA0KICAgICAgICBmcmVuenlEdXJhdGlvbiA9IE1hdGgubWF4KDEsIGNvbmZpZy5nZXRJbnQoImZyZW56eS1tb2RlLmZyZW56eS1kdXJhdGlvbiIsIDYwKSk7IC8vIDEgbWludXRlIGRlZmF1bHQNCiAgICAgICAgbXVsdGlwbGllckNoYW5jZXMgPSBuZXcgTGlua2VkSGFzaE1hcDw+KCk7DQoNCiAgICAgICAgQ29uZmlndXJhdGlvblNlY3Rpb24gbXVsdGlwbGllclNlY3Rpb24gPSBjb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oImZyZW56eS1tb2RlLm11bHRpcGxpZXItY2hhbmNlcyIpOw0KICAgICAgICBpZiAobXVsdGlwbGllclNlY3Rpb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgd2FybmluZ3MuYWRkKCJGcmVuenkgbXVsdGlwbGllciBjaGFuY2VzIG5vdCBmb3VuZCwgdXNpbmcgZGVmYXVsdDogMnggKDUwJSksIDN4ICgzMCUpLCA1eCAoMjAlKSIpOw0KICAgICAgICAgICAgbXVsdGlwbGllckNoYW5jZXMucHV0KDIuMCwgNTAuMCk7DQogICAgICAgICAgICBtdWx0aXBsaWVyQ2hhbmNlcy5wdXQoMy4wLCAzMC4wKTsNCiAgICAgICAgICAgIG11bHRpcGxpZXJDaGFuY2VzLnB1dCg1LjAsIDIwLjApOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZm9yIChTdHJpbmcga2V5IDogbXVsdGlwbGllclNlY3Rpb24uZ2V0S2V5cyhmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBkb3VibGUgbXVsdGlwbGllciA9IERvdWJsZS5wYXJzZURvdWJsZShrZXkpOw0KICAgICAgICAgICAgICAgICAgICBkb3VibGUgY2hhbmNlID0gbXVsdGlwbGllclNlY3Rpb24uZ2V0RG91YmxlKGtleSk7DQogICAgICAgICAgICAgICAgICAgIGlmIChjaGFuY2UgPCAwIHx8IG11bHRpcGxpZXIgPD0gMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ3MuYWRkKCJJbnZhbGlkIGZyZW56eSBtdWx0aXBsaWVyIG9yIGNoYW5jZTogIiArIGtleSk7DQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBtdWx0aXBsaWVyQ2hhbmNlcy5wdXQobXVsdGlwbGllciwgY2hhbmNlKTsNCiAgICAgICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncy5hZGQoIkludmFsaWQgZnJlbnp5IG11bHRpcGxpZXIgZm9ybWF0OiAiICsga2V5KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBmcmVuenlUaXRsZSA9IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgY29uZmlnLmdldFN0cmluZygiZnJlbnp5LW1vZGUuZnJlbnp5LXRpdGxlIiwgIiZjJmxGUkVOWlkgTU9ERSBBQ1RJVkFURUQhIikpOw0KICAgICAgICBmcmVuenlTdWJ0aXRsZSA9IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgY29uZmlnLmdldFN0cmluZygiZnJlbnp5LW1vZGUuZnJlbnp5LXN1YnRpdGxlIiwgIiZlJmxBbGwgYm91bnRpZXMgYm9vc3RlZCBieSAmYyZsJW11bHRpcGxpZXIleCAmZSZsZm9yICVkdXJhdGlvbiVzISIpKTsNCiAgICAgICAgZW5hYmxlVGl0bGVTdWJ0aXRsZSA9IGNvbmZpZy5nZXRCb29sZWFuKCJmcmVuenktbW9kZS5lbmFibGUtdGl0bGUtc3VidGl0bGUiLCB0cnVlKTsNCiAgICAgICAgYm9zc2JhckVuYWJsZWQgPSBjb25maWcuZ2V0Qm9vbGVhbigiZnJlbnp5LW1vZGUuYm9zc2Jhci5lbmFibGVkIiwgdHJ1ZSk7DQogICAgICAgIGRpc3BsYXlCZWZvcmVGcmVuenkgPSBNYXRoLm1heCgxLCBjb25maWcuZ2V0SW50KCJmcmVuenktbW9kZS5ib3NzYmFyLmRpc3BsYXktYmVmb3JlLWZyZW56eSIsIDUpKTsNCiAgICAgICAgYm9zc2Jhck1lc3NhZ2UgPSBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGNvbmZpZy5nZXRTdHJpbmcoImZyZW56eS1tb2RlLmJvc3NiYXIubWVzc2FnZSIsICImYyZsRnJlbnp5IE1vZGUgaW4gJXRpbWUlIikpOw0KDQogICAgICAgIC8vIENoZWNrIGlmIGJvc3MgYmFycyBhcmUgYXZhaWxhYmxlIGluIHRoaXMgdmVyc2lvbg0KICAgICAgICBpZiAoYm9zc2JhckVuYWJsZWQgJiYgIVZlcnNpb25VdGlscy5pc1Bvc3QxOSgpKSB7DQogICAgICAgICAgICB3YXJuaW5ncy5hZGQoIkJvc3MgYmFycyBub3Qgc3VwcG9ydGVkIGluIE1pbmVjcmFmdCAiICsgVmVyc2lvblV0aWxzLmdldFZlcnNpb25TdHJpbmcoKSArICIsIGRpc2FibGluZyBmcmVuenkgYm9zcyBiYXIgZmVhdHVyZS4iKTsNCiAgICAgICAgICAgIGJvc3NiYXJFbmFibGVkID0gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgc3RhcnRGcmVuenlDeWNsZSgpIHsNCiAgICAgICAgdGFza0lkID0gQnVra2l0LmdldFNjaGVkdWxlcigpLnNjaGVkdWxlU3luY1JlcGVhdGluZ1Rhc2socGx1Z2luLCAoKSAtPiB7DQogICAgICAgICAgICBpZiAob25saW5lUGxheWVycy5zaXplKCkgPCAyKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBNYXA8VVVJRCwgTWFwPFVVSUQsIEludGVnZXI+PiBhbGxCb3VudGllcyA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkubGlzdEFsbEJvdW50aWVzKCk7DQogICAgICAgICAgICBpZiAoYWxsQm91bnRpZXMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBDcmVhdGUgYm9zcyBiYXIgaWYgc3VwcG9ydGVkIGFuZCBlbmFibGVkDQogICAgICAgICAgICBpZiAoYm9zc2JhckVuYWJsZWQgJiYgYm9zc0JhciA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgYm9zc0JhciA9IFZlcnNpb25VdGlscy5jcmVhdGVCb3NzQmFyKGJvc3NiYXJNZXNzYWdlLnJlcGxhY2UoIiV0aW1lJSIsIFN0cmluZy52YWx1ZU9mKGRpc3BsYXlCZWZvcmVGcmVuenkpKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIERpc3BsYXkgY291bnRkb3duIGFuZCB0aGVuIGFjdGl2YXRlIGZyZW56eQ0KICAgICAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2tMYXRlcihwbHVnaW4sIHRoaXM6OmFjdGl2YXRlRnJlbnp5LCAoZnJlbnp5SW50ZXJ2YWwgLSBkaXNwbGF5QmVmb3JlRnJlbnp5KSAqIDIwTCk7DQogICAgICAgIH0sIDBMLCBmcmVuenlJbnRlcnZhbCAqIDIwTCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQWN0aXZhdGVzIG1hbnVhbCBmcmVuenkgbW9kZSB3aXRoIGN1c3RvbSBwYXJhbWV0ZXJzDQogICAgICogQHBhcmFtIG11bHRpcGxpZXIgVGhlIG11bHRpcGxpZXIgdG8gYXBwbHkgdG8gYWxsIGJvdW50aWVzDQogICAgICogQHBhcmFtIGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBpbiBzZWNvbmRzDQogICAgICogQHJldHVybiB0cnVlIGlmIGZyZW56eSB3YXMgc3VjY2Vzc2Z1bGx5IGFjdGl2YXRlZCwgZmFsc2Ugb3RoZXJ3aXNlDQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gYWN0aXZhdGVNYW51YWxGcmVuenkoZG91YmxlIG11bHRpcGxpZXIsIGludCBkdXJhdGlvbikgew0KICAgICAgICAvLyBDaGVjayBpZiBmcmVuenkgaXMgYWxyZWFkeSBhY3RpdmUNCiAgICAgICAgaWYgKGZyZW56eUFjdGl2ZSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgYXJlIGJvdW50aWVzIHRvIGJvb3N0DQogICAgICAgIE1hcDxVVUlELCBNYXA8VVVJRCwgSW50ZWdlcj4+IGFsbEJvdW50aWVzID0gcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5saXN0QWxsQm91bnRpZXMoKTsNCiAgICAgICAgaWYgKGFsbEJvdW50aWVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gU3RvcmUgbGFzdCBmcmVuenkgaW5mbyBiZWZvcmUgc2V0dGluZyBuZXcgZnJlbnp5DQogICAgICAgIGlmIChmcmVuenlBY3RpdmUpIHsNCiAgICAgICAgICAgIGxhc3RGcmVuenlNdWx0aXBsaWVyID0gY3VycmVudEZyZW56eU11bHRpcGxpZXI7DQogICAgICAgICAgICBsYXN0RnJlbnp5VGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gU2V0IHVwIG1hbnVhbCBmcmVuenkNCiAgICAgICAgY3VycmVudEZyZW56eU11bHRpcGxpZXIgPSBtdWx0aXBsaWVyOw0KICAgICAgICBmcmVuenlBY3RpdmUgPSB0cnVlOw0KICAgICAgICBpc01hbnVhbEZyZW56eSA9IHRydWU7DQogICAgICAgIGZyZW56eVN0YXJ0VGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOw0KICAgICAgICBmcmVuenlFbmRUaW1lID0gZnJlbnp5U3RhcnRUaW1lICsgKGR1cmF0aW9uICogMTAwMEwpOw0KICAgICAgICBsYXN0RnJlbnp5U3RhcnRUaW1lID0gZnJlbnp5U3RhcnRUaW1lOw0KDQogICAgICAgIC8vIE5vdGlmeSBwbGF5ZXJzIHdpdGggY3VzdG9tIGR1cmF0aW9uDQogICAgICAgIG5vdGlmeVBsYXllcnMoY3VycmVudEZyZW56eU11bHRpcGxpZXIsIGR1cmF0aW9uKTsNCg0KICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiTWFudWFsIEZyZW56eSBNb2RlIGFjdGl2YXRlZDogTXVsdGlwbGllcj0iICsgY3VycmVudEZyZW56eU11bHRpcGxpZXIgKyAiLCBEdXJhdGlvbj0iICsgZHVyYXRpb24gKyAicyIpOw0KDQogICAgICAgIC8vIEVuZCBmcmVuenkgYWZ0ZXIgZHVyYXRpb24NCiAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2tMYXRlcihwbHVnaW4sIHRoaXM6OmVuZEZyZW56eSwgZHVyYXRpb24gKiAyMEwpOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbG9hZHMgZnJlbnp5IG1vZGUgY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IFVwZGF0ZXMgc2V0dGluZ3MgZnJvbSBjb25maWcueW1sDQogICAgICovDQogICAgcHVibGljIHZvaWQgcmVsb2FkKExpc3Q8U3RyaW5nPiB3YXJuaW5ncykgew0KICAgICAgICBsb2FkQ29uZmlnKHdhcm5pbmdzKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgYWN0aXZhdGVGcmVuenkoKSB7DQogICAgICAgIE1hcDxVVUlELCBNYXA8VVVJRCwgSW50ZWdlcj4+IGFsbEJvdW50aWVzID0gcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5saXN0QWxsQm91bnRpZXMoKTsNCiAgICAgICAgaWYgKGFsbEJvdW50aWVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgYnJvYWRjYXN0Tm9Cb3VudGllcygpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gU3RvcmUgbGFzdCBmcmVuenkgaW5mbyBiZWZvcmUgc2V0dGluZyBuZXcgZnJlbnp5DQogICAgICAgIGlmIChmcmVuenlBY3RpdmUpIHsNCiAgICAgICAgICAgIGxhc3RGcmVuenlNdWx0aXBsaWVyID0gY3VycmVudEZyZW56eU11bHRpcGxpZXI7DQogICAgICAgICAgICBsYXN0RnJlbnp5VGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gU2V0IHVwIG5ldyBmcmVuenkgKGF1dG9tYXRpYykNCiAgICAgICAgY3VycmVudEZyZW56eU11bHRpcGxpZXIgPSBnZXRSYW5kb21NdWx0aXBsaWVyKCk7DQogICAgICAgIGZyZW56eUFjdGl2ZSA9IHRydWU7DQogICAgICAgIGlzTWFudWFsRnJlbnp5ID0gZmFsc2U7DQogICAgICAgIGZyZW56eVN0YXJ0VGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOw0KICAgICAgICBmcmVuenlFbmRUaW1lID0gZnJlbnp5U3RhcnRUaW1lICsgKGZyZW56eUR1cmF0aW9uICogMTAwMEwpOw0KICAgICAgICBsYXN0RnJlbnp5U3RhcnRUaW1lID0gZnJlbnp5U3RhcnRUaW1lOw0KDQogICAgICAgIC8vIE5vdGlmeSBwbGF5ZXJzDQogICAgICAgIG5vdGlmeVBsYXllcnMoY3VycmVudEZyZW56eU11bHRpcGxpZXIsIGZyZW56eUR1cmF0aW9uKTsNCg0KICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiQXV0b21hdGljIEZyZW56eSBNb2RlIGFjdGl2YXRlZDogTXVsdGlwbGllcj0iICsgY3VycmVudEZyZW56eU11bHRpcGxpZXIgKyAiLCBEdXJhdGlvbj0iICsgZnJlbnp5RHVyYXRpb24gKyAicyIpOw0KDQogICAgICAgIC8vIEVuZCBmcmVuenkgYWZ0ZXIgZHVyYXRpb24NCiAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2tMYXRlcihwbHVnaW4sIHRoaXM6OmVuZEZyZW56eSwgZnJlbnp5RHVyYXRpb24gKiAyMEwpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBlbmRGcmVuenkoKSB7DQogICAgICAgIGZyZW56eUFjdGl2ZSA9IGZhbHNlOw0KICAgICAgICBsYXN0RnJlbnp5VGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOw0KDQogICAgICAgIFN0cmluZyBmcmVuenlUeXBlID0gaXNNYW51YWxGcmVuenkgPyAiTWFudWFsIiA6ICJBdXRvbWF0aWMiOw0KICAgICAgICBpc01hbnVhbEZyZW56eSA9IGZhbHNlOyAvLyBSZXNldCBmbGFnDQoNCiAgICAgICAgLy8gQnJvYWRjYXN0IGZyZW56eSBlbmQgbWVzc2FnZQ0KICAgICAgICBMaXN0PFN0cmluZz4gbWVzc2FnZUxpc3QgPSBwbHVnaW4uZ2V0TWVzc2FnZXNDb25maWcoKS5nZXRTdHJpbmdMaXN0KCJmcmVuenktbW9kZS1lbmRlZC1tZXNzYWdlIik7DQogICAgICAgIGlmIChtZXNzYWdlTGlzdC5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIFN0cmluZyBkZWZhdWx0TWVzc2FnZSA9ICImYyZsRnJlbnp5IE1vZGUgaGFzIGVuZGVkISBBbGwgYm91bnR5IG11bHRpcGxpZXJzIGhhdmUgcmV0dXJuZWQgdG8gbm9ybWFsLiI7DQogICAgICAgICAgICBmb3IgKFBsYXllciBvbmxpbmVQbGF5ZXIgOiBCdWtraXQuZ2V0T25saW5lUGxheWVycygpKSB7DQogICAgICAgICAgICAgICAgb25saW5lUGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgZGVmYXVsdE1lc3NhZ2UpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFN0cmluZyBmcmVuenlFbmRNZXNzYWdlID0gU3RyaW5nLmpvaW4oIlxuIiwgbWVzc2FnZUxpc3QpOw0KICAgICAgICAgICAgZm9yIChQbGF5ZXIgb25saW5lUGxheWVyIDogQnVra2l0LmdldE9ubGluZVBsYXllcnMoKSkgew0KICAgICAgICAgICAgICAgIG9ubGluZVBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGZyZW56eUVuZE1lc3NhZ2UpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKGZyZW56eVR5cGUgKyAiIEZyZW56eSBNb2RlIGVuZGVkIik7DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIG5vdGlmeVBsYXllcnMoZG91YmxlIG11bHRpcGxpZXIsIGludCBkdXJhdGlvbikgew0KICAgICAgICBpZiAoZW5hYmxlVGl0bGVTdWJ0aXRsZSkgew0KICAgICAgICAgICAgU3RyaW5nIHRpdGxlID0gZnJlbnp5VGl0bGU7DQogICAgICAgICAgICBTdHJpbmcgc3VidGl0bGUgPSBmcmVuenlTdWJ0aXRsZQ0KICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW11bHRpcGxpZXIlIiwgU3RyaW5nLmZvcm1hdCgiJS4xZiIsIG11bHRpcGxpZXIpKQ0KICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJWR1cmF0aW9uJSIsIFN0cmluZy52YWx1ZU9mKGR1cmF0aW9uKSk7DQoNCiAgICAgICAgICAgIGZvciAoUGxheWVyIG9ubGluZVBsYXllciA6IEJ1a2tpdC5nZXRPbmxpbmVQbGF5ZXJzKCkpIHsNCiAgICAgICAgICAgICAgICBWZXJzaW9uVXRpbHMuc2VuZFRpdGxlKG9ubGluZVBsYXllciwgdGl0bGUsIHN1YnRpdGxlLCAxMCwgNzAsIDIwKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEJyb2FkY2FzdCBtZXNzYWdlDQogICAgICAgIExpc3Q8U3RyaW5nPiBtZXNzYWdlTGlzdCA9IHBsdWdpbi5nZXRNZXNzYWdlc0NvbmZpZygpLmdldFN0cmluZ0xpc3QoImZyZW56eS1tb2RlLWFjdGl2YXRlZC1tZXNzYWdlIik7DQogICAgICAgIGlmIChtZXNzYWdlTGlzdC5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJmcmVuenktbW9kZS1hY3RpdmF0ZWQtbWVzc2FnZSBpcyBtaXNzaW5nIGluIG1lc3NhZ2VzLnltbCIpOw0KICAgICAgICAgICAgU3RyaW5nIGRlZmF1bHRNZXNzYWdlID0gIiZjJmxbRlJFTlpZIE1PREVdICZlJmxBbGwgYm91bnRpZXMgYXJlIG5vdyBib29zdGVkIGJ5ICZjJmwlbXVsdGlwbGllciV4ICZlJmxmb3IgJWR1cmF0aW9uJSBzZWNvbmRzISI7DQogICAgICAgICAgICBmb3IgKFBsYXllciBvbmxpbmVQbGF5ZXIgOiBCdWtraXQuZ2V0T25saW5lUGxheWVycygpKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIG1lc3NhZ2UgPSBkZWZhdWx0TWVzc2FnZQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVtdWx0aXBsaWVyJSIsIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBtdWx0aXBsaWVyKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlZHVyYXRpb24lIiwgU3RyaW5nLnZhbHVlT2YoZHVyYXRpb24pKTsNCiAgICAgICAgICAgICAgICBvbmxpbmVQbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBTdHJpbmcgZnJlbnp5TWVzc2FnZSA9IFN0cmluZy5qb2luKCJcbiIsIG1lc3NhZ2VMaXN0KQ0KICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW11bHRpcGxpZXIlIiwgU3RyaW5nLmZvcm1hdCgiJS4xZiIsIG11bHRpcGxpZXIpKQ0KICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJWR1cmF0aW9uJSIsIFN0cmluZy52YWx1ZU9mKGR1cmF0aW9uKSk7DQogICAgICAgICAgICBmb3IgKFBsYXllciBvbmxpbmVQbGF5ZXIgOiBCdWtraXQuZ2V0T25saW5lUGxheWVycygpKSB7DQogICAgICAgICAgICAgICAgb25saW5lUGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgZnJlbnp5TWVzc2FnZSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIGJyb2FkY2FzdE5vQm91bnRpZXMoKSB7DQogICAgICAgIFN0cmluZyBtZXNzYWdlID0gcGx1Z2luLmdldE1lc3NhZ2VzQ29uZmlnKCkuZ2V0U3RyaW5nKCJuby1ib3VudGllcy1mb3ItZnJlbnp5IiwgIiZjTm8gYm91bnRpZXMgYXZhaWxhYmxlIGZvciBGcmVuenkgTW9kZSEiKTsNCiAgICAgICAgZm9yIChQbGF5ZXIgb25saW5lUGxheWVyIDogQnVra2l0LmdldE9ubGluZVBsYXllcnMoKSkgew0KICAgICAgICAgICAgb25saW5lUGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbWVzc2FnZSkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSBkb3VibGUgZ2V0UmFuZG9tTXVsdGlwbGllcigpIHsNCiAgICAgICAgaWYgKG11bHRpcGxpZXJDaGFuY2VzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgcmV0dXJuIDIuMDsgLy8gRGVmYXVsdCBtdWx0aXBsaWVyDQogICAgICAgIH0NCg0KICAgICAgICBkb3VibGUgdG90YWxDaGFuY2UgPSBtdWx0aXBsaWVyQ2hhbmNlcy52YWx1ZXMoKS5zdHJlYW0oKS5tYXBUb0RvdWJsZShEb3VibGU6OmRvdWJsZVZhbHVlKS5zdW0oKTsNCiAgICAgICAgZG91YmxlIHJhbmRvbVZhbHVlID0gcmFuZG9tLm5leHREb3VibGUoKSAqIHRvdGFsQ2hhbmNlOw0KICAgICAgICBkb3VibGUgY3VtdWxhdGl2ZVByb2JhYmlsaXR5ID0gMDsNCg0KICAgICAgICBmb3IgKE1hcC5FbnRyeTxEb3VibGUsIERvdWJsZT4gZW50cnkgOiBtdWx0aXBsaWVyQ2hhbmNlcy5lbnRyeVNldCgpKSB7DQogICAgICAgICAgICBjdW11bGF0aXZlUHJvYmFiaWxpdHkgKz0gZW50cnkuZ2V0VmFsdWUoKTsNCiAgICAgICAgICAgIGlmIChyYW5kb21WYWx1ZSA8PSBjdW11bGF0aXZlUHJvYmFiaWxpdHkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkuZ2V0S2V5KCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gbXVsdGlwbGllckNoYW5jZXMua2V5U2V0KCkuc3RyZWFtKCkuZmluZEZpcnN0KCkub3JFbHNlKDIuMCk7DQogICAgfQ0KDQogICAgLy8gUHVibGljIG1ldGhvZHMgZm9yIGNoZWNraW5nIGZyZW56eSBzdGF0dXMNCiAgICBwdWJsaWMgYm9vbGVhbiBpc0ZyZW56eUFjdGl2ZSgpIHsNCiAgICAgICAgLy8gRG91YmxlIGNoZWNrIHRpbWUtYmFzZWQgZXhwaXJ5DQogICAgICAgIGlmIChmcmVuenlBY3RpdmUgJiYgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkgPiBmcmVuenlFbmRUaW1lKSB7DQogICAgICAgICAgICBlbmRGcmVuenkoKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZnJlbnp5QWN0aXZlOw0KICAgIH0NCg0KICAgIHB1YmxpYyBkb3VibGUgZ2V0RnJlbnp5TXVsdGlwbGllcigpIHsNCiAgICAgICAgcmV0dXJuIGlzRnJlbnp5QWN0aXZlKCkgPyBjdXJyZW50RnJlbnp5TXVsdGlwbGllciA6IDEuMDsNCiAgICB9DQoNCiAgICBwdWJsaWMgbG9uZyBnZXRGcmVuenlUaW1lUmVtYWluaW5nKCkgew0KICAgICAgICBpZiAoIWlzRnJlbnp5QWN0aXZlKCkpIHJldHVybiAwOw0KICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgKGZyZW56eUVuZFRpbWUgLSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSkgLyAxMDAwKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldEZyZW56eUVuZFRpbWUoKSB7DQogICAgICAgIGlmICghaXNGcmVuenlBY3RpdmUoKSkgcmV0dXJuIG51bGw7DQogICAgICAgIGxvbmcgc2Vjb25kc1JlbWFpbmluZyA9IGdldEZyZW56eVRpbWVSZW1haW5pbmcoKTsNCiAgICAgICAgcmV0dXJuIFRpbWVGb3JtYXR0ZXIuZm9ybWF0VGltZVJlbWFpbmluZyhzZWNvbmRzUmVtYWluaW5nKTsNCiAgICB9DQoNCiAgICAvLyBNZXRob2RzIGZvciB0cmFja2luZyBsYXN0IGZyZW56eSBpbmZvDQogICAgcHVibGljIGRvdWJsZSBnZXRMYXN0RnJlbnp5TXVsdGlwbGllcigpIHsNCiAgICAgICAgcmV0dXJuIGxhc3RGcmVuenlNdWx0aXBsaWVyOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0TGFzdEZyZW56eVRpbWUoKSB7DQogICAgICAgIGlmIChsYXN0RnJlbnp5VGltZSA9PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gIk5ldmVyIjsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gVGltZUZvcm1hdHRlci5mb3JtYXRUaW1lc3RhbXBUb0FnbyhsYXN0RnJlbnp5VGltZSk7DQogICAgfQ0KDQogICAgcHVibGljIGxvbmcgZ2V0VGltZVVudGlsTmV4dEZyZW56eSgpIHsNCiAgICAgICAgLy8gQ2FsY3VsYXRlIGJhc2VkIG9uIGZyZW56eSBpbnRlcnZhbCBhbmQgbGFzdCBmcmVuenkgdGltZQ0KICAgICAgICBsb25nIGludGVydmFsTXMgPSBmcmVuenlJbnRlcnZhbCAqIDEwMDBMOw0KICAgICAgICBsb25nIHRpbWVTaW5jZUxhc3RTdGFydCA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpIC0gbGFzdEZyZW56eVN0YXJ0VGltZTsNCiAgICAgICAgbG9uZyB0aW1lVW50aWxOZXh0ID0gaW50ZXJ2YWxNcyAtICh0aW1lU2luY2VMYXN0U3RhcnQgJSBpbnRlcnZhbE1zKTsNCiAgICAgICAgcmV0dXJuIHRpbWVVbnRpbE5leHQgLyAxMDAwOyAvLyBSZXR1cm4gaW4gc2Vjb25kcw0KICAgIH0NCg0KICAgIC8vIFBsYXllciBtYW5hZ2VtZW50IG1ldGhvZHMNCiAgICBwdWJsaWMgdm9pZCBhZGRQbGF5ZXIoUGxheWVyIHBsYXllcikgew0KICAgICAgICBvbmxpbmVQbGF5ZXJzLmFkZChwbGF5ZXIpOw0KDQogICAgICAgIC8vIEFkZCB0byBib3NzIGJhciBpZiBzdXBwb3J0ZWQgYW5kIGF2YWlsYWJsZQ0KICAgICAgICBpZiAoYm9zc2JhckVuYWJsZWQgJiYgYm9zc0JhciAhPSBudWxsKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIC8vIFVzZSByZWZsZWN0aW9uIHRvIGFkZCBwbGF5ZXIgdG8gYm9zcyBiYXINCiAgICAgICAgICAgICAgICBPYmplY3RbXSBwbGF5ZXJzID0gKE9iamVjdFtdKSBib3NzQmFyLmdldENsYXNzKCkuZ2V0TWV0aG9kKCJnZXRQbGF5ZXJzIikuaW52b2tlKGJvc3NCYXIpOw0KICAgICAgICAgICAgICAgIGJvb2xlYW4gaGFzUGxheWVyID0gQXJyYXlzLnN0cmVhbShwbGF5ZXJzKS5hbnlNYXRjaChwIC0+IHAuZXF1YWxzKHBsYXllcikpOw0KICAgICAgICAgICAgICAgIGlmICghaGFzUGxheWVyKSB7DQogICAgICAgICAgICAgICAgICAgIGJvc3NCYXIuZ2V0Q2xhc3MoKS5nZXRNZXRob2QoImFkZFBsYXllciIsIFBsYXllci5jbGFzcykuaW52b2tlKGJvc3NCYXIsIHBsYXllcik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICAvLyBTaWxlbnRseSBoYW5kbGUgcmVmbGVjdGlvbiBlcnJvcnMNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHJlbW92ZVBsYXllcihQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIG9ubGluZVBsYXllcnMucmVtb3ZlKHBsYXllcik7DQoNCiAgICAgICAgLy8gUmVtb3ZlIGZyb20gYm9zcyBiYXIgaWYgc3VwcG9ydGVkIGFuZCBhdmFpbGFibGUNCiAgICAgICAgaWYgKGJvc3NiYXJFbmFibGVkICYmIGJvc3NCYXIgIT0gbnVsbCkgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBib3NzQmFyLmdldENsYXNzKCkuZ2V0TWV0aG9kKCJyZW1vdmVQbGF5ZXIiLCBQbGF5ZXIuY2xhc3MpLmludm9rZShib3NzQmFyLCBwbGF5ZXIpOw0KICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICAvLyBTaWxlbnRseSBoYW5kbGUgcmVmbGVjdGlvbiBlcnJvcnMNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIGNsZWFudXAoKSB7DQogICAgICAgIGlmICh0YXNrSWQgIT0gLTEpIHsNCiAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5jYW5jZWxUYXNrKHRhc2tJZCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoYm9zc2JhckVuYWJsZWQgJiYgYm9zc0JhciAhPSBudWxsKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgcGxheWVycyBhbmQgaGlkZSBib3NzIGJhcg0KICAgICAgICAgICAgICAgIGJvc3NCYXIuZ2V0Q2xhc3MoKS5nZXRNZXRob2QoInNldFZpc2libGUiLCBib29sZWFuLmNsYXNzKS5pbnZva2UoYm9zc0JhciwgZmFsc2UpOw0KICAgICAgICAgICAgICAgIE9iamVjdCBwbGF5ZXJzID0gYm9zc0Jhci5nZXRDbGFzcygpLmdldE1ldGhvZCgiZ2V0UGxheWVycyIpLmludm9rZShib3NzQmFyKTsNCiAgICAgICAgICAgICAgICBpZiAocGxheWVycyBpbnN0YW5jZW9mIENvbGxlY3Rpb24pIHsNCiAgICAgICAgICAgICAgICAgICAgZm9yIChPYmplY3QgcGxheWVyIDogbmV3IEFycmF5TGlzdDw+KChDb2xsZWN0aW9uPD8+KSBwbGF5ZXJzKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYm9zc0Jhci5nZXRDbGFzcygpLmdldE1ldGhvZCgicmVtb3ZlUGxheWVyIiwgUGxheWVyLmNsYXNzKS5pbnZva2UoYm9zc0JhciwgcGxheWVyKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgLy8gU2lsZW50bHkgaGFuZGxlIHJlZmxlY3Rpb24gZXJyb3JzDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQpdG9ueTI2L2JvdW50aWVzUGx1cy9HVUlzLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDc3NyAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDAwMDAwIDE1MDI2NzAzNzc0IDAxMzcwNwAgNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL0l0ZW1zLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNzc3IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMDAwMDAgMTUwMjYwNjI2NjIgMDE0MTUzACA1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRvbnkyNi9ib3VudGllc1BsdXMvdXRpbHMvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA3NzcgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAwMDAwMCAxNTAyNjU2NzYwNSAwMTQyNDEAIDUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy93cmFwcGVycy8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDc3NyAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDAwMDAwIDE1MDI2MDYyNjE3IDAxNDczNQAgNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL3dyYXBwZXJzL0xlZ2FjeVZlcnNpb25XcmFwcGVyLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMjAxMDYgMTUwMjYwNjI2MTcgMDIxNzEyACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0KcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzLndyYXBwZXJzOw0KDQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5NYXRlcmlhbDsNCmltcG9ydCBvcmcuYnVra2l0Lk9mZmxpbmVQbGF5ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1TdGFjazsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5tZXRhLkl0ZW1NZXRhOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lm1ldGEuU2t1bGxNZXRhOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuQm91bnRpZXNQbHVzOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuVmVyc2lvblV0aWxzOw0KDQppbXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuRmllbGQ7DQppbXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kOw0KDQpwdWJsaWMgY2xhc3MgTGVnYWN5VmVyc2lvbldyYXBwZXIgaW1wbGVtZW50cyBWZXJzaW9uV3JhcHBlciB7DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGEgcGxheWVyIGhlYWQgd2l0aCB0aGUgc3BlY2lmaWVkIHBsYXllcidzIHNraW4NCiAgICAgKi8NCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGEgcGxheWVyIGhlYWQgd2l0aCB0aGUgc3BlY2lmaWVkIHBsYXllcidzIHNraW4NCiAgICAgKi8NCiAgICBAT3ZlcnJpZGUNCiAgICBwdWJsaWMgSXRlbVN0YWNrIGNyZWF0ZVBsYXllckhlYWQoU3RyaW5nIHBsYXllck5hbWUpIHsNCiAgICAgICAgaWYgKHBsYXllck5hbWUgPT0gbnVsbCB8fCBwbGF5ZXJOYW1lLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkud2FybmluZygiQ2Fubm90IGNyZWF0ZSBwbGF5ZXIgaGVhZDogSW52YWxpZCBwbGF5ZXIgbmFtZSIpOyAvLyBMb2dzIGludmFsaWQgbmFtZQ0KICAgICAgICAgICAgcmV0dXJuIFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIlNLRUxFVE9OX1NLVUxMIik7IC8vIFJldHVybnMgc2tlbGV0b24gc2t1bGwgYXMgZmFsbGJhY2sNCiAgICAgICAgfQ0KICAgICAgICBJdGVtU3RhY2sgaGVhZCA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIlBMQVlFUl9IRUFEIik7IC8vIENyZWF0ZXMgYmFzZSBwbGF5ZXIgaGVhZA0KICAgICAgICBpZiAoaGVhZCA9PSBudWxsIHx8IGhlYWQuZ2V0VHlwZSgpID09IE1hdGVyaWFsLlNUT05FKSB7DQogICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gY3JlYXRlIHNrdWxsIGl0ZW0gZm9yICIgKyBwbGF5ZXJOYW1lKTsgLy8gTG9ncyBjcmVhdGlvbiBmYWlsdXJlDQogICAgICAgICAgICByZXR1cm4gVmVyc2lvblV0aWxzLmdldFhNYXRlcmlhbEl0ZW1TdGFjaygiU0tFTEVUT05fU0tVTEwiKTsgLy8gUmV0dXJucyBza2VsZXRvbiBza3VsbCBhcyBmYWxsYmFjaw0KICAgICAgICB9DQogICAgICAgIEl0ZW1NZXRhIHJhd01ldGEgPSBoZWFkLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmICghKHJhd01ldGEgaW5zdGFuY2VvZiBTa3VsbE1ldGEpKSB7DQogICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gZ2V0IFNrdWxsTWV0YSBmb3IgIiArIHBsYXllck5hbWUpOyAvLyBMb2dzIG1ldGEgZmFpbHVyZQ0KICAgICAgICAgICAgcmV0dXJuIGhlYWQ7IC8vIFJldHVybnMgaGVhZCB3aXRob3V0IHNraW4NCiAgICAgICAgfQ0KICAgICAgICBTa3VsbE1ldGEgc2t1bGxNZXRhID0gKFNrdWxsTWV0YSkgcmF3TWV0YTsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIHNrdWxsTWV0YS5zZXRPd25lcihwbGF5ZXJOYW1lKTsgLy8gU2V0cyBza3VsbCBvd25lciBmb3IgbGVnYWN5IHNraW4gYXBwbGljYXRpb24gKDEuOC444oCTMS4xMi4yKQ0KICAgICAgICAgICAgaGVhZC5zZXRJdGVtTWV0YShza3VsbE1ldGEpOyAvLyBBcHBsaWVzIG1ldGEgd2l0aCBza2luDQogICAgICAgICAgICBpZiAoIWhhc1ZhbGlkT3duZXIoc2t1bGxNZXRhLCBwbGF5ZXJOYW1lKSkgew0KICAgICAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLndhcm5pbmcoIlBsYXllciBoZWFkIGZvciAiICsgcGxheWVyTmFtZSArICIgY3JlYXRlZCB3aXRob3V0IHZhbGlkIHNraW4sIHRyeWluZyByZWZsZWN0aW9uIik7IC8vIExvZ3Mgc2tpbiB2YWxpZGF0aW9uIGZhaWx1cmUNCiAgICAgICAgICAgICAgICBPZmZsaW5lUGxheWVyIHRhcmdldCA9IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVyKHBsYXllck5hbWUpOyAvLyBHZXRzIE9mZmxpbmVQbGF5ZXIgZm9yIHJlZmxlY3Rpb24NCiAgICAgICAgICAgICAgICBpbmplY3RHYW1lUHJvZmlsZVZpYVJlZmxlY3Rpb24oc2t1bGxNZXRhLCB0YXJnZXQpOyAvLyBBdHRlbXB0cyByZWZsZWN0aW9uIGZhbGxiYWNrDQogICAgICAgICAgICAgICAgaGVhZC5zZXRJdGVtTWV0YShza3VsbE1ldGEpOyAvLyBSZS1hcHBsaWVzIG1ldGENCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLndhcm5pbmcoIkZhaWxlZCB0byBzZXQgc2t1bGwgb3duZXIgZm9yICIgKyBwbGF5ZXJOYW1lICsgIjogIiArIGUuZ2V0TWVzc2FnZSgpKTsgLy8gTG9ncyBlcnJvcg0KICAgICAgICAgICAgcmV0dXJuIFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIlNLRUxFVE9OX1NLVUxMIik7IC8vIFJldHVybnMgc2tlbGV0b24gc2t1bGwgYXMgZmFsbGJhY2sNCiAgICAgICAgfQ0KICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS5pbmZvKCJTdWNjZXNzZnVsbHkgY3JlYXRlZCBwbGF5ZXIgaGVhZCBmb3IgIiArIHBsYXllck5hbWUgKyAiIChMZWdhY3kpIik7IC8vIExvZ3Mgc3VjY2Vzc2Z1bCBjcmVhdGlvbg0KICAgICAgICByZXR1cm4gaGVhZDsgLy8gUmV0dXJucyBjb25maWd1cmVkIGhlYWQgd2l0aCBza2luDQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIHRoZSBza3VsbCBoYXMgYSB2YWxpZCBvd25lciAoZm9yIHNraW4gdmVyaWZpY2F0aW9uKQ0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBoYXNWYWxpZE93bmVyKFNrdWxsTWV0YSBza3VsbE1ldGEsIFN0cmluZyBleHBlY3RlZE93bmVyKSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBTdHJpbmcgb3duZXIgPSBza3VsbE1ldGEuZ2V0T3duZXIoKTsgLy8gR2V0cyBvd25lciBuYW1lDQogICAgICAgICAgICBpZiAob3duZXIgIT0gbnVsbCAmJiBvd25lci5lcXVhbHNJZ25vcmVDYXNlKGV4cGVjdGVkT3duZXIpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIFZhbGlkYXRlcyBvd25lciBtYXRjaGVzDQogICAgICAgICAgICB9DQogICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS5pbmZvKCJTa3VsbCBvd25lciBtaXNtYXRjaDogZXhwZWN0ZWQgIiArIGV4cGVjdGVkT3duZXIgKyAiLCBmb3VuZCAiICsgb3duZXIpOyAvLyBMb2dzIG1pc21hdGNoDQogICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFJldHVybnMgZmFsc2UgaWYgb3duZXIgZG9lc27igJl0IG1hdGNoDQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJFcnJvciB2YWxpZGF0aW5nIHNrdWxsIG93bmVyIGZvciAiICsgZXhwZWN0ZWRPd25lciArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7IC8vIExvZ3MgZXJyb3INCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gUmV0dXJucyBmYWxzZSBvbiBlcnJvcg0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSW5qZWN0cyB0aGUgT2ZmbGluZVBsYXllcidzIGludGVybmFsIEdhbWVQcm9maWxlICh3aXRoIHNraW4pIGludG8gc2t1bGxNZXRhIHZpYSByZWZsZWN0aW9uDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGluamVjdEdhbWVQcm9maWxlVmlhUmVmbGVjdGlvbihTa3VsbE1ldGEgc2t1bGxNZXRhLCBPZmZsaW5lUGxheWVyIHRhcmdldCkgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgT2JqZWN0IHByb2ZpbGUgPSBudWxsOyAvLyBHYW1lUHJvZmlsZSBvYmplY3QNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgRmllbGQgcHJvZmlsZUZpZWxkID0gdGFyZ2V0LmdldENsYXNzKCkuZ2V0RGVjbGFyZWRGaWVsZCgicHJvZmlsZSIpOyAvLyBBY2Nlc3NlcyBHYW1lUHJvZmlsZSBmaWVsZA0KICAgICAgICAgICAgICAgIHByb2ZpbGVGaWVsZC5zZXRBY2Nlc3NpYmxlKHRydWUpOw0KICAgICAgICAgICAgICAgIHByb2ZpbGUgPSBwcm9maWxlRmllbGQuZ2V0KHRhcmdldCk7IC8vIEdldHMgcHJvZmlsZQ0KICAgICAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLmluZm8oIkdvdCBHYW1lUHJvZmlsZSBmcm9tIE9mZmxpbmVQbGF5ZXIgZm9yICIgKyB0YXJnZXQuZ2V0TmFtZSgpKTsgLy8gTG9ncyBzdWNjZXNzDQogICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLndhcm5pbmcoIkNvdWxkIG5vdCBnZXQgR2FtZVByb2ZpbGUgZnJvbSBPZmZsaW5lUGxheWVyIGZvciAiICsgdGFyZ2V0LmdldE5hbWUoKSArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7IC8vIExvZ3MgZmFpbHVyZQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHByb2ZpbGUgPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLndhcm5pbmcoIk5vIEdhbWVQcm9maWxlIGF2YWlsYWJsZSBmb3IgIiArIHRhcmdldC5nZXROYW1lKCkgKyAiLCBza2lwcGluZyByZWZsZWN0aW9uIGluamVjdGlvbiIpOyAvLyBMb2dzIG5vIHByb2ZpbGUNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIE1ldGhvZCBzZXR0ZXIgPSBza3VsbE1ldGEuZ2V0Q2xhc3MoKS5nZXREZWNsYXJlZE1ldGhvZCgic2V0UHJvZmlsZSIsIHByb2ZpbGUuZ2V0Q2xhc3MoKSk7IC8vIEF0dGVtcHRzIHNldFByb2ZpbGUgbWV0aG9kDQogICAgICAgICAgICAgICAgc2V0dGVyLnNldEFjY2Vzc2libGUodHJ1ZSk7DQogICAgICAgICAgICAgICAgc2V0dGVyLmludm9rZShza3VsbE1ldGEsIHByb2ZpbGUpOyAvLyBTZXRzIHByb2ZpbGUNCiAgICAgICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS5pbmZvKCJJbmplY3RlZCBHYW1lUHJvZmlsZSB1c2luZyBzZXRQcm9maWxlIGZvciAiICsgdGFyZ2V0LmdldE5hbWUoKSk7IC8vIExvZ3Mgc3VjY2Vzcw0KICAgICAgICAgICAgfSBjYXRjaCAoTm9TdWNoTWV0aG9kRXhjZXB0aW9uIG5zbWUpIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBGaWVsZCBwcm9maWxlRmllbGQgPSBza3VsbE1ldGEuZ2V0Q2xhc3MoKS5nZXREZWNsYXJlZEZpZWxkKCJwcm9maWxlIik7IC8vIEF0dGVtcHRzIGRpcmVjdCBmaWVsZCBhY2Nlc3MNCiAgICAgICAgICAgICAgICAgICAgcHJvZmlsZUZpZWxkLnNldEFjY2Vzc2libGUodHJ1ZSk7DQogICAgICAgICAgICAgICAgICAgIHByb2ZpbGVGaWVsZC5zZXQoc2t1bGxNZXRhLCBwcm9maWxlKTsgLy8gU2V0cyBwcm9maWxlDQogICAgICAgICAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLmluZm8oIkluamVjdGVkIEdhbWVQcm9maWxlIHVzaW5nIGZpZWxkIGFjY2VzcyBmb3IgIiArIHRhcmdldC5nZXROYW1lKCkpOyAvLyBMb2dzIHN1Y2Nlc3MNCiAgICAgICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gaW5qZWN0IEdhbWVQcm9maWxlIGZvciAiICsgdGFyZ2V0LmdldE5hbWUoKSArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7IC8vIExvZ3MgZmFpbHVyZQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIHQpIHsNCiAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLndhcm5pbmcoIlJlZmxlY3Rpb24gaW5qZWN0aW9uIGZhaWxlZCBmb3IgIiArIHRhcmdldC5nZXROYW1lKCkgKyAiOiAiICsgdC5nZXRNZXNzYWdlKCkpOyAvLyBMb2dzIGdlbmVyYWwgZmFpbHVyZQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIHZvaWQgc2VuZFRpdGxlKFBsYXllciBwbGF5ZXIsIFN0cmluZyB0aXRsZSwgU3RyaW5nIHN1YnRpdGxlLCBpbnQgZmFkZUluLCBpbnQgc3RheSwgaW50IGZhZGVPdXQpIHsNCiAgICAgICAgLy8gTGVnYWN5IHZlcnNpb25zIGRvbid0IHN1cHBvcnQgdGl0bGVzIHdpdGggdGltaW5nLCB1c2UgYmFzaWMgdmVyc2lvbg0KICAgICAgICBWZXJzaW9uVXRpbHMuc2VuZFRpdGxlKHBsYXllciwgdGl0bGUsIHN1YnRpdGxlLCBmYWRlSW4sIHN0YXksIGZhZGVPdXQpOw0KICAgIH0NCg0KICAgIEBPdmVycmlkZQ0KICAgIHB1YmxpYyB2b2lkIHNwYXduUGFydGljbGVzKFBsYXllciBwbGF5ZXIsIFN0cmluZyBwYXJ0aWNsZVR5cGUsIGludCBjb3VudCkgew0KICAgICAgICBWZXJzaW9uVXRpbHMuc3Bhd25QYXJ0aWNsZShwbGF5ZXIsIHBhcnRpY2xlVHlwZSwgcGxheWVyLmdldExvY2F0aW9uKCkuYWRkKDAsIDEsIDApLCBjb3VudCwgMC41LCAwLjUsIDAuNSwgMC4xKTsNCiAgICB9DQoNCiAgICBAT3ZlcnJpZGUNCiAgICBwdWJsaWMgU3RyaW5nIGdldFBsYXllclVVSUQoUGxheWVyIHBsYXllcikgew0KICAgICAgICByZXR1cm4gcGxheWVyLmdldFVuaXF1ZUlkKCkudG9TdHJpbmcoKTsNCiAgICB9DQoNCiAgICBAT3ZlcnJpZGUNCiAgICBwdWJsaWMgYm9vbGVhbiBtYXRlcmlhbEV4aXN0cyhTdHJpbmcgbWF0ZXJpYWxOYW1lKSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBvcmcuYnVra2l0Lk1hdGVyaWFsLnZhbHVlT2YobWF0ZXJpYWxOYW1lKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB2ZXJzaW9uLXNhZmUgbWF0ZXJpYWwgZm9yIGxlZ2FjeSB2ZXJzaW9ucw0KICAgICAqLw0KICAgIEBPdmVycmlkZQ0KICAgIHB1YmxpYyBNYXRlcmlhbCBnZXRNYXRlcmlhbChTdHJpbmcgbWF0ZXJpYWxOYW1lKSB7DQogICAgICAgIC8vIFVzZSBYTWF0ZXJpYWwgZm9yIHZlcnNpb24tc2FmZSBtYXRlcmlhbCByZXNvbHV0aW9uIC8vIEVuc3VyZXMgY3Jvc3MtdmVyc2lvbiBjb21wYXRpYmlsaXR5DQogICAgICAgIE1hdGVyaWFsIG1hdGVyaWFsID0gVmVyc2lvblV0aWxzLmdldE1hdGVyaWFsWE0obWF0ZXJpYWxOYW1lKTsgLy8gUmVzb2x2ZXMgbWF0ZXJpYWwgdmlhIFhNYXRlcmlhbA0KICAgICAgICBpZiAobWF0ZXJpYWwgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJTVE9ORSIpKSB7DQogICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIicgaW4gbGVnYWN5IHZlcnNpb24sIHVzaW5nIFNUT05FIik7IC8vIExvZ3Mgd2FybmluZw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBtYXRlcmlhbDsgLy8gUmV0dXJucyByZXNvbHZlZCBtYXRlcmlhbA0KICAgIH0NCg0KICAgIEBPdmVycmlkZQ0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0U3VjY2Vzc1NvdW5kKCkgew0KICAgICAgICByZXR1cm4gIk9SQl9QSUNLVVAiOyAvLyBMZWdhY3kgc291bmQgbmFtZQ0KICAgIH0NCg0KICAgIEBPdmVycmlkZQ0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0RXJyb3JTb3VuZCgpIHsNCiAgICAgICAgcmV0dXJuICJWSUxMQUdFUl9OTyI7IC8vIExlZ2FjeSBzb3VuZCBuYW1lDQogICAgfQ0Kfb255MjYvYm91bnRpZXNQbHVzL3dyYXBwZXJzL01vZGVyblZlcnNpb25XcmFwcGVyLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMTc2NDQgMTUwMjYwNjI2MTcgMDIxNzQ3ACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy53cmFwcGVyczsNCg0KaW1wb3J0IG9yZy5idWtraXQuQnVra2l0Ow0KaW1wb3J0IG9yZy5idWtraXQuTWF0ZXJpYWw7DQppbXBvcnQgb3JnLmJ1a2tpdC5PZmZsaW5lUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JdGVtU3RhY2s7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkubWV0YS5JdGVtTWV0YTsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5tZXRhLlNrdWxsTWV0YTsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkJvdW50aWVzUGx1czsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlZlcnNpb25VdGlsczsNCg0KaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0LkZpZWxkOw0KaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0Lk1ldGhvZDsNCg0KcHVibGljIGNsYXNzIE1vZGVyblZlcnNpb25XcmFwcGVyIGltcGxlbWVudHMgVmVyc2lvbldyYXBwZXIgew0KDQogICAgLyoqDQogICAgICogQ3JlYXRlcyBhIHBsYXllciBoZWFkIHdpdGggdGhlIHNwZWNpZmllZCBwbGF5ZXIncyBza2luDQogICAgICovDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIEl0ZW1TdGFjayBjcmVhdGVQbGF5ZXJIZWFkKFN0cmluZyBwbGF5ZXJOYW1lKSB7DQogICAgICAgIGlmIChwbGF5ZXJOYW1lID09IG51bGwgfHwgcGxheWVyTmFtZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLndhcm5pbmcoIkNhbm5vdCBjcmVhdGUgcGxheWVyIGhlYWQ6IEludmFsaWQgcGxheWVyIG5hbWUiKTsgLy8gTG9ncyBpbnZhbGlkIG5hbWUNCiAgICAgICAgICAgIHJldHVybiBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJTS0VMRVRPTl9TS1VMTCIpOyAvLyBSZXR1cm5zIHNrZWxldG9uIHNrdWxsIGFzIGZhbGxiYWNrDQogICAgICAgIH0NCiAgICAgICAgSXRlbVN0YWNrIGhlYWQgPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJQTEFZRVJfSEVBRCIpOyAvLyBDcmVhdGVzIGJhc2UgcGxheWVyIGhlYWQNCiAgICAgICAgaWYgKGhlYWQgPT0gbnVsbCB8fCBoZWFkLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5TVE9ORSkgew0KICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIGNyZWF0ZSBza3VsbCBpdGVtIGZvciAiICsgcGxheWVyTmFtZSk7IC8vIExvZ3MgY3JlYXRpb24gZmFpbHVyZQ0KICAgICAgICAgICAgcmV0dXJuIFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIlNLRUxFVE9OX1NLVUxMIik7IC8vIFJldHVybnMgc2tlbGV0b24gc2t1bGwgYXMgZmFsbGJhY2sNCiAgICAgICAgfQ0KICAgICAgICBJdGVtTWV0YSByYXdNZXRhID0gaGVhZC5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAoIShyYXdNZXRhIGluc3RhbmNlb2YgU2t1bGxNZXRhKSkgew0KICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIGdldCBTa3VsbE1ldGEgZm9yICIgKyBwbGF5ZXJOYW1lKTsgLy8gTG9ncyBtZXRhIGZhaWx1cmUNCiAgICAgICAgICAgIHJldHVybiBoZWFkOyAvLyBSZXR1cm5zIGhlYWQgd2l0aG91dCBza2luDQogICAgICAgIH0NCiAgICAgICAgU2t1bGxNZXRhIHNrdWxsTWV0YSA9IChTa3VsbE1ldGEpIHJhd01ldGE7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBza3VsbE1ldGEuc2V0T3duZXIocGxheWVyTmFtZSk7IC8vIFNldHMgc2t1bGwgb3duZXIgZm9yIHNraW4gYXBwbGljYXRpb24NCiAgICAgICAgICAgIGhlYWQuc2V0SXRlbU1ldGEoc2t1bGxNZXRhKTsgLy8gQXBwbGllcyBtZXRhIHdpdGggc2tpbg0KICAgICAgICAgICAgaWYgKCFoYXNWYWxpZE93bmVyKHNrdWxsTWV0YSwgcGxheWVyTmFtZSkpIHsNCiAgICAgICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJQbGF5ZXIgaGVhZCBmb3IgIiArIHBsYXllck5hbWUgKyAiIGNyZWF0ZWQgd2l0aG91dCB2YWxpZCBza2luLCB0cnlpbmcgcmVmbGVjdGlvbiIpOyAvLyBMb2dzIHNraW4gdmFsaWRhdGlvbiBmYWlsdXJlDQogICAgICAgICAgICAgICAgT2ZmbGluZVBsYXllciB0YXJnZXQgPSBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcihwbGF5ZXJOYW1lKTsgLy8gR2V0cyBPZmZsaW5lUGxheWVyIGZvciByZWZsZWN0aW9uDQogICAgICAgICAgICAgICAgaW5qZWN0R2FtZVByb2ZpbGVWaWFSZWZsZWN0aW9uKHNrdWxsTWV0YSwgdGFyZ2V0KTsgLy8gQXR0ZW1wdHMgcmVmbGVjdGlvbiBmYWxsYmFjaw0KICAgICAgICAgICAgICAgIGhlYWQuc2V0SXRlbU1ldGEoc2t1bGxNZXRhKTsgLy8gUmUtYXBwbGllcyBtZXRhDQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gc2V0IHNrdWxsIG93bmVyIGZvciAiICsgcGxheWVyTmFtZSArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7IC8vIExvZ3MgZXJyb3INCiAgICAgICAgICAgIHJldHVybiBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJTS0VMRVRPTl9TS1VMTCIpOyAvLyBSZXR1cm5zIHNrZWxldG9uIHNrdWxsIGFzIGZhbGxiYWNrDQogICAgICAgIH0NCiAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkuaW5mbygiU3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgcGxheWVyIGhlYWQgZm9yICIgKyBwbGF5ZXJOYW1lICsgIiAoTW9kZXJuKSIpOyAvLyBMb2dzIHN1Y2Nlc3NmdWwgY3JlYXRpb24NCiAgICAgICAgcmV0dXJuIGhlYWQ7IC8vIFJldHVybnMgY29uZmlndXJlZCBoZWFkIHdpdGggc2tpbg0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiB0aGUgc2t1bGwgaGFzIGEgdmFsaWQgb3duZXIgKGZvciBza2luIHZlcmlmaWNhdGlvbikNCiAgICAgKi8NCiAgICBwcml2YXRlIGJvb2xlYW4gaGFzVmFsaWRPd25lcihTa3VsbE1ldGEgc2t1bGxNZXRhLCBTdHJpbmcgZXhwZWN0ZWRPd25lcikgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgU3RyaW5nIG93bmVyID0gc2t1bGxNZXRhLmdldE93bmVyKCk7IC8vIEdldHMgb3duZXIgbmFtZQ0KICAgICAgICAgICAgaWYgKG93bmVyICE9IG51bGwgJiYgb3duZXIuZXF1YWxzSWdub3JlQ2FzZShleHBlY3RlZE93bmVyKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBWYWxpZGF0ZXMgb3duZXIgbWF0Y2hlcw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkuaW5mbygiU2t1bGwgb3duZXIgbWlzbWF0Y2g6IGV4cGVjdGVkICIgKyBleHBlY3RlZE93bmVyICsgIiwgZm91bmQgIiArIG93bmVyKTsgLy8gTG9ncyBtaXNtYXRjaA0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBSZXR1cm5zIGZhbHNlIGlmIG93bmVyIGRvZXNu4oCZdCBtYXRjaA0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkud2FybmluZygiRXJyb3IgdmFsaWRhdGluZyBza3VsbCBvd25lciBmb3IgIiArIGV4cGVjdGVkT3duZXIgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOyAvLyBMb2dzIGVycm9yDQogICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFJldHVybnMgZmFsc2Ugb24gZXJyb3INCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEluamVjdHMgdGhlIE9mZmxpbmVQbGF5ZXIncyBpbnRlcm5hbCBHYW1lUHJvZmlsZSAod2l0aCBza2luKSBpbnRvIHNrdWxsTWV0YSB2aWEgcmVmbGVjdGlvbg0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBpbmplY3RHYW1lUHJvZmlsZVZpYVJlZmxlY3Rpb24oU2t1bGxNZXRhIHNrdWxsTWV0YSwgT2ZmbGluZVBsYXllciB0YXJnZXQpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIE9iamVjdCBwcm9maWxlID0gbnVsbDsgLy8gR2FtZVByb2ZpbGUgb2JqZWN0DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIEZpZWxkIHByb2ZpbGVGaWVsZCA9IHRhcmdldC5nZXRDbGFzcygpLmdldERlY2xhcmVkRmllbGQoInByb2ZpbGUiKTsgLy8gQWNjZXNzZXMgR2FtZVByb2ZpbGUgZmllbGQNCiAgICAgICAgICAgICAgICBwcm9maWxlRmllbGQuc2V0QWNjZXNzaWJsZSh0cnVlKTsNCiAgICAgICAgICAgICAgICBwcm9maWxlID0gcHJvZmlsZUZpZWxkLmdldCh0YXJnZXQpOyAvLyBHZXRzIHByb2ZpbGUNCiAgICAgICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS5pbmZvKCJHb3QgR2FtZVByb2ZpbGUgZnJvbSBPZmZsaW5lUGxheWVyIGZvciAiICsgdGFyZ2V0LmdldE5hbWUoKSk7IC8vIExvZ3Mgc3VjY2Vzcw0KICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJDb3VsZCBub3QgZ2V0IEdhbWVQcm9maWxlIGZyb20gT2ZmbGluZVBsYXllciBmb3IgIiArIHRhcmdldC5nZXROYW1lKCkgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOyAvLyBMb2dzIGZhaWx1cmUNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChwcm9maWxlID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJObyBHYW1lUHJvZmlsZSBhdmFpbGFibGUgZm9yICIgKyB0YXJnZXQuZ2V0TmFtZSgpICsgIiwgc2tpcHBpbmcgcmVmbGVjdGlvbiBpbmplY3Rpb24iKTsgLy8gTG9ncyBubyBwcm9maWxlDQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBNZXRob2Qgc2V0dGVyID0gc2t1bGxNZXRhLmdldENsYXNzKCkuZ2V0RGVjbGFyZWRNZXRob2QoInNldFByb2ZpbGUiLCBwcm9maWxlLmdldENsYXNzKCkpOyAvLyBBdHRlbXB0cyBzZXRQcm9maWxlIG1ldGhvZA0KICAgICAgICAgICAgICAgIHNldHRlci5zZXRBY2Nlc3NpYmxlKHRydWUpOw0KICAgICAgICAgICAgICAgIHNldHRlci5pbnZva2Uoc2t1bGxNZXRhLCBwcm9maWxlKTsgLy8gU2V0cyBwcm9maWxlDQogICAgICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkuaW5mbygiSW5qZWN0ZWQgR2FtZVByb2ZpbGUgdXNpbmcgc2V0UHJvZmlsZSBmb3IgIiArIHRhcmdldC5nZXROYW1lKCkpOyAvLyBMb2dzIHN1Y2Nlc3MNCiAgICAgICAgICAgIH0gY2F0Y2ggKE5vU3VjaE1ldGhvZEV4Y2VwdGlvbiBuc21lKSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgRmllbGQgcHJvZmlsZUZpZWxkID0gc2t1bGxNZXRhLmdldENsYXNzKCkuZ2V0RGVjbGFyZWRGaWVsZCgicHJvZmlsZSIpOyAvLyBBdHRlbXB0cyBkaXJlY3QgZmllbGQgYWNjZXNzDQogICAgICAgICAgICAgICAgICAgIHByb2ZpbGVGaWVsZC5zZXRBY2Nlc3NpYmxlKHRydWUpOw0KICAgICAgICAgICAgICAgICAgICBwcm9maWxlRmllbGQuc2V0KHNrdWxsTWV0YSwgcHJvZmlsZSk7IC8vIFNldHMgcHJvZmlsZQ0KICAgICAgICAgICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS5pbmZvKCJJbmplY3RlZCBHYW1lUHJvZmlsZSB1c2luZyBmaWVsZCBhY2Nlc3MgZm9yICIgKyB0YXJnZXQuZ2V0TmFtZSgpKTsgLy8gTG9ncyBzdWNjZXNzDQogICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIGluamVjdCBHYW1lUHJvZmlsZSBmb3IgIiArIHRhcmdldC5nZXROYW1lKCkgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOyAvLyBMb2dzIGZhaWx1cmUNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiB0KSB7DQogICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJSZWZsZWN0aW9uIGluamVjdGlvbiBmYWlsZWQgZm9yICIgKyB0YXJnZXQuZ2V0TmFtZSgpICsgIjogIiArIHQuZ2V0TWVzc2FnZSgpKTsgLy8gTG9ncyBnZW5lcmFsIGZhaWx1cmUNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIEBPdmVycmlkZQ0KICAgIHB1YmxpYyB2b2lkIHNlbmRUaXRsZShQbGF5ZXIgcGxheWVyLCBTdHJpbmcgdGl0bGUsIFN0cmluZyBzdWJ0aXRsZSwgaW50IGZhZGVJbiwgaW50IHN0YXksIGludCBmYWRlT3V0KSB7DQogICAgICAgIFZlcnNpb25VdGlscy5zZW5kVGl0bGUocGxheWVyLCB0aXRsZSwgc3VidGl0bGUsIGZhZGVJbiwgc3RheSwgZmFkZU91dCk7DQogICAgfQ0KDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIHZvaWQgc3Bhd25QYXJ0aWNsZXMoUGxheWVyIHBsYXllciwgU3RyaW5nIHBhcnRpY2xlVHlwZSwgaW50IGNvdW50KSB7DQogICAgICAgIFZlcnNpb25VdGlscy5zcGF3blBhcnRpY2xlKHBsYXllciwgcGFydGljbGVUeXBlLCBwbGF5ZXIuZ2V0TG9jYXRpb24oKS5hZGQoMCwgMSwgMCksIGNvdW50LCAwLjUsIDAuNSwgMC41LCAwLjEpOw0KICAgIH0NCg0KICAgIEBPdmVycmlkZQ0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0UGxheWVyVVVJRChQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIHJldHVybiBwbGF5ZXIuZ2V0VW5pcXVlSWQoKS50b1N0cmluZygpOw0KICAgIH0NCg0KICAgIEBPdmVycmlkZQ0KICAgIHB1YmxpYyBib29sZWFuIG1hdGVyaWFsRXhpc3RzKFN0cmluZyBtYXRlcmlhbE5hbWUpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIG9yZy5idWtraXQuTWF0ZXJpYWwudmFsdWVPZihtYXRlcmlhbE5hbWUpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0gY2F0Y2ggKElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHZlcnNpb24tc2FmZSBtYXRlcmlhbCBmb3IgbW9kZXJuIHZlcnNpb25zDQogICAgICovDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIE1hdGVyaWFsIGdldE1hdGVyaWFsKFN0cmluZyBtYXRlcmlhbE5hbWUpIHsNCiAgICAgICAgLy8gVXNlIFhNYXRlcmlhbCBmb3IgdmVyc2lvbi1zYWZlIG1hdGVyaWFsIHJlc29sdXRpb24gLy8gRW5zdXJlcyBjcm9zcy12ZXJzaW9uIGNvbXBhdGliaWxpdHkNCiAgICAgICAgTWF0ZXJpYWwgbWF0ZXJpYWwgPSBWZXJzaW9uVXRpbHMuZ2V0TWF0ZXJpYWxYTShtYXRlcmlhbE5hbWUpOyAvLyBSZXNvbHZlcyBtYXRlcmlhbCB2aWEgWE1hdGVyaWFsDQogICAgICAgIGlmIChtYXRlcmlhbCA9PSBNYXRlcmlhbC5TVE9ORSAmJiAhbWF0ZXJpYWxOYW1lLmVxdWFsc0lnbm9yZUNhc2UoIlNUT05FIikpIHsNCiAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLndhcm5pbmcoIkludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyBpbiBtb2Rlcm4gdmVyc2lvbiwgdXNpbmcgU1RPTkUiKTsgLy8gTG9ncyB3YXJuaW5nDQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIG1hdGVyaWFsOyAvLyBSZXR1cm5zIHJlc29sdmVkIG1hdGVyaWFsDQogICAgfQ0KDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIFN0cmluZyBnZXRTdWNjZXNzU291bmQoKSB7DQogICAgICAgIHJldHVybiAiRU5USVRZLkVYUEVSSUVOQ0UuT1JCLlBJQ0tVUCI7IC8vIE1vZGVybiBzb3VuZCBuYW1lDQogICAgfQ0KDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIFN0cmluZyBnZXRFcnJvclNvdW5kKCkgew0KICAgICAgICByZXR1cm4gImVudGl0eS52aWxsYWdlci5ubyI7IC8vIE1vZGVybiBzb3VuZCBuYW1lDQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy93cmFwcGVycy9WZXJzaW9uV3JhcHBlci5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDA0MDY2IDE1MDI0MTc3MzQwIDAyMDU3MgAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCnBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy53cmFwcGVyczsNCg0KaW1wb3J0IG9yZy5idWtraXQuTWF0ZXJpYWw7DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1TdGFjazsNCg0KaW1wb3J0IGNvbS5jcnlwdG9tb3Jpbi54c2VyaWVzLlhNYXRlcmlhbDsNCg0KcHVibGljIGludGVyZmFjZSBWZXJzaW9uV3JhcHBlciB7DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGEgcGxheWVyIGhlYWQgd2l0aCB0aGUgZ2l2ZW4gcGxheWVyJ3Mgc2tpbg0KICAgICAqLw0KICAgIEl0ZW1TdGFjayBjcmVhdGVQbGF5ZXJIZWFkKFN0cmluZyBwbGF5ZXJOYW1lKTsNCg0KICAgIC8qKg0KICAgICAqIFNlbmRzIGEgdGl0bGUgYW5kIHN1YnRpdGxlIHRvIHRoZSBwbGF5ZXINCiAgICAgKi8NCiAgICB2b2lkIHNlbmRUaXRsZShQbGF5ZXIgcGxheWVyLCBTdHJpbmcgdGl0bGUsIFN0cmluZyBzdWJ0aXRsZSwgaW50IGZhZGVJbiwgaW50IHN0YXksIGludCBmYWRlT3V0KTsNCg0KICAgIC8qKg0KICAgICAqIFNwYXducyBwYXJ0aWNsZXMgYXQgdGhlIHBsYXllcidzIGxvY2F0aW9uDQogICAgICovDQogICAgdm9pZCBzcGF3blBhcnRpY2xlcyhQbGF5ZXIgcGxheWVyLCBTdHJpbmcgcGFydGljbGVUeXBlLCBpbnQgY291bnQpOw0KDQogICAgLyoqDQogICAgICogR2V0cyB0aGUgcGxheWVyJ3MgVVVJRCBhcyBhIHN0cmluZw0KICAgICAqLw0KICAgIFN0cmluZyBnZXRQbGF5ZXJVVUlEKFBsYXllciBwbGF5ZXIpOw0KDQogICAgLyoqDQogICAgICogR2V0cyB2ZXJzaW9uLXNhZmUgbWF0ZXJpYWwgZm9yIGNyb3NzLXZlcnNpb24gY29tcGF0aWJpbGl0eQ0KICAgICAqLw0KICAgIGRlZmF1bHQgTWF0ZXJpYWwgZ2V0TWF0ZXJpYWwoU3RyaW5nIG1hdGVyaWFsTmFtZSkgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgWE1hdGVyaWFsIHhNYXRlcmlhbCA9IFhNYXRlcmlhbC52YWx1ZU9mKG1hdGVyaWFsTmFtZS50b1VwcGVyQ2FzZSgpKTsNCiAgICAgICAgICAgIHJldHVybiB4TWF0ZXJpYWwucGFyc2VNYXRlcmlhbCgpOw0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgLy8gRmFsbGJhY2sgdG8gZGlyZWN0IG1hdGVyaWFsIGxvb2t1cA0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICByZXR1cm4gTWF0ZXJpYWwudmFsdWVPZihtYXRlcmlhbE5hbWUudG9VcHBlckNhc2UoKSk7DQogICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZXgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gTWF0ZXJpYWwuU1RPTkU7IC8vIFVsdGltYXRlIGZhbGxiYWNrDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGEgcGxheWVyIGhlYWQgSXRlbVN0YWNrIHVzaW5nIFhNYXRlcmlhbA0KICAgICAqLw0KICAgIGRlZmF1bHQgSXRlbVN0YWNrIGNyZWF0ZVBsYXllckhlYWRJdGVtKCkgew0KICAgICAgICBYTWF0ZXJpYWwgcGxheWVySGVhZCA9IFhNYXRlcmlhbC5QTEFZRVJfSEVBRDsNCiAgICAgICAgcmV0dXJuIHBsYXllckhlYWQucGFyc2VJdGVtKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIGEgbWF0ZXJpYWwgZXhpc3RzIGluIHRoaXMgdmVyc2lvbg0KICAgICAqLw0KICAgIGRlZmF1bHQgYm9vbGVhbiBtYXRlcmlhbEV4aXN0cyhTdHJpbmcgbWF0ZXJpYWxOYW1lKSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBYTWF0ZXJpYWwudmFsdWVPZihtYXRlcmlhbE5hbWUudG9VcHBlckNhc2UoKSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdGhlIHN1Y2Nlc3Mgc291bmQgZm9yIHRoaXMgdmVyc2lvbg0KICAgICAqLw0KICAgIFN0cmluZyBnZXRTdWNjZXNzU291bmQoKTsNCg0KICAgIC8qKg0KICAgICAqIEdldHMgdGhlIGVycm9yIHNvdW5kIGZvciB0aGlzIHZlcnNpb24NCiAgICAgKi8NCiAgICBTdHJpbmcgZ2V0RXJyb3JTb3VuZCgpOw0KfdG9ueTI2L2JvdW50aWVzUGx1cy93cmFwcGVycy9WZXJzaW9uV3JhcHBlckZhY3RvcnkuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDAxMDQ3IDE1MDI0MTc3MzQwIDAyMjExNgAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMud3JhcHBlcnM7DQoNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlZlcnNpb25VdGlsczsNCg0KcHVibGljIGNsYXNzIFZlcnNpb25XcmFwcGVyRmFjdG9yeSB7DQoNCiAgICBwcml2YXRlIHN0YXRpYyB0b255MjYuYm91bnRpZXNQbHVzLndyYXBwZXJzLlZlcnNpb25XcmFwcGVyIHdyYXBwZXI7DQoNCiAgICBwdWJsaWMgc3RhdGljIHRvbnkyNi5ib3VudGllc1BsdXMud3JhcHBlcnMuVmVyc2lvbldyYXBwZXIgZ2V0V3JhcHBlcigpIHsNCiAgICAgICAgaWYgKHdyYXBwZXIgPT0gbnVsbCkgew0KICAgICAgICAgICAgaWYgKFZlcnNpb25VdGlscy5pc0xlZ2FjeSgpKSB7DQogICAgICAgICAgICAgICAgd3JhcHBlciA9IG5ldyBMZWdhY3lWZXJzaW9uV3JhcHBlcigpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB3cmFwcGVyID0gbmV3IE1vZGVyblZlcnNpb25XcmFwcGVyKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHdyYXBwZXI7DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy91dGlscy9DdXJyZW5jeVV0aWwuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDE3MDMyIDE1MDI0MTc3MzQwIDAxNzUyNgAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCnBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlsczsNCg0KaW1wb3J0IG5ldC5taWxrYm93bC52YXVsdC5lY29ub215LkVjb25vbXk7DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1TdGFjazsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkJvdW50aWVzUGx1czsNCmltcG9ydCBvcmcuYnVra2l0LkNoYXRDb2xvcjsNCg0KaW1wb3J0IGphdmEudXRpbC5MaXN0Ow0KDQpwdWJsaWMgY2xhc3MgQ3VycmVuY3lVdGlsIHsNCg0KICAgIC8vID09PT09PT09PT09PT09PT09PT09IE1PTkVZIE9QRVJBVElPTlMgPT09PT09PT09PT09PT09PT09PT0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrIGlmIHBsYXllciBoYXMgZW5vdWdoIG1vbmV5IHVzaW5nIFZhdWx0IGVjb25vbXkNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW4gaGFzRW5vdWdoTW9uZXkoUGxheWVyIHBsYXllciwgZG91YmxlIGFtb3VudCkgew0KICAgICAgICBFY29ub215IGVjb25vbXkgPSBCb3VudGllc1BsdXMuZ2V0RWNvbm9teSgpOw0KICAgICAgICByZXR1cm4gZWNvbm9teSAhPSBudWxsICYmIGVjb25vbXkuaGFzKHBsYXllciwgYW1vdW50KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZW1vdmUgbW9uZXkgZnJvbSBwbGF5ZXIgdXNpbmcgVmF1bHQgZWNvbm9teQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiByZW1vdmVNb25leShQbGF5ZXIgcGxheWVyLCBkb3VibGUgYW1vdW50KSB7DQogICAgICAgIEVjb25vbXkgZWNvbm9teSA9IEJvdW50aWVzUGx1cy5nZXRFY29ub215KCk7DQogICAgICAgIGlmIChlY29ub215ICE9IG51bGwgJiYgZWNvbm9teS5oYXMocGxheWVyLCBhbW91bnQpKSB7DQogICAgICAgICAgICByZXR1cm4gZWNvbm9teS53aXRoZHJhd1BsYXllcihwbGF5ZXIsIGFtb3VudCkudHJhbnNhY3Rpb25TdWNjZXNzKCk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEFkZCBtb25leSB0byBwbGF5ZXIgdXNpbmcgVmF1bHQgZWNvbm9teQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBhZGRNb25leShQbGF5ZXIgcGxheWVyLCBkb3VibGUgYW1vdW50KSB7DQogICAgICAgIEVjb25vbXkgZWNvbm9teSA9IEJvdW50aWVzUGx1cy5nZXRFY29ub215KCk7DQogICAgICAgIGlmIChlY29ub215ICE9IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiBlY29ub215LmRlcG9zaXRQbGF5ZXIocGxheWVyLCBhbW91bnQpLnRyYW5zYWN0aW9uU3VjY2VzcygpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXQgcGxheWVyJ3MgY3VycmVudCBiYWxhbmNlDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBkb3VibGUgZ2V0QmFsYW5jZShQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIEVjb25vbXkgZWNvbm9teSA9IEJvdW50aWVzUGx1cy5nZXRFY29ub215KCk7DQogICAgICAgIHJldHVybiBlY29ub215ICE9IG51bGwgPyBlY29ub215LmdldEJhbGFuY2UocGxheWVyKSA6IDAuMDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBGb3JtYXQgbW9uZXkgYW1vdW50IHVzaW5nIFZhdWx0IGVjb25vbXkNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIFN0cmluZyBmb3JtYXRNb25leShkb3VibGUgYW1vdW50KSB7DQogICAgICAgIEVjb25vbXkgZWNvbm9teSA9IEJvdW50aWVzUGx1cy5nZXRFY29ub215KCk7DQogICAgICAgIGlmIChlY29ub215ICE9IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiBlY29ub215LmZvcm1hdChhbW91bnQpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBTdHJpbmcuZm9ybWF0KCIkJS4yZiIsIGFtb3VudCk7DQogICAgfQ0KDQogICAgLy8gPT09PT09PT09PT09PT09PT09PT0gRVhQRVJJRU5DRSBPUEVSQVRJT05TID09PT09PT09PT09PT09PT09PT09DQoNCiAgICAvKioNCiAgICAgKiBDaGVjayBpZiBwbGF5ZXIgaGFzIGVub3VnaCBYUA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBoYXNFbm91Z2hYUChQbGF5ZXIgcGxheWVyLCBpbnQgYW1vdW50KSB7DQogICAgICAgIHJldHVybiBnZXRUb3RhbEV4cGVyaWVuY2UocGxheWVyKSA+PSBhbW91bnQ7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmVtb3ZlIFhQIGZyb20gcGxheWVyDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyB2b2lkIHJlbW92ZUV4cGVyaWVuY2UoUGxheWVyIHBsYXllciwgaW50IGFtb3VudCkgew0KICAgICAgICBpbnQgdG90YWxFeHAgPSBnZXRUb3RhbEV4cGVyaWVuY2UocGxheWVyKTsNCiAgICAgICAgdG90YWxFeHAgLT0gYW1vdW50Ow0KDQogICAgICAgIHBsYXllci5zZXRFeHAoMCk7DQogICAgICAgIHBsYXllci5zZXRMZXZlbCgwKTsNCiAgICAgICAgcGxheWVyLnNldFRvdGFsRXhwZXJpZW5jZSgwKTsNCg0KICAgICAgICBpZiAodG90YWxFeHAgPiAwKSB7DQogICAgICAgICAgICBwbGF5ZXIuZ2l2ZUV4cCh0b3RhbEV4cCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGQgWFAgdG8gcGxheWVyDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyB2b2lkIGFkZEV4cGVyaWVuY2UoUGxheWVyIHBsYXllciwgaW50IGFtb3VudCkgew0KICAgICAgICBwbGF5ZXIuZ2l2ZUV4cChhbW91bnQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldCB0b3RhbCBleHBlcmllbmNlIGluY2x1ZGluZyBsZXZlbHMNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGludCBnZXRUb3RhbEV4cGVyaWVuY2UoUGxheWVyIHBsYXllcikgew0KICAgICAgICBpbnQgZXhwID0gTWF0aC5yb3VuZChwbGF5ZXIuZ2V0RXhwKCkgKiBwbGF5ZXIuZ2V0RXhwVG9MZXZlbCgpKTsNCiAgICAgICAgaW50IGN1cnJlbnRMZXZlbCA9IHBsYXllci5nZXRMZXZlbCgpOw0KDQogICAgICAgIGZvciAoaW50IGxldmVsID0gMDsgbGV2ZWwgPCBjdXJyZW50TGV2ZWw7IGxldmVsKyspIHsNCiAgICAgICAgICAgIGV4cCArPSBnZXRFeHBBdExldmVsKGxldmVsKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBleHA7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0IGV4cGVyaWVuY2UgcmVxdWlyZWQgZm9yIGEgc3BlY2lmaWMgbGV2ZWwNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGludCBnZXRFeHBBdExldmVsKGludCBsZXZlbCkgew0KICAgICAgICBpZiAobGV2ZWwgPD0gMTUpIHsNCiAgICAgICAgICAgIHJldHVybiAyICogbGV2ZWwgKyA3Ow0KICAgICAgICB9IGVsc2UgaWYgKGxldmVsIDw9IDMwKSB7DQogICAgICAgICAgICByZXR1cm4gNSAqIGxldmVsIC0gMzg7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gOSAqIGxldmVsIC0gMTU4Ow0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8gPT09PT09PT09PT09PT09PT09PT0gQk9VTlRZIFNLVUxMIE9QRVJBVElPTlMgPT09PT09PT09PT09PT09PT09PT0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrIGlmIGl0ZW0gaXMgYSBib3VudHkgc2t1bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW4gaXNCb3VudHlTa3VsbChJdGVtU3RhY2sgaXRlbSkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0SXRlbU1ldGEoKSA9PSBudWxsIHx8IGl0ZW0uZ2V0SXRlbU1ldGEoKS5nZXRMb3JlKCkgPT0gbnVsbCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBpdGVtLmdldEl0ZW1NZXRhKCkuZ2V0TG9yZSgpOw0KICAgICAgICBmb3IgKFN0cmluZyBsaW5lIDogbG9yZSkgew0KICAgICAgICAgICAgU3RyaW5nIGNsZWFuTGluZSA9IENoYXRDb2xvci5zdHJpcENvbG9yKGxpbmUpLnRvTG93ZXJDYXNlKCk7DQogICAgICAgICAgICBpZiAoY2xlYW5MaW5lLmNvbnRhaW5zKCJib3VudHkgdmFsdWU6IikgfHwgY2xlYW5MaW5lLmNvbnRhaW5zKCJza3VsbCB2YWx1ZToiKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBFeHRyYWN0IGJvdW50eSB2YWx1ZSBmcm9tIHNrdWxsIGxvcmUNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGRvdWJsZSBleHRyYWN0Qm91bnR5VmFsdWVGcm9tU2t1bGwoSXRlbVN0YWNrIHNrdWxsKSB7DQogICAgICAgIGlmICghaXNCb3VudHlTa3VsbChza3VsbCkpIHsNCiAgICAgICAgICAgIHJldHVybiAwLjA7DQogICAgICAgIH0NCg0KICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IHNrdWxsLmdldEl0ZW1NZXRhKCkuZ2V0TG9yZSgpOw0KICAgICAgICBmb3IgKFN0cmluZyBsaW5lIDogbG9yZSkgew0KICAgICAgICAgICAgU3RyaW5nIGNsZWFuTGluZSA9IENoYXRDb2xvci5zdHJpcENvbG9yKGxpbmUpLnRvTG93ZXJDYXNlKCk7DQoNCiAgICAgICAgICAgIC8vIExvb2sgZm9yIHBhdHRlcm5zIGxpa2UgImJvdW50eSB2YWx1ZTogJDEyMy40NSIgb3IgInNrdWxsIHZhbHVlOiAkMTIzLjQ1Ig0KICAgICAgICAgICAgaWYgKGNsZWFuTGluZS5jb250YWlucygiYm91bnR5IHZhbHVlOiIpIHx8IGNsZWFuTGluZS5jb250YWlucygic2t1bGwgdmFsdWU6IikpIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHRoZSBudW1iZXIgYWZ0ZXIgdGhlIGNvbG9uDQogICAgICAgICAgICAgICAgICAgIFN0cmluZ1tdIHBhcnRzID0gY2xlYW5MaW5lLnNwbGl0KCI6Iik7DQogICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPj0gMikgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZhbHVlUGFydCA9IHBhcnRzWzFdLnRyaW0oKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjdXJyZW5jeSBzeW1ib2xzIGFuZCBwYXJzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVQYXJ0ID0gdmFsdWVQYXJ0LnJlcGxhY2VBbGwoIlteMC05Ll0iLCAiIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRG91YmxlLnBhcnNlRG91YmxlKHZhbHVlUGFydCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgICAgICAvLyBDb250aW51ZSB0byBuZXh0IGxpbmUgaWYgcGFyc2luZyBmYWlscw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gMC4wOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrIGlmIHBsYXllciBoYXMgZW5vdWdoIGJvdW50eSBza3VsbHMgd2l0aCBtaW5pbXVtIHZhbHVlDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGNoZWNrU2t1bGxSZXF1aXJlbWVudHMoUGxheWVyIHBsYXllciwgaW50IHJlcXVpcmVkQ291bnQsIGRvdWJsZSBtaW5WYWx1ZSkgew0KICAgICAgICBpbnQgdmFsaWRTa3VsbENvdW50ID0gMDsNCg0KICAgICAgICBmb3IgKEl0ZW1TdGFjayBpdGVtIDogcGxheWVyLmdldEludmVudG9yeSgpLmdldENvbnRlbnRzKCkpIHsNCiAgICAgICAgICAgIGlmIChpc0JvdW50eVNrdWxsKGl0ZW0pKSB7DQogICAgICAgICAgICAgICAgZG91YmxlIHNrdWxsVmFsdWUgPSBleHRyYWN0Qm91bnR5VmFsdWVGcm9tU2t1bGwoaXRlbSk7DQogICAgICAgICAgICAgICAgaWYgKHNrdWxsVmFsdWUgPj0gbWluVmFsdWUpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFsaWRTa3VsbENvdW50ICs9IGl0ZW0uZ2V0QW1vdW50KCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHZhbGlkU2t1bGxDb3VudCA+PSByZXF1aXJlZENvdW50Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbW92ZSByZXF1aXJlZCBza3VsbHMgZnJvbSBwbGF5ZXIgaW52ZW50b3J5DQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBib29sZWFuIHJlbW92ZVNrdWxsc0Zyb21JbnZlbnRvcnkoUGxheWVyIHBsYXllciwgaW50IHJlcXVpcmVkQ291bnQsIGRvdWJsZSBtaW5WYWx1ZSkgew0KICAgICAgICBpZiAoIWNoZWNrU2t1bGxSZXF1aXJlbWVudHMocGxheWVyLCByZXF1aXJlZENvdW50LCBtaW5WYWx1ZSkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGludCB0b1JlbW92ZSA9IHJlcXVpcmVkQ291bnQ7DQoNCiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBwbGF5ZXIuZ2V0SW52ZW50b3J5KCkuZ2V0U2l6ZSgpICYmIHRvUmVtb3ZlID4gMDsgaSsrKSB7DQogICAgICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IHBsYXllci5nZXRJbnZlbnRvcnkoKS5nZXRJdGVtKGkpOw0KDQogICAgICAgICAgICBpZiAoaXNCb3VudHlTa3VsbChpdGVtKSkgew0KICAgICAgICAgICAgICAgIGRvdWJsZSBza3VsbFZhbHVlID0gZXh0cmFjdEJvdW50eVZhbHVlRnJvbVNrdWxsKGl0ZW0pOw0KICAgICAgICAgICAgICAgIGlmIChza3VsbFZhbHVlID49IG1pblZhbHVlKSB7DQogICAgICAgICAgICAgICAgICAgIGludCBzdGFja0Ftb3VudCA9IGl0ZW0uZ2V0QW1vdW50KCk7DQogICAgICAgICAgICAgICAgICAgIGludCByZW1vdmVGcm9tU3RhY2sgPSBNYXRoLm1pbih0b1JlbW92ZSwgc3RhY2tBbW91bnQpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmVGcm9tU3RhY2sgPj0gc3RhY2tBbW91bnQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5nZXRJbnZlbnRvcnkoKS5zZXRJdGVtKGksIG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRBbW91bnQoc3RhY2tBbW91bnQgLSByZW1vdmVGcm9tU3RhY2spOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgdG9SZW1vdmUgLT0gcmVtb3ZlRnJvbVN0YWNrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0b1JlbW92ZSA9PSAwOw0KICAgIH0NCg0KICAgIC8vID09PT09PT09PT09PT09PT09PT09IFZBTElEQVRJT04gSEVMUEVSUyA9PT09PT09PT09PT09PT09PT09PQ0KDQogICAgLyoqDQogICAgICogR2V0IGZvcm1hdHRlZCBiYWxhbmNlIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5nIGdldEZvcm1hdHRlZEJhbGFuY2UoUGxheWVyIHBsYXllcikgew0KICAgICAgICByZXR1cm4gZm9ybWF0TW9uZXkoZ2V0QmFsYW5jZShwbGF5ZXIpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXQgcGxheWVyJ3MgY3VycmVudCBYUCBsZXZlbA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldEN1cnJlbnRMZXZlbChQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIHJldHVybiBwbGF5ZXIuZ2V0TGV2ZWwoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBGb3JtYXQgWFAgYW1vdW50DQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBTdHJpbmcgZm9ybWF0WFAoaW50IGFtb3VudCkgew0KICAgICAgICByZXR1cm4gYW1vdW50ICsgIiBYUCBMZXZlbCIgKyAoYW1vdW50ICE9IDEgPyAicyIgOiAiIik7DQogICAgfQ0KfvbnkyNi9ib3VudGllc1BsdXMvdXRpbHMvRGVidWdNYW5hZ2VyLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAxMDIzMyAxNTAyNjA1NjYxNSAwMTc0MTYAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzOw0KDQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5zY2hlZHVsZXIuQnVra2l0VGFzazsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkJvdW50aWVzUGx1czsNCmltcG9ydCBqYXZhLnV0aWwuY29uY3VycmVudC5Db25jdXJyZW50SGFzaE1hcDsNCmltcG9ydCBqYXZhLnV0aWwuY29uY3VycmVudC5Db25jdXJyZW50TWFwOw0KaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LmF0b21pYy5BdG9taWNMb25nOw0KDQovKioNCiAqIE1hbmFnZXMgZGVidWcgbWVzc2FnZSBsb2dnaW5nIGZvciBCb3VudGllc1BsdXMgLy8gbm90ZTogQ2VudHJhbGl6ZXMgaW1tZWRpYXRlIGFuZCBidWZmZXJlZCBkZWJ1ZyBsb2dnaW5nIHdpdGggcGVyaW9kaWMgb3V0cHV0DQogKi8NCnB1YmxpYyBjbGFzcyBEZWJ1Z01hbmFnZXIgew0KICAgIHByaXZhdGUgZmluYWwgQm91bnRpZXNQbHVzIHBsdWdpbjsNCiAgICBwcml2YXRlIGZpbmFsIGJvb2xlYW4gZGVidWdFbmFibGVkOw0KICAgIHByaXZhdGUgZmluYWwgQ29uY3VycmVudE1hcDxTdHJpbmcsIEF0b21pY0xvbmc+IGRlYnVnTG9nQ291bnRzOw0KICAgIHByaXZhdGUgZmluYWwgQ29uY3VycmVudE1hcDxTdHJpbmcsIFN0cmluZz4gZGVidWdMb2dGYWlsdXJlczsgLy8gVHJhY2tzIGZhaWx1cmUgbWVzc2FnZXMNCiAgICBwcml2YXRlIEJ1a2tpdFRhc2sgZGVidWdMb2dnaW5nVGFzazsNCg0KICAgIC8qKg0KICAgICAqIEluaXRpYWxpemVzIHRoZSBEZWJ1Z01hbmFnZXIgd2l0aCBwbHVnaW4gaW5zdGFuY2UgLy8gbm90ZTogU2V0cyB1cCBkZWJ1ZyBsb2dnaW5nIGJhc2VkIG9uIGNvbmZpZyBzZXR0aW5ncw0KICAgICAqLw0KICAgIHB1YmxpYyBEZWJ1Z01hbmFnZXIoQm91bnRpZXNQbHVzIHBsdWdpbikgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICAgICAgdGhpcy5kZWJ1Z0VuYWJsZWQgPSBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigiZGVidWctZW5hYmxlZCIsIGZhbHNlKTsNCiAgICAgICAgdGhpcy5kZWJ1Z0xvZ0NvdW50cyA9IG5ldyBDb25jdXJyZW50SGFzaE1hcDw+KCk7DQogICAgICAgIHRoaXMuZGVidWdMb2dGYWlsdXJlcyA9IG5ldyBDb25jdXJyZW50SGFzaE1hcDw+KCk7DQogICAgICAgIHRoaXMuZGVidWdMb2dnaW5nVGFzayA9IG51bGw7DQogICAgICAgIGlmIChkZWJ1Z0VuYWJsZWQpIHsNCiAgICAgICAgICAgIHN0YXJ0RGVidWdMb2dnaW5nVGFzaygpOw0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIkRlYnVnTWFuYWdlciBpbml0aWFsaXplZCB3aXRoIGRlYnVnIGxvZ2dpbmcgZW5hYmxlZCIpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIkRlYnVnTWFuYWdlciBpbml0aWFsaXplZCB3aXRoIGRlYnVnIGxvZ2dpbmcgZGlzYWJsZWQiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIExvZ3MgYW4gaW1tZWRpYXRlIGRlYnVnIG1lc3NhZ2UgaWYgZGVidWcgaXMgZW5hYmxlZCAvLyBub3RlOiBPdXRwdXRzIG1lc3NhZ2UgZGlyZWN0bHkgdG8gY29uc29sZSB3aXRob3V0IGJ1ZmZlcmluZw0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGxvZ0RlYnVnKFN0cmluZyBtZXNzYWdlKSB7DQogICAgICAgIGlmIChkZWJ1Z0VuYWJsZWQpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCIiICsgbWVzc2FnZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBMb2dzIGEgd2FybmluZyBtZXNzYWdlIC8vIG5vdGU6IE91dHB1dHMgd2FybmluZyBkaXJlY3RseSB0byBjb25zb2xlIHdpdGhvdXQgYnVmZmVyaW5nDQogICAgICovDQogICAgcHVibGljIHZvaWQgbG9nV2FybmluZyhTdHJpbmcgbWVzc2FnZSkgew0KICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZyhtZXNzYWdlKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBCdWZmZXJzIGEgZGVidWcgbWVzc2FnZSBmb3IgcGVyaW9kaWMgb3V0cHV0IC8vIG5vdGU6IEluY3JlbWVudHMgY291bnQgZm9yIG1lc3NhZ2UgdG8gYmUgc3VtbWFyaXplZCBldmVyeSAzMCBzZWNvbmRzDQogICAgICovDQogICAgcHVibGljIHZvaWQgYnVmZmVyRGVidWcoU3RyaW5nIG1lc3NhZ2UpIHsNCiAgICAgICAgaWYgKGRlYnVnRW5hYmxlZCkgew0KICAgICAgICAgICAgZGVidWdMb2dDb3VudHMuY29tcHV0ZUlmQWJzZW50KG1lc3NhZ2UsIGsgLT4gbmV3IEF0b21pY0xvbmcoKSkuaW5jcmVtZW50QW5kR2V0KCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBCdWZmZXJzIGEgZmFpbHVyZSBkZWJ1ZyBtZXNzYWdlIC8vIG5vdGU6IFN0b3JlcyBmYWlsdXJlIG1lc3NhZ2UgZm9yIHN1bW1hcnkgb3V0cHV0DQogICAgICovDQogICAgcHVibGljIHZvaWQgYnVmZmVyRmFpbHVyZShTdHJpbmcga2V5LCBTdHJpbmcgbWVzc2FnZSkgew0KICAgICAgICBpZiAoZGVidWdFbmFibGVkKSB7DQogICAgICAgICAgICBkZWJ1Z0xvZ0ZhaWx1cmVzLnB1dChrZXksIG1lc3NhZ2UpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU3RhcnRzIGEgdGFzayB0byBwZXJpb2RpY2FsbHkgbG9nIGJ1ZmZlcmVkIGRlYnVnIG1lc3NhZ2VzIC8vIG5vdGU6IFN1bW1hcml6ZXMgYnVmZmVyZWQgZGVidWcgbG9ncyBhbmQgZmFpbHVyZXMgZXZlcnkgMzAgc2Vjb25kcw0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBzdGFydERlYnVnTG9nZ2luZ1Rhc2soKSB7DQogICAgICAgIGlmIChkZWJ1Z0xvZ2dpbmdUYXNrICE9IG51bGwpIHsNCiAgICAgICAgICAgIGRlYnVnTG9nZ2luZ1Rhc2suY2FuY2VsKCk7DQogICAgICAgIH0NCiAgICAgICAgZGVidWdMb2dnaW5nVGFzayA9IEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrVGltZXIocGx1Z2luLCAoKSAtPiB7DQogICAgICAgICAgICBpZiAoZGVidWdMb2dDb3VudHMuaXNFbXB0eSgpICYmIGRlYnVnTG9nRmFpbHVyZXMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBzdW1tYXJ5ID0gbmV3IFN0cmluZ0J1aWxkZXIoIkRlYnVnIHN1bW1hcnkgKHBhc3QgMzAgc2Vjb25kcyk6XG4iKTsNCiAgICAgICAgICAgIC8vIFN1bW1hcml6ZSBzdWNjZXNzZnVsIGl0ZW0gY3JlYXRpb25zDQogICAgICAgICAgICBkZWJ1Z0xvZ0NvdW50cy5mb3JFYWNoKChtZXNzYWdlLCBjb3VudCkgLT4gew0KICAgICAgICAgICAgICAgIHN1bW1hcnkuYXBwZW5kKFN0cmluZy5mb3JtYXQoIi0gJXM6ICVkIHRpbWVzXG4iLCBtZXNzYWdlLCBjb3VudC5nZXQoKSkpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAvLyBTdW1tYXJpemUgZmFpbHVyZXMNCiAgICAgICAgICAgIGlmICghZGVidWdMb2dGYWlsdXJlcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBzdW1tYXJ5LmFwcGVuZCgiRmFpbHVyZXM6XG4iKTsNCiAgICAgICAgICAgICAgICBkZWJ1Z0xvZ0ZhaWx1cmVzLmZvckVhY2goKGtleSwgbWVzc2FnZSkgLT4gew0KICAgICAgICAgICAgICAgICAgICBzdW1tYXJ5LmFwcGVuZChTdHJpbmcuZm9ybWF0KCItICVzXG4iLCBtZXNzYWdlKSk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbyhzdW1tYXJ5LnRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgZGVidWdMb2dDb3VudHMuY2xlYXIoKTsNCiAgICAgICAgICAgIGRlYnVnTG9nRmFpbHVyZXMuY2xlYXIoKTsNCiAgICAgICAgfSwgNjAwTCwgNjAwTCk7IC8vIDMwIHNlY29uZHMgKDYwMCB0aWNrcykNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTdG9wcyB0aGUgcGVyaW9kaWMgZGVidWcgbG9nZ2luZyB0YXNrIC8vIG5vdGU6IENhbmNlbHMgdGhlIHRhc2sgYW5kIGNsZWFycyBidWZmZXJlZCBsb2dzDQogICAgICovDQogICAgcHVibGljIHZvaWQgc3RvcERlYnVnTG9nZ2luZ1Rhc2soKSB7DQogICAgICAgIGlmIChkZWJ1Z0xvZ2dpbmdUYXNrICE9IG51bGwpIHsNCiAgICAgICAgICAgIGRlYnVnTG9nZ2luZ1Rhc2suY2FuY2VsKCk7DQogICAgICAgICAgICBkZWJ1Z0xvZ2dpbmdUYXNrID0gbnVsbDsNCiAgICAgICAgICAgIGRlYnVnTG9nQ291bnRzLmNsZWFyKCk7DQogICAgICAgICAgICBkZWJ1Z0xvZ0ZhaWx1cmVzLmNsZWFyKCk7DQogICAgICAgIH0NCiAgICB9DQp9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy91dGlscy9FdmVudE1hbmFnZXIuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDA0NTI3IDE1MDI2MzY1MTEyIDAxNzQ1NQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHM7DQoNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LkhhbmRsZXJMaXN0Ow0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuTGlzdGVuZXI7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudGllc1BsdXM7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudHlDcmVhdGlvbkNoYXRMaXN0ZW5lcjsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkdVSXMuQm91bnR5Q2FuY2VsOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuR1VJcy5Cb3VudHlHVUk7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5HVUlzLlRvcEdVSTsNCg0KaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7DQppbXBvcnQgamF2YS51dGlsLkxpc3Q7DQoNCi8qKg0KICogTWFuYWdlcyByZWdpc3RyYXRpb24gYW5kIHVucmVnaXN0cmF0aW9uIG9mIGV2ZW50IGxpc3RlbmVycw0KICogLy8gbm90ZTogQ2VudHJhbGl6ZXMgbGlzdGVuZXIgbWFuYWdlbWVudCBmb3IgcGx1Z2luIHNjYWxhYmlsaXR5IGFuZCBjbGVhbnVwDQogKi8NCnB1YmxpYyBjbGFzcyBFdmVudE1hbmFnZXIgew0KICAgIHByaXZhdGUgZmluYWwgQm91bnRpZXNQbHVzIHBsdWdpbjsNCiAgICBwcml2YXRlIGZpbmFsIExpc3Q8TGlzdGVuZXI+IHJlZ2lzdGVyZWRMaXN0ZW5lcnMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCg0KICAgIHB1YmxpYyBFdmVudE1hbmFnZXIoQm91bnRpZXNQbHVzIHBsdWdpbikgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZWdpc3RlcnMgYSBsaXN0ZW5lciB3aXRoIHRoZSBwbHVnaW4NCiAgICAgKiAvLyBub3RlOiBBZGRzIGxpc3RlbmVyIHRvIEJ1a2tpdCBhbmQgdHJhY2tzIGl0IGZvciBjbGVhbnVwDQogICAgICovDQogICAgcHVibGljIHZvaWQgcmVnaXN0ZXIoTGlzdGVuZXIgbGlzdGVuZXIpIHsNCiAgICAgICAgcGx1Z2luLmdldFNlcnZlcigpLmdldFBsdWdpbk1hbmFnZXIoKS5yZWdpc3RlckV2ZW50cyhsaXN0ZW5lciwgcGx1Z2luKTsNCiAgICAgICAgcmVnaXN0ZXJlZExpc3RlbmVycy5hZGQobGlzdGVuZXIpOw0KICAgICAgICBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCkubG9nRGVidWcoIlJlZ2lzdGVyZWQgbGlzdGVuZXI6ICIgKyBsaXN0ZW5lci5nZXRDbGFzcygpLmdldFNpbXBsZU5hbWUoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogVW5yZWdpc3RlcnMgYSBzcGVjaWZpYyBsaXN0ZW5lcg0KICAgICAqIC8vIG5vdGU6IFJlbW92ZXMgbGlzdGVuZXIgZnJvbSBCdWtraXQgYW5kIHRyYWNraW5nIGxpc3QNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCB1bnJlZ2lzdGVyKExpc3RlbmVyIGxpc3RlbmVyKSB7DQogICAgICAgIEhhbmRsZXJMaXN0LnVucmVnaXN0ZXJBbGwobGlzdGVuZXIpOw0KICAgICAgICByZWdpc3RlcmVkTGlzdGVuZXJzLnJlbW92ZShsaXN0ZW5lcik7DQogICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiVW5yZWdpc3RlcmVkIGxpc3RlbmVyOiAiICsgbGlzdGVuZXIuZ2V0Q2xhc3MoKS5nZXRTaW1wbGVOYW1lKCkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFVucmVnaXN0ZXJzIGFsbCBsaXN0ZW5lcnMNCiAgICAgKiAvLyBub3RlOiBDbGVhcnMgYWxsIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGR1cmluZyBwbHVnaW4gZGlzYWJsZQ0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIHVucmVnaXN0ZXJBbGwoKSB7DQogICAgICAgIHJlZ2lzdGVyZWRMaXN0ZW5lcnMuZm9yRWFjaChIYW5kbGVyTGlzdDo6dW5yZWdpc3RlckFsbCk7DQogICAgICAgIHJlZ2lzdGVyZWRMaXN0ZW5lcnMuY2xlYXIoKTsNCiAgICAgICAgcGx1Z2luLmdldERlYnVnTWFuYWdlcigpLmxvZ0RlYnVnKCJVbnJlZ2lzdGVyZWQgYWxsIGxpc3RlbmVycy4iKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZWdpc3RlcnMgZ2xvYmFsIGxpc3RlbmVycyBmb3IgdGhlIHBsdWdpbg0KICAgICAqIC8vIG5vdGU6IEluaXRpYWxpemVzIGNvcmUgbGlzdGVuZXJzIGR1cmluZyBwbHVnaW4gc3RhcnR1cA0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIHJlZ2lzdGVyR2xvYmFsTGlzdGVuZXJzKCkgew0KICAgICAgICByZWdpc3RlcihuZXcgUGxheWVyRGVhdGhMaXN0ZW5lcihwbHVnaW4sIHRoaXMpKTsNCiAgICAgICAgcmVnaXN0ZXIobmV3IEJvdW50eUNyZWF0aW9uQ2hhdExpc3RlbmVyKHBsdWdpbiwgdGhpcykpOw0KICAgICAgICByZWdpc3RlcihuZXcgVG9wR1VJKHBsdWdpbiwgdGhpcykpOw0KICAgICAgICByZWdpc3RlcihuZXcgQm91bnR5R1VJKHBsdWdpbiwgdGhpcywgbnVsbCkpOw0KICAgICAgICByZWdpc3RlcihuZXcgQm91bnR5Q2FuY2VsKHBsdWdpbiwgdGhpcykpOw0KICAgIH0NCn0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy91dGlscy9JdGVtVmFsdWVDYWxjdWxhdG9yLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDIwMzc3IDE1MDI2MzYyNDYxIDAyMTAxMwAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHM7DQoNCmltcG9ydCBvcmcuYnVra2l0Lk1hdGVyaWFsOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5Db25maWd1cmF0aW9uU2VjdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5GaWxlQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmVuY2hhbnRtZW50cy5FbmNoYW50bWVudDsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JdGVtU3RhY2s7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkubWV0YS5JdGVtTWV0YTsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkJvdW50aWVzUGx1czsNCg0KaW1wb3J0IGphdmEudXRpbC5MaXN0Ow0KaW1wb3J0IGphdmEudXRpbC5NYXA7DQoNCnB1YmxpYyBjbGFzcyBJdGVtVmFsdWVDYWxjdWxhdG9yIHsNCg0KICAgIHByaXZhdGUgZmluYWwgQm91bnRpZXNQbHVzIHBsdWdpbjsNCiAgICBwcml2YXRlIEZpbGVDb25maWd1cmF0aW9uIGl0ZW1WYWx1ZUNvbmZpZzsNCiAgICBwcml2YXRlIHZvaWQgbG9hZENvbmZpZygpIHsNCiAgICAgICAgdGhpcy5pdGVtVmFsdWVDb25maWcgPSBwbHVnaW4uZ2V0SXRlbVZhbHVlQ29uZmlnKCk7DQogICAgfQ0KICAgIHB1YmxpYyB2b2lkIHJlbG9hZENvbmZpZygpIHsNCiAgICAgICAgbG9hZENvbmZpZygpOw0KICAgIH0NCg0KICAgIHB1YmxpYyBJdGVtVmFsdWVDYWxjdWxhdG9yKEJvdW50aWVzUGx1cyBwbHVnaW4pIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgICAgIGxvYWRDb25maWcoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDYWxjdWxhdGVzIHRoZSB0b3RhbCB2YWx1ZSBvZiBhIGxpc3Qgb2YgaXRlbXMgLy8gbm90ZTogQ29tcHV0ZXMgdmFsdWUgZm9yIGEgTGlzdDxJdGVtU3RhY2s+IGJ5IGNvbnZlcnRpbmcgdG8gYXJyYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgZG91YmxlIGNhbGN1bGF0ZUl0ZW1zVmFsdWUoTGlzdDxJdGVtU3RhY2s+IGl0ZW1zKSB7DQogICAgICAgIGlmIChpdGVtcyA9PSBudWxsIHx8IGl0ZW1zLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgcmV0dXJuIDAuMDsNCiAgICAgICAgfQ0KICAgICAgICBJdGVtU3RhY2tbXSBpdGVtQXJyYXkgPSBpdGVtcy5zdHJlYW0oKQ0KICAgICAgICAgICAgICAgIC5maWx0ZXIoaXRlbSAtPiBpdGVtICE9IG51bGwgJiYgaXRlbS5nZXRUeXBlKCkgIT0gTWF0ZXJpYWwuQUlSKQ0KICAgICAgICAgICAgICAgIC50b0FycmF5KEl0ZW1TdGFja1tdOjpuZXcpOw0KICAgICAgICByZXR1cm4gY2FsY3VsYXRlVG90YWxWYWx1ZShpdGVtQXJyYXkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENhbGN1bGF0ZSB0aGUgdG90YWwgdmFsdWUgb2YgYW4gSXRlbVN0YWNrIGluY2x1ZGluZyBlbmNoYW50bWVudHMgYW5kIGN1c3RvbSBpdGVtcyAvLyBub3RlOiBDb21wdXRlcyB2YWx1ZSBiYXNlZCBvbiBtYXRlcmlhbCwgZW5jaGFudG1lbnRzLCBvciBOQlQgdGFncw0KICAgICAqLw0KICAgIHB1YmxpYyBkb3VibGUgY2FsY3VsYXRlSXRlbVZhbHVlKEl0ZW1TdGFjayBpdGVtKSB7DQogICAgICAgIGlmIChpdGVtID09IG51bGwgfHwgaXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICByZXR1cm4gMC4wOw0KICAgICAgICB9DQoNCiAgICAgICAgZG91YmxlIGN1c3RvbVZhbHVlID0gZ2V0Q3VzdG9tSXRlbVZhbHVlKGl0ZW0pOw0KICAgICAgICBpZiAoY3VzdG9tVmFsdWUgPj0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIGN1c3RvbVZhbHVlICogaXRlbS5nZXRBbW91bnQoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGRvdWJsZSBiYXNlVmFsdWUgPSBnZXRCYXNlSXRlbVZhbHVlKGl0ZW0uZ2V0VHlwZSgpKTsNCiAgICAgICAgZG91YmxlIGVuY2hhbnRtZW50VmFsdWUgPSBjYWxjdWxhdGVFbmNoYW50bWVudFZhbHVlKGl0ZW0pOw0KICAgICAgICBib29sZWFuIGFwcGx5TXVsdGlwbGllclRvQmFzZSA9IGl0ZW1WYWx1ZUNvbmZpZy5nZXRCb29sZWFuKCJjYWxjdWxhdGlvbi5hcHBseV9lbmNoYW50bWVudF9tdWx0aXBsaWVyX3RvX2Jhc2UiLCB0cnVlKTsNCiAgICAgICAgZG91YmxlIGVuY2hhbnRtZW50TXVsdGlwbGllciA9IGl0ZW1WYWx1ZUNvbmZpZy5nZXREb3VibGUoImVuY2hhbnRtZW50LW11bHRpcGxpZXIiLCAxLjUpOw0KDQogICAgICAgIGRvdWJsZSB0b3RhbFZhbHVlOw0KICAgICAgICBpZiAoYXBwbHlNdWx0aXBsaWVyVG9CYXNlICYmIGhhc0VuY2hhbnRtZW50cyhpdGVtKSkgew0KICAgICAgICAgICAgdG90YWxWYWx1ZSA9IChiYXNlVmFsdWUgKiBlbmNoYW50bWVudE11bHRpcGxpZXIpICsgZW5jaGFudG1lbnRWYWx1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRvdGFsVmFsdWUgPSBiYXNlVmFsdWUgKyBlbmNoYW50bWVudFZhbHVlOw0KICAgICAgICB9DQoNCiAgICAgICAgdG90YWxWYWx1ZSAqPSBpdGVtLmdldEFtb3VudCgpOw0KICAgICAgICB0b3RhbFZhbHVlID0gYXBwbHlDYWxjdWxhdGlvbkNvbnN0cmFpbnRzKHRvdGFsVmFsdWUsIGJhc2VWYWx1ZSk7DQoNCiAgICAgICAgcmV0dXJuIHRvdGFsVmFsdWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB0aGUgdmFsdWUgb2YgYSBjdXN0b20gaXRlbSBiYXNlZCBvbiBOQlQgdGFncyAvLyBub3RlOiBSZXRyaWV2ZXMgdmFsdWUgZnJvbSBpdGVtcy55bWwgYmFzZWQgb24gaXRlbSB0eXBlIGFuZCB1c2VzDQogICAgICovDQogICAgcHJpdmF0ZSBkb3VibGUgZ2V0Q3VzdG9tSXRlbVZhbHVlKEl0ZW1TdGFjayBpdGVtKSB7DQogICAgICAgIGlmIChpdGVtID09IG51bGwgfHwgaXRlbS5nZXRJdGVtTWV0YSgpID09IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiAtMS4wOw0KICAgICAgICB9DQogICAgICAgIFN0cmluZyBpdGVtVHlwZSA9IFZlcnNpb25VdGlscy5nZXROQlRTdHJpbmcoaXRlbSwgIml0ZW1fdHlwZSIpOw0KICAgICAgICBpZiAoaXRlbVR5cGUgPT0gbnVsbCkgew0KICAgICAgICAgICAgcmV0dXJuIC0xLjA7DQogICAgICAgIH0NCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gaXRlbXNDb25maWcgPSBwbHVnaW4uZ2V0SXRlbXNDb25maWcoKTsNCiAgICAgICAgU3RyaW5nIHBhdGggPSAiY3VzdG9tLWl0ZW1zLiIgKyBpdGVtVHlwZSArICIudmFsdWUiOw0KICAgICAgICBpZiAoIWl0ZW1zQ29uZmlnLmNvbnRhaW5zKHBhdGgpKSB7DQogICAgICAgICAgICByZXR1cm4gLTEuMDsNCiAgICAgICAgfQ0KICAgICAgICBkb3VibGUgYmFzZVZhbHVlID0gaXRlbXNDb25maWcuZ2V0RG91YmxlKHBhdGggKyAiLmJhc2UiLCAwLjApOw0KICAgICAgICBkb3VibGUgcGVyVXNlVmFsdWUgPSBpdGVtc0NvbmZpZy5nZXREb3VibGUocGF0aCArICIucGVyLXVzZSIsIDAuMCk7DQogICAgICAgIGlmIChwZXJVc2VWYWx1ZSA+IDApIHsNCiAgICAgICAgICAgIEludGVnZXIgdXNlcyA9IFZlcnNpb25VdGlscy5nZXROQlRJbnRlZ2VyKGl0ZW0sICJ1c2VzIik7DQogICAgICAgICAgICBpZiAodXNlcyAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VWYWx1ZSArIChwZXJVc2VWYWx1ZSAqIHVzZXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBiYXNlVmFsdWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2FsY3VsYXRlIHRvdGFsIHZhbHVlIG9mIG11bHRpcGxlIGl0ZW1zDQogICAgICovDQogICAgcHVibGljIGRvdWJsZSBjYWxjdWxhdGVUb3RhbFZhbHVlKEl0ZW1TdGFja1tdIGl0ZW1zKSB7DQogICAgICAgIGRvdWJsZSB0b3RhbCA9IDAuMDsNCiAgICAgICAgZm9yIChJdGVtU3RhY2sgaXRlbSA6IGl0ZW1zKSB7DQogICAgICAgICAgICBpZiAoaXRlbSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgdG90YWwgKz0gY2FsY3VsYXRlSXRlbVZhbHVlKGl0ZW0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0b3RhbDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXQgYmFzZSB2YWx1ZSBmb3IgYSBtYXRlcmlhbCB0eXBlDQogICAgICovDQogICAgcHJpdmF0ZSBkb3VibGUgZ2V0QmFzZUl0ZW1WYWx1ZShNYXRlcmlhbCBtYXRlcmlhbCkgew0KICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gbWF0ZXJpYWwubmFtZSgpOw0KDQogICAgICAgIC8vIENoZWNrIHNwZWNpZmljIGl0ZW0gdmFsdWVzIGZpcnN0DQogICAgICAgIENvbmZpZ3VyYXRpb25TZWN0aW9uIGl0ZW1zU2VjdGlvbiA9IGl0ZW1WYWx1ZUNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiaXRlbXMiKTsNCiAgICAgICAgaWYgKGl0ZW1zU2VjdGlvbiAhPSBudWxsICYmIGl0ZW1zU2VjdGlvbi5jb250YWlucyhtYXRlcmlhbE5hbWUpKSB7DQogICAgICAgICAgICByZXR1cm4gaXRlbXNTZWN0aW9uLmdldERvdWJsZShtYXRlcmlhbE5hbWUpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ2hlY2sgbGVnYWN5IG5hbWVzDQogICAgICAgIENvbmZpZ3VyYXRpb25TZWN0aW9uIGxlZ2FjeVNlY3Rpb24gPSBpdGVtVmFsdWVDb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oImxlZ2FjeV9pdGVtcyIpOw0KICAgICAgICBpZiAobGVnYWN5U2VjdGlvbiAhPSBudWxsICYmIGxlZ2FjeVNlY3Rpb24uY29udGFpbnMobWF0ZXJpYWxOYW1lKSkgew0KICAgICAgICAgICAgcmV0dXJuIGxlZ2FjeVNlY3Rpb24uZ2V0RG91YmxlKG1hdGVyaWFsTmFtZSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBSZXR1cm4gZGVmYXVsdCB2YWx1ZQ0KICAgICAgICByZXR1cm4gaXRlbVZhbHVlQ29uZmlnLmdldERvdWJsZSgiZGVmYXVsdC1pdGVtLXZhbHVlIiwgMTAuMCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2FsY3VsYXRlIHRvdGFsIGVuY2hhbnRtZW50IHZhbHVlIGZvciBhbiBpdGVtDQogICAgICovDQogICAgcHJpdmF0ZSBkb3VibGUgY2FsY3VsYXRlRW5jaGFudG1lbnRWYWx1ZShJdGVtU3RhY2sgaXRlbSkgew0KICAgICAgICBpZiAoIWl0ZW0uaGFzSXRlbU1ldGEoKSkgew0KICAgICAgICAgICAgcmV0dXJuIDAuMDsNCiAgICAgICAgfQ0KDQogICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBpdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmICghbWV0YS5oYXNFbmNoYW50cygpKSB7DQogICAgICAgICAgICByZXR1cm4gMC4wOw0KICAgICAgICB9DQoNCiAgICAgICAgZG91YmxlIHRvdGFsRW5jaGFudG1lbnRWYWx1ZSA9IDAuMDsNCiAgICAgICAgTWFwPEVuY2hhbnRtZW50LCBJbnRlZ2VyPiBlbmNoYW50bWVudHMgPSBtZXRhLmdldEVuY2hhbnRzKCk7DQoNCiAgICAgICAgZm9yIChNYXAuRW50cnk8RW5jaGFudG1lbnQsIEludGVnZXI+IGVudHJ5IDogZW5jaGFudG1lbnRzLmVudHJ5U2V0KCkpIHsNCiAgICAgICAgICAgIEVuY2hhbnRtZW50IGVuY2hhbnQgPSBlbnRyeS5nZXRLZXkoKTsNCiAgICAgICAgICAgIGludCBsZXZlbCA9IGVudHJ5LmdldFZhbHVlKCk7DQoNCiAgICAgICAgICAgIGRvdWJsZSBlbmNoYW50VmFsdWUgPSBnZXRFbmNoYW50bWVudFZhbHVlKGVuY2hhbnQsIGxldmVsKTsNCiAgICAgICAgICAgIHRvdGFsRW5jaGFudG1lbnRWYWx1ZSArPSBlbmNoYW50VmFsdWU7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdG90YWxFbmNoYW50bWVudFZhbHVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldCB2YWx1ZSBmb3IgYSBzcGVjaWZpYyBlbmNoYW50bWVudCBhbmQgbGV2ZWwNCiAgICAgKi8NCiAgICBwcml2YXRlIGRvdWJsZSBnZXRFbmNoYW50bWVudFZhbHVlKEVuY2hhbnRtZW50IGVuY2hhbnRtZW50LCBpbnQgbGV2ZWwpIHsNCiAgICAgICAgQ29uZmlndXJhdGlvblNlY3Rpb24gZW5jaGFudFNlY3Rpb24gPSBpdGVtVmFsdWVDb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oImVuY2hhbnRtZW50cyIpOw0KICAgICAgICBpZiAoZW5jaGFudFNlY3Rpb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgcmV0dXJuIDAuMDsNCiAgICAgICAgfQ0KDQogICAgICAgIFN0cmluZyBlbmNoYW50TmFtZSA9IGdldEVuY2hhbnRtZW50Q29uZmlnTmFtZShlbmNoYW50bWVudCk7DQogICAgICAgIENvbmZpZ3VyYXRpb25TZWN0aW9uIHNwZWNpZmljRW5jaGFudCA9IGVuY2hhbnRTZWN0aW9uLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKGVuY2hhbnROYW1lKTsNCg0KICAgICAgICBpZiAoc3BlY2lmaWNFbmNoYW50ICE9IG51bGwpIHsNCiAgICAgICAgICAgIGRvdWJsZSBiYXNlVmFsdWUgPSBzcGVjaWZpY0VuY2hhbnQuZ2V0RG91YmxlKCJiYXNlX3ZhbHVlIiwgMC4wKTsNCiAgICAgICAgICAgIGRvdWJsZSBwZXJMZXZlbCA9IHNwZWNpZmljRW5jaGFudC5nZXREb3VibGUoInBlcl9sZXZlbCIsIDAuMCk7DQogICAgICAgICAgICBpbnQgbWF4TGV2ZWwgPSBzcGVjaWZpY0VuY2hhbnQuZ2V0SW50KCJtYXhfbGV2ZWwiLCBsZXZlbCk7DQoNCiAgICAgICAgICAgIC8vIENhcCBsZXZlbCBhdCBtYXhfbGV2ZWwNCiAgICAgICAgICAgIGludCBlZmZlY3RpdmVMZXZlbCA9IE1hdGgubWluKGxldmVsLCBtYXhMZXZlbCk7DQoNCiAgICAgICAgICAgIHJldHVybiBiYXNlVmFsdWUgKyAocGVyTGV2ZWwgKiBlZmZlY3RpdmVMZXZlbCk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gMC4wOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENvbnZlcnQgQnVra2l0IGVuY2hhbnRtZW50IHRvIGNvbmZpZyBuYW1lIC0gQ29tcGF0aWJsZSB3aXRoIEphdmEgOC8xLjgNCiAgICAgKi8NCiAgICBwcml2YXRlIFN0cmluZyBnZXRFbmNoYW50bWVudENvbmZpZ05hbWUoRW5jaGFudG1lbnQgZW5jaGFudG1lbnQpIHsNCiAgICAgICAgLy8gQ2hlY2sgbGVnYWN5IG1hcHBpbmdzIGZpcnN0DQogICAgICAgIENvbmZpZ3VyYXRpb25TZWN0aW9uIGxlZ2FjeVNlY3Rpb24gPSBpdGVtVmFsdWVDb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oImxlZ2FjeV9lbmNoYW50bWVudHMiKTsNCiAgICAgICAgaWYgKGxlZ2FjeVNlY3Rpb24gIT0gbnVsbCkgew0KICAgICAgICAgICAgU3RyaW5nIGJ1a2tpdE5hbWUgPSBlbmNoYW50bWVudC5nZXROYW1lKCk7DQogICAgICAgICAgICBpZiAobGVnYWN5U2VjdGlvbi5jb250YWlucyhidWtraXROYW1lKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBsZWdhY3lTZWN0aW9uLmdldFN0cmluZyhidWtraXROYW1lKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEZvciBvbGRlciB2ZXJzaW9ucywgdXNlIHRoZSBlbmNoYW50bWVudCBuYW1lIGRpcmVjdGx5DQogICAgICAgIC8vIFRoaXMgaXMgY29tcGF0aWJsZSB3aXRoIE1pbmVjcmFmdCAxLjggYW5kIEphdmEgOA0KICAgICAgICByZXR1cm4gZW5jaGFudG1lbnQuZ2V0TmFtZSgpLnRvVXBwZXJDYXNlKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2sgaWYgaXRlbSBoYXMgYW55IGVuY2hhbnRtZW50cw0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBoYXNFbmNoYW50bWVudHMoSXRlbVN0YWNrIGl0ZW0pIHsNCiAgICAgICAgcmV0dXJuIGl0ZW0uaGFzSXRlbU1ldGEoKSAmJiBpdGVtLmdldEl0ZW1NZXRhKCkuaGFzRW5jaGFudHMoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBcHBseSBjYWxjdWxhdGlvbiBjb25zdHJhaW50cyBmcm9tIGNvbmZpZw0KICAgICAqLw0KICAgIHByaXZhdGUgZG91YmxlIGFwcGx5Q2FsY3VsYXRpb25Db25zdHJhaW50cyhkb3VibGUgdmFsdWUsIGRvdWJsZSBiYXNlVmFsdWUpIHsNCiAgICAgICAgLy8gQXBwbHkgbWluaW11bSB2YWx1ZQ0KICAgICAgICBkb3VibGUgbWluVmFsdWUgPSBpdGVtVmFsdWVDb25maWcuZ2V0RG91YmxlKCJjYWxjdWxhdGlvbi5taW5pbXVtX2l0ZW1fdmFsdWUiLCAxLjApOw0KICAgICAgICBpZiAodmFsdWUgPCBtaW5WYWx1ZSkgew0KICAgICAgICAgICAgdmFsdWUgPSBtaW5WYWx1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEFwcGx5IG1heGltdW0gbXVsdGlwbGllcg0KICAgICAgICBkb3VibGUgbWF4TXVsdGlwbGllciA9IGl0ZW1WYWx1ZUNvbmZpZy5nZXREb3VibGUoImNhbGN1bGF0aW9uLm1heGltdW1fdmFsdWVfbXVsdGlwbGllciIsIDEwMC4wKTsNCiAgICAgICAgZG91YmxlIG1heFZhbHVlID0gYmFzZVZhbHVlICogbWF4TXVsdGlwbGllcjsNCiAgICAgICAgaWYgKHZhbHVlID4gbWF4VmFsdWUpIHsNCiAgICAgICAgICAgIHZhbHVlID0gbWF4VmFsdWU7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBBcHBseSByb3VuZGluZyBpZiBlbmFibGVkDQogICAgICAgIGJvb2xlYW4gcm91bmRGaW5hbFZhbHVlID0gaXRlbVZhbHVlQ29uZmlnLmdldEJvb2xlYW4oImNhbGN1bGF0aW9uLnJvdW5kX2ZpbmFsX3ZhbHVlIiwgdHJ1ZSk7DQogICAgICAgIGlmIChyb3VuZEZpbmFsVmFsdWUpIHsNCiAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdmFsdWU7DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy91dGlscy9NZXNzYWdlVXRpbHMuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDIwNDE1IDE1MDI2MzIzNjAxIDAxNzQ3NQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHM7DQoNCmltcG9ydCBuZXQubWRfNS5idW5nZWUuYXBpLmNoYXQuQmFzZUNvbXBvbmVudDsNCmltcG9ydCBuZXQubWRfNS5idW5nZWUuYXBpLmNoYXQuVGV4dENvbXBvbmVudDsNCmltcG9ydCBvcmcuYnVra2l0LkNoYXRDb2xvcjsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5GaWxlQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmVudGl0eS5QbGF5ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudGllc1BsdXM7DQppbXBvcnQgbWUuY2xpcC5wbGFjZWhvbGRlcmFwaS5QbGFjZWhvbGRlckFQSTsNCg0KaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsNCmltcG9ydCBqYXZhLnV0aWwuTGlzdDsNCmltcG9ydCBqYXZhLnV0aWwucmVnZXguUGF0dGVybjsNCg0KLyoqDQogKiBVdGlsaXR5IGNsYXNzIGZvciBzZW5kaW5nIGZvcm1hdHRlZCBtZXNzYWdlcyB0byBwbGF5ZXJzDQogKiAvLyBub3RlOiBNYW5hZ2VzIG1lc3NhZ2UgcmV0cmlldmFsLCBmb3JtYXR0aW5nLCBhbmQgc2VuZGluZyB3aXRoIGNvbG9yIGNvZGVzIGFuZCBQbGFjZWhvbGRlckFQSSBzdXBwb3J0DQogKi8NCnB1YmxpYyBjbGFzcyBNZXNzYWdlVXRpbHMgew0KICAgIHByaXZhdGUgc3RhdGljIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnOw0KICAgIHByaXZhdGUgc3RhdGljIEJvdW50aWVzUGx1cyBwbHVnaW47DQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgUGF0dGVybiBBTlNJX1BBVFRFUk4gPSBQYXR0ZXJuLmNvbXBpbGUoIlx1MDAxQlxcW1swLTk7XSptIik7DQoNCiAgICAvKioNCiAgICAgKiBJbml0aWFsaXplcyB0aGUgbWVzc2FnZSB1dGlsaXR5IHdpdGggdGhlIHBsdWdpbiBpbnN0YW5jZQ0KICAgICAqIC8vIG5vdGU6IFNldHMgdXAgdGhlIHBsdWdpbiByZWZlcmVuY2UgYW5kIHJlbG9hZHMgbWVzc2FnZXMueW1sDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyB2b2lkIGluaXRpYWxpemUoQm91bnRpZXNQbHVzIHBsdWdpbkluc3RhbmNlKSB7DQogICAgICAgIHBsdWdpbiA9IHBsdWdpbkluc3RhbmNlOw0KICAgICAgICByZWxvYWRNZXNzYWdlcygpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbG9hZHMgYW5kIGNhY2hlcyBtZXNzYWdlcyBmcm9tIG1lc3NhZ2VzLnltbA0KICAgICAqIC8vIG5vdGU6IFVwZGF0ZXMgdGhlIGNhY2hlZCBtZXNzYWdlc0NvbmZpZyBmb3IgcGVyZm9ybWFuY2UNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgcmVsb2FkTWVzc2FnZXMoKSB7DQogICAgICAgIG1lc3NhZ2VzQ29uZmlnID0gcGx1Z2luLmdldE1lc3NhZ2VzQ29uZmlnKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2VuZHMgYSBmb3JtYXR0ZWQgbWVzc2FnZSB0byBhIHBsYXllciwgaGFuZGxpbmcgc2luZ2xlIHN0cmluZ3Mgb3IgbGlzdHMgd2l0aCBQbGFjZWhvbGRlckFQSQ0KICAgICAqIC8vIG5vdGU6IFJldHJpZXZlcyBtZXNzYWdlIGZyb20gbWVzc2FnZXMueW1sLCBmb3JtYXRzIHdpdGggY29sb3IgY29kZXMgYW5kIFBsYWNlaG9sZGVyQVBJIHBsYWNlaG9sZGVycywgYW5kIHNlbmRzIGFzIEJhc2VDb21wb25lbnRbXQ0KICAgICAqDQogICAgICogQHBhcmFtIHBsYXllciAgICAgVGhlIHBsYXllciB0byBzZW5kIHRoZSBtZXNzYWdlIHRvDQogICAgICogQHBhcmFtIG1lc3NhZ2VLZXkgVGhlIGtleSBpbiBtZXNzYWdlcy55bWwgdG8gcmV0cmlldmUgdGhlIG1lc3NhZ2UgZnJvbQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBzZW5kRm9ybWF0dGVkTWVzc2FnZShQbGF5ZXIgcGxheWVyLCBTdHJpbmcgbWVzc2FnZUtleSkgew0KICAgICAgICBpZiAocGxheWVyID09IG51bGwgfHwgbWVzc2FnZUtleSA9PSBudWxsKSB7DQogICAgICAgICAgICBpZiAocGx1Z2luLmdldExvZ2dlcigpICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiSW52YWxpZCBzZW5kRm9ybWF0dGVkTWVzc2FnZSBjYWxsOiBwbGF5ZXIgb3IgbWVzc2FnZUtleSBpcyBudWxsIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBPYmplY3QgbWVzc2FnZU9iaiA9IG1lc3NhZ2VzQ29uZmlnLmdldChtZXNzYWdlS2V5KTsNCg0KICAgICAgICAvLyBIYW5kbGUgbWlzc2luZyBvciBpbnZhbGlkIG1lc3NhZ2UgcGF0aA0KICAgICAgICBpZiAobWVzc2FnZU9iaiA9PSBudWxsKSB7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLlJFRCArICJNZXNzYWdlIG5vdCBmb3VuZDogIiArIG1lc3NhZ2VLZXkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgTGlzdDxTdHJpbmc+IG1lc3NhZ2VzOw0KICAgICAgICAvLyBDaGVjayBpZiBpdCdzIGEgc2luZ2xlIHN0cmluZyBvciBhIGxpc3QNCiAgICAgICAgaWYgKG1lc3NhZ2VPYmogaW5zdGFuY2VvZiBTdHJpbmcpIHsNCiAgICAgICAgICAgIFN0cmluZyBtZXNzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKG1lc3NhZ2VLZXkpOw0KICAgICAgICAgICAgaWYgKG1lc3NhZ2UgPT0gbnVsbCB8fCBtZXNzYWdlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuUkVEICsgIk1lc3NhZ2Ugbm90IGZvdW5kOiAiICsgbWVzc2FnZUtleSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgbWVzc2FnZXMgPSBDb2xsZWN0aW9ucy5zaW5nbGV0b25MaXN0KG1lc3NhZ2UpOw0KICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2VPYmogaW5zdGFuY2VvZiBMaXN0KSB7DQogICAgICAgICAgICBtZXNzYWdlcyA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZ0xpc3QobWVzc2FnZUtleSk7DQogICAgICAgICAgICBpZiAobWVzc2FnZXMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci5SRUQgKyAiTWVzc2FnZSBub3QgZm91bmQ6ICIgKyBtZXNzYWdlS2V5KTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLlJFRCArICJNZXNzYWdlIG5vdCBmb3VuZDogIiArIG1lc3NhZ2VLZXkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gRm9ybWF0IGFuZCBzZW5kIGVhY2ggbWVzc2FnZSBsaW5lDQogICAgICAgIGZvciAoU3RyaW5nIG1lc3NhZ2UgOiBtZXNzYWdlcykgew0KICAgICAgICAgICAgU3RyaW5nIGZvcm1hdHRlZCA9IGZvcm1hdE1lc3NhZ2UobWVzc2FnZSwgcGxheWVyKTsNCiAgICAgICAgICAgIEJhc2VDb21wb25lbnRbXSBjb21wb25lbnRzID0gVGV4dENvbXBvbmVudC5mcm9tTGVnYWN5VGV4dChmb3JtYXR0ZWQpOw0KICAgICAgICAgICAgcGxheWVyLnNwaWdvdCgpLnNlbmRNZXNzYWdlKGNvbXBvbmVudHMpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2VuZHMgYSBmb3JtYXR0ZWQgbWVzc2FnZSB0byBhIHBsYXllciB3aXRoIGNvbnRleHQsIGhhbmRsaW5nIHNpbmdsZSBzdHJpbmdzIG9yIGxpc3RzIHdpdGggUGxhY2Vob2xkZXJBUEkNCiAgICAgKiAvLyBub3RlOiBSZXRyaWV2ZXMgbWVzc2FnZSBmcm9tIG1lc3NhZ2VzLnltbCwgZm9ybWF0cyB3aXRoIGNvbG9yIGNvZGVzIGFuZCBQbGFjZWhvbGRlckFQSSBwbGFjZWhvbGRlcnMgdXNpbmcgY29udGV4dCwgYW5kIHNlbmRzIGFzIEJhc2VDb21wb25lbnRbXQ0KICAgICAqDQogICAgICogQHBhcmFtIHBsYXllciAgICAgVGhlIHBsYXllciB0byBzZW5kIHRoZSBtZXNzYWdlIHRvDQogICAgICogQHBhcmFtIG1lc3NhZ2VLZXkgVGhlIGtleSBpbiBtZXNzYWdlcy55bWwgdG8gcmV0cmlldmUgdGhlIG1lc3NhZ2UgZnJvbQ0KICAgICAqIEBwYXJhbSBjb250ZXh0ICAgIFRoZSBQbGFjZWhvbGRlckNvbnRleHQgZm9yIHBsYWNlaG9sZGVyIHJlc29sdXRpb24NCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgc2VuZEZvcm1hdHRlZE1lc3NhZ2UoUGxheWVyIHBsYXllciwgU3RyaW5nIG1lc3NhZ2VLZXksIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0KSB7DQogICAgICAgIGlmIChwbGF5ZXIgPT0gbnVsbCB8fCBtZXNzYWdlS2V5ID09IG51bGwpIHsNCiAgICAgICAgICAgIGlmIChwbHVnaW4uZ2V0TG9nZ2VyKCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJJbnZhbGlkIHNlbmRGb3JtYXR0ZWRNZXNzYWdlIGNhbGw6IHBsYXllciBvciBtZXNzYWdlS2V5IGlzIG51bGwiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIE9iamVjdCBtZXNzYWdlT2JqID0gbWVzc2FnZXNDb25maWcuZ2V0KG1lc3NhZ2VLZXkpOw0KDQogICAgICAgIC8vIEhhbmRsZSBtaXNzaW5nIG9yIGludmFsaWQgbWVzc2FnZSBwYXRoDQogICAgICAgIGlmIChtZXNzYWdlT2JqID09IG51bGwpIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuUkVEICsgIk1lc3NhZ2Ugbm90IGZvdW5kOiAiICsgbWVzc2FnZUtleSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBMaXN0PFN0cmluZz4gbWVzc2FnZXM7DQogICAgICAgIC8vIENoZWNrIGlmIGl0J3MgYSBzaW5nbGUgc3RyaW5nIG9yIGEgbGlzdA0KICAgICAgICBpZiAobWVzc2FnZU9iaiBpbnN0YW5jZW9mIFN0cmluZykgew0KICAgICAgICAgICAgU3RyaW5nIG1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcobWVzc2FnZUtleSk7DQogICAgICAgICAgICBpZiAobWVzc2FnZSA9PSBudWxsIHx8IG1lc3NhZ2UuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci5SRUQgKyAiTWVzc2FnZSBub3QgZm91bmQ6ICIgKyBtZXNzYWdlS2V5KTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBtZXNzYWdlcyA9IENvbGxlY3Rpb25zLnNpbmdsZXRvbkxpc3QobWVzc2FnZSk7DQogICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZU9iaiBpbnN0YW5jZW9mIExpc3QpIHsNCiAgICAgICAgICAgIG1lc3NhZ2VzID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nTGlzdChtZXNzYWdlS2V5KTsNCiAgICAgICAgICAgIGlmIChtZXNzYWdlcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLlJFRCArICJNZXNzYWdlIG5vdCBmb3VuZDogIiArIG1lc3NhZ2VLZXkpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuUkVEICsgIk1lc3NhZ2Ugbm90IGZvdW5kOiAiICsgbWVzc2FnZUtleSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBGb3JtYXQgYW5kIHNlbmQgZWFjaCBtZXNzYWdlIGxpbmUNCiAgICAgICAgZm9yIChTdHJpbmcgbWVzc2FnZSA6IG1lc3NhZ2VzKSB7DQogICAgICAgICAgICBTdHJpbmcgZm9ybWF0dGVkID0gZm9ybWF0TWVzc2FnZShtZXNzYWdlLCBwbGF5ZXIsIGNvbnRleHQpOw0KICAgICAgICAgICAgQmFzZUNvbXBvbmVudFtdIGNvbXBvbmVudHMgPSBUZXh0Q29tcG9uZW50LmZyb21MZWdhY3lUZXh0KGZvcm1hdHRlZCk7DQogICAgICAgICAgICBwbGF5ZXIuc3BpZ290KCkuc2VuZE1lc3NhZ2UoY29tcG9uZW50cyk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGVja3MgaWYgdGhlIGNvbnNvbGUgbGlrZWx5IHN1cHBvcnRzIEFOU0kgY29sb3JzDQogICAgICogLy8gbm90ZTogRGV0ZXJtaW5lcyBpZiBBTlNJIGVzY2FwZSBjb2RlcyBzaG91bGQgYmUgdXNlZCBiYXNlZCBvbiBlbnZpcm9ubWVudA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc0Fuc2lTdXBwb3J0ZWQoKSB7DQogICAgICAgIFN0cmluZyBvcyA9IFN5c3RlbS5nZXRQcm9wZXJ0eSgib3MubmFtZSIpLnRvTG93ZXJDYXNlKCk7DQogICAgICAgIC8vIEFzc3VtZSBBTlNJIHN1cHBvcnQgb24gTGludXgvbWFjT1Mgb3IgaWYgcnVubmluZyBpbiBhIG1vZGVybiBXaW5kb3dzIHRlcm1pbmFsDQogICAgICAgIHJldHVybiAhb3MuY29udGFpbnMoIndpbiIpIHx8IFN5c3RlbS5nZXRlbnYoIlRFUk0iKSAhPSBudWxsIHx8IFN5c3RlbS5nZXRlbnYoIldUX1NFU1NJT04iKSAhPSBudWxsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZvcm1hdHMgYSBzaW5nbGUgbWVzc2FnZSBzdHJpbmcgd2l0aCBjb2xvciBjb2RlcyBhbmQgUGxhY2Vob2xkZXJBUEkgcGxhY2Vob2xkZXJzDQogICAgICogLy8gbm90ZTogQXBwbGllcyBjb2xvciBjb2RlcyBhbmQgUGxhY2Vob2xkZXJBUEkgcGxhY2Vob2xkZXJzIGZvciB0aGUgZ2l2ZW4gcGxheWVyDQogICAgICoNCiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgcmF3IG1lc3NhZ2Ugc3RyaW5nDQogICAgICogQHBhcmFtIHBsYXllciAgVGhlIHBsYXllciBmb3IgUGxhY2Vob2xkZXJBUEkgY29udGV4dA0KICAgICAqIEByZXR1cm4gVGhlIGZ1bGx5IGZvcm1hdHRlZCBzdHJpbmcNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyBTdHJpbmcgZm9ybWF0TWVzc2FnZShTdHJpbmcgbWVzc2FnZSwgUGxheWVyIHBsYXllcikgew0KICAgICAgICBpZiAobWVzc2FnZSA9PSBudWxsKSByZXR1cm4gIiI7DQoNCiAgICAgICAgLy8gVHJhbnNsYXRlIGNvbG9yIGNvZGVzDQogICAgICAgIG1lc3NhZ2UgPSBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIG1lc3NhZ2UpOw0KDQogICAgICAgIC8vIEFwcGx5IFBsYWNlaG9sZGVyQVBJIGlmIGluc3RhbGxlZA0KICAgICAgICBpZiAoQnVra2l0LmdldFBsdWdpbk1hbmFnZXIoKS5pc1BsdWdpbkVuYWJsZWQoIlBsYWNlaG9sZGVyQVBJIikgJiYgcGxheWVyICE9IG51bGwpIHsNCiAgICAgICAgICAgIG1lc3NhZ2UgPSBQbGFjZWhvbGRlckFQSS5zZXRQbGFjZWhvbGRlcnMocGxheWVyLCBtZXNzYWdlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBtZXNzYWdlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZvcm1hdHMgYSBzaW5nbGUgbWVzc2FnZSBzdHJpbmcgd2l0aCBjb2xvciBjb2RlcyBhbmQgUGxhY2Vob2xkZXJBUEkgcGxhY2Vob2xkZXJzIHVzaW5nIGNvbnRleHQNCiAgICAgKiAvLyBub3RlOiBBcHBsaWVzIGNvbG9yIGNvZGVzIGFuZCBQbGFjZWhvbGRlckFQSSBwbGFjZWhvbGRlcnMgZm9yIHRoZSBnaXZlbiBwbGF5ZXIgYW5kIGNvbnRleHQNCiAgICAgKg0KICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSByYXcgbWVzc2FnZSBzdHJpbmcNCiAgICAgKiBAcGFyYW0gcGxheWVyICBUaGUgcGxheWVyIGZvciBQbGFjZWhvbGRlckFQSSBjb250ZXh0DQogICAgICogQHBhcmFtIGNvbnRleHQgVGhlIFBsYWNlaG9sZGVyQ29udGV4dCBmb3IgcGxhY2Vob2xkZXIgcmVzb2x1dGlvbg0KICAgICAqIEByZXR1cm4gVGhlIGZ1bGx5IGZvcm1hdHRlZCBzdHJpbmcNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyBTdHJpbmcgZm9ybWF0TWVzc2FnZShTdHJpbmcgbWVzc2FnZSwgUGxheWVyIHBsYXllciwgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQpIHsNCiAgICAgICAgaWYgKG1lc3NhZ2UgPT0gbnVsbCkgcmV0dXJuICIiOw0KDQogICAgICAgIC8vIFRyYW5zbGF0ZSBjb2xvciBjb2Rlcw0KICAgICAgICBtZXNzYWdlID0gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKTsNCg0KICAgICAgICAvLyBBcHBseSBQbGFjZWhvbGRlckFQSSB3aXRoIGNvbnRleHQgaWYgaW5zdGFsbGVkDQogICAgICAgIGlmIChCdWtraXQuZ2V0UGx1Z2luTWFuYWdlcigpLmlzUGx1Z2luRW5hYmxlZCgiUGxhY2Vob2xkZXJBUEkiKSAmJiBwbGF5ZXIgIT0gbnVsbCkgew0KICAgICAgICAgICAgaWYgKGNvbnRleHQgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIFBsYWNlaG9sZGVycy5hcHBseShtZXNzYWdlLCBjb250ZXh0KTsgLy8gU2V0cyBjb250ZXh0IGluIFBsYWNlaG9sZGVycy5jb250ZXh0TWFwDQogICAgICAgICAgICAgICAgbWVzc2FnZSA9IFBsYWNlaG9sZGVyQVBJLnNldFBsYWNlaG9sZGVycyhwbGF5ZXIsIG1lc3NhZ2UpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBtZXNzYWdlID0gUGxhY2Vob2xkZXJBUEkuc2V0UGxhY2Vob2xkZXJzKHBsYXllciwgbWVzc2FnZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gbWVzc2FnZTsNCiAgICB9DQp9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy91dGlscy9NeVNRTC5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDYyNzY3IDE1MDI2MDYyNzAxIDAxNjA1NgAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHM7DQoNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uQ29uZmlndXJhdGlvblNlY3Rpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuRmlsZUNvbmZpZ3VyYXRpb247DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudGllc1BsdXM7DQoNCmltcG9ydCBqYXZhLnNxbC4qOw0KaW1wb3J0IGphdmEudXRpbC5IYXNoTWFwOw0KaW1wb3J0IGphdmEudXRpbC5NYXA7DQppbXBvcnQgamF2YS51dGlsLlVVSUQ7DQppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuQ29tcGxldGFibGVGdXR1cmU7DQoNCi8qKg0KICogTWFuYWdlcyBNeVNRTCBjb25uZWN0aW9ucyBhbmQgb3BlcmF0aW9ucyBmb3IgYm91bnR5IGFuZCBzdGF0cyBzdG9yYWdlDQogKiAvLyBub3RlOiBIYW5kbGVzIGRhdGFiYXNlIGluaXRpYWxpemF0aW9uLCBxdWVyaWVzLCBhbmQgZGF0YSBtaWdyYXRpb24NCiAqLw0KcHVibGljIGNsYXNzIE15U1FMIHsNCiAgICBwcml2YXRlIGZpbmFsIEJvdW50aWVzUGx1cyBwbHVnaW47DQogICAgcHJpdmF0ZSBDb25uZWN0aW9uIGNvbm5lY3Rpb247DQoNCiAgICBwdWJsaWMgTXlTUUwoQm91bnRpZXNQbHVzIHBsdWdpbikgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGVja3MgaWYgTXlTUUwgaXMgZW5hYmxlZA0KICAgICAqIC8vIG5vdGU6IFZlcmlmaWVzIGlmIE15U1FMIGlzIGNvbmZpZ3VyZWQgYW5kIGNvbm5lY3RlZA0KICAgICAqLw0KICAgIHB1YmxpYyBib29sZWFuIGlzRW5hYmxlZCgpIHsNCiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24gIT0gbnVsbCAmJiBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigibXlzcWwuZW5hYmxlZCIsIGZhbHNlKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSBNeVNRTCBjb25uZWN0aW9uDQogICAgICogLy8gbm90ZTogUmV0dXJucyB0aGUgYWN0aXZlIGRhdGFiYXNlIGNvbm5lY3Rpb24NCiAgICAgKi8NCiAgICBwdWJsaWMgQ29ubmVjdGlvbiBnZXRDb25uZWN0aW9uKCkgew0KICAgICAgICByZXR1cm4gY29ubmVjdGlvbjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBJbml0aWFsaXplcyB0aGUgTXlTUUwgZGF0YWJhc2UgY29ubmVjdGlvbg0KICAgICAqIC8vIG5vdGU6IFNldHMgdXAgY29ubmVjdGlvbiBwb29sIGZvciBhc3luYyBkYXRhYmFzZSBvcGVyYXRpb25zDQogICAgICovDQogICAgcHVibGljIHZvaWQgaW5pdGlhbGl6ZSgpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldENvbmZpZygpOw0KICAgICAgICBpZiAoIWNvbmZpZy5nZXRCb29sZWFuKCJteXNxbC5lbmFibGVkIikpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJNeVNRTCBpcyBkaXNhYmxlZCBpbiBjb25maWcueW1sLCB1c2luZyBZQU1MIHN0b3JhZ2UuIik7DQogICAgICAgICAgICBjb25uZWN0aW9uID0gbnVsbDsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIFN0cmluZyBob3N0ID0gY29uZmlnLmdldFN0cmluZygibXlzcWwuaG9zdCIsICJsb2NhbGhvc3QiKTsNCiAgICAgICAgaW50IHBvcnQgPSBjb25maWcuZ2V0SW50KCJteXNxbC5wb3J0IiwgMzMwNik7DQogICAgICAgIFN0cmluZyBkYXRhYmFzZSA9IGNvbmZpZy5nZXRTdHJpbmcoIm15c3FsLmRhdGFiYXNlIiwgImJvdW50aWVzcGx1cyIpOw0KICAgICAgICBTdHJpbmcgdXNlcm5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKCJteXNxbC51c2VybmFtZSIsICJyb290Iik7DQogICAgICAgIFN0cmluZyBwYXNzd29yZCA9IGNvbmZpZy5nZXRTdHJpbmcoIm15c3FsLnBhc3N3b3JkIiwgIiIpOw0KDQogICAgICAgIFN0cmluZyB1cmwgPSAiamRiYzpteXNxbDovLyIgKyBob3N0ICsgIjoiICsgcG9ydCArICIvIiArIGRhdGFiYXNlICsgIj91c2VTU0w9ZmFsc2UmYXV0b1JlY29ubmVjdD10cnVlIjsNCg0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgY29ubmVjdGlvbiA9IERyaXZlck1hbmFnZXIuZ2V0Q29ubmVjdGlvbih1cmwsIHVzZXJuYW1lLCBwYXNzd29yZCk7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiU3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB0byBNeVNRTCBkYXRhYmFzZSEiKTsNCiAgICAgICAgICAgIGNyZWF0ZVRhYmxlcygpOw0KICAgICAgICB9IGNhdGNoIChTUUxFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLnNldmVyZSgiRmFpbGVkIHRvIGNvbm5lY3QgdG8gTXlTUUwgZGF0YWJhc2U6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICBjb25uZWN0aW9uID0gbnVsbDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgbmVjZXNzYXJ5IGRhdGFiYXNlIHRhYmxlcw0KICAgICAqIC8vIG5vdGU6IEluaXRpYWxpemVzIGJvdW50aWVzIGFuZCBwbGF5ZXJfc3RhdHMgdGFibGVzIGlmIHRoZXkgZG9uJ3QgZXhpc3QNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgY3JlYXRlVGFibGVzKCkgew0KICAgICAgICBpZiAoY29ubmVjdGlvbiA9PSBudWxsKSByZXR1cm47DQoNCiAgICAgICAgU3RyaW5nIGNyZWF0ZUJvdW50aWVzVGFibGUgPSAiQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgYm91bnRpZXMgKCIgKw0KICAgICAgICAgICAgICAgICJ0YXJnZXRfdXVpZCBWQVJDSEFSKDM2KSBOT1QgTlVMTCwgIiArDQogICAgICAgICAgICAgICAgInNldHRlcl91dWlkIFZBUkNIQVIoMzYpIE5PVCBOVUxMLCAiICsNCiAgICAgICAgICAgICAgICAiYW1vdW50IElOVCBOT1QgTlVMTCwgIiArDQogICAgICAgICAgICAgICAgInNldF90aW1lIEJJR0lOVCBOT1QgTlVMTCwgIiArDQogICAgICAgICAgICAgICAgImV4cGlyZV90aW1lIEJJR0lOVCwgIiArDQogICAgICAgICAgICAgICAgIlBSSU1BUlkgS0VZICh0YXJnZXRfdXVpZCwgc2V0dGVyX3V1aWQpKSI7DQoNCiAgICAgICAgU3RyaW5nIGNyZWF0ZVN0YXRzVGFibGUgPSAiQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgcGxheWVyX3N0YXRzICgiICsNCiAgICAgICAgICAgICAgICAicGxheWVyX3V1aWQgVkFSQ0hBUigzNikgUFJJTUFSWSBLRVksICIgKw0KICAgICAgICAgICAgICAgICJjbGFpbWVkIElOVCBERUZBVUxUIDAsICIgKw0KICAgICAgICAgICAgICAgICJzdXJ2aXZlZCBJTlQgREVGQVVMVCAwLCAiICsNCiAgICAgICAgICAgICAgICAibW9uZXlfZWFybmVkIERPVUJMRSBERUZBVUxUIDAuMCwgIiArDQogICAgICAgICAgICAgICAgInhwX2Vhcm5lZCBJTlQgREVGQVVMVCAwLCAiICsNCiAgICAgICAgICAgICAgICAidG90YWxfdmFsdWVfZWFybmVkIERPVUJMRSBERUZBVUxUIDAuMCkiOw0KDQogICAgICAgIHRyeSAoU3RhdGVtZW50IHN0bXQgPSBjb25uZWN0aW9uLmNyZWF0ZVN0YXRlbWVudCgpKSB7DQogICAgICAgICAgICBzdG10LmV4ZWN1dGVVcGRhdGUoY3JlYXRlQm91bnRpZXNUYWJsZSk7DQogICAgICAgICAgICBzdG10LmV4ZWN1dGVVcGRhdGUoY3JlYXRlU3RhdHNUYWJsZSk7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiRGF0YWJhc2UgdGFibGVzIGNyZWF0ZWQgb3IgdmVyaWZpZWQgc3VjY2Vzc2Z1bGx5LiIpOw0KICAgICAgICB9IGNhdGNoIChTUUxFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLnNldmVyZSgiRmFpbGVkIHRvIGNyZWF0ZSBkYXRhYmFzZSB0YWJsZXM6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBNaWdyYXRlcyBzdGF0cyBkYXRhIGZyb20gU3RhdFN0b3JhZ2UueW1sIHRvIE15U1FMDQogICAgICogLy8gbm90ZTogVHJhbnNmZXJzIHBsYXllciBzdGF0cyB0byBwbGF5ZXJfc3RhdHMgdGFibGUgYW5kIHNldHMgc3RhdHMtZGF0YS1taWdyYXRlZCBmbGFnDQogICAgICovDQogICAgcHVibGljIHZvaWQgbWlncmF0ZVN0YXRzRGF0YSgpIHsNCiAgICAgICAgaWYgKGNvbm5lY3Rpb24gPT0gbnVsbCB8fCBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigic3RhdHMtZGF0YS1taWdyYXRlZCIsIGZhbHNlKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gc3RhdHNDb25maWcgPSBwbHVnaW4uZ2V0U3RhdHNDb25maWcoKTsNCiAgICAgICAgQ29uZmlndXJhdGlvblNlY3Rpb24gcGxheWVyc1NlY3Rpb24gPSBzdGF0c0NvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigicGxheWVycyIpOw0KICAgICAgICBpZiAocGxheWVyc1NlY3Rpb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgcGx1Z2luLmdldENvbmZpZygpLnNldCgic3RhdHMtZGF0YS1taWdyYXRlZCIsIHRydWUpOw0KICAgICAgICAgICAgcGx1Z2luLnNhdmVDb25maWcoKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIFN0cmluZyBpbnNlcnRRdWVyeSA9ICJJTlNFUlQgSU5UTyBwbGF5ZXJfc3RhdHMgKHBsYXllcl91dWlkLCBjbGFpbWVkLCBzdXJ2aXZlZCwgbW9uZXlfZWFybmVkLCB4cF9lYXJuZWQsIHRvdGFsX3ZhbHVlX2Vhcm5lZCkgIiArDQogICAgICAgICAgICAgICAgIlZBTFVFUyAoPywgPywgPywgPywgPywgPykgT04gRFVQTElDQVRFIEtFWSBVUERBVEUgIiArDQogICAgICAgICAgICAgICAgImNsYWltZWQgPSBWQUxVRVMoY2xhaW1lZCksIHN1cnZpdmVkID0gVkFMVUVTKHN1cnZpdmVkKSwgbW9uZXlfZWFybmVkID0gVkFMVUVTKG1vbmV5X2Vhcm5lZCksICIgKw0KICAgICAgICAgICAgICAgICJ4cF9lYXJuZWQgPSBWQUxVRVMoeHBfZWFybmVkKSwgdG90YWxfdmFsdWVfZWFybmVkID0gVkFMVUVTKHRvdGFsX3ZhbHVlX2Vhcm5lZCkiOw0KDQogICAgICAgIHRyeSAoUHJlcGFyZWRTdGF0ZW1lbnQgcHN0bXQgPSBjb25uZWN0aW9uLnByZXBhcmVTdGF0ZW1lbnQoaW5zZXJ0UXVlcnkpKSB7DQogICAgICAgICAgICBmb3IgKFN0cmluZyB1dWlkU3RyaW5nIDogcGxheWVyc1NlY3Rpb24uZ2V0S2V5cyhmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBVVUlEIHV1aWQgPSBVVUlELmZyb21TdHJpbmcodXVpZFN0cmluZyk7DQogICAgICAgICAgICAgICAgICAgIGludCBjbGFpbWVkID0gc3RhdHNDb25maWcuZ2V0SW50KCJwbGF5ZXJzLiIgKyB1dWlkU3RyaW5nICsgIi5jbGFpbWVkIiwgMCk7DQogICAgICAgICAgICAgICAgICAgIGludCBzdXJ2aXZlZCA9IHN0YXRzQ29uZmlnLmdldEludCgicGxheWVycy4iICsgdXVpZFN0cmluZyArICIuc3Vydml2ZWQiLCAwKTsNCiAgICAgICAgICAgICAgICAgICAgZG91YmxlIG1vbmV5RWFybmVkID0gc3RhdHNDb25maWcuZ2V0RG91YmxlKCJwbGF5ZXJzLiIgKyB1dWlkU3RyaW5nICsgIi5tb25leV9lYXJuZWQiLCAwLjApOw0KICAgICAgICAgICAgICAgICAgICBpbnQgeHBFYXJuZWQgPSBzdGF0c0NvbmZpZy5nZXRJbnQoInBsYXllcnMuIiArIHV1aWRTdHJpbmcgKyAiLnhwX2Vhcm5lZCIsIDApOw0KICAgICAgICAgICAgICAgICAgICBkb3VibGUgdG90YWxWYWx1ZUVhcm5lZCA9IHN0YXRzQ29uZmlnLmdldERvdWJsZSgicGxheWVycy4iICsgdXVpZFN0cmluZyArICIudG90YWxfdmFsdWVfZWFybmVkIiwgMC4wKTsNCg0KICAgICAgICAgICAgICAgICAgICBwc3RtdC5zZXRTdHJpbmcoMSwgdXVpZC50b1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICAgICAgcHN0bXQuc2V0SW50KDIsIGNsYWltZWQpOw0KICAgICAgICAgICAgICAgICAgICBwc3RtdC5zZXRJbnQoMywgc3Vydml2ZWQpOw0KICAgICAgICAgICAgICAgICAgICBwc3RtdC5zZXREb3VibGUoNCwgbW9uZXlFYXJuZWQpOw0KICAgICAgICAgICAgICAgICAgICBwc3RtdC5zZXRJbnQoNSwgeHBFYXJuZWQpOw0KICAgICAgICAgICAgICAgICAgICBwc3RtdC5zZXREb3VibGUoNiwgdG90YWxWYWx1ZUVhcm5lZCk7DQogICAgICAgICAgICAgICAgICAgIHBzdG10LmFkZEJhdGNoKCk7DQogICAgICAgICAgICAgICAgfSBjYXRjaCAoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkludmFsaWQgVVVJRCBpbiBTdGF0U3RvcmFnZS55bWw6ICIgKyB1dWlkU3RyaW5nKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBwc3RtdC5leGVjdXRlQmF0Y2goKTsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRDb25maWcoKS5zZXQoInN0YXRzLWRhdGEtbWlncmF0ZWQiLCB0cnVlKTsNCiAgICAgICAgICAgIHBsdWdpbi5zYXZlQ29uZmlnKCk7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiU3VjY2Vzc2Z1bGx5IG1pZ3JhdGVkIHN0YXRzIGRhdGEgZnJvbSBTdGF0U3RvcmFnZS55bWwgdG8gTXlTUUwuIik7DQogICAgICAgIH0gY2F0Y2ggKFNRTEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuc2V2ZXJlKCJGYWlsZWQgdG8gbWlncmF0ZSBzdGF0cyBkYXRhOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogTWlncmF0ZXMgYm91bnRpZXMgZnJvbSBZQU1MIHRvIE15U1FMDQogICAgICogLy8gbm90ZTogVHJhbnNmZXJzIEJvdW50eVN0b3JhZ2UueW1sIGRhdGEgdG8gTXlTUUwNCiAgICAgKi8NCiAgICBwdWJsaWMgQ29tcGxldGFibGVGdXR1cmU8Vm9pZD4gbWlncmF0ZURhdGEoKSB7DQogICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5ydW5Bc3luYygoKSAtPiB7DQogICAgICAgICAgICBpZiAoIWlzRW5hYmxlZCgpIHx8IHBsdWdpbi5nZXRDb25maWcoKS5nZXRCb29sZWFuKCJkYXRhLW1pZ3JhdGVkIiwgZmFsc2UpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldEJvdW50aWVzQ29uZmlnKCk7DQogICAgICAgICAgICBDb25maWd1cmF0aW9uU2VjdGlvbiBib3VudGllc1NlY3Rpb24gPSBjb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oImJvdW50aWVzIik7DQogICAgICAgICAgICBpZiAoYm91bnRpZXNTZWN0aW9uID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0Q29uZmlnKCkuc2V0KCJkYXRhLW1pZ3JhdGVkIiwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgcGx1Z2luLnNhdmVDb25maWcoKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0cnkgKFByZXBhcmVkU3RhdGVtZW50IHBzdG10ID0gY29ubmVjdGlvbi5wcmVwYXJlU3RhdGVtZW50KA0KICAgICAgICAgICAgICAgICAgICAiSU5TRVJUIElOVE8gYm91bnRpZXMgKHRhcmdldF91dWlkLCBzZXR0ZXJfdXVpZCwgYW1vdW50LCBzZXRfdGltZSwgZXhwaXJlX3RpbWUpICIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJWQUxVRVMgKD8sID8sID8sID8sID8pIikpIHsNCiAgICAgICAgICAgICAgICBmb3IgKFN0cmluZyB0YXJnZXRVVUlEU3RyIDogYm91bnRpZXNTZWN0aW9uLmdldEtleXMoZmFsc2UpKSB7DQogICAgICAgICAgICAgICAgICAgIFVVSUQgdGFyZ2V0VVVJRDsNCiAgICAgICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFVVSUQgPSBVVUlELmZyb21TdHJpbmcodGFyZ2V0VVVJRFN0cik7DQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiSW52YWxpZCBVVUlEIGluIEJvdW50eVN0b3JhZ2UueW1sOiAiICsgdGFyZ2V0VVVJRFN0cik7DQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBDb25maWd1cmF0aW9uU2VjdGlvbiB0YXJnZXRTZWN0aW9uID0gYm91bnRpZXNTZWN0aW9uLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKHRhcmdldFVVSURTdHIpOw0KICAgICAgICAgICAgICAgICAgICBmb3IgKFN0cmluZyBzZXR0ZXJVVUlEU3RyIDogdGFyZ2V0U2VjdGlvbi5nZXRLZXlzKGZhbHNlKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgVVVJRCBzZXR0ZXJVVUlEOw0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0ZXJVVUlEID0gVVVJRC5mcm9tU3RyaW5nKHNldHRlclVVSURTdHIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiSW52YWxpZCBzZXR0ZXIgVVVJRCBpbiBCb3VudHlTdG9yYWdlLnltbDogIiArIHNldHRlclVVSURTdHIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgaW50IGFtb3VudCA9IGNvbmZpZy5nZXRJbnQoImJvdW50aWVzLiIgKyB0YXJnZXRVVUlEU3RyICsgIi4iICsgc2V0dGVyVVVJRFN0ciArICIuYW1vdW50IiwgMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBsb25nIHNldFRpbWUgPSBjb25maWcuZ2V0TG9uZygiYm91bnRpZXMuIiArIHRhcmdldFVVSURTdHIgKyAiLiIgKyBzZXR0ZXJVVUlEU3RyICsgIi5zZXRfdGltZSIsIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmcgZXhwaXJlVGltZSA9IGNvbmZpZy5nZXRMb25nKCJib3VudGllcy4iICsgdGFyZ2V0VVVJRFN0ciArICIuIiArIHNldHRlclVVSURTdHIgKyAiLmV4cGlyZV90aW1lIiwgLTEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcHN0bXQuc2V0U3RyaW5nKDEsIHRhcmdldFVVSUQudG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBwc3RtdC5zZXRTdHJpbmcoMiwgc2V0dGVyVVVJRC50b1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBzdG10LnNldEludCgzLCBhbW91bnQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcHN0bXQuc2V0TG9uZyg0LCBzZXRUaW1lKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBzdG10LnNldExvbmcoNSwgZXhwaXJlVGltZSk7DQogICAgICAgICAgICAgICAgICAgICAgICBwc3RtdC5hZGRCYXRjaCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHBzdG10LmV4ZWN1dGVCYXRjaCgpOw0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRDb25maWcoKS5zZXQoImRhdGEtbWlncmF0ZWQiLCB0cnVlKTsNCiAgICAgICAgICAgICAgICBwbHVnaW4uc2F2ZUNvbmZpZygpOw0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJNaWdyYXRlZCBib3VudGllcyBmcm9tIEJvdW50eVN0b3JhZ2UueW1sIHRvIE15U1FMLiIpOw0KICAgICAgICAgICAgfSBjYXRjaCAoU1FMRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIG1pZ3JhdGUgYm91bnRpZXM6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYSBwbGF5ZXIncyBjbGFpbWVkIGJvdW50aWVzIGNvdW50DQogICAgICogLy8gbm90ZTogUmV0cmlldmVzIGNsYWltZWQgc3RhdCBmcm9tIHBsYXllcl9zdGF0cyB0YWJsZSBhc3luY2hyb25vdXNseQ0KICAgICAqLw0KICAgIHB1YmxpYyBDb21wbGV0YWJsZUZ1dHVyZTxJbnRlZ2VyPiBnZXRDbGFpbWVkKFVVSUQgcGxheWVyVVVJRCkgew0KICAgICAgICBpZiAoIWlzRW5hYmxlZCgpKSB7DQogICAgICAgICAgICByZXR1cm4gQ29tcGxldGFibGVGdXR1cmUuc3VwcGx5QXN5bmMoKCkgLT4gcGx1Z2luLmdldFN0YXRzQ29uZmlnKCkuZ2V0SW50KCJwbGF5ZXJzLiIgKyBwbGF5ZXJVVUlEICsgIi5jbGFpbWVkIiwgMCkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIENvbXBsZXRhYmxlRnV0dXJlLnN1cHBseUFzeW5jKCgpIC0+IHsNCiAgICAgICAgICAgIFN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgY2xhaW1lZCBGUk9NIHBsYXllcl9zdGF0cyBXSEVSRSBwbGF5ZXJfdXVpZCA9ID8iOw0KICAgICAgICAgICAgdHJ5IChQcmVwYXJlZFN0YXRlbWVudCBwc3RtdCA9IGNvbm5lY3Rpb24ucHJlcGFyZVN0YXRlbWVudChxdWVyeSkpIHsNCiAgICAgICAgICAgICAgICBwc3RtdC5zZXRTdHJpbmcoMSwgcGxheWVyVVVJRC50b1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICBSZXN1bHRTZXQgcnMgPSBwc3RtdC5leGVjdXRlUXVlcnkoKTsNCiAgICAgICAgICAgICAgICBpZiAocnMubmV4dCgpKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBycy5nZXRJbnQoImNsYWltZWQiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGNhdGNoIChTUUxFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gZmV0Y2ggY2xhaW1lZCBmb3IgIiArIHBsYXllclVVSUQgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgIH0sIHBsdWdpbi5nZXRFeGVjdXRvclNlcnZpY2UoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2V0cyBhIHBsYXllcidzIGNsYWltZWQgYm91bnRpZXMgY291bnQNCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIGNsYWltZWQgc3RhdCBpbiBwbGF5ZXJfc3RhdHMgdGFibGUgYXN5bmNocm9ub3VzbHkNCiAgICAgKi8NCiAgICBwdWJsaWMgQ29tcGxldGFibGVGdXR1cmU8Vm9pZD4gc2V0Q2xhaW1lZChVVUlEIHBsYXllclVVSUQsIGludCBjbGFpbWVkKSB7DQogICAgICAgIGlmICghaXNFbmFibGVkKCkpIHsNCiAgICAgICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5ydW5Bc3luYygoKSAtPiB7DQogICAgICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gc3RhdHNDb25maWcgPSBwbHVnaW4uZ2V0U3RhdHNDb25maWcoKTsNCiAgICAgICAgICAgICAgICBzdGF0c0NvbmZpZy5zZXQoInBsYXllcnMuIiArIHBsYXllclVVSUQgKyAiLmNsYWltZWQiLCBjbGFpbWVkKTsNCiAgICAgICAgICAgICAgICBwbHVnaW4uc2F2ZVN0YXRzQ29uZmlnKCk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5ydW5Bc3luYygoKSAtPiB7DQogICAgICAgICAgICBTdHJpbmcgcXVlcnkgPSAiSU5TRVJUIElOVE8gcGxheWVyX3N0YXRzIChwbGF5ZXJfdXVpZCwgY2xhaW1lZCkgVkFMVUVTICg/LCA/KSAiICsNCiAgICAgICAgICAgICAgICAgICAgIk9OIERVUExJQ0FURSBLRVkgVVBEQVRFIGNsYWltZWQgPSA/IjsNCiAgICAgICAgICAgIHRyeSAoUHJlcGFyZWRTdGF0ZW1lbnQgcHN0bXQgPSBjb25uZWN0aW9uLnByZXBhcmVTdGF0ZW1lbnQocXVlcnkpKSB7DQogICAgICAgICAgICAgICAgcHN0bXQuc2V0U3RyaW5nKDEsIHBsYXllclVVSUQudG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgcHN0bXQuc2V0SW50KDIsIGNsYWltZWQpOw0KICAgICAgICAgICAgICAgIHBzdG10LnNldEludCgzLCBjbGFpbWVkKTsNCiAgICAgICAgICAgICAgICBwc3RtdC5leGVjdXRlVXBkYXRlKCk7DQogICAgICAgICAgICB9IGNhdGNoIChTUUxFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gc2V0IGNsYWltZWQgZm9yICIgKyBwbGF5ZXJVVUlEICsgIjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgcGx1Z2luLmdldEV4ZWN1dG9yU2VydmljZSgpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIGEgcGxheWVyJ3Mgc3Vydml2ZWQgYm91bnRpZXMgY291bnQNCiAgICAgKiAvLyBub3RlOiBSZXRyaWV2ZXMgc3Vydml2ZWQgc3RhdCBmcm9tIHBsYXllcl9zdGF0cyB0YWJsZSBhc3luY2hyb25vdXNseQ0KICAgICAqLw0KICAgIHB1YmxpYyBDb21wbGV0YWJsZUZ1dHVyZTxJbnRlZ2VyPiBnZXRTdXJ2aXZlZChVVUlEIHBsYXllclVVSUQpIHsNCiAgICAgICAgaWYgKCFpc0VuYWJsZWQoKSkgew0KICAgICAgICAgICAgcmV0dXJuIENvbXBsZXRhYmxlRnV0dXJlLnN1cHBseUFzeW5jKCgpIC0+IHBsdWdpbi5nZXRTdGF0c0NvbmZpZygpLmdldEludCgicGxheWVycy4iICsgcGxheWVyVVVJRCArICIuc3Vydml2ZWQiLCAwKSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gQ29tcGxldGFibGVGdXR1cmUuc3VwcGx5QXN5bmMoKCkgLT4gew0KICAgICAgICAgICAgU3RyaW5nIHF1ZXJ5ID0gIlNFTEVDVCBzdXJ2aXZlZCBGUk9NIHBsYXllcl9zdGF0cyBXSEVSRSBwbGF5ZXJfdXVpZCA9ID8iOw0KICAgICAgICAgICAgdHJ5IChQcmVwYXJlZFN0YXRlbWVudCBwc3RtdCA9IGNvbm5lY3Rpb24ucHJlcGFyZVN0YXRlbWVudChxdWVyeSkpIHsNCiAgICAgICAgICAgICAgICBwc3RtdC5zZXRTdHJpbmcoMSwgcGxheWVyVVVJRC50b1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICBSZXN1bHRTZXQgcnMgPSBwc3RtdC5leGVjdXRlUXVlcnkoKTsNCiAgICAgICAgICAgICAgICBpZiAocnMubmV4dCgpKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBycy5nZXRJbnQoInN1cnZpdmVkIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBjYXRjaCAoU1FMRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIGZldGNoIHN1cnZpdmVkIGZvciAiICsgcGxheWVyVVVJRCArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfSwgcGx1Z2luLmdldEV4ZWN1dG9yU2VydmljZSgpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIGEgcGxheWVyJ3Mgc3Vydml2ZWQgYm91bnRpZXMgY291bnQNCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIHN1cnZpdmVkIHN0YXQgaW4gcGxheWVyX3N0YXRzIHRhYmxlIGFzeW5jaHJvbm91c2x5DQogICAgICovDQogICAgcHVibGljIENvbXBsZXRhYmxlRnV0dXJlPFZvaWQ+IHNldFN1cnZpdmVkKFVVSUQgcGxheWVyVVVJRCwgaW50IHN1cnZpdmVkKSB7DQogICAgICAgIGlmICghaXNFbmFibGVkKCkpIHsNCiAgICAgICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5ydW5Bc3luYygoKSAtPiB7DQogICAgICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gc3RhdHNDb25maWcgPSBwbHVnaW4uZ2V0U3RhdHNDb25maWcoKTsNCiAgICAgICAgICAgICAgICBzdGF0c0NvbmZpZy5zZXQoInBsYXllcnMuIiArIHBsYXllclVVSUQgKyAiLnN1cnZpdmVkIiwgc3Vydml2ZWQpOw0KICAgICAgICAgICAgICAgIHBsdWdpbi5zYXZlU3RhdHNDb25maWcoKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIENvbXBsZXRhYmxlRnV0dXJlLnJ1bkFzeW5jKCgpIC0+IHsNCiAgICAgICAgICAgIFN0cmluZyBxdWVyeSA9ICJJTlNFUlQgSU5UTyBwbGF5ZXJfc3RhdHMgKHBsYXllcl91dWlkLCBzdXJ2aXZlZCkgVkFMVUVTICg/LCA/KSAiICsNCiAgICAgICAgICAgICAgICAgICAgIk9OIERVUExJQ0FURSBLRVkgVVBEQVRFIHN1cnZpdmVkID0gPyI7DQogICAgICAgICAgICB0cnkgKFByZXBhcmVkU3RhdGVtZW50IHBzdG10ID0gY29ubmVjdGlvbi5wcmVwYXJlU3RhdGVtZW50KHF1ZXJ5KSkgew0KICAgICAgICAgICAgICAgIHBzdG10LnNldFN0cmluZygxLCBwbGF5ZXJVVUlELnRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgIHBzdG10LnNldEludCgyLCBzdXJ2aXZlZCk7DQogICAgICAgICAgICAgICAgcHN0bXQuc2V0SW50KDMsIHN1cnZpdmVkKTsNCiAgICAgICAgICAgICAgICBwc3RtdC5leGVjdXRlVXBkYXRlKCk7DQogICAgICAgICAgICB9IGNhdGNoIChTUUxFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gc2V0IHN1cnZpdmVkIGZvciAiICsgcGxheWVyVVVJRCArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0sIHBsdWdpbi5nZXRFeGVjdXRvclNlcnZpY2UoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyBhIHBsYXllcidzIGVhcm5lZCBtb25leSBmcm9tIGJvdW50aWVzDQogICAgICogLy8gbm90ZTogUmV0cmlldmVzIG1vbmV5X2Vhcm5lZCBzdGF0IGZyb20gcGxheWVyX3N0YXRzIHRhYmxlIGFzeW5jaHJvbm91c2x5DQogICAgICovDQogICAgcHVibGljIENvbXBsZXRhYmxlRnV0dXJlPERvdWJsZT4gZ2V0TW9uZXlFYXJuZWQoVVVJRCBwbGF5ZXJVVUlEKSB7DQogICAgICAgIGlmICghaXNFbmFibGVkKCkpIHsNCiAgICAgICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5zdXBwbHlBc3luYygoKSAtPiBwbHVnaW4uZ2V0U3RhdHNDb25maWcoKS5nZXREb3VibGUoInBsYXllcnMuIiArIHBsYXllclVVSUQgKyAiLm1vbmV5X2Vhcm5lZCIsIDAuMCkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIENvbXBsZXRhYmxlRnV0dXJlLnN1cHBseUFzeW5jKCgpIC0+IHsNCiAgICAgICAgICAgIFN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgbW9uZXlfZWFybmVkIEZST00gcGxheWVyX3N0YXRzIFdIRVJFIHBsYXllcl91dWlkID0gPyI7DQogICAgICAgICAgICB0cnkgKFByZXBhcmVkU3RhdGVtZW50IHBzdG10ID0gY29ubmVjdGlvbi5wcmVwYXJlU3RhdGVtZW50KHF1ZXJ5KSkgew0KICAgICAgICAgICAgICAgIHBzdG10LnNldFN0cmluZygxLCBwbGF5ZXJVVUlELnRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgIFJlc3VsdFNldCBycyA9IHBzdG10LmV4ZWN1dGVRdWVyeSgpOw0KICAgICAgICAgICAgICAgIGlmIChycy5uZXh0KCkpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJzLmdldERvdWJsZSgibW9uZXlfZWFybmVkIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBjYXRjaCAoU1FMRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIGZldGNoIG1vbmV5X2Vhcm5lZCBmb3IgIiArIHBsYXllclVVSUQgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIDAuMDsNCiAgICAgICAgfSwgcGx1Z2luLmdldEV4ZWN1dG9yU2VydmljZSgpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIGEgcGxheWVyJ3MgZWFybmVkIG1vbmV5IGZyb20gYm91bnRpZXMNCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIG1vbmV5X2Vhcm5lZCBzdGF0IGluIHBsYXllcl9zdGF0cyB0YWJsZSBhc3luY2hyb25vdXNseQ0KICAgICAqLw0KICAgIHB1YmxpYyBDb21wbGV0YWJsZUZ1dHVyZTxWb2lkPiBzZXRNb25leUVhcm5lZChVVUlEIHBsYXllclVVSUQsIGRvdWJsZSBtb25leUVhcm5lZCkgew0KICAgICAgICBpZiAoIWlzRW5hYmxlZCgpKSB7DQogICAgICAgICAgICByZXR1cm4gQ29tcGxldGFibGVGdXR1cmUucnVuQXN5bmMoKCkgLT4gew0KICAgICAgICAgICAgICAgIEZpbGVDb25maWd1cmF0aW9uIHN0YXRzQ29uZmlnID0gcGx1Z2luLmdldFN0YXRzQ29uZmlnKCk7DQogICAgICAgICAgICAgICAgc3RhdHNDb25maWcuc2V0KCJwbGF5ZXJzLiIgKyBwbGF5ZXJVVUlEICsgIi5tb25leV9lYXJuZWQiLCBtb25leUVhcm5lZCk7DQogICAgICAgICAgICAgICAgcGx1Z2luLnNhdmVTdGF0c0NvbmZpZygpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gQ29tcGxldGFibGVGdXR1cmUucnVuQXN5bmMoKCkgLT4gew0KICAgICAgICAgICAgU3RyaW5nIHF1ZXJ5ID0gIklOU0VSVCBJTlRPIHBsYXllcl9zdGF0cyAocGxheWVyX3V1aWQsIG1vbmV5X2Vhcm5lZCkgVkFMVUVTICg/LCA/KSAiICsNCiAgICAgICAgICAgICAgICAgICAgIk9OIERVUExJQ0FURSBLRVkgVVBEQVRFIG1vbmV5X2Vhcm5lZCA9ID8iOw0KICAgICAgICAgICAgdHJ5IChQcmVwYXJlZFN0YXRlbWVudCBwc3RtdCA9IGNvbm5lY3Rpb24ucHJlcGFyZVN0YXRlbWVudChxdWVyeSkpIHsNCiAgICAgICAgICAgICAgICBwc3RtdC5zZXRTdHJpbmcoMSwgcGxheWVyVVVJRC50b1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICBwc3RtdC5zZXREb3VibGUoMiwgbW9uZXlFYXJuZWQpOw0KICAgICAgICAgICAgICAgIHBzdG10LnNldERvdWJsZSgzLCBtb25leUVhcm5lZCk7DQogICAgICAgICAgICAgICAgcHN0bXQuZXhlY3V0ZVVwZGF0ZSgpOw0KICAgICAgICAgICAgfSBjYXRjaCAoU1FMRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIHNldCBtb25leV9lYXJuZWQgZm9yICIgKyBwbGF5ZXJVVUlEICsgIjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgcGx1Z2luLmdldEV4ZWN1dG9yU2VydmljZSgpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIGEgcGxheWVyJ3MgZWFybmVkIFhQIGZyb20gYm91bnRpZXMNCiAgICAgKiAvLyBub3RlOiBSZXRyaWV2ZXMgeHBfZWFybmVkIHN0YXQgZnJvbSBwbGF5ZXJfc3RhdHMgdGFibGUgYXN5bmNocm9ub3VzbHkNCiAgICAgKi8NCiAgICBwdWJsaWMgQ29tcGxldGFibGVGdXR1cmU8SW50ZWdlcj4gZ2V0WFBFYXJuZWQoVVVJRCBwbGF5ZXJVVUlEKSB7DQogICAgICAgIGlmICghaXNFbmFibGVkKCkpIHsNCiAgICAgICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5zdXBwbHlBc3luYygoKSAtPiBwbHVnaW4uZ2V0U3RhdHNDb25maWcoKS5nZXRJbnQoInBsYXllcnMuIiArIHBsYXllclVVSUQgKyAiLnhwX2Vhcm5lZCIsIDApKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5zdXBwbHlBc3luYygoKSAtPiB7DQogICAgICAgICAgICBTdHJpbmcgcXVlcnkgPSAiU0VMRUNUIHhwX2Vhcm5lZCBGUk9NIHBsYXllcl9zdGF0cyBXSEVSRSBwbGF5ZXJfdXVpZCA9ID8iOw0KICAgICAgICAgICAgdHJ5IChQcmVwYXJlZFN0YXRlbWVudCBwc3RtdCA9IGNvbm5lY3Rpb24ucHJlcGFyZVN0YXRlbWVudChxdWVyeSkpIHsNCiAgICAgICAgICAgICAgICBwc3RtdC5zZXRTdHJpbmcoMSwgcGxheWVyVVVJRC50b1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICBSZXN1bHRTZXQgcnMgPSBwc3RtdC5leGVjdXRlUXVlcnkoKTsNCiAgICAgICAgICAgICAgICBpZiAocnMubmV4dCgpKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBycy5nZXRJbnQoInhwX2Vhcm5lZCIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gY2F0Y2ggKFNRTEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkZhaWxlZCB0byBmZXRjaCB4cF9lYXJuZWQgZm9yICIgKyBwbGF5ZXJVVUlEICsgIjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICB9LCBwbHVnaW4uZ2V0RXhlY3V0b3JTZXJ2aWNlKCkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHMgYSBwbGF5ZXIncyBlYXJuZWQgWFAgZnJvbSBib3VudGllcw0KICAgICAqIC8vIG5vdGU6IFVwZGF0ZXMgeHBfZWFybmVkIHN0YXQgaW4gcGxheWVyX3N0YXRzIHRhYmxlIGFzeW5jaHJvbm91c2x5DQogICAgICovDQogICAgcHVibGljIENvbXBsZXRhYmxlRnV0dXJlPFZvaWQ+IHNldFhQRWFybmVkKFVVSUQgcGxheWVyVVVJRCwgaW50IHhwRWFybmVkKSB7DQogICAgICAgIGlmICghaXNFbmFibGVkKCkpIHsNCiAgICAgICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5ydW5Bc3luYygoKSAtPiB7DQogICAgICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gc3RhdHNDb25maWcgPSBwbHVnaW4uZ2V0U3RhdHNDb25maWcoKTsNCiAgICAgICAgICAgICAgICBzdGF0c0NvbmZpZy5zZXQoInBsYXllcnMuIiArIHBsYXllclVVSUQgKyAiLnhwX2Vhcm5lZCIsIHhwRWFybmVkKTsNCiAgICAgICAgICAgICAgICBwbHVnaW4uc2F2ZVN0YXRzQ29uZmlnKCk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5ydW5Bc3luYygoKSAtPiB7DQogICAgICAgICAgICBTdHJpbmcgcXVlcnkgPSAiSU5TRVJUIElOVE8gcGxheWVyX3N0YXRzIChwbGF5ZXJfdXVpZCwgeHBfZWFybmVkKSBWQUxVRVMgKD8sID8pICIgKw0KICAgICAgICAgICAgICAgICAgICAiT04gRFVQTElDQVRFIEtFWSBVUERBVEUgeHBfZWFybmVkID0gPyI7DQogICAgICAgICAgICB0cnkgKFByZXBhcmVkU3RhdGVtZW50IHBzdG10ID0gY29ubmVjdGlvbi5wcmVwYXJlU3RhdGVtZW50KHF1ZXJ5KSkgew0KICAgICAgICAgICAgICAgIHBzdG10LnNldFN0cmluZygxLCBwbGF5ZXJVVUlELnRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgIHBzdG10LnNldEludCgyLCB4cEVhcm5lZCk7DQogICAgICAgICAgICAgICAgcHN0bXQuc2V0SW50KDMsIHhwRWFybmVkKTsNCiAgICAgICAgICAgICAgICBwc3RtdC5leGVjdXRlVXBkYXRlKCk7DQogICAgICAgICAgICB9IGNhdGNoIChTUUxFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gc2V0IHhwX2Vhcm5lZCBmb3IgIiArIHBsYXllclVVSUQgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCBwbHVnaW4uZ2V0RXhlY3V0b3JTZXJ2aWNlKCkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYSBwbGF5ZXIncyB0b3RhbCB2YWx1ZSBlYXJuZWQgZnJvbSBib3VudGllcw0KICAgICAqIC8vIG5vdGU6IFJldHJpZXZlcyB0b3RhbF92YWx1ZV9lYXJuZWQgc3RhdCBmcm9tIHBsYXllcl9zdGF0cyB0YWJsZSBhc3luY2hyb25vdXNseQ0KICAgICAqLw0KICAgIHB1YmxpYyBDb21wbGV0YWJsZUZ1dHVyZTxEb3VibGU+IGdldFRvdGFsVmFsdWVFYXJuZWQoVVVJRCBwbGF5ZXJVVUlEKSB7DQogICAgICAgIGlmICghaXNFbmFibGVkKCkpIHsNCiAgICAgICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5zdXBwbHlBc3luYygoKSAtPiBwbHVnaW4uZ2V0U3RhdHNDb25maWcoKS5nZXREb3VibGUoInBsYXllcnMuIiArIHBsYXllclVVSUQgKyAiLnRvdGFsX3ZhbHVlX2Vhcm5lZCIsIDAuMCkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIENvbXBsZXRhYmxlRnV0dXJlLnN1cHBseUFzeW5jKCgpIC0+IHsNCiAgICAgICAgICAgIFN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgdG90YWxfdmFsdWVfZWFybmVkIEZST00gcGxheWVyX3N0YXRzIFdIRVJFIHBsYXllcl91dWlkID0gPyI7DQogICAgICAgICAgICB0cnkgKFByZXBhcmVkU3RhdGVtZW50IHBzdG10ID0gY29ubmVjdGlvbi5wcmVwYXJlU3RhdGVtZW50KHF1ZXJ5KSkgew0KICAgICAgICAgICAgICAgIHBzdG10LnNldFN0cmluZygxLCBwbGF5ZXJVVUlELnRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgIFJlc3VsdFNldCBycyA9IHBzdG10LmV4ZWN1dGVRdWVyeSgpOw0KICAgICAgICAgICAgICAgIGlmIChycy5uZXh0KCkpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJzLmdldERvdWJsZSgidG90YWxfdmFsdWVfZWFybmVkIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBjYXRjaCAoU1FMRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIGZldGNoIHRvdGFsX3ZhbHVlX2Vhcm5lZCBmb3IgIiArIHBsYXllclVVSUQgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIDAuMDsNCiAgICAgICAgfSwgcGx1Z2luLmdldEV4ZWN1dG9yU2VydmljZSgpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIGEgcGxheWVyJ3MgdG90YWwgdmFsdWUgZWFybmVkIGZyb20gYm91bnRpZXMNCiAgICAgKiAvLyBub3RlOiBVcGRhdGVzIHRvdGFsX3ZhbHVlX2Vhcm5lZCBzdGF0IGluIHBsYXllcl9zdGF0cyB0YWJsZSBhc3luY2hyb25vdXNseQ0KICAgICAqLw0KICAgIHB1YmxpYyBDb21wbGV0YWJsZUZ1dHVyZTxWb2lkPiBzZXRUb3RhbFZhbHVlRWFybmVkKFVVSUQgcGxheWVyVVVJRCwgZG91YmxlIHRvdGFsVmFsdWVFYXJuZWQpIHsNCiAgICAgICAgaWYgKCFpc0VuYWJsZWQoKSkgew0KICAgICAgICAgICAgcmV0dXJuIENvbXBsZXRhYmxlRnV0dXJlLnJ1bkFzeW5jKCgpIC0+IHsNCiAgICAgICAgICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBzdGF0c0NvbmZpZyA9IHBsdWdpbi5nZXRTdGF0c0NvbmZpZygpOw0KICAgICAgICAgICAgICAgIHN0YXRzQ29uZmlnLnNldCgicGxheWVycy4iICsgcGxheWVyVVVJRCArICIudG90YWxfdmFsdWVfZWFybmVkIiwgdG90YWxWYWx1ZUVhcm5lZCk7DQogICAgICAgICAgICAgICAgcGx1Z2luLnNhdmVTdGF0c0NvbmZpZygpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gQ29tcGxldGFibGVGdXR1cmUucnVuQXN5bmMoKCkgLT4gew0KICAgICAgICAgICAgU3RyaW5nIHF1ZXJ5ID0gIklOU0VSVCBJTlRPIHBsYXllcl9zdGF0cyAocGxheWVyX3V1aWQsIHRvdGFsX3ZhbHVlX2Vhcm5lZCkgVkFMVUVTICg/LCA/KSAiICsNCiAgICAgICAgICAgICAgICAgICAgIk9OIERVUExJQ0FURSBLRVkgVVBEQVRFIHRvdGFsX3ZhbHVlX2Vhcm5lZCA9ID8iOw0KICAgICAgICAgICAgdHJ5IChQcmVwYXJlZFN0YXRlbWVudCBwc3RtdCA9IGNvbm5lY3Rpb24ucHJlcGFyZVN0YXRlbWVudChxdWVyeSkpIHsNCiAgICAgICAgICAgICAgICBwc3RtdC5zZXRTdHJpbmcoMSwgcGxheWVyVVVJRC50b1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICBwc3RtdC5zZXREb3VibGUoMiwgdG90YWxWYWx1ZUVhcm5lZCk7DQogICAgICAgICAgICAgICAgcHN0bXQuc2V0RG91YmxlKDMsIHRvdGFsVmFsdWVFYXJuZWQpOw0KICAgICAgICAgICAgICAgIHBzdG10LmV4ZWN1dGVVcGRhdGUoKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKFNRTEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkZhaWxlZCB0byBzZXQgdG90YWxfdmFsdWVfZWFybmVkIGZvciAiICsgcGxheWVyVVVJRCArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0sIHBsdWdpbi5nZXRFeGVjdXRvclNlcnZpY2UoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogTG9hZHMgYm91bnRpZXMgZnJvbSBNeVNRTA0KICAgICAqIC8vIG5vdGU6IFJldHJpZXZlcyBhbGwgYm91bnRpZXMgZnJvbSB0aGUgZGF0YWJhc2UNCiAgICAgKi8NCiAgICBwdWJsaWMgQ29tcGxldGFibGVGdXR1cmU8TWFwPFVVSUQsIE1hcDxVVUlELCBJbnRlZ2VyPj4+IGxvYWRCb3VudGllc0FzeW5jKCkgew0KICAgICAgICByZXR1cm4gQ29tcGxldGFibGVGdXR1cmUuc3VwcGx5QXN5bmMoKCkgLT4gew0KICAgICAgICAgICAgTWFwPFVVSUQsIE1hcDxVVUlELCBJbnRlZ2VyPj4gYm91bnRpZXMgPSBuZXcgSGFzaE1hcDw+KCk7DQogICAgICAgICAgICBpZiAoIWlzRW5hYmxlZCgpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGJvdW50aWVzOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdHJ5IChTdGF0ZW1lbnQgc3RtdCA9IGNvbm5lY3Rpb24uY3JlYXRlU3RhdGVtZW50KCk7DQogICAgICAgICAgICAgICAgIFJlc3VsdFNldCBycyA9IHN0bXQuZXhlY3V0ZVF1ZXJ5KCJTRUxFQ1QgKiBGUk9NIGJvdW50aWVzIikpIHsNCiAgICAgICAgICAgICAgICB3aGlsZSAocnMubmV4dCgpKSB7DQogICAgICAgICAgICAgICAgICAgIFVVSUQgdGFyZ2V0VVVJRCA9IFVVSUQuZnJvbVN0cmluZyhycy5nZXRTdHJpbmcoInRhcmdldF91dWlkIikpOw0KICAgICAgICAgICAgICAgICAgICBVVUlEIHNldHRlclVVSUQgPSBVVUlELmZyb21TdHJpbmcocnMuZ2V0U3RyaW5nKCJzZXR0ZXJfdXVpZCIpKTsNCiAgICAgICAgICAgICAgICAgICAgaW50IGFtb3VudCA9IHJzLmdldEludCgiYW1vdW50Iik7DQogICAgICAgICAgICAgICAgICAgIGJvdW50aWVzLmNvbXB1dGVJZkFic2VudCh0YXJnZXRVVUlELCBrIC0+IG5ldyBIYXNoTWFwPD4oKSkucHV0KHNldHRlclVVSUQsIGFtb3VudCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBjYXRjaCAoU1FMRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIGxvYWQgYm91bnRpZXM6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gYm91bnRpZXM7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHMgYSBib3VudHkgaW4gTXlTUUwNCiAgICAgKiAvLyBub3RlOiBJbnNlcnRzIG9yIHVwZGF0ZXMgYSBib3VudHkgcmVjb3JkDQogICAgICovDQogICAgcHVibGljIENvbXBsZXRhYmxlRnV0dXJlPFZvaWQ+IHNldEJvdW50eUFzeW5jKFVVSUQgc2V0dGVyLCBVVUlEIHRhcmdldCwgZG91YmxlIGFtb3VudCwgbG9uZyBleHBpcmVUaW1lKSB7DQogICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5ydW5Bc3luYygoKSAtPiB7DQogICAgICAgICAgICBpZiAoIWlzRW5hYmxlZCgpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdHJ5IChQcmVwYXJlZFN0YXRlbWVudCBwc3RtdCA9IGNvbm5lY3Rpb24ucHJlcGFyZVN0YXRlbWVudCgNCiAgICAgICAgICAgICAgICAgICAgIklOU0VSVCBJTlRPIGJvdW50aWVzICh0YXJnZXRfdXVpZCwgc2V0dGVyX3V1aWQsIGFtb3VudCwgc2V0X3RpbWUsIGV4cGlyZV90aW1lKSAiICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiVkFMVUVTICg/LCA/LCA/LCA/LCA/KSBPTiBEVVBMSUNBVEUgS0VZIFVQREFURSAiICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYW1vdW50ID0gPywgc2V0X3RpbWUgPSA/LCBleHBpcmVfdGltZSA9ID8iKSkgew0KICAgICAgICAgICAgICAgIGxvbmcgc2V0VGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOw0KICAgICAgICAgICAgICAgIHBzdG10LnNldFN0cmluZygxLCB0YXJnZXQudG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgcHN0bXQuc2V0U3RyaW5nKDIsIHNldHRlci50b1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICBwc3RtdC5zZXRJbnQoMywgKGludCkgYW1vdW50KTsNCiAgICAgICAgICAgICAgICBwc3RtdC5zZXRMb25nKDQsIHNldFRpbWUpOw0KICAgICAgICAgICAgICAgIHBzdG10LnNldExvbmcoNSwgZXhwaXJlVGltZSk7DQogICAgICAgICAgICAgICAgcHN0bXQuc2V0SW50KDYsIChpbnQpIGFtb3VudCk7DQogICAgICAgICAgICAgICAgcHN0bXQuc2V0TG9uZyg3LCBzZXRUaW1lKTsNCiAgICAgICAgICAgICAgICBwc3RtdC5zZXRMb25nKDgsIGV4cGlyZVRpbWUpOw0KICAgICAgICAgICAgICAgIHBzdG10LmV4ZWN1dGVVcGRhdGUoKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKFNRTEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkZhaWxlZCB0byBzZXQgYm91bnR5OiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZW1vdmVzIGEgc3BlY2lmaWMgYm91bnR5IGZyb20gTXlTUUwNCiAgICAgKiAvLyBub3RlOiBEZWxldGVzIGEgYm91bnR5IHJlY29yZCBmb3IgYSBzZXR0ZXIgYW5kIHRhcmdldA0KICAgICAqLw0KICAgIHB1YmxpYyBDb21wbGV0YWJsZUZ1dHVyZTxWb2lkPiByZW1vdmVCb3VudHlBc3luYyhVVUlEIHNldHRlciwgVVVJRCB0YXJnZXQpIHsNCiAgICAgICAgcmV0dXJuIENvbXBsZXRhYmxlRnV0dXJlLnJ1bkFzeW5jKCgpIC0+IHsNCiAgICAgICAgICAgIGlmICghaXNFbmFibGVkKCkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0cnkgKFByZXBhcmVkU3RhdGVtZW50IHBzdG10ID0gY29ubmVjdGlvbi5wcmVwYXJlU3RhdGVtZW50KA0KICAgICAgICAgICAgICAgICAgICAiREVMRVRFIEZST00gYm91bnRpZXMgV0hFUkUgdGFyZ2V0X3V1aWQgPSA/IEFORCBzZXR0ZXJfdXVpZCA9ID8iKSkgew0KICAgICAgICAgICAgICAgIHBzdG10LnNldFN0cmluZygxLCB0YXJnZXQudG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgcHN0bXQuc2V0U3RyaW5nKDIsIHNldHRlci50b1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICBwc3RtdC5leGVjdXRlVXBkYXRlKCk7DQogICAgICAgICAgICB9IGNhdGNoIChTUUxFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gcmVtb3ZlIGJvdW50eTogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2xlYXJzIGFsbCBib3VudGllcyBmb3IgYSB0YXJnZXQgaW4gTXlTUUwNCiAgICAgKiAvLyBub3RlOiBEZWxldGVzIGFsbCBib3VudHkgcmVjb3JkcyBmb3IgYSB0YXJnZXQNCiAgICAgKi8NCiAgICBwdWJsaWMgQ29tcGxldGFibGVGdXR1cmU8Vm9pZD4gY2xlYXJCb3VudGllc0FzeW5jKFVVSUQgdGFyZ2V0KSB7DQogICAgICAgIHJldHVybiBDb21wbGV0YWJsZUZ1dHVyZS5ydW5Bc3luYygoKSAtPiB7DQogICAgICAgICAgICBpZiAoIWlzRW5hYmxlZCgpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdHJ5IChQcmVwYXJlZFN0YXRlbWVudCBwc3RtdCA9IGNvbm5lY3Rpb24ucHJlcGFyZVN0YXRlbWVudCgNCiAgICAgICAgICAgICAgICAgICAgIkRFTEVURSBGUk9NIGJvdW50aWVzIFdIRVJFIHRhcmdldF91dWlkID0gPyIpKSB7DQogICAgICAgICAgICAgICAgcHN0bXQuc2V0U3RyaW5nKDEsIHRhcmdldC50b1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICBwc3RtdC5leGVjdXRlVXBkYXRlKCk7DQogICAgICAgICAgICB9IGNhdGNoIChTUUxFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gY2xlYXIgYm91bnRpZXM6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENsb3NlcyB0aGUgTXlTUUwgY29ubmVjdGlvbg0KICAgICAqIC8vIG5vdGU6IFNhZmVseSBjbG9zZXMgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24gb24gcGx1Z2luIGRpc2FibGUNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBjbG9zZUNvbm5lY3Rpb24oKSB7DQogICAgICAgIGlmIChjb25uZWN0aW9uICE9IG51bGwpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jbG9zZSgpOw0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJNeVNRTCBjb25uZWN0aW9uIGNsb3NlZC4iKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKFNRTEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLnNldmVyZSgiRmFpbGVkIHRvIGNsb3NlIE15U1FMIGNvbm5lY3Rpb246ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjb25uZWN0aW9uID0gbnVsbDsNCiAgICAgICAgfQ0KICAgIH0NCn0AAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL3V0aWxzL1BsYWNlaG9sZGVyQ29udGV4dC5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMzUzNzIgMTUwMjYzNzE3NjEgMDIwNzAxACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlsczsNCg0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCg0KaW1wb3J0IGphdmEudXRpbC5VVUlEOw0KDQovKioNCiAqIENvbnRleHQgYnVpbGRlciBjbGFzcyBmb3Igb3JnYW5pemluZyBwbGFjZWhvbGRlciBkYXRhIC8vIG5vdGU6IFN0b3JlcyBkYXRhIGZvciBwbGFjZWhvbGRlciByZXBsYWNlbWVudCBpbiBCb3VudGllc1BsdXMNCiAqLw0KcHVibGljIGNsYXNzIFBsYWNlaG9sZGVyQ29udGV4dCB7DQogICAgcHJpdmF0ZSBQbGF5ZXIgcGxheWVyOyAvLyBBZGRlZCBmb3IgcGxheWVyIGNvbnRleHQgaW4gcGxhY2Vob2xkZXJzDQogICAgcHJpdmF0ZSBVVUlEIHRhcmdldFVVSUQ7IC8vIEFkZGVkIGZvciB0YXJnZXQgVVVJRCBpbiBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIFVVSUQgc2V0dGVyVVVJRDsgLy8gQWRkZWQgZm9yIHNldHRlciBVVUlEIGluIHBsYWNlaG9sZGVycw0KICAgIHByaXZhdGUgRG91YmxlIGJvdW50eUFtb3VudDsgLy8gQWRkZWQgZm9yIGJvdW50eSBhbW91bnQgaW4gcGxhY2Vob2xkZXJzDQogICAgcHJpdmF0ZSBEb3VibGUgdG90YWxCb3VudHlBbW91bnQ7IC8vIEFkZGVkIGZvciB0b3RhbCBib3VudHkgYW1vdW50IGluIHBsYWNlaG9sZGVycw0KICAgIHByaXZhdGUgU3RyaW5nIHNldFRpbWU7IC8vIEFkZGVkIGZvciBib3VudHkgc2V0IHRpbWUgaW4gcGxhY2Vob2xkZXJzDQogICAgcHJpdmF0ZSBTdHJpbmcgZXhwaXJlVGltZTsgLy8gQWRkZWQgZm9yIGJvdW50eSBzZXQgYW5kIGV4cGlyZSB0aW1lcyBpbiBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIERvdWJsZSBtdWx0aXBsaWVyOyAvLyBBZGRlZCBmb3IgbXVsdGlwbGllciBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIFN0cmluZyBraWxsZXJOYW1lOyAvLyBBZGRlZCBmb3Iga2lsbGVyIG5hbWUgcGxhY2Vob2xkZXJzDQogICAgcHJpdmF0ZSBTdHJpbmcgZGVhdGhUaW1lOyAvLyBBZGRlZCBmb3IgZGVhdGggdGltZSBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIFN0cmluZyBzZXR0ZXJMaXN0OyAvLyBBZGRlZCBmb3IgbGlzdCBvZiBzZXR0ZXJzIGluIHBsYWNlaG9sZGVycw0KICAgIHByaXZhdGUgSW50ZWdlciBib3VudHlDb3VudDsgLy8gQWRkZWQgZm9yIGJvdW50eSBjb3VudCBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIERvdWJsZSBtb25leVZhbHVlOyAvLyBBZGRlZCBmb3IgbW9uZXktcmVsYXRlZCBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIEludGVnZXIgZXhwVmFsdWU7IC8vIEFkZGVkIGZvciBleHBlcmllbmNlLXJlbGF0ZWQgcGxhY2Vob2xkZXJzDQogICAgcHJpdmF0ZSBTdHJpbmcgdGltZVZhbHVlOyAvLyBBZGRlZCBmb3IgdGltZS1yZWxhdGVkIHBsYWNlaG9sZGVycw0KICAgIHByaXZhdGUgSW50ZWdlciBpdGVtQ291bnQ7IC8vIEFkZGVkIGZvciBpdGVtLXJlbGF0ZWQgcGxhY2Vob2xkZXJzDQogICAgcHJpdmF0ZSBEb3VibGUgaXRlbVZhbHVlOyAvLyBBZGRlZCBmb3IgaXRlbS1yZWxhdGVkIHBsYWNlaG9sZGVycw0KICAgIHByaXZhdGUgRG91YmxlIHRheFJhdGU7IC8vIEFkZGVkIGZvciB0YXgtcmVsYXRlZCBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIERvdWJsZSB0YXhBbW91bnQ7IC8vIEFkZGVkIGZvciB0YXgtcmVsYXRlZCBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIERvdWJsZSByZWZ1bmRBbW91bnQ7IC8vIEFkZGVkIGZvciByZWZ1bmQtcmVsYXRlZCBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIFN0cmluZyBmaWx0ZXJTdGF0dXM7IC8vIEFkZGVkIGZvciBmaWx0ZXItcmVsYXRlZCBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIFN0cmluZyBmaWx0ZXJEZXRhaWxzOyAvLyBBZGRlZCBmb3IgZmlsdGVyLXJlbGF0ZWQgcGxhY2Vob2xkZXJzDQogICAgcHJpdmF0ZSBJbnRlZ2VyIGN1cnJlbnRQYWdlOyAvLyBBZGRlZCBmb3IgcGFnaW5hdGlvbiBpbiBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIEludGVnZXIgdG90YWxQYWdlczsgLy8gQWRkZWQgZm9yIHBhZ2luYXRpb24gaW4gcGxhY2Vob2xkZXJzDQogICAgcHJpdmF0ZSBTdHJpbmcgYm9vc3RUaW1lOyAvLyBBZGRlZCBmb3IgYm9vc3QtcmVsYXRlZCBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIFN0cmluZyBtb25leUxpbmU7IC8vIEFkZGVkIGZvciBtb25leS1yZWxhdGVkIHBsYWNlaG9sZGVycw0KICAgIHByaXZhdGUgU3RyaW5nIGV4cGVyaWVuY2VMaW5lOyAvLyBBZGRlZCBmb3IgZXhwZXJpZW5jZS1yZWxhdGVkIHBsYWNlaG9sZGVycw0KICAgIHByaXZhdGUgU3RyaW5nIGVycm9yOyAvLyBBZGRlZCBmb3IgZXJyb3IgbWVzc2FnZXMgaW4gcGxhY2Vob2xkZXJzDQogICAgcHJpdmF0ZSBTdHJpbmcgaXRlbTsgLy8gQWRkZWQgZm9yIGl0ZW0tcmVsYXRlZCBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIFVVSUQgc2VuZGVyOyAvLyBBZGRlZCBmb3Igc2VuZGVyIFVVSUQgaW4gcGxhY2Vob2xkZXJzDQogICAgcHJpdmF0ZSBTdHJpbmcgbWF0ZXJpYWw7IC8vIEFkZGVkIGZvciBtYXRlcmlhbC1yZWxhdGVkIHBsYWNlaG9sZGVycw0KICAgIHByaXZhdGUgU3RyaW5nIGJ1dHRvbjsgLy8gQWRkZWQgZm9yIGJ1dHRvbi1yZWxhdGVkIHBsYWNlaG9sZGVycw0KICAgIHByaXZhdGUgRG91YmxlIGFub255bW91c0Nvc3Q7IC8vIEFkZGVkIGZvciBhbm9ueW1vdXMgYm91bnR5IGNvc3QNCiAgICBwcml2YXRlIFN0cmluZyBpbnB1dDsgLy8gQWRkZWQgZm9yIGlucHV0LXJlbGF0ZWQgcGxhY2Vob2xkZXJzDQogICAgcHJpdmF0ZSBTdHJpbmcgdW5pdDsgLy8gQWRkZWQgZm9yIHVuaXQtcmVsYXRlZCBwbGFjZWhvbGRlcnMNCiAgICBwcml2YXRlIFN0cmluZyB0aW1lOyAvLyBBZGRlZCBmb3IgdGltZS1yZWxhdGVkIHBsYWNlaG9sZGVycw0KICAgIHByaXZhdGUgSW50ZWdlciBodW50ZXJzOyAvLyBBZGRlZCBmb3IgbnVtYmVyIG9mIGh1bnRlcnMNCiAgICBwcml2YXRlIERvdWJsZSBmcmVuenk7IC8vIEFkZGVkIGZvciBmcmVuenkgYW1vdW50DQogICAgcHJpdmF0ZSBEb3VibGUgYm9vc3Q7IC8vIEFkZGVkIGZvciBib3VudHkgYm9vc3QgYW1vdW50DQogICAgcHJpdmF0ZSBTdHJpbmcgZXhwaXJ5OyAvLyBBZGRlZCBmb3IgYm91bnR5IGV4cGlyeSB0aW1lDQogICAgcHJpdmF0ZSBEb3VibGUgcG9vbDsgLy8gQWRkZWQgZm9yIHBvb2wgYW1vdW50DQogICAgcHJpdmF0ZSBTdHJpbmcgc3BvbnNvcnM7IC8vIEFkZGVkIGZvciBzcG9uc29yIGRldGFpbHMNCiAgICBwcml2YXRlIFN0cmluZyBpdGVtTmFtZTsgLy8gQWRkZWQgZm9yIGJsYWNrbGlzdGVkIGl0ZW0gbmFtZQ0KICAgIHByaXZhdGUgSW50ZWdlciBpdGVtVXNlczsgLy8gQWRkZWQgZm9yIGl0ZW0gdXNlcw0KICAgIHByaXZhdGUgU3RyaW5nIG9ubGluZVN0YXR1czsgLy8gQWRkZWQgZm9yIHBsYXllciBvbmxpbmUgc3RhdHVzDQogICAgcHJpdmF0ZSBTdHJpbmcgbGFzdFNlZW47IC8vIEFkZGVkIGZvciBsYXN0IHNlZW4gdGltZQ0KICAgIHByaXZhdGUgSW50ZWdlciByYW5rOyAvLyBBZGRlZCBmb3IgcGxheWVyIHJhbmsNCiAgICBwcml2YXRlIERvdWJsZSBwb29sSW5jcmVhc2VQZXJjZW50OyAvLyBBZGRlZCBmb3IgcG9vbCBpbmNyZWFzZSBwZXJjZW50YWdlIGluIHBsYWNlaG9sZGVycw0KDQogICAgcHJpdmF0ZSBQbGFjZWhvbGRlckNvbnRleHQoKSB7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ3JlYXRlcyBhIG5ldyBQbGFjZWhvbGRlckNvbnRleHQgaW5zdGFuY2UgLy8gbm90ZTogSW5pdGlhbGl6ZXMgYW4gZW1wdHkgY29udGV4dCBmb3IgcGxhY2Vob2xkZXIgZGF0YQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgUGxhY2Vob2xkZXJDb250ZXh0IGNyZWF0ZSgpIHsNCiAgICAgICAgcmV0dXJuIG5ldyBQbGFjZWhvbGRlckNvbnRleHQoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIHRoZSByYW5rIGZvciB0aGUgY29udGV4dCAvLyBub3RlOiBTdG9yZXMgdGhlIHBsYXllcidzIHJhbmsgZm9yIHBsYWNlaG9sZGVyIHJlcGxhY2VtZW50DQogICAgICovDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCByYW5rKEludGVnZXIgcmFuaykgew0KICAgICAgICB0aGlzLnJhbmsgPSByYW5rOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIHRoZSBwbGF5ZXIgZm9yIHRoZSBjb250ZXh0IC8vIG5vdGU6IFN0b3JlcyB0aGUgcGxheWVyIGZvciBwbGFjZWhvbGRlciByZXBsYWNlbWVudA0KICAgICAqLw0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgcGxheWVyKFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHMgdGhlIGl0ZW0gbmFtZSBmb3IgYmxhY2tsaXN0ZWQgaXRlbXMgLy8gbm90ZTogU3RvcmVzIHRoZSBuYW1lIG9mIHRoZSBpdGVtIGZvciBwbGFjZWhvbGRlciByZXBsYWNlbWVudA0KICAgICAqLw0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgaXRlbU5hbWUoU3RyaW5nIGl0ZW1OYW1lKSB7DQogICAgICAgIHRoaXMuaXRlbU5hbWUgPSBpdGVtTmFtZTsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2V0cyB0aGUgaXRlbSB1c2VzIGZvciB0aGUgY29udGV4dCAvLyBub3RlOiBTdG9yZXMgdGhlIG51bWJlciBvZiB1c2VzIGZvciBwbGFjZWhvbGRlciByZXBsYWNlbWVudA0KICAgICAqLw0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgaXRlbVVzZXMoSW50ZWdlciBpdGVtVXNlcykgew0KICAgICAgICB0aGlzLml0ZW1Vc2VzID0gaXRlbVVzZXM7DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHMgdGhlIG9ubGluZSBzdGF0dXMgZm9yIHRoZSBjb250ZXh0IC8vIG5vdGU6IFN0b3JlcyB0aGUgcGxheWVyJ3Mgb25saW5lIHN0YXR1cyBmb3IgcGxhY2Vob2xkZXIgcmVwbGFjZW1lbnQNCiAgICAgKi8NCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IG9ubGluZVN0YXR1cyhTdHJpbmcgb25saW5lU3RhdHVzKSB7DQogICAgICAgIHRoaXMub25saW5lU3RhdHVzID0gb25saW5lU3RhdHVzOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIHRoZSBsYXN0IHNlZW4gdGltZSBmb3IgdGhlIGNvbnRleHQgLy8gbm90ZTogU3RvcmVzIHRoZSBwbGF5ZXIncyBsYXN0IHNlZW4gdGltZSBmb3IgcGxhY2Vob2xkZXIgcmVwbGFjZW1lbnQNCiAgICAgKi8NCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IGxhc3RTZWVuKFN0cmluZyBsYXN0U2Vlbikgew0KICAgICAgICB0aGlzLmxhc3RTZWVuID0gbGFzdFNlZW47DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHMgdGhlIGFtb3VudCBmb3IgdGhlIGNvbnRleHQgLy8gbm90ZTogU3RvcmVzIHRoZSBhbW91bnQgdmFsdWUgZm9yIHVzZSBpbiBtZXNzYWdlcw0KICAgICAqLw0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgd2l0aEFtb3VudChEb3VibGUgYW1vdW50KSB7DQogICAgICAgIHRoaXMuYm91bnR5QW1vdW50ID0gYW1vdW50Ow0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIHRoZSB0YXJnZXQgVVVJRCBmb3IgdGhlIGNvbnRleHQgLy8gbm90ZTogU3RvcmVzIHRoZSBVVUlEIG9mIHRoZSB0YXJnZXQgcGxheWVyIGZvciBwbGFjZWhvbGRlciByZXBsYWNlbWVudA0KICAgICAqLw0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgdGFyZ2V0KFVVSUQgdGFyZ2V0VVVJRCkgew0KICAgICAgICB0aGlzLnRhcmdldFVVSUQgPSB0YXJnZXRVVUlEOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIHRoZSBzZXR0ZXIgVVVJRCBmb3IgdGhlIGNvbnRleHQgLy8gbm90ZTogU3RvcmVzIHRoZSBVVUlEIG9mIHRoZSBwbGF5ZXIgd2hvIHNldCB0aGUgYm91bnR5IGZvciBwbGFjZWhvbGRlciByZXBsYWNlbWVudA0KICAgICAqLw0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgc2V0dGVyKFVVSUQgc2V0dGVyVVVJRCkgew0KICAgICAgICB0aGlzLnNldHRlclVVSUQgPSBzZXR0ZXJVVUlEOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIHRoZSBib3VudHkgYW1vdW50IGZvciB0aGUgY29udGV4dCAvLyBub3RlOiBTdG9yZXMgdGhlIGJvdW50eSBhbW91bnQgZm9yIHBsYWNlaG9sZGVyIHJlcGxhY2VtZW50DQogICAgICovDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBib3VudHlBbW91bnQoRG91YmxlIGJvdW50eUFtb3VudCkgew0KICAgICAgICB0aGlzLmJvdW50eUFtb3VudCA9IGJvdW50eUFtb3VudDsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCB0b3RhbEJvdW50eUFtb3VudChEb3VibGUgdG90YWxCb3VudHlBbW91bnQpIHsNCiAgICAgICAgdGhpcy50b3RhbEJvdW50eUFtb3VudCA9IHRvdGFsQm91bnR5QW1vdW50Ow0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IHNldFRpbWUoU3RyaW5nIHNldFRpbWUpIHsNCiAgICAgICAgdGhpcy5zZXRUaW1lID0gc2V0VGltZTsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBleHBpcmVUaW1lKFN0cmluZyBleHBpcmVUaW1lKSB7DQogICAgICAgIHRoaXMuZXhwaXJlVGltZSA9IGV4cGlyZVRpbWU7DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgbXVsdGlwbGllcihEb3VibGUgbXVsdGlwbGllcikgew0KICAgICAgICB0aGlzLm11bHRpcGxpZXIgPSBtdWx0aXBsaWVyOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IGtpbGxlcihTdHJpbmcga2lsbGVyTmFtZSkgew0KICAgICAgICB0aGlzLmtpbGxlck5hbWUgPSBraWxsZXJOYW1lOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IGRlYXRoVGltZShTdHJpbmcgZGVhdGhUaW1lKSB7DQogICAgICAgIHRoaXMuZGVhdGhUaW1lID0gZGVhdGhUaW1lOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IHNldHRlckxpc3QoU3RyaW5nIHNldHRlckxpc3QpIHsNCiAgICAgICAgdGhpcy5zZXR0ZXJMaXN0ID0gc2V0dGVyTGlzdDsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBib3VudHlDb3VudChJbnRlZ2VyIGJvdW50eUNvdW50KSB7DQogICAgICAgIHRoaXMuYm91bnR5Q291bnQgPSBib3VudHlDb3VudDsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBtb25leVZhbHVlKERvdWJsZSBtb25leVZhbHVlKSB7DQogICAgICAgIHRoaXMubW9uZXlWYWx1ZSA9IG1vbmV5VmFsdWU7DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgZXhwVmFsdWUoSW50ZWdlciBleHBWYWx1ZSkgew0KICAgICAgICB0aGlzLmV4cFZhbHVlID0gZXhwVmFsdWU7DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgdGltZVZhbHVlKFN0cmluZyB0aW1lVmFsdWUpIHsNCiAgICAgICAgdGhpcy50aW1lVmFsdWUgPSB0aW1lVmFsdWU7DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgaXRlbUNvdW50KEludGVnZXIgaXRlbUNvdW50KSB7DQogICAgICAgIHRoaXMuaXRlbUNvdW50ID0gaXRlbUNvdW50Ow0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IGl0ZW1WYWx1ZShEb3VibGUgaXRlbVZhbHVlKSB7DQogICAgICAgIHRoaXMuaXRlbVZhbHVlID0gaXRlbVZhbHVlOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IHRheFJhdGUoRG91YmxlIHRheFJhdGUpIHsNCiAgICAgICAgdGhpcy50YXhSYXRlID0gdGF4UmF0ZTsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCB0YXhBbW91bnQoRG91YmxlIHRheEFtb3VudCkgew0KICAgICAgICB0aGlzLnRheEFtb3VudCA9IHRheEFtb3VudDsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCByZWZ1bmRBbW91bnQoRG91YmxlIHJlZnVuZEFtb3VudCkgew0KICAgICAgICB0aGlzLnJlZnVuZEFtb3VudCA9IHJlZnVuZEFtb3VudDsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBmaWx0ZXJTdGF0dXMoU3RyaW5nIGZpbHRlclN0YXR1cykgew0KICAgICAgICB0aGlzLmZpbHRlclN0YXR1cyA9IGZpbHRlclN0YXR1czsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBmaWx0ZXJEZXRhaWxzKFN0cmluZyBmaWx0ZXJEZXRhaWxzKSB7DQogICAgICAgIHRoaXMuZmlsdGVyRGV0YWlscyA9IGZpbHRlckRldGFpbHM7DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgY3VycmVudFBhZ2UoSW50ZWdlciBjdXJyZW50UGFnZSkgew0KICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gY3VycmVudFBhZ2U7DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgdG90YWxQYWdlcyhJbnRlZ2VyIHRvdGFsUGFnZXMpIHsNCiAgICAgICAgdGhpcy50b3RhbFBhZ2VzID0gdG90YWxQYWdlczsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBib29zdFRpbWUoU3RyaW5nIGJvb3N0VGltZSkgew0KICAgICAgICB0aGlzLmJvb3N0VGltZSA9IGJvb3N0VGltZTsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBtb25leUxpbmUoU3RyaW5nIG1vbmV5TGluZSkgew0KICAgICAgICB0aGlzLm1vbmV5TGluZSA9IG1vbmV5TGluZTsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBleHBlcmllbmNlTGluZShTdHJpbmcgZXhwZXJpZW5jZUxpbmUpIHsNCiAgICAgICAgdGhpcy5leHBlcmllbmNlTGluZSA9IGV4cGVyaWVuY2VMaW5lOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IGVycm9yKFN0cmluZyBlcnJvcikgew0KICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgaXRlbShTdHJpbmcgaXRlbSkgew0KICAgICAgICB0aGlzLml0ZW0gPSBpdGVtOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IHNlbmRlcihVVUlEIHNlbmRlcikgew0KICAgICAgICB0aGlzLnNlbmRlciA9IHNlbmRlcjsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBtYXRlcmlhbChTdHJpbmcgbWF0ZXJpYWwpIHsNCiAgICAgICAgdGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IGJ1dHRvbihTdHJpbmcgYnV0dG9uKSB7DQogICAgICAgIHRoaXMuYnV0dG9uID0gYnV0dG9uOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IGFub255bW91c0Nvc3QoRG91YmxlIGFub255bW91c0Nvc3QpIHsNCiAgICAgICAgdGhpcy5hbm9ueW1vdXNDb3N0ID0gYW5vbnltb3VzQ29zdDsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBpbnB1dChTdHJpbmcgaW5wdXQpIHsNCiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0Ow0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IHVuaXQoU3RyaW5nIHVuaXQpIHsNCiAgICAgICAgdGhpcy51bml0ID0gdW5pdDsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCB0aW1lKFN0cmluZyB0aW1lKSB7DQogICAgICAgIHRoaXMudGltZSA9IHRpbWU7DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgaHVudGVycyhJbnRlZ2VyIGh1bnRlcnMpIHsNCiAgICAgICAgdGhpcy5odW50ZXJzID0gaHVudGVyczsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBmcmVuenkoRG91YmxlIGZyZW56eSkgew0KICAgICAgICB0aGlzLmZyZW56eSA9IGZyZW56eTsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBib29zdChEb3VibGUgYm9vc3QpIHsNCiAgICAgICAgdGhpcy5ib29zdCA9IGJvb3N0Ow0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IGV4cGlyeShTdHJpbmcgZXhwaXJ5KSB7DQogICAgICAgIHRoaXMuZXhwaXJ5ID0gZXhwaXJ5Ow0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJDb250ZXh0IHBvb2woRG91YmxlIHBvb2wpIHsNCiAgICAgICAgdGhpcy5wb29sID0gcG9vbDsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgcHVibGljIFBsYWNlaG9sZGVyQ29udGV4dCBzcG9uc29ycyhTdHJpbmcgc3BvbnNvcnMpIHsNCiAgICAgICAgdGhpcy5zcG9uc29ycyA9IHNwb25zb3JzOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIHRoZSBwb29sIGluY3JlYXNlIHBlcmNlbnRhZ2UgZm9yIHRoZSBjb250ZXh0IC8vIG5vdGU6IFN0b3JlcyB0aGUgcG9vbCBpbmNyZWFzZSBwZXJjZW50YWdlIGZvciBwbGFjZWhvbGRlciByZXBsYWNlbWVudA0KICAgICAqLw0KICAgIHB1YmxpYyBQbGFjZWhvbGRlckNvbnRleHQgcG9vbEluY3JlYXNlUGVyY2VudChEb3VibGUgcG9vbEluY3JlYXNlUGVyY2VudCkgew0KICAgICAgICB0aGlzLnBvb2xJbmNyZWFzZVBlcmNlbnQgPSBwb29sSW5jcmVhc2VQZXJjZW50Ow0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXR0ZXJzIGZvciBhY2Nlc3NpbmcgY29udGV4dCBkYXRhIC8vIG5vdGU6IFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgc3RvcmVkIGRhdGEgZm9yIHBsYWNlaG9sZGVyIHJlcGxhY2VtZW50DQogICAgICovDQogICAgcHVibGljIFBsYXllciBnZXRQbGF5ZXIoKSB7DQogICAgICAgIHJldHVybiBwbGF5ZXI7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRJdGVtTmFtZSgpIHsNCiAgICAgICAgcmV0dXJuIGl0ZW1OYW1lOw0KICAgIH0NCg0KICAgIHB1YmxpYyBJbnRlZ2VyIGdldEl0ZW1Vc2VzKCkgew0KICAgICAgICByZXR1cm4gaXRlbVVzZXM7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRPbmxpbmVTdGF0dXMoKSB7DQogICAgICAgIHJldHVybiBvbmxpbmVTdGF0dXM7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRMYXN0U2VlbigpIHsNCiAgICAgICAgcmV0dXJuIGxhc3RTZWVuOw0KICAgIH0NCg0KICAgIHB1YmxpYyBVVUlEIGdldFRhcmdldFVVSUQoKSB7DQogICAgICAgIHJldHVybiB0YXJnZXRVVUlEOw0KICAgIH0NCg0KICAgIHB1YmxpYyBVVUlEIGdldFNldHRlclVVSUQoKSB7DQogICAgICAgIHJldHVybiBzZXR0ZXJVVUlEOw0KICAgIH0NCg0KICAgIHB1YmxpYyBEb3VibGUgZ2V0Qm91bnR5QW1vdW50KCkgew0KICAgICAgICByZXR1cm4gYm91bnR5QW1vdW50Ow0KICAgIH0NCg0KICAgIHB1YmxpYyBEb3VibGUgZ2V0VG90YWxCb3VudHlBbW91bnQoKSB7DQogICAgICAgIHJldHVybiB0b3RhbEJvdW50eUFtb3VudDsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldFNldFRpbWUoKSB7DQogICAgICAgIHJldHVybiBzZXRUaW1lOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0RXhwaXJlVGltZSgpIHsNCiAgICAgICAgcmV0dXJuIGV4cGlyZVRpbWU7DQogICAgfQ0KDQogICAgcHVibGljIERvdWJsZSBnZXRNdWx0aXBsaWVyKCkgew0KICAgICAgICByZXR1cm4gbXVsdGlwbGllcjsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldEtpbGxlck5hbWUoKSB7DQogICAgICAgIHJldHVybiBraWxsZXJOYW1lOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0RGVhdGhUaW1lKCkgew0KICAgICAgICByZXR1cm4gZGVhdGhUaW1lOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0U2V0dGVyTGlzdCgpIHsNCiAgICAgICAgcmV0dXJuIHNldHRlckxpc3Q7DQogICAgfQ0KDQogICAgcHVibGljIEludGVnZXIgZ2V0Qm91bnR5Q291bnQoKSB7DQogICAgICAgIHJldHVybiBib3VudHlDb3VudDsNCiAgICB9DQoNCiAgICBwdWJsaWMgRG91YmxlIGdldE1vbmV5VmFsdWUoKSB7DQogICAgICAgIHJldHVybiBtb25leVZhbHVlOw0KICAgIH0NCg0KICAgIHB1YmxpYyBJbnRlZ2VyIGdldEV4cFZhbHVlKCkgew0KICAgICAgICByZXR1cm4gZXhwVmFsdWU7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRUaW1lVmFsdWUoKSB7DQogICAgICAgIHJldHVybiB0aW1lVmFsdWU7DQogICAgfQ0KDQogICAgcHVibGljIEludGVnZXIgZ2V0SXRlbUNvdW50KCkgew0KICAgICAgICByZXR1cm4gaXRlbUNvdW50Ow0KICAgIH0NCg0KICAgIHB1YmxpYyBEb3VibGUgZ2V0SXRlbVZhbHVlKCkgew0KICAgICAgICByZXR1cm4gaXRlbVZhbHVlOw0KICAgIH0NCg0KICAgIHB1YmxpYyBEb3VibGUgZ2V0VGF4UmF0ZSgpIHsNCiAgICAgICAgcmV0dXJuIHRheFJhdGU7DQogICAgfQ0KDQogICAgcHVibGljIERvdWJsZSBnZXRUYXhBbW91bnQoKSB7DQogICAgICAgIHJldHVybiB0YXhBbW91bnQ7DQogICAgfQ0KDQogICAgcHVibGljIERvdWJsZSBnZXRSZWZ1bmRBbW91bnQoKSB7DQogICAgICAgIHJldHVybiByZWZ1bmRBbW91bnQ7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRGaWx0ZXJTdGF0dXMoKSB7DQogICAgICAgIHJldHVybiBmaWx0ZXJTdGF0dXM7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRGaWx0ZXJEZXRhaWxzKCkgew0KICAgICAgICByZXR1cm4gZmlsdGVyRGV0YWlsczsNCiAgICB9DQoNCiAgICBwdWJsaWMgSW50ZWdlciBnZXRDdXJyZW50UGFnZSgpIHsNCiAgICAgICAgcmV0dXJuIGN1cnJlbnRQYWdlOw0KICAgIH0NCg0KICAgIHB1YmxpYyBJbnRlZ2VyIGdldFRvdGFsUGFnZXMoKSB7DQogICAgICAgIHJldHVybiB0b3RhbFBhZ2VzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0Qm9vc3RUaW1lKCkgew0KICAgICAgICByZXR1cm4gYm9vc3RUaW1lOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0TW9uZXlMaW5lKCkgew0KICAgICAgICByZXR1cm4gbW9uZXlMaW5lOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0RXhwZXJpZW5jZUxpbmUoKSB7DQogICAgICAgIHJldHVybiBleHBlcmllbmNlTGluZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldEVycm9yKCkgew0KICAgICAgICByZXR1cm4gZXJyb3I7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRJdGVtKCkgew0KICAgICAgICByZXR1cm4gaXRlbTsNCiAgICB9DQoNCiAgICBwdWJsaWMgVVVJRCBnZXRTZW5kZXIoKSB7DQogICAgICAgIHJldHVybiBzZW5kZXI7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRNYXRlcmlhbCgpIHsNCiAgICAgICAgcmV0dXJuIG1hdGVyaWFsOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0QnV0dG9uKCkgew0KICAgICAgICByZXR1cm4gYnV0dG9uOw0KICAgIH0NCg0KICAgIHB1YmxpYyBEb3VibGUgZ2V0QW5vbnltb3VzQ29zdCgpIHsNCiAgICAgICAgcmV0dXJuIGFub255bW91c0Nvc3Q7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRJbnB1dCgpIHsNCiAgICAgICAgcmV0dXJuIGlucHV0Ow0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0VW5pdCgpIHsNCiAgICAgICAgcmV0dXJuIHVuaXQ7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRUaW1lKCkgew0KICAgICAgICByZXR1cm4gdGltZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgSW50ZWdlciBnZXRIdW50ZXJzKCkgew0KICAgICAgICByZXR1cm4gaHVudGVyczsNCiAgICB9DQoNCiAgICBwdWJsaWMgRG91YmxlIGdldEZyZW56eSgpIHsNCiAgICAgICAgcmV0dXJuIGZyZW56eTsNCiAgICB9DQoNCiAgICBwdWJsaWMgRG91YmxlIGdldEJvb3N0KCkgew0KICAgICAgICByZXR1cm4gYm9vc3Q7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRFeHBpcnkoKSB7DQogICAgICAgIHJldHVybiBleHBpcnk7DQogICAgfQ0KDQogICAgcHVibGljIERvdWJsZSBnZXRQb29sKCkgew0KICAgICAgICByZXR1cm4gcG9vbDsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldFNwb25zb3JzKCkgew0KICAgICAgICByZXR1cm4gc3BvbnNvcnM7DQogICAgfQ0KDQogICAgcHVibGljIERvdWJsZSBnZXRQb29sSW5jcmVhc2VQZXJjZW50KCkgew0KICAgICAgICByZXR1cm4gcG9vbEluY3JlYXNlUGVyY2VudDsNCiAgICB9DQp9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRvbnkyNi9ib3VudGllc1BsdXMvdXRpbHMvUGxhY2Vob2xkZXJzLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDA2MzE1NiAxNTAyNjQyMzM1NSAwMTc1MTUAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzOw0KDQppbXBvcnQgbWUuY2xpcC5wbGFjZWhvbGRlcmFwaS5QbGFjZWhvbGRlckFQSTsNCmltcG9ydCBtZS5jbGlwLnBsYWNlaG9sZGVyYXBpLmV4cGFuc2lvbi5QbGFjZWhvbGRlckV4cGFuc2lvbjsNCmltcG9ydCBuZXQubWlsa2Jvd2wudmF1bHQuZWNvbm9teS5FY29ub215Ow0KaW1wb3J0IG9yZy5idWtraXQuQnVra2l0Ow0KaW1wb3J0IG9yZy5idWtraXQuQ2hhdENvbG9yOw0KaW1wb3J0IG9yZy5idWtraXQuT2ZmbGluZVBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmVudGl0eS5QbGF5ZXI7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudGllc1BsdXM7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudHk7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5HVUlzLkFkZEl0ZW1zR1VJOw0KaW1wb3J0IGphdmEudGV4dC5TaW1wbGVEYXRlRm9ybWF0Ow0KaW1wb3J0IGphdmEudXRpbC4qOw0KaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlOw0KaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbmN1cnJlbnRIYXNoTWFwOw0KaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbmN1cnJlbnRNYXA7DQppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuYXRvbWljLkF0b21pY0xvbmc7DQppbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3JzOw0KDQoNCi8qKg0KICogSGFuZGxlcyBwbGFjZWhvbGRlciByZWdpc3RyYXRpb24gYW5kIGFwcGxpY2F0aW9uIGZvciBCb3VudGllc1BsdXMNCiAqIC8vIG5vdGU6IFJlZ2lzdGVycyBhbmQgcHJvY2Vzc2VzIHBsYWNlaG9sZGVycyBmb3IgZHluYW1pYyBkYXRhIGluIEdVSXMgYW5kIG1lc3NhZ2VzDQogKi8NCnB1YmxpYyBjbGFzcyBQbGFjZWhvbGRlcnMgZXh0ZW5kcyBQbGFjZWhvbGRlckV4cGFuc2lvbiB7DQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIFNpbXBsZURhdGVGb3JtYXQgREFURV9GT1JNQVQgPSBuZXcgU2ltcGxlRGF0ZUZvcm1hdCgiTU0vZGQveXl5eSBISDptbSIpOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIE1hcDxVVUlELCBQbGFjZWhvbGRlckNvbnRleHQ+IGNvbnRleHRNYXAgPSBuZXcgQ29uY3VycmVudEhhc2hNYXA8PigpOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIENvbmN1cnJlbnRNYXA8U3RyaW5nLCBBdG9taWNMb25nPiBkZWJ1Z0xvZ0NvdW50cyA9IG5ldyBDb25jdXJyZW50SGFzaE1hcDw+KCk7DQoNCiAgICBwdWJsaWMgUGxhY2Vob2xkZXJzKEJvdW50aWVzUGx1cyBwbHVnaW4pIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQXBwbHkgYWxsIHBsYWNlaG9sZGVycyB0byBhIHN0cmluZyB1c2luZyBQbGFjZWhvbGRlckFQSQ0KICAgICAqIC8vIG5vdGU6IFJlcGxhY2VzIHBsYWNlaG9sZGVycyB3aXRoIGNvbnRleHQgZGF0YQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5nIGFwcGx5KFN0cmluZyB0ZXh0LCBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCkgew0KICAgICAgICBpZiAodGV4dCA9PSBudWxsKSByZXR1cm4gIiI7DQogICAgICAgIGlmIChjb250ZXh0ID09IG51bGwgfHwgY29udGV4dC5nZXRQbGF5ZXIoKSA9PSBudWxsKSB7DQogICAgICAgICAgICBTdHJpbmcgcmVzdWx0ID0gUGxhY2Vob2xkZXJBUEkuc2V0UGxhY2Vob2xkZXJzKG51bGwsIHRleHQpOw0KICAgICAgICAgICAgcmV0dXJuIENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgcmVzdWx0KTsNCiAgICAgICAgfQ0KICAgICAgICBjb250ZXh0TWFwLnB1dChjb250ZXh0LmdldFBsYXllcigpLmdldFVuaXF1ZUlkKCksIGNvbnRleHQpOw0KICAgICAgICBTdHJpbmcgcmVzdWx0ID0gUGxhY2Vob2xkZXJBUEkuc2V0UGxhY2Vob2xkZXJzKGNvbnRleHQuZ2V0UGxheWVyKCksIHRleHQpOw0KICAgICAgICByZXR1cm4gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCByZXN1bHQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEFwcGx5IHBsYWNlaG9sZGVycyB0byBhIGxpc3Qgb2Ygc3RyaW5ncw0KICAgICAqIC8vIG5vdGU6IFJlcGxhY2VzIHBsYWNlaG9sZGVycyBpbiBlYWNoIGxpbmUgd2l0aCBjb250ZXh0IGRhdGENCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIExpc3Q8U3RyaW5nPiBhcHBseShMaXN0PFN0cmluZz4gbGluZXMsIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0KSB7DQogICAgICAgIGlmIChsaW5lcyA9PSBudWxsKSByZXR1cm4gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgIExpc3Q8U3RyaW5nPiByZXN1bHQgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgZm9yIChTdHJpbmcgbGluZSA6IGxpbmVzKSB7DQogICAgICAgICAgICByZXN1bHQuYWRkKGFwcGx5KGxpbmUsIGNvbnRleHQpKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgIH0NCg0KICAgIEBPdmVycmlkZQ0KICAgIHB1YmxpYyBib29sZWFuIHJlZ2lzdGVyKCkgew0KICAgICAgICByZXR1cm4gc3VwZXIucmVnaXN0ZXIoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBGb3JtYXQgbW9uZXkgYW1vdW50IHdpdGggY29tbWFzIGZvciByZWFkYWJpbGl0eQ0KICAgICAqIC8vIG5vdGU6IEZvcm1hdHMgY3VycmVuY3kgd2l0aCBjb21tYXMgdXNpbmcgZWNvbm9teSBwbHVnaW4gb3IgZGVmYXVsdCBmb3JtYXQNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyBTdHJpbmcgZm9ybWF0TW9uZXlXaXRoQ29tbWFzKGRvdWJsZSBhbW91bnQpIHsNCiAgICAgICAgRWNvbm9teSBlY29ub215ID0gQm91bnRpZXNQbHVzLmdldEVjb25vbXkoKTsNCiAgICAgICAgaWYgKGVjb25vbXkgIT0gbnVsbCkgew0KICAgICAgICAgICAgU3RyaW5nIGZvcm1hdHRlZCA9IGVjb25vbXkuZm9ybWF0KGFtb3VudCk7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGphdmEudGV4dC5OdW1iZXJGb3JtYXQgbnVtYmVyRm9ybWF0ID0gamF2YS50ZXh0Lk51bWJlckZvcm1hdC5nZXROdW1iZXJJbnN0YW5jZShqYXZhLnV0aWwuTG9jYWxlLlVTKTsNCiAgICAgICAgICAgICAgICBkb3VibGUgcGFyc2VkID0gRG91YmxlLnBhcnNlRG91YmxlKGZvcm1hdHRlZC5yZXBsYWNlQWxsKCJbXjAtOS5dIiwgIiIpKTsNCiAgICAgICAgICAgICAgICBTdHJpbmcgbnVtYmVyUGFydCA9IG51bWJlckZvcm1hdC5mb3JtYXQoKGxvbmcpIHBhcnNlZCk7DQogICAgICAgICAgICAgICAgU3RyaW5nIGRlY2ltYWxQYXJ0ID0gZm9ybWF0dGVkLmNvbnRhaW5zKCIuIikgPyBmb3JtYXR0ZWQuc3Vic3RyaW5nKGZvcm1hdHRlZC5pbmRleE9mKCIuIikpIDogIi4wMCI7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlZC5zdGFydHNXaXRoKCIkIikgPyAiJCIgKyBudW1iZXJQYXJ0ICsgZGVjaW1hbFBhcnQgOiBudW1iZXJQYXJ0ICsgZGVjaW1hbFBhcnQ7DQogICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZWQ7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgamF2YS50ZXh0Lk51bWJlckZvcm1hdCBudW1iZXJGb3JtYXQgPSBqYXZhLnRleHQuTnVtYmVyRm9ybWF0LmdldE51bWJlckluc3RhbmNlKGphdmEudXRpbC5Mb2NhbGUuVVMpOw0KICAgICAgICByZXR1cm4gIiQiICsgbnVtYmVyRm9ybWF0LmZvcm1hdChNYXRoLmZsb29yKGFtb3VudCkpICsgU3RyaW5nLmZvcm1hdCgiJS4yZiIsIGFtb3VudCkuc3Vic3RyaW5nKFN0cmluZy5mb3JtYXQoIiUuMmYiLCBhbW91bnQpLmluZGV4T2YoIi4iKSk7DQogICAgfQ0KDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIFN0cmluZyBnZXRJZGVudGlmaWVyKCkgew0KICAgICAgICByZXR1cm4gImJvdW50aWVzcGx1cyI7DQogICAgfQ0KDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIFN0cmluZyBnZXRBdXRob3IoKSB7DQogICAgICAgIHJldHVybiAiVG9ueTI2IjsNCiAgICB9DQoNCiAgICBAT3ZlcnJpZGUNCiAgICBwdWJsaWMgU3RyaW5nIGdldFZlcnNpb24oKSB7DQogICAgICAgIHJldHVybiBwbHVnaW4uZ2V0RGVzY3JpcHRpb24oKS5nZXRWZXJzaW9uKCk7DQogICAgfQ0KDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIGJvb2xlYW4gcGVyc2lzdCgpIHsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBwbGFjZWhvbGRlciByZXF1ZXN0cyBmb3IgUGxhY2Vob2xkZXJBUEkNCiAgICAgKiAvLyBub3RlOiBQcm92aWRlcyBjdXN0b20gcGxhY2Vob2xkZXJzIGZvciBCb3VudGllc1BsdXMNCiAgICAgKi8NCiAgICBAT3ZlcnJpZGUNCiAgICBwdWJsaWMgU3RyaW5nIG9uUGxhY2Vob2xkZXJSZXF1ZXN0KFBsYXllciBwbGF5ZXIsIFN0cmluZyBpZGVudGlmaWVyKSB7DQogICAgICAgIGlmIChpZGVudGlmaWVyLmVxdWFsc0lnbm9yZUNhc2UoInByZWZpeCIpKSB7DQogICAgICAgICAgICByZXR1cm4gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBwbHVnaW4uZ2V0TWVzc2FnZXNDb25maWcoKS5nZXRTdHJpbmcoInByZWZpeCIsICImNCZsQm91bnRpZXMgJjcmbMK7ICY3IikpOw0KICAgICAgICB9DQoNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBwbGF5ZXIgIT0gbnVsbCA/IGNvbnRleHRNYXAuZ2V0T3JEZWZhdWx0KHBsYXllci5nZXRVbmlxdWVJZCgpLCBudWxsKSA6IG51bGw7DQogICAgICAgIEJvdW50eSBib3VudHkgPSBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRUYXJnZXRVVUlEKCkgIT0gbnVsbCA/IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuZ2V0Qm91bnR5KGNvbnRleHQuZ2V0VGFyZ2V0VVVJRCgpKSA6IG51bGw7DQogICAgICAgIGphdmEudGV4dC5OdW1iZXJGb3JtYXQgbnVtYmVyRm9ybWF0ID0gamF2YS50ZXh0Lk51bWJlckZvcm1hdC5nZXROdW1iZXJJbnN0YW5jZShqYXZhLnV0aWwuTG9jYWxlLlVTKTsNCiAgICAgICAgYm9vbGVhbiB1c2VYcExldmVscyA9IHBsdWdpbi5nZXRDb25maWcoKS5nZXRCb29sZWFuKCJ1c2UteHAtbGV2ZWxzIiwgZmFsc2UpOw0KICAgICAgICBTdHJpbmcgYW5vbnltb3VzU3BvbnNvciA9IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgcGx1Z2luLmdldENvbmZpZygpLmdldFN0cmluZygiY3VzdG9tLXBsYWNlaG9sZGVycy5hbm9ueW1vdXMtc3BvbnNvciIsICIma3x8fHx8fHwiKSk7DQoNCiAgICAgICAgc3dpdGNoIChpZGVudGlmaWVyLnRvTG93ZXJDYXNlKCkpIHsNCiAgICAgICAgICAgIGNhc2UgInRhcmdldCI6DQogICAgICAgICAgICAgICAgaWYgKGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldFRhcmdldFVVSUQoKSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIE9mZmxpbmVQbGF5ZXIgdGFyZ2V0UGxheWVyID0gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIoY29udGV4dC5nZXRUYXJnZXRVVUlEKCkpOw0KICAgICAgICAgICAgICAgICAgICBTdHJpbmcgbmFtZSA9IHRhcmdldFBsYXllci5nZXROYW1lKCkgIT0gbnVsbCA/IHRhcmdldFBsYXllci5nZXROYW1lKCkgOiAiVW5rbm93biI7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBTdHJpbmcgZmFsbGJhY2sgPSBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0U3RyaW5nKCJjdXN0b20tcGxhY2Vob2xkZXJzLmJvdW50eS10YXJnZXQtZmFsbGJhY2siLCAiTm9uZSIpOw0KICAgICAgICAgICAgICAgIHJldHVybiBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIFBsYWNlaG9sZGVycy5hcHBseShmYWxsYmFjaywgY29udGV4dCkpOw0KICAgICAgICAgICAgY2FzZSAiYm91bnR5X2NvdW50IjoNCiAgICAgICAgICAgICAgICBpZiAoY29udGV4dCAhPSBudWxsICYmIGNvbnRleHQuZ2V0VGFyZ2V0VVVJRCgpICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlckZvcm1hdC5mb3JtYXQocGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5nZXRCb3VudGllc09uVGFyZ2V0KGNvbnRleHQuZ2V0VGFyZ2V0VVVJRCgpKS5zaXplKCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gIjAiOw0KICAgICAgICAgICAgY2FzZSAib25saW5lX3N0YXR1cyI6DQogICAgICAgICAgICAgICAgaWYgKGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldFRhcmdldFVVSUQoKSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIFBsYXllciB0YXJnZXRQbGF5ZXIgPSBCdWtraXQuZ2V0UGxheWVyKGNvbnRleHQuZ2V0VGFyZ2V0VVVJRCgpKTsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHN0YXR1cyA9IGNvbnRleHQuZ2V0T25saW5lU3RhdHVzKCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0T25saW5lU3RhdHVzKCkgOiAodGFyZ2V0UGxheWVyICE9IG51bGwgJiYgdGFyZ2V0UGxheWVyLmlzT25saW5lKCkgPyAiJmFPbmxpbmUiIDogIiZjT2ZmbGluZSIpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdHVzOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gIiI7DQogICAgICAgICAgICBjYXNlICJjbGFpbWVkIjoNCiAgICAgICAgICAgIGNhc2UgInN1cnZpdmVkIjoNCiAgICAgICAgICAgIGNhc2UgInRvdGFsbW9uZXllYXJuZWQiOg0KICAgICAgICAgICAgY2FzZSAidG90YWx4cGVhcm5lZCI6DQogICAgICAgICAgICBjYXNlICJ0b3RhbHZhbHVlZWFybmVkIjoNCiAgICAgICAgICAgICAgICBDb21wbGV0YWJsZUZ1dHVyZTw/PiBzdGF0RnV0dXJlOw0KICAgICAgICAgICAgICAgIHN3aXRjaCAoaWRlbnRpZmllci50b0xvd2VyQ2FzZSgpKSB7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgImNsYWltZWQiOg0KICAgICAgICAgICAgICAgICAgICAgICAgc3RhdEZ1dHVyZSA9IHBsdWdpbi5nZXRNeVNRTCgpLmdldENsYWltZWQocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgInN1cnZpdmVkIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRGdXR1cmUgPSBwbHVnaW4uZ2V0TXlTUUwoKS5nZXRTdXJ2aXZlZChwbGF5ZXIuZ2V0VW5pcXVlSWQoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAidG90YWxtb25leWVhcm5lZCI6DQogICAgICAgICAgICAgICAgICAgICAgICBzdGF0RnV0dXJlID0gcGx1Z2luLmdldE15U1FMKCkuZ2V0TW9uZXlFYXJuZWQocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgInRvdGFseHBlYXJuZWQiOg0KICAgICAgICAgICAgICAgICAgICAgICAgc3RhdEZ1dHVyZSA9IHBsdWdpbi5nZXRNeVNRTCgpLmdldFhQRWFybmVkKHBsYXllci5nZXRVbmlxdWVJZCgpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICBjYXNlICJ0b3RhbHZhbHVlZWFybmVkIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRGdXR1cmUgPSBwbHVnaW4uZ2V0TXlTUUwoKS5nZXRUb3RhbFZhbHVlRWFybmVkKHBsYXllci5nZXRVbmlxdWVJZCgpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBPYmplY3Qgc3RhdFZhbHVlID0gc3RhdEZ1dHVyZS5nZXQoKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRWYWx1ZSBpbnN0YW5jZW9mIERvdWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbmV5V2l0aENvbW1hcygoRG91YmxlKSBzdGF0VmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRWYWx1ZSBpbnN0YW5jZW9mIEludGVnZXIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJGb3JtYXQuZm9ybWF0KHN0YXRWYWx1ZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIGZldGNoIHN0YXQgIiArIGlkZW50aWZpZXIgKyAiIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAiMCI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiAiIjsNCiAgICAgICAgICAgIGNhc2UgImd1aV9pdGVtX2NvdW50IjoNCiAgICAgICAgICAgICAgICBBZGRJdGVtc0dVSSBndWkgPSBBZGRJdGVtc0dVSS5nZXRBY3RpdmVJbnN0YW5jZShwbGF5ZXIuZ2V0VW5pcXVlSWQoKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIGd1aSAhPSBudWxsID8gU3RyaW5nLnZhbHVlT2YoZ3VpLmdldEl0ZW1Db3VudCgpKSA6ICIwIjsNCiAgICAgICAgICAgIGNhc2UgImd1aV9pdGVtX3ZhbHVlIjoNCiAgICAgICAgICAgICAgICBndWkgPSBBZGRJdGVtc0dVSS5nZXRBY3RpdmVJbnN0YW5jZShwbGF5ZXIuZ2V0VW5pcXVlSWQoKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIGd1aSAhPSBudWxsID8gQ3VycmVuY3lVdGlsLmZvcm1hdE1vbmV5KGd1aS5nZXRJdGVtVmFsdWUoKSkgOiAiMC4wMCI7DQogICAgICAgICAgICBjYXNlICJpdGVtX25hbWUiOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRJdGVtTmFtZSgpICE9IG51bGwgPyBjb250ZXh0LmdldEl0ZW1OYW1lKCkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgIml0ZW1fdXNlcyI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldEl0ZW1Vc2VzKCkgIT0gbnVsbCA/IFN0cmluZy52YWx1ZU9mKGNvbnRleHQuZ2V0SXRlbVVzZXMoKSkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgInBsYXllciI6DQogICAgICAgICAgICAgICAgcmV0dXJuIHBsYXllci5nZXROYW1lKCk7DQogICAgICAgICAgICBjYXNlICJwbGF5ZXJfZGlzcGxheV9uYW1lIjoNCiAgICAgICAgICAgICAgICByZXR1cm4gcGxheWVyLmdldERpc3BsYXlOYW1lKCk7DQogICAgICAgICAgICBjYXNlICJwbGF5ZXJfbGV2ZWwiOg0KICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJGb3JtYXQuZm9ybWF0KHBsYXllci5nZXRMZXZlbCgpKTsNCiAgICAgICAgICAgIGNhc2UgInBsYXllcl9leHAiOg0KICAgICAgICAgICAgICAgIHJldHVybiB1c2VYcExldmVscyA/IG51bWJlckZvcm1hdC5mb3JtYXQocGxheWVyLmdldExldmVsKCkpIDogbnVtYmVyRm9ybWF0LmZvcm1hdChwbGF5ZXIuZ2V0VG90YWxFeHBlcmllbmNlKCkpOw0KICAgICAgICAgICAgY2FzZSAicGxheWVyX3giOg0KICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJGb3JtYXQuZm9ybWF0KHBsYXllci5nZXRMb2NhdGlvbigpLmdldEJsb2NrWCgpKTsNCiAgICAgICAgICAgIGNhc2UgInBsYXllcl95IjoNCiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyRm9ybWF0LmZvcm1hdChwbGF5ZXIuZ2V0TG9jYXRpb24oKS5nZXRCbG9ja1koKSk7DQogICAgICAgICAgICBjYXNlICJwbGF5ZXJfeiI6DQogICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlckZvcm1hdC5mb3JtYXQocGxheWVyLmdldExvY2F0aW9uKCkuZ2V0QmxvY2taKCkpOw0KICAgICAgICAgICAgY2FzZSAicGxheWVyX25hbWUiOg0KICAgICAgICAgICAgICAgIHJldHVybiBwbGF5ZXIuZ2V0TmFtZSgpOw0KICAgICAgICAgICAgY2FzZSAiYW1vdW50IjoNCiAgICAgICAgICAgIGNhc2UgImNvc3QiOg0KICAgICAgICAgICAgICAgIGlmIChjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRCb3VudHlBbW91bnQoKSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb25leVdpdGhDb21tYXMoY29udGV4dC5nZXRCb3VudHlBbW91bnQoKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiAiIjsNCiAgICAgICAgICAgIGNhc2UgInRheCI6DQogICAgICAgICAgICAgICAgaWYgKGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldFRheEFtb3VudCgpICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbmV5V2l0aENvbW1hcyhjb250ZXh0LmdldFRheEFtb3VudCgpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuICIiOw0KICAgICAgICAgICAgY2FzZSAidG90YWxfYW1vdW50IjoNCiAgICAgICAgICAgIGNhc2UgInRvdGFsX2JvdW50eSI6DQogICAgICAgICAgICAgICAgaWYgKGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldFRvdGFsQm91bnR5QW1vdW50KCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWRlbnRpZmllci5lcXVhbHNJZ25vcmVDYXNlKCJ0b3RhbF9ib3VudHkiKSA/DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyRm9ybWF0LmZvcm1hdChjb250ZXh0LmdldFRvdGFsQm91bnR5QW1vdW50KCkuaW50VmFsdWUoKSkgOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdE1vbmV5V2l0aENvbW1hcyhjb250ZXh0LmdldFRvdGFsQm91bnR5QW1vdW50KCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gIiI7DQogICAgICAgICAgICBjYXNlICJzcG9uc29yIjoNCiAgICAgICAgICAgICAgICBpZiAoY29udGV4dCAhPSBudWxsICYmIGNvbnRleHQuZ2V0U2V0dGVyVVVJRCgpICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgQm91bnR5IHRhcmdldEJvdW50eSA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuZ2V0Qm91bnR5KGNvbnRleHQuZ2V0VGFyZ2V0VVVJRCgpKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEJvdW50eSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBPcHRpb25hbDxCb3VudHkuU3BvbnNvcj4gc3BvbnNvciA9IHRhcmdldEJvdW50eS5nZXRTcG9uc29ycygpLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIocyAtPiBzLmdldFBsYXllclVVSUQoKS5lcXVhbHMoY29udGV4dC5nZXRTZXR0ZXJVVUlEKCkpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZEZpcnN0KCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3BvbnNvci5pc1ByZXNlbnQoKSAmJiBzcG9uc29yLmdldCgpLmlzQW5vbnltb3VzKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5vbnltb3VzU3BvbnNvcjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBPZmZsaW5lUGxheWVyIHNldHRlciA9IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVyKGNvbnRleHQuZ2V0U2V0dGVyVVVJRCgpKTsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIG5hbWUgPSBzZXR0ZXIuZ2V0TmFtZSgpICE9IG51bGwgPyBzZXR0ZXIuZ2V0TmFtZSgpIDogIlVua25vd24iOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuICIiOw0KICAgICAgICAgICAgY2FzZSAic2V0X3RpbWUiOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRTZXRUaW1lKCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0U2V0VGltZSgpIDogIiI7DQogICAgICAgICAgICBjYXNlICJleHBpcmVfdGltZSI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldEV4cGlyZVRpbWUoKSAhPSBudWxsID8gY29udGV4dC5nZXRFeHBpcmVUaW1lKCkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgInRvdGFsX2V4cGlyZV90aW1lIjoNCiAgICAgICAgICAgICAgICBpZiAoY29udGV4dCAhPSBudWxsICYmIGNvbnRleHQuZ2V0VGFyZ2V0VVVJRCgpICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgQm91bnR5IHRhcmdldEJvdW50eSA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuZ2V0Qm91bnR5KGNvbnRleHQuZ2V0VGFyZ2V0VVVJRCgpKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEJvdW50eSAhPSBudWxsICYmICF0YXJnZXRCb3VudHkuaXNQZXJtYW5lbnQoKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgbG9uZyB0b3RhbE1pbnV0ZXMgPSB0YXJnZXRCb3VudHkuZ2V0U3BvbnNvcnMoKS5zdHJlYW0oKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwVG9Mb25nKHNwb25zb3IgLT4gc3BvbnNvci5nZXRFeHBpcmVUaW1lKCkgPiAwID8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3BvbnNvci5nZXRFeHBpcmVUaW1lKCkgLSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSkgLyAoNjAgKiAxMDAwKSA6IDApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdW0oKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0b3RhbE1pbnV0ZXMgPiAwID8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGltZUZvcm1hdHRlci5mb3JtYXRNaW51dGVzVG9SZWFkYWJsZSgoaW50KSB0b3RhbE1pbnV0ZXMsIGZhbHNlKSA6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgcGx1Z2luLmdldENvbmZpZygpLmdldFN0cmluZygiY3VzdG9tLXBsYWNlaG9sZGVycy5ib3VudHktc3RhdHVzLW5vLWV4cGlyYXRpb24iLCAiTm8gZXhwaXJhdGlvbiIpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0U3RyaW5nKCJjdXN0b20tcGxhY2Vob2xkZXJzLmJvdW50eS1zdGF0dXMtbm8tZXhwaXJhdGlvbiIsICJObyBleHBpcmF0aW9uIikpOw0KICAgICAgICAgICAgY2FzZSAibXVsdGlwbGllciI6DQogICAgICAgICAgICAgICAgaWYgKGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldE11bHRpcGxpZXIoKSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZm9ybWF0KCIlLjFmIiwgY29udGV4dC5nZXRNdWx0aXBsaWVyKCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gIiI7DQogICAgICAgICAgICBjYXNlICJraWxsZXIiOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRLaWxsZXJOYW1lKCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0S2lsbGVyTmFtZSgpIDogIiI7DQogICAgICAgICAgICBjYXNlICJraWxsZWQiOg0KICAgICAgICAgICAgICAgIGlmIChjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRUYXJnZXRVVUlEKCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBPZmZsaW5lUGxheWVyIGtpbGxlZCA9IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVyKGNvbnRleHQuZ2V0VGFyZ2V0VVVJRCgpKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtpbGxlZC5nZXROYW1lKCkgIT0gbnVsbCA/IGtpbGxlZC5nZXROYW1lKCkgOiAiVW5rbm93biI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiAiIjsNCiAgICAgICAgICAgIGNhc2UgImRlYXRoX3RpbWUiOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXREZWF0aFRpbWUoKSAhPSBudWxsID8gY29udGV4dC5nZXREZWF0aFRpbWUoKSA6ICIiOw0KICAgICAgICAgICAgY2FzZSAic3BvbnNvcl9saXN0IjoNCiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dCAhPSBudWxsICYmIGNvbnRleHQuZ2V0U2V0dGVyTGlzdCgpICE9IG51bGwgPyBjb250ZXh0LmdldFNldHRlckxpc3QoKSA6ICIiOw0KICAgICAgICAgICAgY2FzZSAibW9uZXlfdmFsdWUiOg0KICAgICAgICAgICAgICAgIGlmIChjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRNb25leVZhbHVlKCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9uZXlXaXRoQ29tbWFzKGNvbnRleHQuZ2V0TW9uZXlWYWx1ZSgpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuICIiOw0KICAgICAgICAgICAgY2FzZSAiZXhwX3ZhbHVlIjoNCiAgICAgICAgICAgIGNhc2UgInRvdGFsX2V4cCI6DQogICAgICAgICAgICAgICAgaWYgKGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldEV4cFZhbHVlKCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlWHBMZXZlbHMgPyBudW1iZXJGb3JtYXQuZm9ybWF0KGNvbnRleHQuZ2V0RXhwVmFsdWUoKSkgKyAiIGxldmVscyIgOiBudW1iZXJGb3JtYXQuZm9ybWF0KGNvbnRleHQuZ2V0RXhwVmFsdWUoKSkgKyAiIFhQIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuICIwIjsNCiAgICAgICAgICAgIGNhc2UgImxldmVscyI6DQogICAgICAgICAgICAgICAgaWYgKGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldEV4cFZhbHVlKCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyRm9ybWF0LmZvcm1hdChjb250ZXh0LmdldEV4cFZhbHVlKCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gIjAiOw0KICAgICAgICAgICAgY2FzZSAiZHVyYXRpb24iOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRUaW1lVmFsdWUoKSAhPSBudWxsID8gY29udGV4dC5nZXRUaW1lVmFsdWUoKSA6ICIiOw0KICAgICAgICAgICAgY2FzZSAiaXRlbV92YWx1ZSI6DQogICAgICAgICAgICAgICAgaWYgKGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldEl0ZW1WYWx1ZSgpICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbmV5V2l0aENvbW1hcyhjb250ZXh0LmdldEl0ZW1WYWx1ZSgpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuICIiOw0KICAgICAgICAgICAgY2FzZSAiaXRlbV9jb3VudCI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldEl0ZW1Db3VudCgpICE9IG51bGwgPyBudW1iZXJGb3JtYXQuZm9ybWF0KGNvbnRleHQuZ2V0SXRlbUNvdW50KCkpIDogIiI7DQogICAgICAgICAgICBjYXNlICJ0YXhfcmF0ZSI6DQogICAgICAgICAgICAgICAgaWYgKGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldFRheFJhdGUoKSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZm9ybWF0KCIlLjFmIiwgY29udGV4dC5nZXRUYXhSYXRlKCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gIiI7DQogICAgICAgICAgICBjYXNlICJyZWZ1bmQiOg0KICAgICAgICAgICAgICAgIGlmIChjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRSZWZ1bmRBbW91bnQoKSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb25leVdpdGhDb21tYXMoY29udGV4dC5nZXRSZWZ1bmRBbW91bnQoKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiAiIjsNCiAgICAgICAgICAgIGNhc2UgImZpbHRlcl9zdGF0dXMiOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRGaWx0ZXJTdGF0dXMoKSAhPSBudWxsID8gY29udGV4dC5nZXRGaWx0ZXJTdGF0dXMoKSA6ICIiOw0KICAgICAgICAgICAgY2FzZSAiZmlsdGVyX2RldGFpbHMiOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRGaWx0ZXJEZXRhaWxzKCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0RmlsdGVyRGV0YWlscygpIDogIiI7DQogICAgICAgICAgICBjYXNlICJjdXJyZW50X3BhZ2UiOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRDdXJyZW50UGFnZSgpICE9IG51bGwgPyBudW1iZXJGb3JtYXQuZm9ybWF0KGNvbnRleHQuZ2V0Q3VycmVudFBhZ2UoKSArIDEpIDogIiI7DQogICAgICAgICAgICBjYXNlICJ0b3RhbF9wYWdlcyI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldFRvdGFsUGFnZXMoKSAhPSBudWxsID8gbnVtYmVyRm9ybWF0LmZvcm1hdChjb250ZXh0LmdldFRvdGFsUGFnZXMoKSkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgInRpbWUiOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRUaW1lKCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0VGltZSgpIDogIiI7DQogICAgICAgICAgICBjYXNlICJib29zdF90aW1lIjoNCiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dCAhPSBudWxsICYmIGNvbnRleHQuZ2V0Qm9vc3RUaW1lKCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0Qm9vc3RUaW1lKCkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgInVuaXQiOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRVbml0KCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0VW5pdCgpIDogIiI7DQogICAgICAgICAgICBjYXNlICJtb25leV9saW5lIjoNCiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dCAhPSBudWxsICYmIGNvbnRleHQuZ2V0TW9uZXlMaW5lKCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0TW9uZXlMaW5lKCkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgImV4cGVyaWVuY2VfbGluZSI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldEV4cGVyaWVuY2VMaW5lKCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0RXhwZXJpZW5jZUxpbmUoKSA6ICIiOw0KICAgICAgICAgICAgY2FzZSAic3BvbnNvcnMiOg0KICAgICAgICAgICAgICAgIGlmIChib3VudHkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gc3BvbnNvck5hbWVzID0gYm91bnR5LmdldFNwb25zb3JzKCkuc3RyZWFtKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKHNwb25zb3IgLT4gc3BvbnNvci5pc0Fub255bW91cygpID8gYW5vbnltb3VzU3BvbnNvciA6IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVyKHNwb25zb3IuZ2V0UGxheWVyVVVJRCgpKS5nZXROYW1lKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBzcG9uc29yTmFtZXMuaXNFbXB0eSgpID8gIk5vbmUiIDogU3RyaW5nLmpvaW4oIiwgIiwgc3BvbnNvck5hbWVzKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuICJOb25lIjsNCiAgICAgICAgICAgIGNhc2UgInBvb2wiOg0KICAgICAgICAgICAgY2FzZSAidG90YWxfcG9vbCI6DQogICAgICAgICAgICAgICAgaWYgKGJvdW50eSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb25leVdpdGhDb21tYXMoYm91bnR5LmdldEN1cnJlbnRQb29sKCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gIjAuMDAiOw0KICAgICAgICAgICAgY2FzZSAiZXhwaXJ5IjoNCiAgICAgICAgICAgICAgICBpZiAoYm91bnR5ICE9IG51bGwgJiYgIWJvdW50eS5pc1Blcm1hbmVudCgpKSB7DQogICAgICAgICAgICAgICAgICAgIGxvbmcgcmVtYWluaW5nTWludXRlcyA9IGJvdW50eS5nZXRDdXJyZW50RHVyYXRpb25NaW51dGVzKCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBUaW1lRm9ybWF0dGVyLmZvcm1hdE1pbnV0ZXNUb1JlYWRhYmxlKChpbnQpIHJlbWFpbmluZ01pbnV0ZXMsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgcGx1Z2luLmdldENvbmZpZygpLmdldFN0cmluZygiY3VzdG9tLXBsYWNlaG9sZGVycy5ib3VudHktc3RhdHVzLW5vLWV4cGlyYXRpb24iLCAiTm8gZXhwaXJhdGlvbiIpKTsNCiAgICAgICAgICAgIGNhc2UgInRvcDNfc3BvbnNvcnNfY29tbWFzIjoNCiAgICAgICAgICAgIGNhc2UgInRvcDVfc3BvbnNvcnNfY29tbWFzIjoNCiAgICAgICAgICAgIGNhc2UgInRvcDEwX3Nwb25zb3JzX2NvbW1hcyI6DQogICAgICAgICAgICAgICAgaWYgKGJvdW50eSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIGludCBsaW1pdCA9IGlkZW50aWZpZXIuZXF1YWxzSWdub3JlQ2FzZSgidG9wM19zcG9uc29yc19jb21tYXMiKSA/IDMgOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXIuZXF1YWxzSWdub3JlQ2FzZSgidG9wNV9zcG9uc29yc19jb21tYXMiKSA/IDUgOiAxMDsNCiAgICAgICAgICAgICAgICAgICAgTGlzdDxCb3VudHkuU3BvbnNvcj4gdG9wU3BvbnNvcnMgPSBib3VudHkuZ2V0VG9wU3BvbnNvcnMobGltaXQpOw0KICAgICAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gZW5lbWllcyA9IHRvcFNwb25zb3JzLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChzcG9uc29yIC0+IHNwb25zb3IuaXNBbm9ueW1vdXMoKSA/IGFub255bW91c1Nwb25zb3IgOiBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcihzcG9uc29yLmdldFBsYXllclVVSUQoKSkuZ2V0TmFtZSgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5lbWllcy5pc0VtcHR5KCkgPyAiTm9uZSIgOiBTdHJpbmcuam9pbigiLCAiLCBlbmVtaWVzKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuICJOb25lIjsNCiAgICAgICAgICAgIGNhc2UgImh1bnRlcnMiOg0KICAgICAgICAgICAgICAgIGlmIChib3VudHkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyRm9ybWF0LmZvcm1hdChib3VudHkuZ2V0U3BvbnNvcnMoKS5zaXplKCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gIjAiOw0KICAgICAgICAgICAgY2FzZSAiZnJlbnp5IjoNCiAgICAgICAgICAgICAgICByZXR1cm4gcGx1Z2luLmdldEZyZW56eSgpICE9IG51bGwgJiYgcGx1Z2luLmdldEZyZW56eSgpLmlzRnJlbnp5QWN0aXZlKCkgPw0KICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nLmZvcm1hdCgiJS4xZiIsIHBsdWdpbi5nZXRGcmVuenkoKS5nZXRGcmVuenlNdWx0aXBsaWVyKCkpIDogIjEuMCI7DQogICAgICAgICAgICBjYXNlICJib29zdCI6DQogICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5nZXRCb29zdGVkQm91bnR5KCkgIT0gbnVsbCAmJiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRUYXJnZXRVVUlEKCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBVVUlEIGJvb3N0ZWRUYXJnZXQgPSBwbHVnaW4uZ2V0Qm9vc3RlZEJvdW50eSgpLmdldEN1cnJlbnRCb29zdGVkVGFyZ2V0KCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBib29zdGVkVGFyZ2V0ICE9IG51bGwgJiYgYm9vc3RlZFRhcmdldC5lcXVhbHMoY29udGV4dC5nZXRUYXJnZXRVVUlEKCkpID8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcuZm9ybWF0KCIlLjFmIiwgcGx1Z2luLmdldEJvb3N0ZWRCb3VudHkoKS5nZXRDdXJyZW50Qm9vc3RNdWx0aXBsaWVyKGNvbnRleHQuZ2V0VGFyZ2V0VVVJRCgpKSkgOiAiMS4wIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuICIxLjAiOw0KICAgICAgICAgICAgY2FzZSAiYm9vc3RfcHJlZml4IjoNCiAgICAgICAgICAgICAgICBpZiAocGx1Z2luLmdldENvbmZpZygpLmdldEJvb2xlYW4oInRhYmxpc3QtbW9kaWZpY2F0aW9uLmVuYWJsZWQiLCBmYWxzZSkgJiYgcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5oYXNCb3VudHkocGxheWVyLmdldFVuaXF1ZUlkKCkpKSB7DQogICAgICAgICAgICAgICAgICAgIFN0cmluZyBmb3JtYXQgPSBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0U3RyaW5nKCJ0YWJsaXN0LW1vZGlmaWNhdGlvbi5mb3JtYXQiLCAiJmNbQm91bnR5XSAlcGxheWVyJSIpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGxhY2Vob2xkZXJzLmFwcGx5KGZvcm1hdCwgY29udGV4dCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiAiIjsNCiAgICAgICAgICAgIGNhc2UgIm5leHRfZnJlbnp5X2luZm8iOg0KICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uZ2V0RnJlbnp5KCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBsb25nIHRpbWVVbnRpbE5leHQgPSBwbHVnaW4uZ2V0RnJlbnp5KCkuZ2V0VGltZVVudGlsTmV4dEZyZW56eSgpOw0KICAgICAgICAgICAgICAgICAgICBpZiAodGltZVVudGlsTmV4dCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiJmPihpIgJmZJbiAiICsgVGltZUZvcm1hdHRlci5mb3JtYXRUaW1lUmVtYWluaW5nKHRpbWVVbnRpbE5leHQpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICImY+KGkiAmY0ZyZW56eSBpbmNvbWluZyEiOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiAiJjfihpIgJjhGcmVuenkgZGlzYWJsZWQiOw0KICAgICAgICAgICAgY2FzZSAibmV4dF9ib29zdF9pbmZvIjoNCiAgICAgICAgICAgICAgICBpZiAocGx1Z2luLmdldEJvb3N0ZWRCb3VudHkoKSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIGxvbmcgdGltZVVudGlsTmV4dCA9IHBsdWdpbi5nZXRCb29zdGVkQm91bnR5KCkuZ2V0VGltZVVudGlsTmV4dEJvb3N0KCk7DQogICAgICAgICAgICAgICAgICAgIGlmICh0aW1lVW50aWxOZXh0ID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICImYuKGkiAmZkluICIgKyBUaW1lRm9ybWF0dGVyLmZvcm1hdFRpbWVSZW1haW5pbmcodGltZVVudGlsTmV4dCk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIiZi4oaSICZhQm9vc3QgaW5jb21pbmchIjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gIiY34oaSICY4Qm9vc3QgZGlzYWJsZWQiOw0KICAgICAgICAgICAgY2FzZSAiZXJyb3IiOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRFcnJvcigpICE9IG51bGwgPyBjb250ZXh0LmdldEVycm9yKCkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgIml0ZW0iOg0KICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRJdGVtKCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0SXRlbSgpIDogIiI7DQogICAgICAgICAgICBjYXNlICJzZW5kZXIiOg0KICAgICAgICAgICAgICAgIGlmIChjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5nZXRTZW5kZXIoKSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIE9mZmxpbmVQbGF5ZXIgc2VuZGVyID0gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIoY29udGV4dC5nZXRTZW5kZXIoKSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZW5kZXIuZ2V0TmFtZSgpICE9IG51bGwgPyBzZW5kZXIuZ2V0TmFtZSgpIDogIlVua25vd24iOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gIiI7DQogICAgICAgICAgICBjYXNlICJtYXRlcmlhbCI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgIT0gbnVsbCAmJiBjb250ZXh0LmdldE1hdGVyaWFsKCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0TWF0ZXJpYWwoKSA6ICIiOw0KICAgICAgICAgICAgY2FzZSAiYnV0dG9uIjoNCiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dCAhPSBudWxsICYmIGNvbnRleHQuZ2V0QnV0dG9uKCkgIT0gbnVsbCA/IGNvbnRleHQuZ2V0QnV0dG9uKCkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgImFub255bW91c19jb3N0IjoNCiAgICAgICAgICAgICAgICBpZiAoY29udGV4dCAhPSBudWxsICYmIGNvbnRleHQuZ2V0QW5vbnltb3VzQ29zdCgpICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbmV5V2l0aENvbW1hcyhjb250ZXh0LmdldEFub255bW91c0Nvc3QoKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiAiIjsNCiAgICAgICAgICAgIGNhc2UgImlucHV0IjoNCiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dCAhPSBudWxsICYmIGNvbnRleHQuZ2V0SW5wdXQoKSAhPSBudWxsID8gY29udGV4dC5nZXRJbnB1dCgpIDogIiI7DQogICAgICAgICAgICBjYXNlICJ0b3AzX3Nwb25zb3JzX251bWJlcmVkIjoNCiAgICAgICAgICAgIGNhc2UgInRvcDVfc3BvbnNvcnNfbnVtYmVyZWQiOg0KICAgICAgICAgICAgY2FzZSAidG9wMTBfc3BvbnNvcnNfbnVtYmVyZWQiOg0KICAgICAgICAgICAgICAgIGlmIChib3VudHkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBpbnQgbGltaXQgPSBpZGVudGlmaWVyLmVxdWFsc0lnbm9yZUNhc2UoInRvcDNfc3BvbnNvcnNfbnVtYmVyZWQiKSA/IDMgOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXIuZXF1YWxzSWdub3JlQ2FzZSgidG9wNV9zcG9uc29yc19udW1iZXJlZCIpID8gNSA6IDEwOw0KICAgICAgICAgICAgICAgICAgICBMaXN0PEJvdW50eS5TcG9uc29yPiB0b3BTcG9uc29ycyA9IGJvdW50eS5nZXRUb3BTcG9uc29ycyhsaW1pdCk7DQogICAgICAgICAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgc3BvbnNvcnMgPSBuZXcgU3RyaW5nQnVpbGRlcigpOw0KICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHRvcFNwb25zb3JzLnNpemUoKTsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBCb3VudHkuU3BvbnNvciBzcG9uc29yID0gdG9wU3BvbnNvcnMuZ2V0KGkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nIG5hbWUgPSBzcG9uc29yLmlzQW5vbnltb3VzKCkgPyBhbm9ueW1vdXNTcG9uc29yIDogQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIoc3BvbnNvci5nZXRQbGF5ZXJVVUlEKCkpLmdldE5hbWUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNwb25zb3JzLmFwcGVuZChpICsgMSkuYXBwZW5kKCIuICIpLmFwcGVuZChuYW1lKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIDwgdG9wU3BvbnNvcnMuc2l6ZSgpIC0gMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwb25zb3JzLmFwcGVuZCgiLCAiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3BvbnNvcnMubGVuZ3RoKCkgPiAwID8gc3BvbnNvcnMudG9TdHJpbmcoKSA6ICJOb25lIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuICJOb25lIjsNCiAgICAgICAgICAgIGNhc2UgIm9yaWdpbmFsX21vbmV5IjoNCiAgICAgICAgICAgICAgICByZXR1cm4gYm91bnR5ICE9IG51bGwgPyBmb3JtYXRNb25leVdpdGhDb21tYXMoYm91bnR5LmdldE9yaWdpbmFsTW9uZXkoKSkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgInByaWNlX2luY3JlYXNlX3BlcmNlbnQiOg0KICAgICAgICAgICAgICAgIHJldHVybiBib3VudHkgIT0gbnVsbCA/IFN0cmluZy5mb3JtYXQoIiUuMWYiLCBib3VudHkuZ2V0UHJpY2VJbmNyZWFzZVBlcmNlbnQoKSkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgIm9yaWdpbmFsX2l0ZW1fY291bnQiOg0KICAgICAgICAgICAgICAgIHJldHVybiBib3VudHkgIT0gbnVsbCA/IG51bWJlckZvcm1hdC5mb3JtYXQoYm91bnR5LmdldE9yaWdpbmFsSXRlbXMoKS5zaXplKCkpIDogIiI7DQogICAgICAgICAgICBjYXNlICJvcmlnaW5hbF9pdGVtX3ZhbHVlIjoNCiAgICAgICAgICAgICAgICByZXR1cm4gYm91bnR5ICE9IG51bGwgPyBmb3JtYXRNb25leVdpdGhDb21tYXMoYm91bnR5LmdldE9yaWdpbmFsSXRlbVZhbHVlKCkpIDogIiI7DQogICAgICAgICAgICBjYXNlICJpdGVtX2luY3JlYXNlX3BlcmNlbnQiOg0KICAgICAgICAgICAgICAgIHJldHVybiBib3VudHkgIT0gbnVsbCA/IFN0cmluZy5mb3JtYXQoIiUuMWYiLCBib3VudHkuZ2V0SXRlbUluY3JlYXNlUGVyY2VudCgpKSA6ICIiOw0KICAgICAgICAgICAgY2FzZSAib3JpZ2luYWxfeHAiOg0KICAgICAgICAgICAgICAgIHJldHVybiBib3VudHkgIT0gbnVsbCA/IG51bWJlckZvcm1hdC5mb3JtYXQoYm91bnR5LmdldE9yaWdpbmFsWFAoKSkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgInhwbGV2ZWxfaW5jcmVhc2VfcGVyY2VudCI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGJvdW50eSAhPSBudWxsID8gU3RyaW5nLmZvcm1hdCgiJS4xZiIsIGJvdW50eS5nZXRYUExldmVsSW5jcmVhc2VQZXJjZW50KCkpIDogIiI7DQogICAgICAgICAgICBjYXNlICJvcmlnaW5hbF9kdXJhdGlvbiI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGJvdW50eSAhPSBudWxsID8gYm91bnR5LmdldEZvcm1hdHRlZE9yaWdpbmFsRHVyYXRpb24oKSA6ICIiOw0KICAgICAgICAgICAgY2FzZSAiYm91bnR5ZHVyYXRpb25faW5jcmVhc2VfcGVyY2VudCI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGJvdW50eSAhPSBudWxsID8gU3RyaW5nLmZvcm1hdCgiJS4xZiIsIGJvdW50eS5nZXREdXJhdGlvbkluY3JlYXNlUGVyY2VudCgpKSA6ICIiOw0KICAgICAgICAgICAgY2FzZSAib3JpZ2luYWxfcG9vbCI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGJvdW50eSAhPSBudWxsID8gZm9ybWF0TW9uZXlXaXRoQ29tbWFzKGJvdW50eS5nZXRPcmlnaW5hbFBvb2woKSkgOiAiIjsNCiAgICAgICAgICAgIGNhc2UgInBvb2xfaW5jcmVhc2VfcGVyY2VudCI6DQogICAgICAgICAgICAgICAgcmV0dXJuIGJvdW50eSAhPSBudWxsID8gU3RyaW5nLmZvcm1hdCgiJS4xZiIsIGJvdW50eS5nZXRQb29sSW5jcmVhc2VQZXJjZW50KCkpIDogIiI7DQogICAgICAgICAgICBjYXNlICJib3VudHlfdGFibmFtZSI6DQogICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5nZXRDb25maWcoKS5nZXRCb29sZWFuKCJ0YWJsaXN0LW1vZGlmaWNhdGlvbi5lbmFibGVkIiwgZmFsc2UpICYmIHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuaGFzQm91bnR5KHBsYXllci5nZXRVbmlxdWVJZCgpKSkgew0KICAgICAgICAgICAgICAgICAgICBTdHJpbmcgZm9ybWF0ID0gcGx1Z2luLmdldENvbmZpZygpLmdldFN0cmluZygidGFibGlzdC1tb2RpZmljYXRpb24uZm9ybWF0IiwgIiZjW0JvdW50eV0gJXBsYXllciUiKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBsYWNlaG9sZGVycy5hcHBseShmb3JtYXQsIGNvbnRleHQpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gcGxheWVyLmdldE5hbWUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiW0RFQlVHXSBVbmtub3duIHBsYWNlaG9sZGVyOiAiICsgaWRlbnRpZmllcik7DQogICAgICAgIHJldHVybiBudWxsOw0KICAgIH0NCnb255MjYvYm91bnRpZXNQbHVzL3V0aWxzL1BsYXllckRlYXRoTGlzdGVuZXIuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMjc0MzYgMTUwMjYwNjMwMzIgMDIxMDExACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlsczsNCg0KaW1wb3J0IG9yZy5idWtraXQuQnVra2l0Ow0KaW1wb3J0IG9yZy5idWtraXQuQ2hhdENvbG9yOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LkV2ZW50SGFuZGxlcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50Lkxpc3RlbmVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuZW50aXR5LlBsYXllckRlYXRoRXZlbnQ7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudGllc1BsdXM7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudHlNYW5hZ2VyOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuQm91bnR5VGVhbUNoZWNrOw0KDQppbXBvcnQgamF2YS51dGlsLio7DQppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuQ29tcGxldGFibGVGdXR1cmU7DQoNCnB1YmxpYyBjbGFzcyBQbGF5ZXJEZWF0aExpc3RlbmVyIGltcGxlbWVudHMgTGlzdGVuZXIgew0KDQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KDQogICAgLyoqDQogICAgICogSW5pdGlhbGl6ZXMgdGhlIHBsYXllciBkZWF0aCBsaXN0ZW5lcg0KICAgICAqIC8vIG5vdGU6IFNldHMgdXAgdGhlIGxpc3RlbmVyIGZvciBwcm9jZXNzaW5nIGJvdW50eSBjbGFpbXMgb24gcGxheWVyIGRlYXRoDQogICAgICovDQogICAgcHVibGljIFBsYXllckRlYXRoTGlzdGVuZXIoQm91bnRpZXNQbHVzIHBsdWdpbiwgRXZlbnRNYW5hZ2VyIGV2ZW50TWFuYWdlcikgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICAgICAgZXZlbnRNYW5hZ2VyLnJlZ2lzdGVyKHRoaXMpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEhhbmRsZXMgcGxheWVyIGRlYXRoIGV2ZW50cw0KICAgICAqIC8vIG5vdGU6IFByb2Nlc3NlcyBib3VudHkgY2xhaW1zIGFuZCB1cGRhdGVzIHN0YXRzIGZvciBraWxsZXIgYW5kIHZpY3RpbQ0KICAgICAqLw0KICAgIEBFdmVudEhhbmRsZXINCiAgICBwdWJsaWMgdm9pZCBvblBsYXllckRlYXRoKFBsYXllckRlYXRoRXZlbnQgZXZlbnQpIHsNCiAgICAgICAgUGxheWVyIHZpY3RpbSA9IGV2ZW50LmdldEVudGl0eSgpOw0KICAgICAgICBQbGF5ZXIga2lsbGVyID0gdmljdGltLmdldEtpbGxlcigpOw0KICAgICAgICBCb3VudHlNYW5hZ2VyIGJvdW50eU1hbmFnZXIgPSBwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpOw0KDQogICAgICAgIGlmIChraWxsZXIgPT0gbnVsbCB8fCBraWxsZXIuZXF1YWxzKHZpY3RpbSkpIHJldHVybjsNCg0KICAgICAgICAvLyBDaGVjayBpZiBwbGF5ZXJzIGFyZSBpbiB0aGUgc2FtZSBncm91cA0KICAgICAgICBCb3VudHlUZWFtQ2hlY2sgdGVhbUNoZWNrID0gbmV3IEJvdW50eVRlYW1DaGVjayhwbHVnaW4pOw0KICAgICAgICBpZiAodGVhbUNoZWNrLmFyZVBsYXllcnNJblNhbWVHcm91cChraWxsZXIsIHZpY3RpbSkpIHsNCiAgICAgICAgICAgIHJldHVybjsgLy8gRXJyb3IgbWVzc2FnZSBzZW50IGJ5IEJvdW50eVRlYW1DaGVjaw0KICAgICAgICB9DQoNCiAgICAgICAgVVVJRCB2aWN0aW1VVUlEID0gdmljdGltLmdldFVuaXF1ZUlkKCk7DQogICAgICAgIFVVSUQga2lsbGVyVVVJRCA9IGtpbGxlci5nZXRVbmlxdWVJZCgpOw0KDQogICAgICAgIGlmICghYm91bnR5TWFuYWdlci5oYXNCb3VudHkodmljdGltVVVJRCkpIHJldHVybjsNCg0KICAgICAgICBNYXA8VVVJRCwgSW50ZWdlcj4gYm91bnRpZXMgPSBib3VudHlNYW5hZ2VyLmdldEJvdW50aWVzT25UYXJnZXQodmljdGltVVVJRCk7DQogICAgICAgIGRvdWJsZSB0b3RhbE1vbmV5ID0gYm91bnRpZXMudmFsdWVzKCkuc3RyZWFtKCkubWFwVG9Eb3VibGUoSW50ZWdlcjo6aW50VmFsdWUpLnN1bSgpOw0KICAgICAgICBkb3VibGUgdG90YWxJdGVtVmFsdWUgPSBib3VudGllcy5rZXlTZXQoKS5zdHJlYW0oKQ0KICAgICAgICAgICAgICAgIC5tYXBUb0RvdWJsZShzZXR0ZXJVVUlEIC0+IGJvdW50eU1hbmFnZXIuZ2V0Qm91bnR5SXRlbXModmljdGltVVVJRCwgc2V0dGVyVVVJRCkuc3RyZWFtKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXBUb0RvdWJsZShpdGVtIC0+IHBsdWdpbi5nZXRJdGVtVmFsdWVDYWxjdWxhdG9yKCkuY2FsY3VsYXRlSXRlbVZhbHVlKGl0ZW0pKS5zdW0oKSkNCiAgICAgICAgICAgICAgICAuc3VtKCk7DQogICAgICAgIGRvdWJsZSB0b3RhbFZhbHVlRWFybmVkID0gdG90YWxNb25leSArIHRvdGFsSXRlbVZhbHVlOw0KDQogICAgICAgIGRvdWJsZSBtYW51YWxNb25leUJvb3N0ID0gYm91bnR5TWFuYWdlci5nZXRNYW51YWxNb25leUJvb3N0TXVsdGlwbGllcih2aWN0aW1VVUlEKTsNCiAgICAgICAgZG91YmxlIG1hbnVhbFhwQm9vc3QgPSBib3VudHlNYW5hZ2VyLmdldE1hbnVhbFhwQm9vc3RNdWx0aXBsaWVyKHZpY3RpbVVVSUQpOw0KICAgICAgICBkb3VibGUgYm9vc3RlZEFtb3VudCA9IHRvdGFsTW9uZXkgKiBtYW51YWxNb25leUJvb3N0Ow0KICAgICAgICBpbnQgeHBSZXdhcmQgPSBtYW51YWxYcEJvb3N0ID4gMS4wID8gKGludCkgKHRvdGFsTW9uZXkgKiBtYW51YWxYcEJvb3N0ICogMC4xKSA6IDA7DQoNCiAgICAgICAgQ29tcGxldGFibGVGdXR1cmUucnVuQXN5bmMoKCkgLT4gew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBpbnQgY3VycmVudENsYWltZWQgPSBwbHVnaW4uZ2V0TXlTUUwoKS5nZXRDbGFpbWVkKGtpbGxlclVVSUQpLmdldCgpOw0KICAgICAgICAgICAgICAgIGludCBjdXJyZW50U3Vydml2ZWQgPSBwbHVnaW4uZ2V0TXlTUUwoKS5nZXRTdXJ2aXZlZCh2aWN0aW1VVUlEKS5nZXQoKTsNCiAgICAgICAgICAgICAgICBkb3VibGUgY3VycmVudE1vbmV5RWFybmVkID0gcGx1Z2luLmdldE15U1FMKCkuZ2V0TW9uZXlFYXJuZWQoa2lsbGVyVVVJRCkuZ2V0KCk7DQogICAgICAgICAgICAgICAgaW50IGN1cnJlbnRYUEVhcm5lZCA9IHBsdWdpbi5nZXRNeVNRTCgpLmdldFhQRWFybmVkKGtpbGxlclVVSUQpLmdldCgpOw0KICAgICAgICAgICAgICAgIGRvdWJsZSBjdXJyZW50VG90YWxWYWx1ZUVhcm5lZCA9IHBsdWdpbi5nZXRNeVNRTCgpLmdldFRvdGFsVmFsdWVFYXJuZWQoa2lsbGVyVVVJRCkuZ2V0KCk7DQoNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TXlTUUwoKS5zZXRDbGFpbWVkKGtpbGxlclVVSUQsIGN1cnJlbnRDbGFpbWVkICsgMSkuZ2V0KCk7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldE15U1FMKCkuc2V0U3Vydml2ZWQodmljdGltVVVJRCwgY3VycmVudFN1cnZpdmVkICsgMSkuZ2V0KCk7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldE15U1FMKCkuc2V0TW9uZXlFYXJuZWQoa2lsbGVyVVVJRCwgY3VycmVudE1vbmV5RWFybmVkICsgYm9vc3RlZEFtb3VudCkuZ2V0KCk7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldE15U1FMKCkuc2V0WFBFYXJuZWQoa2lsbGVyVVVJRCwgY3VycmVudFhQRWFybmVkICsgeHBSZXdhcmQpLmdldCgpOw0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRNeVNRTCgpLnNldFRvdGFsVmFsdWVFYXJuZWQoa2lsbGVyVVVJRCwgY3VycmVudFRvdGFsVmFsdWVFYXJuZWQgKyB0b3RhbFZhbHVlRWFybmVkKS5nZXQoKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkZhaWxlZCB0byB1cGRhdGUgc3RhdHMgZm9yICIgKyBraWxsZXJVVUlEICsgIiBvciAiICsgdmljdGltVVVJRCArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KDQogICAgICAgIGlmIChCb3VudGllc1BsdXMuZ2V0RWNvbm9teSgpICE9IG51bGwgJiYgYm9vc3RlZEFtb3VudCA+IDApIHsNCiAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRFY29ub215KCkuZGVwb3NpdFBsYXllcihraWxsZXIsIGJvb3N0ZWRBbW91bnQpOw0KICAgICAgICB9DQogICAgICAgIGlmICh4cFJld2FyZCA+IDApIHsNCiAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrKHBsdWdpbiwgKCkgLT4ga2lsbGVyLmdpdmVFeHAoeHBSZXdhcmQpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnID0gcGx1Z2luLmdldE1lc3NhZ2VzQ29uZmlnKCk7DQogICAgICAgIHByb2Nlc3NCb3VudHlDbGFpbXMoa2lsbGVyLCB2aWN0aW0sIGJvdW50aWVzLCBtZXNzYWdlc0NvbmZpZyk7DQogICAgICAgIHNlbmRTa3VsbERyb3BNZXNzYWdlcyhraWxsZXIsIHZpY3RpbSwgbWVzc2FnZXNDb25maWcpOw0KDQogICAgICAgIGJvdW50eU1hbmFnZXIuY2xlYXJCb3VudGllcyh2aWN0aW1VVUlEKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgc2VuZFNrdWxsRHJvcE1lc3NhZ2VzKFBsYXllciBraWxsZXIsIFBsYXllciBraWxsZWQsIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnKSB7DQogICAgICAgIGlmIChtZXNzYWdlc0NvbmZpZy5nZXRCb29sZWFuKCJza3VsbC1kcm9wcGVkLW1lc3NhZ2Uua2lsbGVyLmVuYWJsZWQiLCB0cnVlKSkgew0KICAgICAgICAgICAgU3RyaW5nIGtpbGxlck1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInNrdWxsLWRyb3BwZWQtbWVzc2FnZS5raWxsZXIubWVzc2FnZSIsICIlcHJlZml4JSZhWW91IGtpbGxlZCAmZSVraWxsZWQlICZhd2hvIGhhZCBib3VudGllcyEgVGhlaXIgc2t1bGwgaGFzIGJlZW4gZHJvcHBlZCBmb3IgeW91IHRvIHR1cm4gaW4uIik7DQogICAgICAgICAgICBraWxsZXJNZXNzYWdlID0ga2lsbGVyTWVzc2FnZS5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKS5yZXBsYWNlKCIla2lsbGVkJSIsIGtpbGxlZC5nZXROYW1lKCkpOw0KICAgICAgICAgICAga2lsbGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywga2lsbGVyTWVzc2FnZSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKG1lc3NhZ2VzQ29uZmlnLmdldEJvb2xlYW4oInNrdWxsLWRyb3BwZWQtbWVzc2FnZS5raWxsZWQuZW5hYmxlZCIsIHRydWUpKSB7DQogICAgICAgICAgICBTdHJpbmcga2lsbGVkTWVzc2FnZSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygic2t1bGwtZHJvcHBlZC1tZXNzYWdlLmtpbGxlZC5tZXNzYWdlIiwgIiVwcmVmaXglJmNZb3Ugd2VyZSBraWxsZWQgYnkgJmUla2lsbGVyJSZjISBZb3VyIGJvdW50eSBza3VsbCB3YXMgZHJvcHBlZC4iKTsNCiAgICAgICAgICAgIGtpbGxlZE1lc3NhZ2UgPSBraWxsZWRNZXNzYWdlLnJlcGxhY2UoIiVwcmVmaXglIiwgbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJwcmVmaXgiLCAiIikpLnJlcGxhY2UoIiVraWxsZXIlIiwga2lsbGVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICBraWxsZWQuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBraWxsZWRNZXNzYWdlKSk7DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgaW5zdHJ1Y3Rpb25NZXNzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJza3VsbC1kcm9wLWluc3RydWN0aW9uIiwgIiVwcmVmaXglJmVUYWtlIHRoZSBza3VsbCB0byB0aGUgQm91bnR5IEh1bnRlciB0byBjbGFpbSB5b3VyIHJld2FyZHMhIik7DQogICAgICAgIGluc3RydWN0aW9uTWVzc2FnZSA9IGluc3RydWN0aW9uTWVzc2FnZS5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKS5yZXBsYWNlKCIlYm91bnR5X2h1bnRlcl9idXR0b24lIiwgInRoZSBCb3VudHkgSHVudGVyIik7DQogICAgICAgIGtpbGxlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGluc3RydWN0aW9uTWVzc2FnZSkpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBwcm9jZXNzQm91bnR5Q2xhaW1zKFBsYXllciBraWxsZXIsIFBsYXllciBraWxsZWQsIE1hcDxVVUlELCBJbnRlZ2VyPiBib3VudGllcywgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcpIHsNCiAgICAgICAgQm91bnR5TWFuYWdlciBib3VudHlNYW5hZ2VyID0gcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKTsNCg0KICAgICAgICAvLyBHZXQgbWFudWFsIGJvb3N0IG11bHRpcGxpZXJzIC0gQUREIFRIRVNFIExJTkVTDQogICAgICAgIGRvdWJsZSBtYW51YWxNb25leUJvb3N0ID0gYm91bnR5TWFuYWdlci5nZXRNYW51YWxNb25leUJvb3N0TXVsdGlwbGllcihraWxsZWQuZ2V0VW5pcXVlSWQoKSk7DQogICAgICAgIGRvdWJsZSBtYW51YWxYcEJvb3N0ID0gYm91bnR5TWFuYWdlci5nZXRNYW51YWxYcEJvb3N0TXVsdGlwbGllcihraWxsZWQuZ2V0VW5pcXVlSWQoKSk7DQoNCiAgICAgICAgZG91YmxlIHRvdGFsUmV3YXJkID0gMC4wOw0KDQogICAgICAgIGZvciAoTWFwLkVudHJ5PFVVSUQsIEludGVnZXI+IGJvdW50eUVudHJ5IDogYm91bnRpZXMuZW50cnlTZXQoKSkgew0KICAgICAgICAgICAgVVVJRCBzZXR0ZXJVVUlEID0gYm91bnR5RW50cnkuZ2V0S2V5KCk7DQogICAgICAgICAgICBpbnQgYm91bnR5QW1vdW50ID0gYm91bnR5RW50cnkuZ2V0VmFsdWUoKTsNCg0KICAgICAgICAgICAgLy8gQXBwbHkgbWFudWFsIG1vbmV5IGJvb3N0IC0gTU9ESUZZIFRISVMgTElORQ0KICAgICAgICAgICAgZG91YmxlIGJvb3N0ZWRBbW91bnQgPSBib3VudHlBbW91bnQgKiBtYW51YWxNb25leUJvb3N0Ow0KICAgICAgICAgICAgdG90YWxSZXdhcmQgKz0gYm9vc3RlZEFtb3VudDsNCg0KICAgICAgICAgICAgLy8gSGFuZGxlIFhQIHJld2FyZHMgaWYgeW91IGhhdmUgdGhlbSAtIEFERCBUSEVTRSBMSU5FUyBJRiBORUVERUQNCiAgICAgICAgICAgIGlmIChtYW51YWxYcEJvb3N0ID4gMS4wKSB7DQogICAgICAgICAgICAgICAgaW50IHhwUmV3YXJkID0gKGludCkgKGJvdW50eUFtb3VudCAqIG1hbnVhbFhwQm9vc3QgKiAwLjEpOyAvLyAxMCUgb2YgbW9uZXkgYXMgWFANCiAgICAgICAgICAgICAgICBraWxsZXIuZ2l2ZUV4cCh4cFJld2FyZCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyBHaXZlIG1vbmV5IHJld2FyZHMNCiAgICAgICAgaWYgKEJvdW50aWVzUGx1cy5nZXRFY29ub215KCkgIT0gbnVsbCAmJiB0b3RhbFJld2FyZCA+IDApIHsNCiAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRFY29ub215KCkuZGVwb3NpdFBsYXllcihraWxsZXIsIHRvdGFsUmV3YXJkKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFNlbmQgYm9vc3Qgbm90aWZpY2F0aW9uIGlmIGFjdGl2ZSAtIEFERCBUSEVTRSBMSU5FUw0KICAgICAgICBpZiAobWFudWFsTW9uZXlCb29zdCA+IDEuMCB8fCBtYW51YWxYcEJvb3N0ID4gMS4wKSB7DQogICAgICAgICAgICBTdHJpbmcgYm9vc3RNZXNzYWdlID0gQ2hhdENvbG9yLkdSRUVOICsgIkJvb3N0IEFwcGxpZWQhICI7DQogICAgICAgICAgICBpZiAobWFudWFsTW9uZXlCb29zdCA+IDEuMCkgew0KICAgICAgICAgICAgICAgIGJvb3N0TWVzc2FnZSArPSAiTW9uZXk6ICIgKyBtYW51YWxNb25leUJvb3N0ICsgInggIjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChtYW51YWxYcEJvb3N0ID4gMS4wKSB7DQogICAgICAgICAgICAgICAgYm9vc3RNZXNzYWdlICs9ICJYUDogIiArIG1hbnVhbFhwQm9vc3QgKyAieCI7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBraWxsZXIuc2VuZE1lc3NhZ2UoYm9vc3RNZXNzYWdlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFJlc3Qgb2YgeW91ciBleGlzdGluZyBjb2RlIGZvciBtZXNzYWdlcyBhbmQgY2xlYXJpbmcgYm91bnRpZXMuLi4NCiAgICAgICAgYm91bnR5TWFuYWdlci5jbGVhckJvdW50aWVzKGtpbGxlZC5nZXRVbmlxdWVJZCgpKTsNCg0KICAgICAgICBpZiAoQm91bnRpZXNQbHVzLmdldEVjb25vbXkoKSAhPSBudWxsICYmIHRvdGFsUmV3YXJkID4gMCkgew0KICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEVjb25vbXkoKS5kZXBvc2l0UGxheWVyKGtpbGxlciwgdG90YWxSZXdhcmQpOw0KDQogICAgICAgICAgICBpZiAobWVzc2FnZXNDb25maWcuZ2V0Qm9vbGVhbigiYm91bnR5LWNsYWltZWQtbWVzc2FnZS5raWxsZXIuZW5hYmxlZCIsIHRydWUpKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIGtpbGxlck1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1jbGFpbWVkLW1lc3NhZ2Uua2lsbGVyLm1lc3NhZ2UiLCAiJXByZWZpeCUmYVlvdSBjbGFpbWVkIHRoZSBib3VudHkgb24gJmUla2lsbGVkJSZhIGFuZCByZWNlaXZlZCAmZSQlYW1vdW50JSZhISIpOw0KICAgICAgICAgICAgICAgIGtpbGxlck1lc3NhZ2UgPSBraWxsZXJNZXNzYWdlLnJlcGxhY2UoIiVwcmVmaXglIiwgbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJwcmVmaXgiLCAiIikpLnJlcGxhY2UoIiVraWxsZWQlIiwga2lsbGVkLmdldE5hbWUoKSkucmVwbGFjZSgiJWFtb3VudCUiLCBTdHJpbmcudmFsdWVPZih0b3RhbFJld2FyZCkpOw0KICAgICAgICAgICAgICAgIGtpbGxlci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGtpbGxlck1lc3NhZ2UpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKG1lc3NhZ2VzQ29uZmlnLmdldEJvb2xlYW4oImJvdW50eS1jbGFpbWVkLW1lc3NhZ2UuYnJvYWRjYXN0LmVuYWJsZWQiLCB0cnVlKSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBicm9hZGNhc3RNZXNzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktY2xhaW1lZC1tZXNzYWdlLmJyb2FkY2FzdC5tZXNzYWdlIiwgIiVwcmVmaXglJmUla2lsbGVyJSZhIGNsYWltZWQgdGhlIGJvdW50eSBvbiAmZSVraWxsZWQlJmEgd29ydGggJmUkJWFtb3VudCUmYSEiKTsNCiAgICAgICAgICAgICAgICBicm9hZGNhc3RNZXNzYWdlID0gYnJvYWRjYXN0TWVzc2FnZS5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKS5yZXBsYWNlKCIla2lsbGVyJSIsIGtpbGxlci5nZXROYW1lKCkpLnJlcGxhY2UoIiVraWxsZWQlIiwga2lsbGVkLmdldE5hbWUoKSkucmVwbGFjZSgiJWFtb3VudCUiLCBTdHJpbmcudmFsdWVPZih0b3RhbFJld2FyZCkpOw0KDQogICAgICAgICAgICAgICAgZm9yIChQbGF5ZXIgb25saW5lUGxheWVyIDogQnVra2l0LmdldE9ubGluZVBsYXllcnMoKSkgew0KICAgICAgICAgICAgICAgICAgICBvbmxpbmVQbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBicm9hZGNhc3RNZXNzYWdlKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaWYgKG1lc3NhZ2VzQ29uZmlnLmdldEJvb2xlYW4oImJvdW50eS1raWxsZWQtbm8tcmV3YXJkLmVuYWJsZWQiLCB0cnVlKSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBub1Jld2FyZE1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1raWxsZWQtbm8tcmV3YXJkLm1lc3NhZ2UiLCAiJXByZWZpeCUmYVlvdSBraWxsZWQgJmUla2lsbGVkJSZhLCB3aG8gaGFkIGEgYm91bnR5IG9uIHRoZWlyIGhlYWQhIik7DQogICAgICAgICAgICAgICAgbm9SZXdhcmRNZXNzYWdlID0gbm9SZXdhcmRNZXNzYWdlLnJlcGxhY2UoIiVwcmVmaXglIiwgbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJwcmVmaXgiLCAiIikpLnJlcGxhY2UoIiVraWxsZWQlIiwga2lsbGVkLmdldE5hbWUoKSk7DQogICAgICAgICAgICAgICAga2lsbGVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbm9SZXdhcmRNZXNzYWdlKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgdXBkYXRlS2lsbGVyU3RhdHMoVVVJRCBraWxsZXJVVUlELCBNYXA8VVVJRCwgSW50ZWdlcj4gYm91bnRpZXMpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gc3RhdHNDb25maWcgPSBwbHVnaW4uZ2V0U3RhdHNDb25maWcoKTsNCiAgICAgICAgU3RyaW5nIHBhdGggPSAicGxheWVycy4iICsga2lsbGVyVVVJRC50b1N0cmluZygpOw0KDQogICAgICAgIGludCBjdXJyZW50Q2xhaW1lZCA9IHN0YXRzQ29uZmlnLmdldEludChwYXRoICsgIi5jbGFpbWVkIiwgMCk7DQogICAgICAgIGRvdWJsZSBjdXJyZW50TW9uZXkgPSBzdGF0c0NvbmZpZy5nZXREb3VibGUocGF0aCArICIubW9uZXlfZWFybmVkIiwgMC4wKTsNCiAgICAgICAgaW50IGN1cnJlbnRSZXB1dGF0aW9uID0gc3RhdHNDb25maWcuZ2V0SW50KHBhdGggKyAiLnJlcHV0YXRpb24iLCAwKTsNCg0KICAgICAgICBpbnQgdG90YWxSZXdhcmQgPSBib3VudGllcy52YWx1ZXMoKS5zdHJlYW0oKS5tYXBUb0ludChJbnRlZ2VyOjppbnRWYWx1ZSkuc3VtKCk7DQoNCiAgICAgICAgc3RhdHNDb25maWcuc2V0KHBhdGggKyAiLmNsYWltZWQiLCBjdXJyZW50Q2xhaW1lZCArIGJvdW50aWVzLnNpemUoKSk7DQogICAgICAgIHN0YXRzQ29uZmlnLnNldChwYXRoICsgIi5tb25leV9lYXJuZWQiLCBjdXJyZW50TW9uZXkgKyB0b3RhbFJld2FyZCk7DQogICAgICAgIHN0YXRzQ29uZmlnLnNldChwYXRoICsgIi5yZXB1dGF0aW9uIiwgY3VycmVudFJlcHV0YXRpb24gKyAoYm91bnRpZXMuc2l6ZSgpICogMTApKTsNCg0KICAgICAgICBwbHVnaW4uc2F2ZUV2ZXJ5dGhpbmcoKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgdXBkYXRlS2lsbGVkU3RhdHMoVVVJRCBraWxsZWRVVUlEKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIHN0YXRzQ29uZmlnID0gcGx1Z2luLmdldFN0YXRzQ29uZmlnKCk7DQogICAgICAgIFN0cmluZyBwYXRoID0gInBsYXllcnMuIiArIGtpbGxlZFVVSUQudG9TdHJpbmcoKTsNCg0KICAgICAgICBpbnQgY3VycmVudFN1cnZpdmVkID0gc3RhdHNDb25maWcuZ2V0SW50KHBhdGggKyAiLnN1cnZpdmVkIiwgMCk7DQogICAgICAgIGludCBjdXJyZW50UmVwdXRhdGlvbiA9IHN0YXRzQ29uZmlnLmdldEludChwYXRoICsgIi5yZXB1dGF0aW9uIiwgMCk7DQoNCiAgICAgICAgc3RhdHNDb25maWcuc2V0KHBhdGggKyAiLnN1cnZpdmVkIiwgY3VycmVudFN1cnZpdmVkKTsNCiAgICAgICAgc3RhdHNDb25maWcuc2V0KHBhdGggKyAiLnJlcHV0YXRpb24iLCBNYXRoLm1heCgwLCBjdXJyZW50UmVwdXRhdGlvbiAtIDUpKTsNCg0KICAgICAgICBwbHVnaW4uc2F2ZUV2ZXJ5dGhpbmcoKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgcGxheUJvdW50eVNvdW5kKFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGlmIChWZXJzaW9uVXRpbHMuaXNMZWdhY3koKSkgew0KICAgICAgICAgICAgICAgIHBsYXllci5nZXRXb3JsZCgpLnBsYXlTb3VuZChwbGF5ZXIuZ2V0TG9jYXRpb24oKSwgb3JnLmJ1a2tpdC5Tb3VuZC52YWx1ZU9mKHBsdWdpbi5nZXRCb3VudHlTb3VuZE5hbWUoKSksIHBsdWdpbi5nZXRCb3VudHlTb3VuZFZvbHVtZSgpLCBwbHVnaW4uZ2V0Qm91bnR5U291bmRQaXRjaCgpKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcGxheWVyLmdldFdvcmxkKCkucGxheVNvdW5kKHBsYXllci5nZXRMb2NhdGlvbigpLCBvcmcuYnVra2l0LlNvdW5kLnZhbHVlT2YocGx1Z2luLmdldEJvdW50eVNvdW5kTmFtZSgpKSwgcGx1Z2luLmdldEJvdW50eVNvdW5kVm9sdW1lKCksIHBsdWdpbi5nZXRCb3VudHlTb3VuZFBpdGNoKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkZhaWxlZCB0byBwbGF5IGJvdW50eSBzb3VuZDogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgfQ0KDQoNCiAgICB9DQp9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRvbnkyNi9ib3VudGllc1BsdXMvdXRpbHMvU2hvcEd1aVBsdXNJbnRlZ3JhdGlvbi5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAyNDQxMCAxNTAyNjA2MjYxNyAwMjE1MjQAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzOw0KDQppbXBvcnQgY29tLmNyeXB0b21vcmluLnhzZXJpZXMuWE1hdGVyaWFsOw0KaW1wb3J0IG5ldC5icmNkZXYuc2hvcGd1aS5TaG9wR3VpUGx1c0FwaTsNCmltcG9ydCBvcmcuYnVra2l0LkJ1a2tpdDsNCmltcG9ydCBvcmcuYnVra2l0Lk1hdGVyaWFsOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5Db25maWd1cmF0aW9uU2VjdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5GaWxlQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5ZYW1sQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmVudGl0eS5QbGF5ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbVN0YWNrOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuQm91bnRpZXNQbHVzOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuR1VJcy5IdW50ZXJEZW5HVUk7DQoNCmltcG9ydCBqYXZhLmlvLkZpbGU7DQppbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsNCmltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0Ow0KaW1wb3J0IGphdmEudXRpbC5MaXN0Ow0KDQovKioNCiAqIE1hbmFnZXMgaW50ZWdyYXRpb24gd2l0aCBTaG9wR1VJUGx1cyBmb3IgdGhlIEh1bnRlcnMgRGVuDQogKiAvLyBub3RlOiBIYW5kbGVzIGhvb2tpbmcgaW50byBTaG9wR1VJUGx1cyBhbmQgb3BlbmluZyB0aGUgSHVudGVycyBEZW4gc2hvcA0KICovDQpwdWJsaWMgY2xhc3MgU2hvcEd1aVBsdXNJbnRlZ3JhdGlvbiB7DQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KICAgIHByaXZhdGUgYm9vbGVhbiBpc1Nob3BHdWlQbHVzRW5hYmxlZDsNCiAgICBwcml2YXRlIEZpbGUgc2hvcEZpbGU7DQogICAgcHJpdmF0ZSBGaWxlQ29uZmlndXJhdGlvbiBzaG9wQ29uZmlnOw0KDQogICAgLyoqDQogICAgICogSW5pdGlhbGl6ZXMgU2hvcEdVSVBsdXMgaW50ZWdyYXRpb24NCiAgICAgKiAvLyBub3RlOiBDaGVja3MgZm9yIFNob3BHVUlQbHVzLCBsb2FkcyBvciBjcmVhdGVzIHNob3AgY29uZmlndXJhdGlvbg0KICAgICAqLw0KICAgIHB1YmxpYyBTaG9wR3VpUGx1c0ludGVncmF0aW9uKEJvdW50aWVzUGx1cyBwbHVnaW4pIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgICAgIHRoaXMuaXNTaG9wR3VpUGx1c0VuYWJsZWQgPSBCdWtraXQuZ2V0UGx1Z2luTWFuYWdlcigpLmlzUGx1Z2luRW5hYmxlZCgiU2hvcEdVSVBsdXMiKTsNCiAgICAgICAgaWYgKGlzU2hvcEd1aVBsdXNFbmFibGVkKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiW0RFQlVHXSBTaG9wR1VJUGx1cyBkZXRlY3RlZCwgaW5pdGlhbGl6aW5nIGludGVncmF0aW9uIik7DQogICAgICAgICAgICBpbml0aWFsaXplU2hvcENvbmZpZygpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIltERUJVR10gU2hvcEdVSVBsdXMgbm90IGZvdW5kLCBIdW50ZXJzIERlbiB3aWxsIHVzZSBkZWZhdWx0IEdVSSIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIFNob3BHVUlQbHVzIGludGVncmF0aW9uIGlzIGVuYWJsZWQNCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIHRydWUgaWYgU2hvcEdVSVBsdXMgaXMgaW5zdGFsbGVkIGFuZCB1c2Utc2hvcC1ndWktcGx1cyBpcyB0cnVlDQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gaXNFbmFibGVkKCkgew0KICAgICAgICByZXR1cm4gaXNTaG9wR3VpUGx1c0VuYWJsZWQgJiYgcGx1Z2luLmdldENvbmZpZygpLmdldEJvb2xlYW4oInNob3AudXNlLXNob3AtZ3VpLXBsdXMiLCBmYWxzZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSW5pdGlhbGl6ZXMgdGhlIFNob3BHVUlQbHVzIHNob3AgY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IENyZWF0ZXMgb3IgbG9hZHMgSHVudGVyc0Rlbi55bWwgZm9yIFNob3BHVUlQbHVzLCBtYXBwaW5nIGl0ZW1zIGZyb20gSHVudGVyc0Rlbi55bWwNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgaW5pdGlhbGl6ZVNob3BDb25maWcoKSB7DQogICAgICAgIHNob3BGaWxlID0gbmV3IEZpbGUocGx1Z2luLmdldERhdGFGb2xkZXIoKSwgInNob3BzL0h1bnRlcnNEZW4ueW1sIik7DQogICAgICAgIGlmICghc2hvcEZpbGUuZXhpc3RzKCkpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgc2hvcEZpbGUuZ2V0UGFyZW50RmlsZSgpLm1rZGlycygpOw0KICAgICAgICAgICAgICAgIHNob3BGaWxlLmNyZWF0ZU5ld0ZpbGUoKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBGYWlsZWQgdG8gY3JlYXRlIHNob3BzL0h1bnRlcnNEZW4ueW1sOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgICAgIGlzU2hvcEd1aVBsdXNFbmFibGVkID0gZmFsc2U7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHNob3BDb25maWcgPSBZYW1sQ29uZmlndXJhdGlvbi5sb2FkQ29uZmlndXJhdGlvbihzaG9wRmlsZSk7DQogICAgICAgIGNvbnZlcnRIdW50ZXJzRGVuSXRlbXMoKTsNCiAgICAgICAgc2F2ZVNob3BDb25maWcoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDb252ZXJ0cyBpdGVtcyBmcm9tIEh1bnRlcnNEZW4ueW1sIHRvIFNob3BHVUlQbHVzIGZvcm1hdA0KICAgICAqIC8vIG5vdGU6IE1hcHMgUGx1Z2luLUl0ZW1zIGFuZCBDdXN0b20tSXRlbXMgdG8gU2hvcEdVSVBsdXMgc2hvcCBmb3JtYXQNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgY29udmVydEh1bnRlcnNEZW5JdGVtcygpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gaHVudGVyc0RlbkNvbmZpZyA9IHBsdWdpbi5nZXRIdW50ZXJzRGVuQ29uZmlnKCk7DQogICAgICAgIHNob3BDb25maWcuc2V0KCJzaG9wTmFtZSIsICJIdW50ZXJzRGVuIik7DQogICAgICAgIHNob3BDb25maWcuc2V0KCJzaG9wRGlzcGxheU5hbWUiLCBodW50ZXJzRGVuQ29uZmlnLmdldFN0cmluZygiZ3VpLXRpdGxlIiwgIiZkSHVudGVycyBEZW4iKSk7DQogICAgICAgIHNob3BDb25maWcuc2V0KCJzaG9wU2l6ZSIsIGh1bnRlcnNEZW5Db25maWcuZ2V0SW50KCJzaXplIiwgNTQpKTsNCg0KICAgICAgICBMaXN0PFN0cmluZz4gaXRlbXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgQ29uZmlndXJhdGlvblNlY3Rpb24gcGx1Z2luSXRlbXMgPSBodW50ZXJzRGVuQ29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJQbHVnaW4tSXRlbXMiKTsNCiAgICAgICAgaWYgKHBsdWdpbkl0ZW1zICE9IG51bGwpIHsNCiAgICAgICAgICAgIGZvciAoU3RyaW5nIGtleSA6IHBsdWdpbkl0ZW1zLmdldEtleXMoZmFsc2UpKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIHBhdGggPSAiUGx1Z2luLUl0ZW1zLiIgKyBrZXk7DQogICAgICAgICAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBjcmVhdGVJdGVtRnJvbUNvbmZpZyhodW50ZXJzRGVuQ29uZmlnLCBwYXRoKTsNCiAgICAgICAgICAgICAgICBpZiAoaXRlbSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIGFkZFNob3BJdGVtKGtleSwgaXRlbSwgaHVudGVyc0RlbkNvbmZpZy5nZXREb3VibGUocGF0aCArICIucHJpY2UiLCAxMDAuMCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIENvbmZpZ3VyYXRpb25TZWN0aW9uIGN1c3RvbUl0ZW1zID0gaHVudGVyc0RlbkNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiQ3VzdG9tLUl0ZW1zIik7DQogICAgICAgIGlmIChjdXN0b21JdGVtcyAhPSBudWxsKSB7DQogICAgICAgICAgICBmb3IgKFN0cmluZyBrZXkgOiBjdXN0b21JdGVtcy5nZXRLZXlzKGZhbHNlKSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBwYXRoID0gIkN1c3RvbS1JdGVtcy4iICsga2V5Ow0KICAgICAgICAgICAgICAgIEl0ZW1TdGFjayBpdGVtID0gY3JlYXRlSXRlbUZyb21Db25maWcoaHVudGVyc0RlbkNvbmZpZywgcGF0aCk7DQogICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBhZGRTaG9wSXRlbShrZXksIGl0ZW0sIGh1bnRlcnNEZW5Db25maWcuZ2V0RG91YmxlKHBhdGggKyAiLnByaWNlIiwgMTAwLjApKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGFuIEl0ZW1TdGFjayBmcm9tIGEgY29uZmlndXJhdGlvbiBzZWN0aW9uDQogICAgICogLy8gbm90ZTogQnVpbGRzIGl0ZW0gd2l0aCBtYXRlcmlhbCwgbmFtZSwgbG9yZSwgYW5kIGVuY2hhbnRtZW50cyBmcm9tIGNvbmZpZw0KICAgICAqLw0KICAgIHByaXZhdGUgSXRlbVN0YWNrIGNyZWF0ZUl0ZW1Gcm9tQ29uZmlnKEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZywgU3RyaW5nIHBhdGgpIHsNCiAgICAgICAgU3RyaW5nIG1hdGVyaWFsTmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcocGF0aCArICIubWF0ZXJpYWwiLCAiU1RPTkUiKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgIGlmIChpdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5TVE9ORSAmJiAhbWF0ZXJpYWxOYW1lLmVxdWFsc0lnbm9yZUNhc2UoIlNUT05FIikpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUddIEludmFsaWQgbWF0ZXJpYWwgaW4gIiArIHBhdGggKyAiOiAiICsgbWF0ZXJpYWxOYW1lICsgIiwgdXNpbmcgU1RPTkUiKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gaXRlbTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIGFuIGl0ZW0gdG8gdGhlIFNob3BHVUlQbHVzIGNvbmZpZ3VyYXRpb24NCiAgICAgKiAvLyBub3RlOiBBZGRzIGl0ZW0gd2l0aCBwcmljZSB0byB0aGUgc2hvcCBjb25maWd1cmF0aW9uDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGFkZFNob3BJdGVtKFN0cmluZyBrZXksIEl0ZW1TdGFjayBpdGVtLCBkb3VibGUgcHJpY2UpIHsNCiAgICAgICAgU3RyaW5nIHBhdGggPSAiaXRlbXMuIiArIGtleTsNCiAgICAgICAgc2hvcENvbmZpZy5zZXQocGF0aCArICIudHlwZSIsICJpdGVtIik7DQogICAgICAgIHNob3BDb25maWcuc2V0KHBhdGggKyAiLml0ZW0ubWF0ZXJpYWwiLCBpdGVtLmdldFR5cGUoKS5uYW1lKCkpOw0KICAgICAgICBzaG9wQ29uZmlnLnNldChwYXRoICsgIi5pdGVtLmFtb3VudCIsIGl0ZW0uZ2V0QW1vdW50KCkpOw0KICAgICAgICBzaG9wQ29uZmlnLnNldChwYXRoICsgIi5idXlQcmljZSIsIHByaWNlKTsNCiAgICAgICAgc2hvcENvbmZpZy5zZXQocGF0aCArICIuc2VsbFByaWNlIiwgbnVsbCk7IC8vIEh1bnRlcnMgRGVuIGl0ZW1zIGFyZSB0eXBpY2FsbHkgbm90IHNlbGxhYmxlDQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2F2ZXMgdGhlIFNob3BHVUlQbHVzIHNob3AgY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IFBlcnNpc3RzIHNob3BzL0h1bnRlcnNEZW4ueW1sIHRvIGRpc2sNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgc2F2ZVNob3BDb25maWcoKSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBzaG9wQ29uZmlnLnNhdmUoc2hvcEZpbGUpOw0KICAgICAgICB9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHXSBGYWlsZWQgdG8gc2F2ZSBzaG9wcy9IdW50ZXJzRGVuLnltbDogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIE9wZW5zIHRoZSBTaG9wR1VJUGx1cyBzaG9wIG9yIGZhbGxzIGJhY2sgdG8gZGVmYXVsdCBHVUkNCiAgICAgKiAvLyBub3RlOiBBdHRlbXB0cyB0byBvcGVuIFNob3BHVUlQbHVzIHNob3AsIGZhbGxzIGJhY2sgdG8gSHVudGVyRGVuR1VJIGlmIGRpc2FibGVkIG9yIHVuYXZhaWxhYmxlDQogICAgICovDQogICAgcHVibGljIHZvaWQgb3BlblNob3AoUGxheWVyIHBsYXllcikgew0KICAgICAgICBpZiAoIXBsdWdpbi5nZXRDb25maWcoKS5nZXRCb29sZWFuKCJzaG9wLnVzZS1zaG9wLWd1aS1wbHVzIiwgZmFsc2UpKSB7DQogICAgICAgICAgICBIdW50ZXJEZW5HVUkgZ3VpID0gbmV3IEh1bnRlckRlbkdVSShwbGF5ZXIsIHBsdWdpbi5nZXRFdmVudE1hbmFnZXIoKSk7DQogICAgICAgICAgICBndWkub3BlbkludmVudG9yeShwbGF5ZXIpOw0KICAgICAgICAgICAgcGx1Z2luLmdldERlYnVnTWFuYWdlcigpLmxvZ0RlYnVnKCJbU2hvcEd1aVBsdXNJbnRlZ3JhdGlvbl0gT3BlbmVkIGRlZmF1bHQgSHVudGVyRGVuR1VJIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIFNob3BHdWlQbHVzQXBpLm9wZW5TaG9wKHBsYXllciwgIkh1bnRlcnNEZW4iLCAxKTsNCiAgICAgICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiW1Nob3BHdWlQbHVzSW50ZWdyYXRpb25dIE9wZW5lZCBTaG9wR1VJUGx1cyBzaG9wICdIdW50ZXJzRGVuJyBmb3IgIiArIHBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcikuZXJyb3IoZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgU3RyaW5nIGVycm9yTWVzc2FnZSA9IHBsdWdpbi5nZXRNZXNzYWdlc0NvbmZpZygpLmdldFN0cmluZygic2hvcC1ndWktcGx1cy1lcnJvciIsICImYyZsU2hvcEdVSVBsdXMgRXJyb3I6ICY3RmFpbGVkIHRvIG9wZW4gU2hvcEdVSVBsdXMgc2hvcC4gVXNpbmcgZGVmYXVsdCBIdW50ZXJzIERlbi4iKTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkoZXJyb3JNZXNzYWdlLCBjb250ZXh0KSk7DQogICAgICAgICAgICBIdW50ZXJEZW5HVUkgZ3VpID0gbmV3IEh1bnRlckRlbkdVSShwbGF5ZXIsIHBsdWdpbi5nZXRFdmVudE1hbmFnZXIoKSk7DQogICAgICAgICAgICBndWkub3BlbkludmVudG9yeShwbGF5ZXIpOw0KICAgICAgICAgICAgcGx1Z2luLmdldERlYnVnTWFuYWdlcigpLmxvZ0RlYnVnKCJbU2hvcEd1aVBsdXNJbnRlZ3JhdGlvbl0gRmFpbGVkIHRvIG9wZW4gU2hvcEdVSVBsdXMgc2hvcCBmb3IgIiArIHBsYXllci5nZXROYW1lKCkgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkgKyAiLCBvcGVuZWQgZGVmYXVsdCBIdW50ZXJEZW5HVUkiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFByb2Nlc3NlcyBhIHB1cmNoYXNlIHdpdGggYm91bnR5IHNrdWxscw0KICAgICAqIC8vIG5vdGU6IFZhbGlkYXRlcyBhbmQgZGVkdWN0cyBza3VsbHMgZm9yIFNob3BHVUlQbHVzIHB1cmNoYXNlcw0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBwcm9jZXNzU2t1bGxQdXJjaGFzZShQbGF5ZXIgcGxheWVyLCBTdHJpbmcgaXRlbUlkLCBpbnQgc2t1bGxDb3VudCwgZG91YmxlIG1pblNrdWxsVmFsdWUpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldEh1bnRlcnNEZW5Db25maWcoKTsNCiAgICAgICAgYm9vbGVhbiBhbGxvd0V4cGlyZWRTa3VsbHMgPSBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigic2hvcC5hbGxvdy1leHBpcmVkLXNrdWxscyIsIHRydWUpOw0KICAgICAgICBpbnQgdmFsaWRTa3VsbHMgPSAwOw0KICAgICAgICBMaXN0PEl0ZW1TdGFjaz4gdG9SZW1vdmUgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCg0KICAgICAgICBmb3IgKEl0ZW1TdGFjayBpdGVtIDogcGxheWVyLmdldEludmVudG9yeSgpLmdldENvbnRlbnRzKCkpIHsNCiAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgSHVudGVyRGVuR1VJLmlzQm91bnR5U2t1bGwoaXRlbSkpIHsNCiAgICAgICAgICAgICAgICBkb3VibGUgc2t1bGxWYWx1ZSA9IEh1bnRlckRlbkdVSS5leHRyYWN0Qm91bnR5VmFsdWVGcm9tU2t1bGwoaXRlbSk7DQogICAgICAgICAgICAgICAgaWYgKHNrdWxsVmFsdWUgPj0gbWluU2t1bGxWYWx1ZSAmJiAoYWxsb3dFeHBpcmVkU2t1bGxzIHx8IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuaGFzQm91bnR5KFNrdWxsVXRpbHMuZ2V0S2lsbGVkUGxheWVyVVVJRChpdGVtKSkpKSB7DQogICAgICAgICAgICAgICAgICAgIHZhbGlkU2t1bGxzICs9IGl0ZW0uZ2V0QW1vdW50KCk7DQogICAgICAgICAgICAgICAgICAgIHRvUmVtb3ZlLmFkZChpdGVtKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkU2t1bGxzID49IHNrdWxsQ291bnQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHZhbGlkU2t1bGxzIDwgc2t1bGxDb3VudCkgew0KICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAgICAgLnBsYXllcihwbGF5ZXIpDQogICAgICAgICAgICAgICAgICAgIC5pdGVtQ291bnQoc2t1bGxDb3VudCkNCiAgICAgICAgICAgICAgICAgICAgLndpdGhBbW91bnQobWluU2t1bGxWYWx1ZSk7DQogICAgICAgICAgICBTdHJpbmcgbWVzc2FnZSA9IGNvbmZpZy5nZXRTdHJpbmcoIm1lc3NhZ2VzLmluc3VmZmljaWVudC1za3VsbHMiLCAiJmMmbFlvdSBuZWVkICVyZXF1aXJlZF9jb3VudCUgYm91bnR5IHNrdWxscyAobWluaW11bSAkJW1pbl92YWx1ZSUgZWFjaCkhIik7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KG1lc3NhZ2UsIGNvbnRleHQpKTsNCiAgICAgICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiW1Nob3BHdWlQbHVzSW50ZWdyYXRpb25dIEluc3VmZmljaWVudCBza3VsbHMgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIjogbmVlZGVkICIgKyBza3VsbENvdW50ICsgIiwgZm91bmQgIiArIHZhbGlkU2t1bGxzKTsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGludCByZW1haW5pbmcgPSBza3VsbENvdW50Ow0KICAgICAgICBmb3IgKEl0ZW1TdGFjayBpdGVtIDogdG9SZW1vdmUpIHsNCiAgICAgICAgICAgIGlmIChyZW1haW5pbmcgPD0gMCkgYnJlYWs7DQogICAgICAgICAgICBpbnQgYW1vdW50ID0gaXRlbS5nZXRBbW91bnQoKTsNCiAgICAgICAgICAgIGludCB0b1JlbW92ZUFtb3VudCA9IE1hdGgubWluKGFtb3VudCwgcmVtYWluaW5nKTsNCiAgICAgICAgICAgIGlmICh0b1JlbW92ZUFtb3VudCA9PSBhbW91bnQpIHsNCiAgICAgICAgICAgICAgICBpdGVtLnNldFR5cGUoWE1hdGVyaWFsLkFJUi5wYXJzZU1hdGVyaWFsKCkpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBpdGVtLnNldEFtb3VudChhbW91bnQgLSB0b1JlbW92ZUFtb3VudCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZW1haW5pbmcgLT0gdG9SZW1vdmVBbW91bnQ7DQogICAgICAgIH0NCg0KICAgICAgICBwbGF5ZXIudXBkYXRlSW52ZW50b3J5KCk7DQogICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiW1Nob3BHdWlQbHVzSW50ZWdyYXRpb25dIFN1Y2Nlc3NmdWxseSBwcm9jZXNzZWQgc2t1bGwgcHVyY2hhc2UgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIjogIiArIHNrdWxsQ291bnQgKyAiIHNrdWxscyIpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZWxvYWRzIHRoZSBzaG9wIGNvbmZpZ3VyYXRpb24NCiAgICAgKiAvLyBub3RlOiBSZWxvYWRzIHNob3BzL0h1bnRlcnNEZW4ueW1sIGFuZCByZXByb2Nlc3NlcyBpdGVtcw0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIHJlbG9hZCgpIHsNCiAgICAgICAgaWYgKGlzU2hvcEd1aVBsdXNFbmFibGVkKSB7DQogICAgICAgICAgICBpbml0aWFsaXplU2hvcENvbmZpZygpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2xlYW5zIHVwIG9uIHBsdWdpbiBkaXNhYmxlDQogICAgICogLy8gbm90ZTogU2F2ZXMgc2hvcCBjb25maWd1cmF0aW9uDQogICAgICovDQogICAgcHVibGljIHZvaWQgY2xlYW51cCgpIHsNCiAgICAgICAgaWYgKGlzU2hvcEd1aVBsdXNFbmFibGVkKSB7DQogICAgICAgICAgICBzYXZlU2hvcENvbmZpZygpOw0KICAgICAgICB9DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy91dGlscy9Ta3VsbFV0aWxzLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDUzMjM2IDE1MDI2MDYyNjE3IDAxNzIyMQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCnBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlsczsNCg0KaW1wb3J0IGNvbS5jcnlwdG9tb3Jpbi54c2VyaWVzLlhNYXRlcmlhbDsNCmltcG9ydCBvcmcuYnVra2l0LkNoYXRDb2xvcjsNCmltcG9ydCBvcmcuYnVra2l0Lk1hdGVyaWFsOw0KaW1wb3J0IG9yZy5idWtraXQuT2ZmbGluZVBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5GaWxlQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmVuY2hhbnRtZW50cy5FbmNoYW50bWVudDsNCmltcG9ydCBvcmcuYnVra2l0LmVudGl0eS5QbGF5ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbUZsYWc7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbVN0YWNrOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lm1ldGEuSXRlbU1ldGE7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkubWV0YS5Ta3VsbE1ldGE7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudGllc1BsdXM7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy53cmFwcGVycy5WZXJzaW9uV3JhcHBlcjsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLndyYXBwZXJzLlZlcnNpb25XcmFwcGVyRmFjdG9yeTsNCg0KaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0LkZpZWxkOw0KaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0Lk1ldGhvZDsNCmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDsNCmltcG9ydCBqYXZhLnV0aWwuKjsNCg0KcHVibGljIGNsYXNzIFNrdWxsVXRpbHMgew0KDQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgU2ltcGxlRGF0ZUZvcm1hdCBkYXRlRm9ybWF0ID0gbmV3IFNpbXBsZURhdGVGb3JtYXQoIk1NL2RkL3l5eXkgSEg6bW0iKTsNCg0KICAgIHB1YmxpYyBzdGF0aWMgSXRlbVN0YWNrIGNyZWF0ZUN1c3RvbUJvdW50eVNrdWxsKFBsYXllciBraWxsZWQsIE1hcDxVVUlELCBJbnRlZ2VyPiBib3VudGllcywgUGxheWVyIGtpbGxlcikgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgQm91bnRpZXNQbHVzIHBsdWdpbiA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpOw0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIkNyZWF0aW5nIGJvdW50eSBza3VsbCBmb3IgIiArIGtpbGxlZC5nZXROYW1lKCkgKyAiIGtpbGxlZCBieSAiICsga2lsbGVyLmdldE5hbWUoKSk7DQoNCiAgICAgICAgICAgIC8vIFVzZSB0aGUgbmV3IHZlcnNpb24tYXdhcmUgbWV0aG9kIHRvIGNyZWF0ZSB0aGUgc2t1bGwgd2l0aCBwcm9wZXIgc2tpbg0KICAgICAgICAgICAgSXRlbVN0YWNrIHNrdWxsID0gY3JlYXRlVmVyc2lvbkF3YXJlUGxheWVySGVhZChraWxsZWQpOw0KDQogICAgICAgICAgICBpZiAoc2t1bGwgPT0gbnVsbCB8fCBza3VsbC5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoImNyZWF0ZVZlcnNpb25Bd2FyZVBsYXllckhlYWQgcmV0dXJuZWQgbnVsbC9haXIgZm9yICIgKyBraWxsZWQuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIlN1Y2Nlc3NmdWxseSBjcmVhdGVkIHNrdWxsIHdpdGggc2tpbiBmb3IgIiArIGtpbGxlZC5nZXROYW1lKCkpOw0KDQogICAgICAgICAgICBpZiAoc2t1bGwuZ2V0SXRlbU1ldGEoKSBpbnN0YW5jZW9mIFNrdWxsTWV0YSkgew0KICAgICAgICAgICAgICAgIFNrdWxsTWV0YSBtZXRhID0gKFNrdWxsTWV0YSkgc2t1bGwuZ2V0SXRlbU1ldGEoKTsNCg0KICAgICAgICAgICAgICAgIC8vIEdldCBjb25maWd1cmF0aW9uDQogICAgICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldENvbmZpZygpOw0KICAgICAgICAgICAgICAgIFN0cmluZyBza3VsbE5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKCJib3VudHktc2t1bGwubmFtZSIsICImYyZs4pigICY0Qm91bnR5IEhlYWQgb2YgJXRhcmdldCUgJmMmbOKYoCIpOw0KICAgICAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBza3VsbExvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdCgiYm91bnR5LXNrdWxsLmxvcmUiKTsNCg0KICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0b3RhbCBib3VudHkNCiAgICAgICAgICAgICAgICBpbnQgdG90YWxCb3VudHkgPSBib3VudGllcy52YWx1ZXMoKS5zdHJlYW0oKS5tYXBUb0ludChJbnRlZ2VyOjppbnRWYWx1ZSkuc3VtKCk7DQoNCiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgc2V0dGVyIGxpc3QNCiAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gc2V0dGVyTmFtZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgICAgICAgICBmb3IgKFVVSUQgc2V0dGVyVVVJRCA6IGJvdW50aWVzLmtleVNldCgpKSB7DQogICAgICAgICAgICAgICAgICAgIFN0cmluZyBzZXR0ZXJOYW1lID0gIlVua25vd24iOw0KICAgICAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGVyTmFtZSA9IHBsdWdpbi5nZXRTZXJ2ZXIoKS5nZXRPZmZsaW5lUGxheWVyKHNldHRlclVVSUQpLmdldE5hbWUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXR0ZXJOYW1lID09IG51bGwpIHNldHRlck5hbWUgPSAiVW5rbm93biI7DQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyBLZWVwICJVbmtub3duIg0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHNldHRlck5hbWVzLmFkZChzZXR0ZXJOYW1lKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgU3RyaW5nIHNldHRlckxpc3QgPSBTdHJpbmcuam9pbigiLCAiLCBzZXR0ZXJOYW1lcyk7DQoNCiAgICAgICAgICAgICAgICAvLyBHZXQgY3VycmVudCB0aW1lIGZvciBkZWF0aCB0aW1lDQogICAgICAgICAgICAgICAgU3RyaW5nIGRlYXRoVGltZSA9IGRhdGVGb3JtYXQuZm9ybWF0KG5ldyBEYXRlKCkpOw0KDQogICAgICAgICAgICAgICAgLy8gQXBwbHkgcGxhY2Vob2xkZXJzIHRvIG5hbWUNCiAgICAgICAgICAgICAgICBTdHJpbmcgZmluYWxOYW1lID0gYXBwbHlQbGFjZWhvbGRlcnMoc2t1bGxOYW1lLCBraWxsZWQuZ2V0TmFtZSgpLCB0b3RhbEJvdW50eSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW50aWVzLnNpemUoKSwga2lsbGVyLmdldE5hbWUoKSwgZGVhdGhUaW1lLCBzZXR0ZXJMaXN0KTsNCiAgICAgICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgZmluYWxOYW1lKSk7DQoNCiAgICAgICAgICAgICAgICAvLyBBcHBseSBwbGFjZWhvbGRlcnMgdG8gbG9yZQ0KICAgICAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBmaW5hbExvcmUgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgICAgICAgICBmb3IgKFN0cmluZyBsaW5lIDogc2t1bGxMb3JlKSB7DQogICAgICAgICAgICAgICAgICAgIFN0cmluZyBwcm9jZXNzZWRMaW5lID0gYXBwbHlQbGFjZWhvbGRlcnMobGluZSwga2lsbGVkLmdldE5hbWUoKSwgdG90YWxCb3VudHksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm91bnRpZXMuc2l6ZSgpLCBraWxsZXIuZ2V0TmFtZSgpLCBkZWF0aFRpbWUsIHNldHRlckxpc3QpOw0KICAgICAgICAgICAgICAgICAgICBmaW5hbExvcmUuYWRkKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgcHJvY2Vzc2VkTGluZSkpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIEFkZCBib3VudHkgaWRlbnRpZmljYXRpb24gZGF0YQ0KICAgICAgICAgICAgICAgIGFkZEJvdW50eVNrdWxsRGF0YShtZXRhLCBraWxsZWQsIGJvdW50aWVzLCBraWxsZXIpOw0KICAgICAgICAgICAgICAgIG1ldGEuc2V0TG9yZShmaW5hbExvcmUpOw0KDQogICAgICAgICAgICAgICAgLy8gQWRkIGVuY2hhbnRtZW50IGdsb3cgaWYgY29uZmlndXJlZA0KICAgICAgICAgICAgICAgIGJvb2xlYW4gc2hvdWxkR2xvdyA9IGNvbmZpZy5nZXRCb29sZWFuKCJib3VudHktc2t1bGwuZW5jaGFudG1lbnQtZ2xvdyIsIHRydWUpOw0KICAgICAgICAgICAgICAgIGlmIChzaG91bGRHbG93KSB7DQogICAgICAgICAgICAgICAgICAgIG1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgc2t1bGwuc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIlN1Y2Nlc3NmdWxseSBjb25maWd1cmVkIGJvdW50eSBza3VsbCBmb3IgIiArIGtpbGxlZC5nZXROYW1lKCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiBza3VsbDsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIlNrdWxsIG1ldGEgaXMgbm90IFNrdWxsTWV0YSBmb3IgIiArIGtpbGxlZC5nZXROYW1lKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIGNyZWF0ZSBjdXN0b20gYm91bnR5IHNrdWxsOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB9DQoNCiAgICBwcml2YXRlIHN0YXRpYyBTdHJpbmcgYXBwbHlQbGFjZWhvbGRlcnMoU3RyaW5nIHRleHQsIFN0cmluZyBwbGF5ZXJOYW1lLCBpbnQgdG90YWxCb3VudHksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCBib3VudHlDb3VudCwgU3RyaW5nIGtpbGxlck5hbWUsIFN0cmluZyBkZWF0aFRpbWUsIFN0cmluZyBzZXR0ZXJMaXN0KSB7DQogICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoIiV0YXJnZXQlIiwgcGxheWVyTmFtZSkNCiAgICAgICAgICAgICAgICAucmVwbGFjZSgiJXBsYXllciUiLCBwbGF5ZXJOYW1lKQ0KICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIldG90YWxfYm91bnR5JSIsIFN0cmluZy52YWx1ZU9mKHRvdGFsQm91bnR5KSkNCiAgICAgICAgICAgICAgICAucmVwbGFjZSgiJWJvdW50eV9jb3VudCUiLCBTdHJpbmcudmFsdWVPZihib3VudHlDb3VudCkpDQogICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVraWxsZXIlIiwga2lsbGVyTmFtZSkNCiAgICAgICAgICAgICAgICAucmVwbGFjZSgiJWRlYXRoX3RpbWUlIiwgZGVhdGhUaW1lKQ0KICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlc2V0dGVyX2xpc3QlIiwgc2V0dGVyTGlzdCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQWRkcyBib3VudHktc3BlY2lmaWMgZGF0YSB0byBhIHNrdWxsIG1ldGENCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyB2b2lkIGFkZEJvdW50eVNrdWxsRGF0YShTa3VsbE1ldGEgbWV0YSwgUGxheWVyIGtpbGxlZCwgTWFwPFVVSUQsIEludGVnZXI+IGJvdW50aWVzLCBQbGF5ZXIga2lsbGVyKSB7DQogICAgICAgIExpc3Q8U3RyaW5nPiBjdXJyZW50TG9yZSA9IG1ldGEuZ2V0TG9yZSgpOw0KICAgICAgICBpZiAoY3VycmVudExvcmUgPT0gbnVsbCkgew0KICAgICAgICAgICAgY3VycmVudExvcmUgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEFkZCBpbnZpc2libGUgaWRlbnRpZmllciBsaW5lcw0KICAgICAgICBjdXJyZW50TG9yZS5hZGQoQ2hhdENvbG9yLkRBUktfR1JBWSArICIiICsgQ2hhdENvbG9yLk1BR0lDICsgIkJPVU5UWV9TS1VMTCIpOw0KICAgICAgICBjdXJyZW50TG9yZS5hZGQoQ2hhdENvbG9yLkRBUktfR1JBWSArICIiICsgQ2hhdENvbG9yLk1BR0lDICsgIktJTExFRDoiICsga2lsbGVkLmdldFVuaXF1ZUlkKCkudG9TdHJpbmcoKSk7DQogICAgICAgIGN1cnJlbnRMb3JlLmFkZChDaGF0Q29sb3IuREFSS19HUkFZICsgIiIgKyBDaGF0Q29sb3IuTUFHSUMgKyAiS0lMTEVSOiIgKyBraWxsZXIuZ2V0VW5pcXVlSWQoKS50b1N0cmluZygpKTsNCg0KICAgICAgICAvLyBTdG9yZSB0b3RhbCBib3VudHkgdmFsdWUNCiAgICAgICAgaW50IHRvdGFsQm91bnR5VmFsdWUgPSBib3VudGllcy52YWx1ZXMoKS5zdHJlYW0oKS5tYXBUb0ludChJbnRlZ2VyOjppbnRWYWx1ZSkuc3VtKCk7DQogICAgICAgIGN1cnJlbnRMb3JlLmFkZChDaGF0Q29sb3IuREFSS19HUkFZICsgIiIgKyBDaGF0Q29sb3IuTUFHSUMgKyAiVkFMVUU6IiArIHRvdGFsQm91bnR5VmFsdWUpOw0KDQogICAgICAgIG1ldGEuc2V0TG9yZShjdXJyZW50TG9yZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ3JlYXRlcyBhIHBsYXllciBoZWFkIHdpdGggdGhlIHRhcmdldCBwbGF5ZXIncyBza2luIHVzaW5nIHZlcnNpb24tYXdhcmUgbWV0aG9kcw0KICAgICAqIC8vIG5vdGU6IENyZWF0ZXMgYSBwbGF5ZXIgaGVhZCBJdGVtU3RhY2sgd2l0aCBwcm9wZXIgc2tpbiBmb3IgdGhlIHNlcnZlciB2ZXJzaW9uDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBJdGVtU3RhY2sgY3JlYXRlVmVyc2lvbkF3YXJlUGxheWVySGVhZChPZmZsaW5lUGxheWVyIHRhcmdldFBsYXllcikgew0KICAgICAgICBCb3VudGllc1BsdXMgcGx1Z2luID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCk7DQogICAgICAgIFN0cmluZyBwbGF5ZXJOYW1lID0gdGFyZ2V0UGxheWVyLmdldE5hbWUoKTsNCiAgICAgICAgaWYgKHBsYXllck5hbWUgPT0gbnVsbCB8fCBwbGF5ZXJOYW1lLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkNhbm5vdCBjcmVhdGUgcGxheWVyIGhlYWQ6IE9mZmxpbmVQbGF5ZXIgaGFzIG5vIG5hbWUgKFVVSUQ6ICIgKyB0YXJnZXRQbGF5ZXIuZ2V0VW5pcXVlSWQoKSArICIpIik7DQogICAgICAgICAgICByZXR1cm4gY3JlYXRlRmFsbGJhY2tTa3VsbCh0YXJnZXRQbGF5ZXIpOw0KICAgICAgICB9DQogICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJDcmVhdGluZyBwbGF5ZXIgaGVhZCBmb3IgIiArIHBsYXllck5hbWUgKyAiLCBpc0xlZ2FjeT0iICsgVmVyc2lvblV0aWxzLmlzTGVnYWN5KCkpOw0KICAgICAgICBJdGVtU3RhY2sgaGVhZCA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIlBMQVlFUl9IRUFEIik7DQogICAgICAgIGlmIChoZWFkID09IG51bGwgfHwgaGVhZC5nZXRUeXBlKCkgPT0gWE1hdGVyaWFsLlNUT05FLnBhcnNlTWF0ZXJpYWwoKSkgew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkZhaWxlZCB0byBjcmVhdGUgUExBWUVSX0hFQUQgaXRlbSBmb3IgIiArIHBsYXllck5hbWUgKyAiOiBudWxsIG9yIFNUT05FLCBmYWxsaW5nIGJhY2sgdG8gU0tFTEVUT05fU0tVTEwiKTsNCiAgICAgICAgICAgIHJldHVybiBjcmVhdGVGYWxsYmFja1NrdWxsKHRhcmdldFBsYXllcik7DQogICAgICAgIH0NCiAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIkluaXRpYWwgaGVhZCBpdGVtIGZvciAiICsgcGxheWVyTmFtZSArICI6IHR5cGU9IiArIGhlYWQuZ2V0VHlwZSgpLm5hbWUoKSArIChWZXJzaW9uVXRpbHMuaXNMZWdhY3koKSA/ICIsIGR1cmFiaWxpdHk9IiArIGhlYWQuZ2V0RHVyYWJpbGl0eSgpIDogIiIpKTsNCiAgICAgICAgaWYgKFZlcnNpb25VdGlscy5pc0xlZ2FjeSgpKSB7DQogICAgICAgICAgICBpZiAoaGVhZC5nZXRUeXBlKCkgIT0gWE1hdGVyaWFsLlBMQVlFUl9IRUFELnBhcnNlTWF0ZXJpYWwoKSB8fCBoZWFkLmdldER1cmFiaWxpdHkoKSAhPSAzKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkludmFsaWQgbGVnYWN5IHNrdWxsIGZvciAiICsgcGxheWVyTmFtZSArICI6IGV4cGVjdGVkIFNLVUxMX0lURU06MywgZ290ICIgKyBoZWFkLmdldFR5cGUoKS5uYW1lKCkgKyAiOiIgKyBoZWFkLmdldER1cmFiaWxpdHkoKSArICIsIGZhbGxpbmcgYmFjayB0byBTS0VMRVRPTl9TS1VMTCIpOw0KICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVGYWxsYmFja1NrdWxsKHRhcmdldFBsYXllcik7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBpZiAoIWhlYWQuZ2V0VHlwZSgpLm5hbWUoKS5lcXVhbHMoIlBMQVlFUl9IRUFEIikpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiSW52YWxpZCBtb2Rlcm4gc2t1bGwgZm9yICIgKyBwbGF5ZXJOYW1lICsgIjogZXhwZWN0ZWQgUExBWUVSX0hFQUQsIGdvdCAiICsgaGVhZC5nZXRUeXBlKCkubmFtZSgpICsgIiwgZmFsbGluZyBiYWNrIHRvIFNLRUxFVE9OX1NLVUxMIik7DQogICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUZhbGxiYWNrU2t1bGwodGFyZ2V0UGxheWVyKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBJdGVtTWV0YSByYXdNZXRhID0gaGVhZC5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAoIShyYXdNZXRhIGluc3RhbmNlb2YgU2t1bGxNZXRhKSkgew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkl0ZW1NZXRhIGlzIG5vdCBTa3VsbE1ldGEgZm9yICIgKyBwbGF5ZXJOYW1lICsgIjogdHlwZT0iICsgaGVhZC5nZXRUeXBlKCkubmFtZSgpICsgIiwgbWV0YVR5cGU9IiArIChyYXdNZXRhICE9IG51bGwgPyByYXdNZXRhLmdldENsYXNzKCkuZ2V0U2ltcGxlTmFtZSgpIDogIm51bGwiKSArICIsIGZhbGxpbmcgYmFjayB0byBTS0VMRVRPTl9TS1VMTCIpOw0KICAgICAgICAgICAgaGVhZC5zZXRJdGVtTWV0YShyYXdNZXRhKTsNCiAgICAgICAgICAgIHJldHVybiBjcmVhdGVGYWxsYmFja1NrdWxsKHRhcmdldFBsYXllcik7DQogICAgICAgIH0NCiAgICAgICAgU2t1bGxNZXRhIHNrdWxsTWV0YSA9IChTa3VsbE1ldGEpIHJhd01ldGE7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBpZiAoIVZlcnNpb25VdGlscy5pc0xlZ2FjeSgpKSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgTWV0aG9kIHNldE93bmluZ1BsYXllciA9IFNrdWxsTWV0YS5jbGFzcy5nZXRNZXRob2QoInNldE93bmluZ1BsYXllciIsIE9mZmxpbmVQbGF5ZXIuY2xhc3MpOw0KICAgICAgICAgICAgICAgICAgICBzZXRPd25pbmdQbGF5ZXIuaW52b2tlKHNrdWxsTWV0YSwgdGFyZ2V0UGxheWVyKTsNCiAgICAgICAgICAgICAgICAgICAgaGVhZC5zZXRJdGVtTWV0YShza3VsbE1ldGEpOw0KICAgICAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiU2V0IG93bmVyIGZvciAiICsgcGxheWVyTmFtZSArICIgdXNpbmcgc2V0T3duaW5nUGxheWVyIik7DQogICAgICAgICAgICAgICAgICAgIGlmIChpc1NraW5BcHBsaWVkKHNrdWxsTWV0YSwgcGxheWVyTmFtZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJTa2luIGFwcGxpZWQgZm9yICIgKyBwbGF5ZXJOYW1lICsgIiB1c2luZyBzZXRPd25pbmdQbGF5ZXIiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoZWFkOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJzZXRPd25pbmdQbGF5ZXIgZmFpbGVkIHRvIGFwcGx5IHNraW4gZm9yICIgKyBwbGF5ZXJOYW1lICsgIiwgZmFsbGluZyBiYWNrIHRvIHNldE93bmVyIik7DQogICAgICAgICAgICAgICAgfSBjYXRjaCAoTm9TdWNoTWV0aG9kRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoInNldE93bmluZ1BsYXllciBub3QgYXZhaWxhYmxlIGZvciAiICsgcGxheWVyTmFtZSArICIsIGZhbGxpbmcgYmFjayB0byBzZXRPd25lciIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHNrdWxsTWV0YS5zZXRPd25lcihwbGF5ZXJOYW1lKTsNCiAgICAgICAgICAgIGhlYWQuc2V0SXRlbU1ldGEoc2t1bGxNZXRhKTsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJTZXQgb3duZXIgZm9yICIgKyBwbGF5ZXJOYW1lICsgIiB1c2luZyBzZXRPd25lciIpOw0KICAgICAgICAgICAgaWYgKGlzU2tpbkFwcGxpZWQoc2t1bGxNZXRhLCBwbGF5ZXJOYW1lKSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJTa2luIGFwcGxpZWQgZm9yICIgKyBwbGF5ZXJOYW1lICsgIiB1c2luZyBzZXRPd25lciIpOw0KICAgICAgICAgICAgICAgIHJldHVybiBoZWFkOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoInNldE93bmVyIGZhaWxlZCB0byBhcHBseSBza2luIGZvciAiICsgcGxheWVyTmFtZSArICIsIGF0dGVtcHRpbmcgVmVyc2lvbldyYXBwZXIiKTsNCiAgICAgICAgICAgIFZlcnNpb25XcmFwcGVyIHdyYXBwZXIgPSBWZXJzaW9uV3JhcHBlckZhY3RvcnkuZ2V0V3JhcHBlcigpOw0KICAgICAgICAgICAgSXRlbVN0YWNrIHNraW5uZWRIZWFkID0gd3JhcHBlci5jcmVhdGVQbGF5ZXJIZWFkKHBsYXllck5hbWUpOw0KICAgICAgICAgICAgaWYgKHNraW5uZWRIZWFkICE9IG51bGwgJiYgVmVyc2lvblV0aWxzLmlzUGxheWVySGVhZChza2lubmVkSGVhZCkpIHsNCiAgICAgICAgICAgICAgICBTa3VsbE1ldGEgc2tpbm5lZE1ldGEgPSAoU2t1bGxNZXRhKSBza2lubmVkSGVhZC5nZXRJdGVtTWV0YSgpOw0KICAgICAgICAgICAgICAgIGlmIChza2lubmVkTWV0YSAhPSBudWxsICYmIGlzU2tpbkFwcGxpZWQoc2tpbm5lZE1ldGEsIHBsYXllck5hbWUpKSB7DQogICAgICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJTa2luIGFwcGxpZWQgZm9yICIgKyBwbGF5ZXJOYW1lICsgIiB1c2luZyBWZXJzaW9uV3JhcHBlciIpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2tpbm5lZEhlYWQ7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJWZXJzaW9uV3JhcHBlciBoZWFkIGZvciAiICsgcGxheWVyTmFtZSArICIgZmFpbGVkIHNraW4gdmFsaWRhdGlvbiIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIlZlcnNpb25XcmFwcGVyIGZhaWxlZCBmb3IgIiArIHBsYXllck5hbWUgKyAiLCBhdHRlbXB0aW5nIHJlZmxlY3Rpb24iKTsNCiAgICAgICAgICAgIGluamVjdEdhbWVQcm9maWxlVmlhUmVmbGVjdGlvbihza3VsbE1ldGEsIHRhcmdldFBsYXllcik7DQogICAgICAgICAgICBoZWFkLnNldEl0ZW1NZXRhKHNrdWxsTWV0YSk7DQogICAgICAgICAgICBpZiAoaXNTa2luQXBwbGllZChza3VsbE1ldGEsIHBsYXllck5hbWUpKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIlNraW4gYXBwbGllZCBmb3IgIiArIHBsYXllck5hbWUgKyAiIHVzaW5nIHJlZmxlY3Rpb24iKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gaGVhZDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJSZWZsZWN0aW9uIGZhaWxlZCB0byBhcHBseSBza2luIGZvciAiICsgcGxheWVyTmFtZSk7DQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiRXhjZXB0aW9uIHdoaWxlIGNyZWF0aW5nIGhlYWQgZm9yICIgKyBwbGF5ZXJOYW1lICsgIjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgfQ0KICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiQWxsIHNraW4gYXBwbGljYXRpb24gYXR0ZW1wdHMgZmFpbGVkIGZvciAiICsgcGxheWVyTmFtZSArICIsIHVzaW5nIGZhbGxiYWNrIHNrdWxsIik7DQogICAgICAgIHJldHVybiBjcmVhdGVGYWxsYmFja1NrdWxsKHRhcmdldFBsYXllcik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogVmFsaWRhdGVzIHdoZXRoZXIgYSBza3VsbCBoYXMgdGhlIGNvcnJlY3Qgc2tpbiBhcHBsaWVkDQogICAgICovDQogICAgcHJpdmF0ZSBzdGF0aWMgYm9vbGVhbiBpc1NraW5BcHBsaWVkKFNrdWxsTWV0YSBza3VsbE1ldGEsIFN0cmluZyBleHBlY3RlZE93bmVyKSB7DQogICAgICAgIEJvdW50aWVzUGx1cyBwbHVnaW4gPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKTsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIFN0cmluZyBvd25lciA9IHNrdWxsTWV0YS5nZXRPd25lcigpOw0KICAgICAgICAgICAgaWYgKG93bmVyICE9IG51bGwgJiYgb3duZXIuZXF1YWxzSWdub3JlQ2FzZShleHBlY3RlZE93bmVyKSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJTa3VsbCBvd25lciBtYXRjaGVzOiAiICsgZXhwZWN0ZWRPd25lcik7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiU2t1bGwgb3duZXIgbWlzbWF0Y2g6IGV4cGVjdGVkICIgKyBleHBlY3RlZE93bmVyICsgIiwgZm91bmQgIiArIChvd25lciA9PSBudWxsID8gIm51bGwiIDogb3duZXIpKTsNCiAgICAgICAgICAgIGlmICghVmVyc2lvblV0aWxzLmlzTGVnYWN5KCkpIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBGaWVsZCBwcm9maWxlRmllbGQgPSBza3VsbE1ldGEuZ2V0Q2xhc3MoKS5nZXREZWNsYXJlZEZpZWxkKCJwcm9maWxlIik7DQogICAgICAgICAgICAgICAgICAgIHByb2ZpbGVGaWVsZC5zZXRBY2Nlc3NpYmxlKHRydWUpOw0KICAgICAgICAgICAgICAgICAgICBPYmplY3QgcHJvZmlsZSA9IHByb2ZpbGVGaWVsZC5nZXQoc2t1bGxNZXRhKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2ZpbGUgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgTWV0aG9kIGdldE5hbWVNZXRob2QgPSBwcm9maWxlLmdldENsYXNzKCkuZ2V0TWV0aG9kKCJnZXROYW1lIik7DQogICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcgcHJvZmlsZU5hbWUgPSAoU3RyaW5nKSBnZXROYW1lTWV0aG9kLmludm9rZShwcm9maWxlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9maWxlTmFtZSAhPSBudWxsICYmIHByb2ZpbGVOYW1lLmVxdWFsc0lnbm9yZUNhc2UoZXhwZWN0ZWRPd25lcikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiR2FtZVByb2ZpbGUgbmFtZSBtYXRjaGVzIGZvciAiICsgZXhwZWN0ZWRPd25lcik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiR2FtZVByb2ZpbGUgbmFtZSBtaXNtYXRjaDogZXhwZWN0ZWQgIiArIGV4cGVjdGVkT3duZXIgKyAiLCBmb3VuZCAiICsgKHByb2ZpbGVOYW1lID09IG51bGwgPyAibnVsbCIgOiBwcm9maWxlTmFtZSkpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIk5vIEdhbWVQcm9maWxlIHNldCBmb3Igc2t1bGwgb2YgIiArIGV4cGVjdGVkT3duZXIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkVycm9yIGNoZWNraW5nIEdhbWVQcm9maWxlIGZvciAiICsgZXhwZWN0ZWRPd25lciArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkVycm9yIHZhbGlkYXRpbmcgc2t1bGwgb3duZXIgZm9yICIgKyBleHBlY3RlZE93bmVyICsgIjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgYSBmYWxsYmFjayBza2VsZXRvbiBza3VsbCB3aXRoIGEgcGxhY2Vob2xkZXItYXBwbGllZCBuYW1lDQogICAgICovDQogICAgcHJpdmF0ZSBzdGF0aWMgSXRlbVN0YWNrIGNyZWF0ZUZhbGxiYWNrU2t1bGwoT2ZmbGluZVBsYXllciB0YXJnZXRQbGF5ZXIpIHsNCiAgICAgICAgQm91bnRpZXNQbHVzIHBsdWdpbiA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpOw0KICAgICAgICBJdGVtU3RhY2sgaGVhZCA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIlNLRUxFVE9OX1NLVUxMIik7DQogICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBoZWFkLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmIChtZXRhICE9IG51bGwpIHsNCiAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgICAgIC50YXJnZXQodGFyZ2V0UGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICAgICAgU3RyaW5nIGZhbGxiYWNrTmFtZSA9IFBsYWNlaG9sZGVycy5hcHBseSgiJmUlYm91bnRpZXNwbHVzX3RhcmdldCUiLCBjb250ZXh0KTsNCiAgICAgICAgICAgIG1ldGEuc2V0RGlzcGxheU5hbWUoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBmYWxsYmFja05hbWUpKTsNCiAgICAgICAgICAgIGhlYWQuc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiRmFpbGVkIHRvIHNldCBtZXRhIGZvciBmYWxsYmFjayBza3VsbCAoVVVJRDogIiArIHRhcmdldFBsYXllci5nZXRVbmlxdWVJZCgpICsgIikiKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gaGVhZDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBJbmplY3RzIHRoZSBPZmZsaW5lUGxheWVyJ3MgaW50ZXJuYWwgR2FtZVByb2ZpbGUgKHdpdGggc2tpbikgaW50byBza3VsbE1ldGEgdmlhIHJlZmxlY3Rpb24NCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyB2b2lkIGluamVjdEdhbWVQcm9maWxlVmlhUmVmbGVjdGlvbihTa3VsbE1ldGEgc2t1bGxNZXRhLCBPZmZsaW5lUGxheWVyIHRhcmdldCkgew0KICAgICAgICBCb3VudGllc1BsdXMgcGx1Z2luID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCk7DQogICAgICAgIFN0cmluZyB0YXJnZXROYW1lID0gdGFyZ2V0LmdldE5hbWUoKSAhPSBudWxsID8gdGFyZ2V0LmdldE5hbWUoKSA6IHRhcmdldC5nZXRVbmlxdWVJZCgpLnRvU3RyaW5nKCk7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBPYmplY3QgcHJvZmlsZSA9IG51bGw7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIEZpZWxkIHByb2ZpbGVGaWVsZCA9IHRhcmdldC5nZXRDbGFzcygpLmdldERlY2xhcmVkRmllbGQoInByb2ZpbGUiKTsNCiAgICAgICAgICAgICAgICBwcm9maWxlRmllbGQuc2V0QWNjZXNzaWJsZSh0cnVlKTsNCiAgICAgICAgICAgICAgICBwcm9maWxlID0gcHJvZmlsZUZpZWxkLmdldCh0YXJnZXQpOw0KICAgICAgICAgICAgICAgIGlmIChwcm9maWxlID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkdhbWVQcm9maWxlIGlzIG51bGwgZm9yICIgKyB0YXJnZXROYW1lKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiUmV0cmlldmVkIEdhbWVQcm9maWxlIGZvciAiICsgdGFyZ2V0TmFtZSk7DQogICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gcmV0cmlldmUgR2FtZVByb2ZpbGUgZm9yICIgKyB0YXJnZXROYW1lICsgIjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIE1ldGhvZCBzZXR0ZXIgPSBza3VsbE1ldGEuZ2V0Q2xhc3MoKS5nZXREZWNsYXJlZE1ldGhvZCgic2V0UHJvZmlsZSIsIHByb2ZpbGUuZ2V0Q2xhc3MoKSk7DQogICAgICAgICAgICAgICAgc2V0dGVyLnNldEFjY2Vzc2libGUodHJ1ZSk7DQogICAgICAgICAgICAgICAgc2V0dGVyLmludm9rZShza3VsbE1ldGEsIHByb2ZpbGUpOw0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJJbmplY3RlZCBHYW1lUHJvZmlsZSB1c2luZyBzZXRQcm9maWxlIGZvciAiICsgdGFyZ2V0TmFtZSk7DQogICAgICAgICAgICB9IGNhdGNoIChOb1N1Y2hNZXRob2RFeGNlcHRpb24gbnNtZSkgew0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIEZpZWxkIHByb2ZpbGVGaWVsZCA9IHNrdWxsTWV0YS5nZXRDbGFzcygpLmdldERlY2xhcmVkRmllbGQoInByb2ZpbGUiKTsNCiAgICAgICAgICAgICAgICAgICAgcHJvZmlsZUZpZWxkLnNldEFjY2Vzc2libGUodHJ1ZSk7DQogICAgICAgICAgICAgICAgICAgIHByb2ZpbGVGaWVsZC5zZXQoc2t1bGxNZXRhLCBwcm9maWxlKTsNCiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIkluamVjdGVkIEdhbWVQcm9maWxlIHVzaW5nIGZpZWxkIGFjY2VzcyBmb3IgIiArIHRhcmdldE5hbWUpOw0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gaW5qZWN0IEdhbWVQcm9maWxlIHZpYSBmaWVsZCBmb3IgIiArIHRhcmdldE5hbWUgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIHQpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJSZWZsZWN0aW9uIGluamVjdGlvbiBmYWlsZWQgZm9yICIgKyB0YXJnZXROYW1lICsgIjogIiArIHQuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiB0aGUgc2t1bGwgaGFzIGEgdmFsaWQgb3duZXIgKGZvciBza2luIHZlcmlmaWNhdGlvbikNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyBib29sZWFuIGhhc1ZhbGlkT3duZXIoU2t1bGxNZXRhIHNrdWxsTWV0YSwgU3RyaW5nIGV4cGVjdGVkT3duZXIpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIFN0cmluZyBvd25lciA9IHNrdWxsTWV0YS5nZXRPd25lcigpOyAvLyBHZXRzIG93bmVyIG5hbWUgKDEuOC44IGNvbXBhdGlibGUpDQogICAgICAgICAgICBpZiAob3duZXIgIT0gbnVsbCAmJiBvd25lci5lcXVhbHNJZ25vcmVDYXNlKGV4cGVjdGVkT3duZXIpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIFZhbGlkYXRlcyBvd25lciBtYXRjaGVzDQogICAgICAgICAgICB9DQogICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS5pbmZvKCJTa3VsbCBvd25lciBtaXNtYXRjaDogZXhwZWN0ZWQgIiArIGV4cGVjdGVkT3duZXIgKyAiLCBmb3VuZCAiICsgb3duZXIpOyAvLyBMb2dzIG1pc21hdGNoDQogICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFJldHVybnMgZmFsc2UgaWYgb3duZXIgZG9lc27igJl0IG1hdGNoDQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJFcnJvciB2YWxpZGF0aW5nIHNrdWxsIG93bmVyIGZvciAiICsgZXhwZWN0ZWRPd25lciArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7IC8vIExvZ3MgZXJyb3INCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gUmV0dXJucyBmYWxzZSBvbiBlcnJvcg0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIGFuIGl0ZW0gaXMgYSB2YWxpZCBib3VudHkgc2t1bGwNCiAgICAgKiAvLyBub3RlOiBWYWxpZGF0ZXMgdGhlIHNrdWxsIGhhcyB0aGUgQk9VTlRZX1NLVUxMIGlkZW50aWZpZXIgYW5kIHJlc3BlY3RzIHNob3AuYWxsb3ctZXhwaXJlZC1za3VsbHMgZm9yIGV4cGlyYXRpb24NCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW4gaXNWYWxpZEJvdW50eVNrdWxsKEl0ZW1TdGFjayBpdGVtKSB7DQogICAgICAgIEJvdW50aWVzUGx1cyBwbHVnaW4gPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKTsNCiAgICAgICAgaWYgKGl0ZW0gPT0gbnVsbCB8fCAhVmVyc2lvblV0aWxzLmlzUGxheWVySGVhZChpdGVtKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCEoaXRlbS5nZXRJdGVtTWV0YSgpIGluc3RhbmNlb2YgU2t1bGxNZXRhKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgU2t1bGxNZXRhIG1ldGEgPSAoU2t1bGxNZXRhKSBpdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gbWV0YS5nZXRMb3JlKCk7DQoNCiAgICAgICAgaWYgKGxvcmUgPT0gbnVsbCB8fCBsb3JlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ2hlY2sgZm9yIHRoZSBib3VudHkgc2t1bGwgaWRlbnRpZmllcg0KICAgICAgICBib29sZWFuIGlzQm91bnR5U2t1bGwgPSBmYWxzZTsNCiAgICAgICAgZm9yIChTdHJpbmcgbGluZSA6IGxvcmUpIHsNCiAgICAgICAgICAgIGlmIChsaW5lLmNvbnRhaW5zKCJCT1VOVFlfU0tVTEwiKSkgew0KICAgICAgICAgICAgICAgIGlzQm91bnR5U2t1bGwgPSB0cnVlOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQWxzbyBjaGVjayBieSBkaXNwbGF5IG5hbWUgcGF0dGVybg0KICAgICAgICBTdHJpbmcgZGlzcGxheU5hbWUgPSBtZXRhLmdldERpc3BsYXlOYW1lKCk7DQogICAgICAgIGlmICghaXNCb3VudHlTa3VsbCAmJiBkaXNwbGF5TmFtZSAhPSBudWxsICYmIGRpc3BsYXlOYW1lLmNvbnRhaW5zKCJCb3VudHkgSGVhZCIpKSB7DQogICAgICAgICAgICBpc0JvdW50eVNrdWxsID0gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghaXNCb3VudHlTa3VsbCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ2hlY2sgZXhwaXJhdGlvbiBpZiBhbGxvdy1leHBpcmVkLXNrdWxscyBpcyBmYWxzZQ0KICAgICAgICBib29sZWFuIGFsbG93RXhwaXJlZFNrdWxscyA9IHBsdWdpbi5nZXRDb25maWcoKS5nZXRCb29sZWFuKCJzaG9wLmFsbG93LWV4cGlyZWQtc2t1bGxzIiwgdHJ1ZSk7DQogICAgICAgIGlmICghYWxsb3dFeHBpcmVkU2t1bGxzKSB7DQogICAgICAgICAgICBsb25nIGV4cGlyZVRpbWUgPSBWZXJzaW9uVXRpbHMuZ2V0TkJURG91YmxlKGl0ZW0sICJleHBpcmVfdGltZSIpLmxvbmdWYWx1ZSgpOw0KICAgICAgICAgICAgaWYgKGV4cGlyZVRpbWUgPiAwICYmIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpID4gZXhwaXJlVGltZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJbREVCVUddIEJvdW50eSBza3VsbCBmb3IgIiArIChtZXRhLmdldE93bmVyKCkgIT0gbnVsbCA/IG1ldGEuZ2V0T3duZXIoKSA6ICJ1bmtub3duIikgKyAiIGlzIGV4cGlyZWQiKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSBVVUlEIG9mIHRoZSBraWxsZWQgcGxheWVyIGZyb20gYSBib3VudHkgc2t1bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIFVVSUQgZ2V0S2lsbGVkUGxheWVyVVVJRChJdGVtU3RhY2sgc2t1bGwpIHsNCiAgICAgICAgaWYgKCFpc1ZhbGlkQm91bnR5U2t1bGwoc2t1bGwpKSB7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KDQogICAgICAgIFNrdWxsTWV0YSBtZXRhID0gKFNrdWxsTWV0YSkgc2t1bGwuZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBtZXRhLmdldExvcmUoKTsNCg0KICAgICAgICBpZiAobG9yZSA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiBsb3JlKSB7DQogICAgICAgICAgICBpZiAobGluZS5jb250YWlucygiS0lMTEVEOiIpKSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHV1aWRTdHJpbmcgPSBsaW5lLnN1YnN0cmluZyhsaW5lLmluZGV4T2YoIktJTExFRDoiKSArIDcpOw0KICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgY29sb3IgY29kZXMgYW5kIG1hZ2ljIGNoYXJhY3RlcnMNCiAgICAgICAgICAgICAgICAgICAgdXVpZFN0cmluZyA9IENoYXRDb2xvci5zdHJpcENvbG9yKHV1aWRTdHJpbmcpLnJlcGxhY2VBbGwoIlteYS1mQS1GMC05LV0iLCAiIik7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBVVUlELmZyb21TdHJpbmcodXVpZFN0cmluZyk7DQogICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBVVUlEIGZvcm1hdA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBudWxsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdGhlIFVVSUQgb2YgdGhlIGtpbGxlciBmcm9tIGEgYm91bnR5IHNrdWxsDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBVVUlEIGdldEtpbGxlclVVSUQoSXRlbVN0YWNrIHNrdWxsKSB7DQogICAgICAgIGlmICghaXNWYWxpZEJvdW50eVNrdWxsKHNrdWxsKSkgew0KICAgICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgIH0NCg0KICAgICAgICBTa3VsbE1ldGEgbWV0YSA9IChTa3VsbE1ldGEpIHNrdWxsLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gbWV0YS5nZXRMb3JlKCk7DQoNCiAgICAgICAgaWYgKGxvcmUgPT0gbnVsbCkgew0KICAgICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgIH0NCg0KICAgICAgICBmb3IgKFN0cmluZyBsaW5lIDogbG9yZSkgew0KICAgICAgICAgICAgaWYgKGxpbmUuY29udGFpbnMoIktJTExFUjoiKSkgew0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIFN0cmluZyB1dWlkU3RyaW5nID0gbGluZS5zdWJzdHJpbmcobGluZS5pbmRleE9mKCJLSUxMRVI6IikgKyA3KTsNCiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGNvbG9yIGNvZGVzIGFuZCBtYWdpYyBjaGFyYWN0ZXJzDQogICAgICAgICAgICAgICAgICAgIHV1aWRTdHJpbmcgPSBDaGF0Q29sb3Iuc3RyaXBDb2xvcih1dWlkU3RyaW5nKS5yZXBsYWNlQWxsKCJbXmEtZkEtRjAtOS1dIiwgIiIpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gVVVJRC5mcm9tU3RyaW5nKHV1aWRTdHJpbmcpOw0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIEludmFsaWQgVVVJRCBmb3JtYXQNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB9DQp9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy91dGlscy9UYWJsaXN0TWFuYWdlci5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDE0NDM2IDE1MDI2MjMxMDYwIDAxNzc3MAAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvLyBmaWxlOiBqYXZhL3RvbnkyNi9ib3VudGllc1BsdXMvVGFibGlzdE1hbmFnZXIuamF2YQ0KcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzOw0KDQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5DaGF0Q29sb3I7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuRmlsZUNvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuRXZlbnRIYW5kbGVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuTGlzdGVuZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5wbGF5ZXIuUGxheWVySm9pbkV2ZW50Ow0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQucGxheWVyLlBsYXllclF1aXRFdmVudDsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkJvdW50aWVzUGx1czsNCg0KaW1wb3J0IGphdmEudXRpbC5IYXNoU2V0Ow0KaW1wb3J0IGphdmEudXRpbC5TZXQ7DQppbXBvcnQgamF2YS51dGlsLlVVSUQ7DQoNCi8qKg0KICogTWFuYWdlcyBjdXN0b20gcHJlZml4ZXMvc3VmZml4ZXMgZm9yIHBsYXllcnMgd2l0aCBib3VudGllcyBpbiB0aGUgdGFibGlzdA0KICovDQpwdWJsaWMgY2xhc3MgVGFibGlzdE1hbmFnZXIgaW1wbGVtZW50cyBMaXN0ZW5lciB7DQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KICAgIHByaXZhdGUgZmluYWwgU2V0PFVVSUQ+IG1vZGlmaWVkUGxheWVyczsNCg0KICAgIHB1YmxpYyBUYWJsaXN0TWFuYWdlcihCb3VudGllc1BsdXMgcGx1Z2luLCBFdmVudE1hbmFnZXIgZXZlbnRNYW5hZ2VyKSB7DQogICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luOw0KICAgICAgICB0aGlzLm1vZGlmaWVkUGxheWVycyA9IG5ldyBIYXNoU2V0PD4oKTsNCiAgICAgICAgZXZlbnRNYW5hZ2VyLnJlZ2lzdGVyKHRoaXMpOyAvLyBVc2UgRXZlbnRNYW5hZ2VyDQogICAgfQ0KDQogICAgLyoqDQogICAgICogQXBwbGllcyB0aGUgY29uZmlndXJlZCBwcmVmaXgvc3VmZml4IHRvIGEgcGxheWVyJ3MgdGFibGlzdCBuYW1lDQogICAgICogLy8gbm90ZTogVXBkYXRlcyBwbGF5ZXIgZGlzcGxheSBuYW1lIGlmIHRoZXkgaGF2ZSBhIGJvdW50eSBhbmQgdGhlIGZlYXR1cmUgaXMgZW5hYmxlZCwgcHJpb3JpdGl6aW5nIGJvb3N0ZWQgYm91bnRpZXMgYXQgdGhlIHRvcCBpZiBjb25maWd1cmVkDQogICAgICovDQogICAgcHVibGljIHZvaWQgYXBwbHlUYWJsaXN0TmFtZShQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiQXR0ZW1wdGluZyB0byBhcHBseSB0YWJsaXN0IG5hbWUgZm9yIHBsYXllcjogIiArIHBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Q29uZmlnKCk7DQogICAgICAgIGlmICghY29uZmlnLmdldEJvb2xlYW4oInRhYmxpc3QtbW9kaWZpY2F0aW9uLmVuYWJsZWQiLCBmYWxzZSkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiVGFibGlzdCBtb2RpZmljYXRpb24gZGlzYWJsZWQgaW4gY29uZmlnIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgaWYgKCFwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLmhhc0JvdW50eShwbGF5ZXIuZ2V0VW5pcXVlSWQoKSkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiTm8gYm91bnR5IGZvdW5kIGZvciBwbGF5ZXI6ICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBTdHJpbmcgZm9ybWF0Ow0KICAgICAgICBib29sZWFuIGlzQm9vc3RlZCA9IHBsdWdpbi5nZXRCb29zdGVkQm91bnR5KCkgIT0gbnVsbCAmJiBwbHVnaW4uZ2V0Qm9vc3RlZEJvdW50eSgpLmdldEN1cnJlbnRCb29zdGVkVGFyZ2V0KCkgIT0gbnVsbCAmJg0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRCb29zdGVkQm91bnR5KCkuZ2V0Q3VycmVudEJvb3N0ZWRUYXJnZXQoKS5lcXVhbHMocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICBpZiAoaXNCb29zdGVkICYmIGNvbmZpZy5nZXRCb29sZWFuKCJ0YWJsaXN0LW1vZGlmaWNhdGlvbi5tb3ZlLWJvb3N0ZWQtdG8tdG9wIiwgZmFsc2UpKSB7DQogICAgICAgICAgICBmb3JtYXQgPSBjb25maWcuZ2V0U3RyaW5nKCJ0YWJsaXN0LW1vZGlmaWNhdGlvbi5ib29zdGVkLWZvcm1hdCIsICImNltCb29zdGVkICVib3VudGllc3BsdXNfYm9vc3QleF0gJmElYm91bnRpZXNwbHVzX3RvdGFsX3Bvb2wlICY2XSAlcGxheWVyX25hbWUlIik7DQogICAgICAgICAgICBmb3JtYXQgPSAiXHUwMEE3eiIgKyBmb3JtYXQ7IC8vIFByZXBlbmQgc29ydGluZyBjaGFyYWN0ZXIgZm9yIGJvb3N0ZWQgcGxheWVycw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZm9ybWF0ID0gY29uZmlnLmdldFN0cmluZygidGFibGlzdC1tb2RpZmljYXRpb24uZm9ybWF0IiwgIiZjW0JvdW50eV0gJXBsYXllcl9uYW1lJSIpOw0KICAgICAgICB9DQogICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpLnBsYXllcihwbGF5ZXIpOw0KICAgICAgICBTdHJpbmcgZm9ybWF0dGVkTmFtZSA9IFBsYWNlaG9sZGVycy5hcHBseShmb3JtYXQsIGNvbnRleHQpOw0KICAgICAgICBpZiAoZm9ybWF0dGVkTmFtZSA9PSBudWxsIHx8IGZvcm1hdHRlZE5hbWUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiRm9ybWF0dGVkIHRhYmxpc3QgbmFtZSBpcyBudWxsIG9yIGVtcHR5IGZvciAiICsgcGxheWVyLmdldE5hbWUoKSArICIsIHVzaW5nIGRlZmF1bHQgbmFtZSIpOw0KICAgICAgICAgICAgZm9ybWF0dGVkTmFtZSA9IHBsYXllci5nZXROYW1lKCk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGZvcm1hdHRlZE5hbWUubGVuZ3RoKCkgPiAxNiAmJiBwbHVnaW4uZ2V0U2VydmVyKCkuZ2V0VmVyc2lvbigpLmNvbnRhaW5zKCIxLjgiKSkgew0KICAgICAgICAgICAgZm9ybWF0dGVkTmFtZSA9IGZvcm1hdHRlZE5hbWUuc3Vic3RyaW5nKDAsIDE2KTsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiVHJ1bmNhdGVkIHRhYmxpc3QgbmFtZSBmb3IgMS44IGNvbXBhdGliaWxpdHk6ICIgKyBmb3JtYXR0ZWROYW1lKTsNCiAgICAgICAgfQ0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgcGxheWVyLnNldFBsYXllckxpc3ROYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgZm9ybWF0dGVkTmFtZSkpOw0KICAgICAgICAgICAgbW9kaWZpZWRQbGF5ZXJzLmFkZChwbGF5ZXIuZ2V0VW5pcXVlSWQoKSk7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIlN1Y2Nlc3NmdWxseSBhcHBsaWVkIHRhYmxpc3QgbmFtZSB0byAiICsgcGxheWVyLmdldE5hbWUoKSArICI6ICIgKyBmb3JtYXR0ZWROYW1lKTsNCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJGYWlsZWQgdG8gYXBwbHkgdGFibGlzdCBuYW1lIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZW1vdmVzIHRoZSBjdXN0b20gcHJlZml4L3N1ZmZpeCBmcm9tIGEgcGxheWVyJ3MgdGFibGlzdCBuYW1lIC8vIG5vdGU6IFJlc2V0cyBwbGF5ZXIgZGlzcGxheSBuYW1lIHRvIGRlZmF1bHQgaWYgdGhleSBubyBsb25nZXIgaGF2ZSBhIGJvdW50eQ0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIHJlbW92ZVRhYmxpc3ROYW1lKFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgaWYgKCFtb2RpZmllZFBsYXllcnMuY29udGFpbnMocGxheWVyLmdldFVuaXF1ZUlkKCkpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIHBsYXllci5zZXRQbGF5ZXJMaXN0TmFtZShwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgIG1vZGlmaWVkUGxheWVycy5yZW1vdmUocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJSZW1vdmVkIHRhYmxpc3QgbmFtZSBtb2RpZmljYXRpb24gZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJGYWlsZWQgdG8gcmVtb3ZlIHRhYmxpc3QgbmFtZSBmb3IgIiArIHBsYXllci5nZXROYW1lKCkgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogVXBkYXRlcyB0YWJsaXN0IG5hbWVzIGZvciBhbGwgb25saW5lIHBsYXllcnMgLy8gbm90ZTogUmVhcHBsaWVzIG9yIHJlbW92ZXMgdGFibGlzdCBuYW1lcyBiYXNlZCBvbiBjdXJyZW50IGJvdW50eSBzdGF0dXMNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCB1cGRhdGVBbGxUYWJsaXN0TmFtZXMoKSB7DQogICAgICAgIGZvciAoUGxheWVyIHBsYXllciA6IEJ1a2tpdC5nZXRPbmxpbmVQbGF5ZXJzKCkpIHsNCiAgICAgICAgICAgIGlmIChwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLmhhc0JvdW50eShwbGF5ZXIuZ2V0VW5pcXVlSWQoKSkpIHsNCiAgICAgICAgICAgICAgICBhcHBseVRhYmxpc3ROYW1lKHBsYXllcik7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJlbW92ZVRhYmxpc3ROYW1lKHBsYXllcik7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBIYW5kbGVzIHBsYXllciBqb2luIGV2ZW50cyB0byBhcHBseSB0YWJsaXN0IG5hbWUgLy8gbm90ZTogQXBwbGllcyBwcmVmaXgvc3VmZml4IGlmIHBsYXllciBoYXMgYSBib3VudHkgb24gam9pbg0KICAgICAqLw0KICAgIEBFdmVudEhhbmRsZXINCiAgICBwdWJsaWMgdm9pZCBvblBsYXllckpvaW4oUGxheWVySm9pbkV2ZW50IGV2ZW50KSB7DQogICAgICAgIFBsYXllciBwbGF5ZXIgPSBldmVudC5nZXRQbGF5ZXIoKTsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJQbGF5ZXIgam9pbmVkOiAiICsgcGxheWVyLmdldE5hbWUoKSArICIsIGNoZWNraW5nIGZvciBib3VudHkiKTsNCiAgICAgICAgLy8gU2NoZWR1bGUgdGFibGlzdCB1cGRhdGUgd2l0aCBpbmNyZWFzZWQgZGVsYXkgdG8gZW5zdXJlIGNvbmZpZyBhbmQgcGxheWVyIHN0YXRlIGFyZSBzdGFibGUNCiAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2tMYXRlcihwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgIGlmIChwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLmhhc0JvdW50eShwbGF5ZXIuZ2V0VW5pcXVlSWQoKSkpIHsNCiAgICAgICAgICAgICAgICBhcHBseVRhYmxpc3ROYW1lKHBsYXllcik7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiTm8gYm91bnR5IGZvdW5kIGZvciBqb2luaW5nIHBsYXllcjogIiArIHBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCAyMEwpOyAvLyAxLXNlY29uZCBkZWxheQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEhhbmRsZXMgcGxheWVyIHF1aXQgZXZlbnRzIHRvIGNsZWFuIHVwIC8vIG5vdGU6IFJlbW92ZXMgcGxheWVyIGZyb20gbW9kaWZpZWQgbGlzdCBvbiBxdWl0DQogICAgICovDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uUGxheWVyUXVpdChQbGF5ZXJRdWl0RXZlbnQgZXZlbnQpIHsNCiAgICAgICAgbW9kaWZpZWRQbGF5ZXJzLnJlbW92ZShldmVudC5nZXRQbGF5ZXIoKS5nZXRVbmlxdWVJZCgpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDbGVhbnMgdXAgb24gcGx1Z2luIGRpc2FibGUgLy8gbm90ZTogUmVzZXRzIGFsbCBtb2RpZmllZCB0YWJsaXN0IG5hbWVzDQogICAgICovDQogICAgcHVibGljIHZvaWQgY2xlYW51cCgpIHsNCiAgICAgICAgZm9yIChQbGF5ZXIgcGxheWVyIDogQnVra2l0LmdldE9ubGluZVBsYXllcnMoKSkgew0KICAgICAgICAgICAgcmVtb3ZlVGFibGlzdE5hbWUocGxheWVyKTsNCiAgICAgICAgfQ0KICAgICAgICBtb2RpZmllZFBsYXllcnMuY2xlYXIoKTsNCiAgICB9DQp9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRvbnkyNi9ib3VudGllc1BsdXMvdXRpbHMvVGF4TWFuYWdlci5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAxMTQ1NSAxNTAyNjA2MzAzMiAwMTcxMjIAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzOw0KDQppbXBvcnQgbmV0Lm1pbGtib3dsLnZhdWx0LmVjb25vbXkuRWNvbm9teTsNCmltcG9ydCBvcmcuYnVra2l0LkNoYXRDb2xvcjsNCmltcG9ydCBvcmcuYnVra2l0Lk1hdGVyaWFsOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JdGVtU3RhY2s7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudGllc1BsdXM7DQoNCmltcG9ydCBqYXZhLnV0aWwuTGlzdDsNCmltcG9ydCBqYXZhLnV0aWwuVVVJRDsNCg0KLyoqDQogKiBNYW5hZ2VzIHRheCBjYWxjdWxhdGlvbnMsIHZhbGlkYXRpb25zLCBhbmQgZGVkdWN0aW9ucyBmb3IgYm91bnR5IHBsYWNlbWVudCAvLyBub3RlOiBDZW50cmFsaXplcyBhbGwgdGF4LXJlbGF0ZWQgbG9naWMgZm9yIEJvdW50aWVzUGx1cw0KICovDQpwdWJsaWMgY2xhc3MgVGF4TWFuYWdlciB7DQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KDQogICAgcHVibGljIFRheE1hbmFnZXIoQm91bnRpZXNQbHVzIHBsdWdpbikgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDYWxjdWxhdGVzIHRoZSB0YXggYW1vdW50IGZvciBhIGJvdW50eSAvLyBub3RlOiBDb21wdXRlcyB0YXggYmFzZWQgb24gbW9uZXkgYW5kIG9wdGlvbmFsIGl0ZW0gdmFsdWUgcGVyIGNvbmZpZyBzZXR0aW5ncw0KICAgICAqLw0KICAgIHB1YmxpYyBkb3VibGUgY2FsY3VsYXRlVGF4KGRvdWJsZSBtb25leSwgTGlzdDxJdGVtU3RhY2s+IGl0ZW1zKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRDb25maWcoKTsNCiAgICAgICAgZG91YmxlIHRheFJhdGUgPSBjb25maWcuZ2V0RG91YmxlKCJib3VudHktcGxhY2UtdGF4LXJhdGUiLCAwLjApIC8gMTAwLjA7DQogICAgICAgIGJvb2xlYW4gdGF4VG90YWxWYWx1ZSA9IGNvbmZpZy5nZXRCb29sZWFuKCJ0YXgtdG90YWwtdmFsdWUiLCBmYWxzZSk7DQogICAgICAgIGRvdWJsZSBpdGVtVmFsdWUgPSAwLjA7DQoNCiAgICAgICAgaWYgKHRheFRvdGFsVmFsdWUgJiYgaXRlbXMgIT0gbnVsbCAmJiAhaXRlbXMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBJdGVtVmFsdWVDYWxjdWxhdG9yIGNhbGN1bGF0b3IgPSBwbHVnaW4uZ2V0SXRlbVZhbHVlQ2FsY3VsYXRvcigpOw0KICAgICAgICAgICAgZm9yIChJdGVtU3RhY2sgaXRlbSA6IGl0ZW1zKSB7DQogICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT0gbnVsbCAmJiBpdGVtLmdldFR5cGUoKSAhPSBNYXRlcmlhbC5BSVIpIHsNCiAgICAgICAgICAgICAgICAgICAgaXRlbVZhbHVlICs9IGNhbGN1bGF0b3IuY2FsY3VsYXRlSXRlbVZhbHVlKGl0ZW0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGRvdWJsZSB0YXhhYmxlQW1vdW50ID0gdGF4VG90YWxWYWx1ZSA/IChtb25leSArIGl0ZW1WYWx1ZSkgOiBtb25leTsNCiAgICAgICAgcmV0dXJuIHRheGFibGVBbW91bnQgKiB0YXhSYXRlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFZhbGlkYXRlcyBpZiB0aGUgcGxheWVyIGNhbiBhZmZvcmQgdGhlIGJvdW50eSB3aXRoIHRheCAvLyBub3RlOiBDaGVja3MgZnVuZHMgYW5kIHNlbmRzIGVycm9yIG1lc3NhZ2UgaWYgaW5zdWZmaWNpZW50DQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gY2FuQWZmb3JkVGF4KFBsYXllciBwbGF5ZXIsIGRvdWJsZSBtb25leSwgZG91YmxlIHRheEFtb3VudCkgew0KICAgICAgICBFY29ub215IGVjb25vbXkgPSBCb3VudGllc1BsdXMuZ2V0RWNvbm9teSgpOw0KICAgICAgICBpZiAoZWNvbm9teSA9PSBudWxsKSB7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLlJFRCArICJFY29ub215IHN5c3RlbSBpcyBub3QgYXZhaWxhYmxlISIpOw0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgZG91YmxlIHRvdGFsQ29zdCA9IG1vbmV5ICsgdGF4QW1vdW50Ow0KICAgICAgICBpZiAoIWVjb25vbXkuaGFzKHBsYXllciwgdG90YWxDb3N0KSkgew0KICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBwbHVnaW4uZ2V0TWVzc2FnZXNDb25maWcoKTsNCiAgICAgICAgICAgIFN0cmluZyBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1pbnN1ZmZpY2llbnQtZnVuZHMiLCAiJmNJbnN1ZmZpY2llbnQgZnVuZHMhIFlvdSBuZWVkICQlY29zdCUgKGluY2x1ZGVzICQldGF4JSB0YXgpIik7DQogICAgICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAgICAgLndpdGhBbW91bnQodG90YWxDb3N0KQ0KICAgICAgICAgICAgICAgICAgICAudGF4QW1vdW50KHRheEFtb3VudCk7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KGVycm9yTWVzc2FnZSwgY29udGV4dCkpOw0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRGVkdWN0cyB0aGUgYm91bnR5IGFtb3VudCBhbmQgdGF4IGZyb20gdGhlIHBsYXllciAvLyBub3RlOiBXaXRoZHJhd3MgdG90YWwgY29zdCB1c2luZyBWYXVsdCBlY29ub215DQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gZGVkdWN0VGF4KFBsYXllciBwbGF5ZXIsIGRvdWJsZSBtb25leSwgZG91YmxlIHRheEFtb3VudCkgew0KICAgICAgICBFY29ub215IGVjb25vbXkgPSBCb3VudGllc1BsdXMuZ2V0RWNvbm9teSgpOw0KICAgICAgICBpZiAoZWNvbm9teSA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICBkb3VibGUgdG90YWxDb3N0ID0gbW9uZXkgKyB0YXhBbW91bnQ7DQogICAgICAgIHJldHVybiBlY29ub215LndpdGhkcmF3UGxheWVyKHBsYXllciwgdG90YWxDb3N0KS50cmFuc2FjdGlvblN1Y2Nlc3MoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZW5kcyB0YXgtcmVsYXRlZCBtZXNzYWdlcyB0byB0aGUgcGxheWVyIC8vIG5vdGU6IFNlbmRzIHN1Y2Nlc3MgYW5kIHRheCBub3RpZmljYXRpb24gbWVzc2FnZXMgd2l0aCBwbGFjZWhvbGRlcnMNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBzZW5kVGF4TWVzc2FnZXMoUGxheWVyIHBsYXllciwgVVVJRCB0YXJnZXRVVUlELCBkb3VibGUgbW9uZXksIGRvdWJsZSB0YXhBbW91bnQpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBwbHVnaW4uZ2V0TWVzc2FnZXNDb25maWcoKTsNCiAgICAgICAgZG91YmxlIHRheFJhdGUgPSBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0RG91YmxlKCJib3VudHktcGxhY2UtdGF4LXJhdGUiLCAwLjApOw0KDQogICAgICAgIC8vIFNlbmQgc3VjY2VzcyBtZXNzYWdlDQogICAgICAgIFN0cmluZyBzdWNjZXNzTWVzc2FnZSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LXNldC1zdWNjZXNzIiwgIiZhWW91IHBsYWNlZCBhIGJvdW50eSBvZiAmZSVhbW91bnQlJmEgb24gJmUldGFyZ2V0JSZhISBUYXggb2YgJmUldGF4JSZhIHdhcyBkZWR1Y3RlZC4iKTsNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAudGFyZ2V0KHRhcmdldFVVSUQpDQogICAgICAgICAgICAgICAgLndpdGhBbW91bnQobW9uZXkpDQogICAgICAgICAgICAgICAgLnRheEFtb3VudCh0YXhBbW91bnQpOw0KICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KHN1Y2Nlc3NNZXNzYWdlLCBjb250ZXh0KSk7DQoNCiAgICAgICAgLy8gU2VuZCB0YXggbm90aWZpY2F0aW9uIGlmIGFwcGxpY2FibGUNCiAgICAgICAgaWYgKHRheEFtb3VudCA+IDApIHsNCiAgICAgICAgICAgIFN0cmluZyB0YXhNZXNzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktY2FuY2VsLXRheCIsICImZUEgJmMldGF4X3JhdGUlJSAmZXRheCBoYXMgYmVlbiBhcHBsaWVkLiAmZVRheCBhbW91bnQ6ICZjJCV0YXhfYW1vdW50JSIpOw0KICAgICAgICAgICAgY29udGV4dCA9IGNvbnRleHQudGF4UmF0ZSh0YXhSYXRlKS50YXhBbW91bnQodGF4QW1vdW50KTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkodGF4TWVzc2FnZSwgY29udGV4dCkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmVmdW5kcyB0aGUgZGVkdWN0ZWQgYW1vdW50IGFuZCB0YXggdG8gdGhlIHBsYXllciAvLyBub3RlOiBEZXBvc2l0cyB0b3RhbCBjb3N0IGJhY2sgdG8gcGxheWVyIGlmIGRlZHVjdGlvbiBmYWlscw0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIHJlZnVuZFRheChQbGF5ZXIgcGxheWVyLCBkb3VibGUgbW9uZXksIGRvdWJsZSB0YXhBbW91bnQpIHsNCiAgICAgICAgRWNvbm9teSBlY29ub215ID0gQm91bnRpZXNQbHVzLmdldEVjb25vbXkoKTsNCiAgICAgICAgaWYgKGVjb25vbXkgIT0gbnVsbCAmJiAobW9uZXkgKyB0YXhBbW91bnQpID4gMCkgew0KICAgICAgICAgICAgZWNvbm9teS5kZXBvc2l0UGxheWVyKHBsYXllciwgbW9uZXkgKyB0YXhBbW91bnQpOw0KICAgICAgICB9DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL3V0aWxzL1RpbWVGb3JtYXR0ZXIuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMTE3MTcgMTUwMjYyMjQxMTQgMDE3NjU2ACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlsczsNCg0KLyoqDQogKiBVdGlsaXR5IGNsYXNzIGZvciBmb3JtYXR0aW5nIHRpbWUgdmFsdWVzIGNvbnNpc3RlbnRseSBhY3Jvc3MgdGhlIHBsdWdpbg0KICovDQpwdWJsaWMgY2xhc3MgVGltZUZvcm1hdHRlciB7DQoNCiAgICAvKioNCiAgICAgKiBGb3JtYXRzIHRpbWUgaW4gc2Vjb25kcyB0byBhIHNob3J0IGZvcm1hdCAoZS5nLiwgIjVzIiwgIjJtIiwgIjFoIikNCiAgICAgKiBVc2VkIGZvciBkaXNwbGF5aW5nIHRpbWUgYWdvIG9yIHJlbWFpbmluZyB0aW1lIGluIGNvbXBhY3QgZm9ybWF0DQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBTdHJpbmcgZm9ybWF0VGltZUFnbyhsb25nIHNlY29uZHMpIHsNCiAgICAgICAgaWYgKHNlY29uZHMgPCA2MCkgew0KICAgICAgICAgICAgcmV0dXJuIHNlY29uZHMgKyAicyI7DQogICAgICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDM2MDApIHsNCiAgICAgICAgICAgIHJldHVybiAoc2Vjb25kcyAvIDYwKSArICJtIjsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGxvbmcgaG91cnMgPSBzZWNvbmRzIC8gMzYwMDsNCiAgICAgICAgICAgIHJldHVybiBob3VycyArICJoIjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZvcm1hdHMgdGltZSBpbiBzZWNvbmRzIHRvIGEgZGV0YWlsZWQgZm9ybWF0IHdpdGggc2Vjb25kcyBpbmNsdWRlZA0KICAgICAqIFVzZWQgZm9yIGNvdW50ZG93bnMgYW5kIHJlbWFpbmluZyB0aW1lIGRpc3BsYXlzDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBTdHJpbmcgZm9ybWF0VGltZVJlbWFpbmluZyhsb25nIHNlY29uZHMpIHsNCiAgICAgICAgaWYgKHNlY29uZHMgPCA2MCkgew0KICAgICAgICAgICAgcmV0dXJuIHNlY29uZHMgKyAicyI7DQogICAgICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDM2MDApIHsNCiAgICAgICAgICAgIHJldHVybiAoc2Vjb25kcyAvIDYwKSArICJtICIgKyAoc2Vjb25kcyAlIDYwKSArICJzIjsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGxvbmcgaG91cnMgPSBzZWNvbmRzIC8gMzYwMDsNCiAgICAgICAgICAgIGxvbmcgbWludXRlcyA9IChzZWNvbmRzICUgMzYwMCkgLyA2MDsNCiAgICAgICAgICAgIHJldHVybiBob3VycyArICJoICIgKyBtaW51dGVzICsgIm0iOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRm9ybWF0cyB0aW1lIGluIG1pbnV0ZXMgdG8gYSBodW1hbi1yZWFkYWJsZSBmb3JtYXQNCiAgICAgKiBVc2VkIGZvciBib3VudHkgZHVyYXRpb24gc2V0dGluZ3MgKGhhbmRsZXMgbWludXRlcywgaG91cnMsIGRheXMpDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBTdHJpbmcgZm9ybWF0TWludXRlc1RvUmVhZGFibGUoaW50IHRpbWVNaW51dGVzLCBib29sZWFuIHBlcm1hbmVudCkgew0KICAgICAgICBpZiAodGltZU1pbnV0ZXMgPT0gMCB8fCBwZXJtYW5lbnQpIHsNCiAgICAgICAgICAgIHJldHVybiAiUGVybWFuZW50IjsNCiAgICAgICAgfSBlbHNlIGlmICh0aW1lTWludXRlcyA8IDYwKSB7DQogICAgICAgICAgICByZXR1cm4gdGltZU1pbnV0ZXMgKyAiIG1pbnV0ZSIgKyAodGltZU1pbnV0ZXMgIT0gMSA/ICJzIiA6ICIiKTsNCiAgICAgICAgfSBlbHNlIGlmICh0aW1lTWludXRlcyA8IDE0NDApIHsNCiAgICAgICAgICAgIGludCBob3VycyA9IHRpbWVNaW51dGVzIC8gNjA7DQogICAgICAgICAgICBpbnQgcmVtYWluaW5nTWludXRlcyA9IHRpbWVNaW51dGVzICUgNjA7DQogICAgICAgICAgICBpZiAocmVtYWluaW5nTWludXRlcyA9PSAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGhvdXJzICsgIiBob3VyIiArIChob3VycyA+IDEgPyAicyIgOiAiIik7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiBob3VycyArICIgaG91ciIgKyAoaG91cnMgPiAxID8gInMiIDogIiIpICsgIiAiICsgcmVtYWluaW5nTWludXRlcyArICIgbWludXRlIiArIChyZW1haW5pbmdNaW51dGVzID4gMSA/ICJzIiA6ICIiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGludCBkYXlzID0gdGltZU1pbnV0ZXMgLyAxNDQwOw0KICAgICAgICAgICAgaW50IHJlbWFpbmluZ0hvdXJzID0gKHRpbWVNaW51dGVzICUgMTQ0MCkgLyA2MDsNCiAgICAgICAgICAgIGludCByZW1haW5pbmdNaW51dGVzID0gdGltZU1pbnV0ZXMgJSA2MDsNCg0KICAgICAgICAgICAgU3RyaW5nQnVpbGRlciByZXN1bHQgPSBuZXcgU3RyaW5nQnVpbGRlcigpOw0KICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkYXlzKS5hcHBlbmQoIiBkYXkiKS5hcHBlbmQoZGF5cyA+IDEgPyAicyIgOiAiIik7DQoNCiAgICAgICAgICAgIGlmIChyZW1haW5pbmdIb3VycyA+IDApIHsNCiAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kKCIgIikuYXBwZW5kKHJlbWFpbmluZ0hvdXJzKS5hcHBlbmQoIiBob3VyIikuYXBwZW5kKHJlbWFpbmluZ0hvdXJzID4gMSA/ICJzIiA6ICIiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChyZW1haW5pbmdNaW51dGVzID4gMCkgew0KICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoIiAiKS5hcHBlbmQocmVtYWluaW5nTWludXRlcykuYXBwZW5kKCIgbWludXRlIikuYXBwZW5kKHJlbWFpbmluZ01pbnV0ZXMgPiAxID8gInMiIDogIiIpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRvU3RyaW5nKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBGb3JtYXRzIGEgdGltZXN0YW1wIGRpZmZlcmVuY2UgZnJvbSBjdXJyZW50IHRpbWUgdG8gInRpbWUgYWdvIiBmb3JtYXQNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIFN0cmluZyBmb3JtYXRUaW1lc3RhbXBUb0Fnbyhsb25nIHRpbWVzdGFtcCkgew0KICAgICAgICBsb25nIGN1cnJlbnRUaW1lID0gU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkgLyAxMDAwOw0KICAgICAgICBsb25nIHRpbWVEaWZmID0gY3VycmVudFRpbWUgLSB0aW1lc3RhbXA7DQogICAgICAgIHJldHVybiBmb3JtYXRUaW1lQWdvKHRpbWVEaWZmKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBQYXJzZXMgYSB0aW1lIHN0cmluZyBpbnRvIG1pbnV0ZXMNCiAgICAgKiAvLyBub3RlOiBDb252ZXJ0cyBpbnB1dCBsaWtlICIxaCIsICIzMG0iLCAiMmQiIGludG8gdG90YWwgbWludXRlcw0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgaW50IHBhcnNlVGltZVN0cmluZyhTdHJpbmcgdGltZVN0cmluZykgew0KICAgICAgICBpZiAodGltZVN0cmluZyA9PSBudWxsIHx8IHRpbWVTdHJpbmcuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCJJbnZhbGlkIHRpbWUgZm9ybWF0OiBlbXB0eSBvciBudWxsIik7DQogICAgICAgIH0NCg0KICAgICAgICB0aW1lU3RyaW5nID0gdGltZVN0cmluZy50b0xvd2VyQ2FzZSgpLnRyaW0oKTsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIC8vIEhhbmRsZSBudW1lcmljIGlucHV0IChhc3N1bWUgbWludXRlcyBieSBkZWZhdWx0KQ0KICAgICAgICAgICAgaWYgKHRpbWVTdHJpbmcubWF0Y2hlcygiXFxkKyIpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIEludGVnZXIucGFyc2VJbnQodGltZVN0cmluZyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIEV4dHJhY3QgbnVtZXJpYyB2YWx1ZSBhbmQgdW5pdA0KICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBudW1iZXIgPSBuZXcgU3RyaW5nQnVpbGRlcigpOw0KICAgICAgICAgICAgU3RyaW5nQnVpbGRlciB1bml0ID0gbmV3IFN0cmluZ0J1aWxkZXIoKTsNCiAgICAgICAgICAgIGZvciAoY2hhciBjIDogdGltZVN0cmluZy50b0NoYXJBcnJheSgpKSB7DQogICAgICAgICAgICAgICAgaWYgKENoYXJhY3Rlci5pc0RpZ2l0KGMpKSB7DQogICAgICAgICAgICAgICAgICAgIG51bWJlci5hcHBlbmQoYyk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgdW5pdC5hcHBlbmQoYyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAobnVtYmVyLmxlbmd0aCgpID09IDApIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCJObyBudW1lcmljIHZhbHVlIGluIHRpbWUgc3RyaW5nIik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGludCB2YWx1ZSA9IEludGVnZXIucGFyc2VJbnQobnVtYmVyLnRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgU3RyaW5nIHVuaXRTdHIgPSB1bml0LnRvU3RyaW5nKCkudHJpbSgpOw0KDQogICAgICAgICAgICBzd2l0Y2ggKHVuaXRTdHIpIHsNCiAgICAgICAgICAgICAgICBjYXNlICJzIjogLy8gc2Vjb25kcw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLyA2MDsgLy8gQ29udmVydCB0byBtaW51dGVzDQogICAgICAgICAgICAgICAgY2FzZSAibSI6IC8vIG1pbnV0ZXMNCiAgICAgICAgICAgICAgICBjYXNlICIiOg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7DQogICAgICAgICAgICAgICAgY2FzZSAiaCI6IC8vIGhvdXJzDQogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAqIDYwOw0KICAgICAgICAgICAgICAgIGNhc2UgImQiOiAvLyBkYXlzDQogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAqIDE0NDA7IC8vIDI0IGhvdXJzICogNjAgbWludXRlcw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oIlVua25vd24gdGltZSB1bml0OiAiICsgdW5pdFN0cik7DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCJJbnZhbGlkIG51bWVyaWMgdmFsdWUgaW4gdGltZSBzdHJpbmc6ICIgKyB0aW1lU3RyaW5nKTsNCiAgICAgICAgfQ0KICAgIH0NCn0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy91dGlscy9WZXJzaW9uVXRpbHMuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMTMxMzY2IDE1MDI2NTY3NjA1IDAxNzU2NAAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHM7DQoNCmltcG9ydCBjb20uY3J5cHRvbW9yaW4ueHNlcmllcy5YTWF0ZXJpYWw7DQppbXBvcnQgZGUudHI3encubmJ0YXBpLk5CVEl0ZW07DQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5Db2xvcjsNCmltcG9ydCBvcmcuYnVra2l0LkZpcmV3b3JrRWZmZWN0Ow0KaW1wb3J0IG9yZy5idWtraXQuTG9jYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5NYXRlcmlhbDsNCmltcG9ydCBvcmcuYnVra2l0LlBhcnRpY2xlOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JdGVtU3RhY2s7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkubWV0YS5GaXJld29ya0VmZmVjdE1ldGE7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudGllc1BsdXM7DQppbXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kOw0KaW1wb3J0IGphdmEudXRpbC5IYXNoTWFwOw0KaW1wb3J0IGphdmEudXRpbC5NYXA7DQoNCnB1YmxpYyBjbGFzcyBWZXJzaW9uVXRpbHMgew0KDQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIHZlcnNpb24gPSBCdWtraXQuZ2V0QnVra2l0VmVyc2lvbigpOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIGludFtdIHZlcnNpb25OdW1iZXJzID0gcGFyc2VWZXJzaW9uKCk7DQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgTWFwPFN0cmluZywgTWF0ZXJpYWxEYXRhPiBNQVRFUklBTF9NQVBQSU5HUyA9IG5ldyBIYXNoTWFwPD4oKTsNCg0KICAgIHN0YXRpYyB7DQogICAgICAgIGluaXRpYWxpemVNYXRlcmlhbE1hcHBpbmdzKCk7DQogICAgfQ0KDQogICAgLy8gSGVscGVyIGNsYXNzIHRvIHN0b3JlIG1hdGVyaWFsIGFuZCBkYW1hZ2UgdmFsdWUNCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIE1hdGVyaWFsRGF0YSB7DQogICAgICAgIHByaXZhdGUgZmluYWwgTWF0ZXJpYWwgbWF0ZXJpYWw7DQogICAgICAgIHByaXZhdGUgZmluYWwgc2hvcnQgZGF0YTsNCg0KICAgICAgICBwdWJsaWMgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsIG1hdGVyaWFsLCBzaG9ydCBkYXRhKSB7DQogICAgICAgICAgICB0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7DQogICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIE1hdGVyaWFsRGF0YShNYXRlcmlhbCBtYXRlcmlhbCkgew0KICAgICAgICAgICAgdGhpcyhtYXRlcmlhbCwgKHNob3J0KSAwKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBNYXRlcmlhbCBnZXRNYXRlcmlhbCgpIHsNCiAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbDsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzaG9ydCBnZXREYXRhKCkgew0KICAgICAgICAgICAgcmV0dXJuIGRhdGE7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGVja3MgaWYgdGhlIHNlcnZlciBzdXBwb3J0cyBQZXJzaXN0ZW50RGF0YUNvbnRhaW5lciBmb3IgTkJUIHRhZ3MgLy8gbm90ZTogVmVyaWZpZXMgaWYgTWluZWNyYWZ0IHZlcnNpb24gaXMgMS4xNCBvciBoaWdoZXINCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW4gc3VwcG9ydHNQZXJzaXN0ZW50RGF0YUNvbnRhaW5lcigpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIENsYXNzLmZvck5hbWUoIm9yZy5idWtraXQucGVyc2lzdGVuY2UuUGVyc2lzdGVudERhdGFDb250YWluZXIiKTsNCiAgICAgICAgICAgIHJldHVybiBpc1NlcnZlclZlcnNpb25BdExlYXN0KDEsIDE0KTsNCiAgICAgICAgfSBjYXRjaCAoQ2xhc3NOb3RGb3VuZEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIGEgZG91YmxlIE5CVCB0YWcgb24gYW4gaXRlbSAvLyBub3RlOiBBZGRzIGEgZG91YmxlIE5CVCB0YWcgdXNpbmcgSXRlbS1OQlQtQVBJIGZvciBjcm9zcy12ZXJzaW9uIGNvbXBhdGliaWxpdHkNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIEl0ZW1TdGFjayBzZXROQlREb3VibGUoSXRlbVN0YWNrIGl0ZW0sIFN0cmluZyBrZXksIGRvdWJsZSB2YWx1ZSkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgcmV0dXJuIGl0ZW07DQogICAgICAgIH0NCiAgICAgICAgSXRlbVN0YWNrIG5ld0l0ZW0gPSBpdGVtLmNsb25lKCk7DQogICAgICAgIE5CVEl0ZW0gbmJ0SXRlbSA9IG5ldyBOQlRJdGVtKG5ld0l0ZW0pOw0KICAgICAgICBuYnRJdGVtLnNldERvdWJsZSgiYm91bnRpZXNwbHVzXyIgKyBrZXksIHZhbHVlKTsNCiAgICAgICAgcmV0dXJuIG5idEl0ZW0uZ2V0SXRlbSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYSBkb3VibGUgTkJUIHRhZyBmcm9tIGFuIGl0ZW0gLy8gbm90ZTogUmV0cmlldmVzIGEgZG91YmxlIHZhbHVlIHVzaW5nIEl0ZW0tTkJULUFQSSBmb3IgY3Jvc3MtdmVyc2lvbiBjb21wYXRpYmlsaXR5DQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBEb3VibGUgZ2V0TkJURG91YmxlKEl0ZW1TdGFjayBpdGVtLCBTdHJpbmcga2V5KSB7DQogICAgICAgIGlmIChpdGVtID09IG51bGwgfHwgaXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KICAgICAgICBOQlRJdGVtIG5idEl0ZW0gPSBuZXcgTkJUSXRlbShpdGVtKTsNCiAgICAgICAgcmV0dXJuIG5idEl0ZW0uaGFzS2V5KCJib3VudGllc3BsdXNfIiArIGtleSkgPyBuYnRJdGVtLmdldERvdWJsZSgiYm91bnRpZXNwbHVzXyIgKyBrZXkpIDogbnVsbDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIGEgc3RyaW5nIE5CVCB0YWcgb24gYW4gaXRlbSAvLyBub3RlOiBBZGRzIGEgc3RyaW5nIE5CVCB0YWcgdXNpbmcgSXRlbS1OQlQtQVBJIGZvciBjcm9zcy12ZXJzaW9uIGNvbXBhdGliaWxpdHkNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIEl0ZW1TdGFjayBzZXROQlRTdHJpbmcoSXRlbVN0YWNrIGl0ZW0sIFN0cmluZyBrZXksIFN0cmluZyB2YWx1ZSkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgcmV0dXJuIGl0ZW07DQogICAgICAgIH0NCiAgICAgICAgSXRlbVN0YWNrIG5ld0l0ZW0gPSBpdGVtLmNsb25lKCk7DQogICAgICAgIE5CVEl0ZW0gbmJ0SXRlbSA9IG5ldyBOQlRJdGVtKG5ld0l0ZW0pOw0KICAgICAgICBuYnRJdGVtLnNldFN0cmluZygiYm91bnRpZXNwbHVzXyIgKyBrZXksIHZhbHVlKTsNCiAgICAgICAgcmV0dXJuIG5idEl0ZW0uZ2V0SXRlbSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYSBzdHJpbmcgTkJUIHRhZyBmcm9tIGFuIGl0ZW0gLy8gbm90ZTogUmV0cmlldmVzIGEgc3RyaW5nIHZhbHVlIHVzaW5nIEl0ZW0tTkJULUFQSSBmb3IgY3Jvc3MtdmVyc2lvbiBjb21wYXRpYmlsaXR5DQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBTdHJpbmcgZ2V0TkJUU3RyaW5nKEl0ZW1TdGFjayBpdGVtLCBTdHJpbmcga2V5KSB7DQogICAgICAgIGlmIChpdGVtID09IG51bGwgfHwgaXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KICAgICAgICBOQlRJdGVtIG5idEl0ZW0gPSBuZXcgTkJUSXRlbShpdGVtKTsNCiAgICAgICAgcmV0dXJuIG5idEl0ZW0uaGFzS2V5KCJib3VudGllc3BsdXNfIiArIGtleSkgPyBuYnRJdGVtLmdldFN0cmluZygiYm91bnRpZXNwbHVzXyIgKyBrZXkpIDogbnVsbDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIGFuIGludGVnZXIgTkJUIHRhZyBvbiBhbiBpdGVtIC8vIG5vdGU6IEFkZHMgYW4gaW50ZWdlciBOQlQgdGFnIHVzaW5nIEl0ZW0tTkJULUFQSSBmb3IgY3Jvc3MtdmVyc2lvbiBjb21wYXRpYmlsaXR5DQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBJdGVtU3RhY2sgc2V0TkJUSW50ZWdlcihJdGVtU3RhY2sgaXRlbSwgU3RyaW5nIGtleSwgaW50IHZhbHVlKSB7DQogICAgICAgIGlmIChpdGVtID09IG51bGwgfHwgaXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICByZXR1cm4gaXRlbTsNCiAgICAgICAgfQ0KICAgICAgICBJdGVtU3RhY2sgbmV3SXRlbSA9IGl0ZW0uY2xvbmUoKTsNCiAgICAgICAgTkJUSXRlbSBuYnRJdGVtID0gbmV3IE5CVEl0ZW0obmV3SXRlbSk7DQogICAgICAgIG5idEl0ZW0uc2V0SW50ZWdlcigiYm91bnRpZXNwbHVzXyIgKyBrZXksIHZhbHVlKTsNCiAgICAgICAgcmV0dXJuIG5idEl0ZW0uZ2V0SXRlbSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYW4gaW50ZWdlciBOQlQgdGFnIGZyb20gYW4gaXRlbSAvLyBub3RlOiBSZXRyaWV2ZXMgYW4gaW50ZWdlciB2YWx1ZSB1c2luZyBJdGVtLU5CVC1BUEkgZm9yIGNyb3NzLXZlcnNpb24gY29tcGF0aWJpbGl0eQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgSW50ZWdlciBnZXROQlRJbnRlZ2VyKEl0ZW1TdGFjayBpdGVtLCBTdHJpbmcga2V5KSB7DQogICAgICAgIGlmIChpdGVtID09IG51bGwgfHwgaXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KICAgICAgICBOQlRJdGVtIG5idEl0ZW0gPSBuZXcgTkJUSXRlbShpdGVtKTsNCiAgICAgICAgcmV0dXJuIG5idEl0ZW0uaGFzS2V5KCJib3VudGllc3BsdXNfIiArIGtleSkgPyBuYnRJdGVtLmdldEludGVnZXIoImJvdW50aWVzcGx1c18iICsga2V5KSA6IG51bGw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIGFuIGl0ZW0gaGFzIGEgc3BlY2lmaWMgTkJUIHRhZyAvLyBub3RlOiBWZXJpZmllcyBpZiB0aGUgaXRlbSBoYXMgYSBnaXZlbiBOQlQgdGFnIHVzaW5nIEl0ZW0tTkJULUFQSQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBoYXNOQlRUYWcoSXRlbVN0YWNrIGl0ZW0sIFN0cmluZyBrZXkpIHsNCiAgICAgICAgaWYgKGl0ZW0gPT0gbnVsbCB8fCBpdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5BSVIpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICBOQlRJdGVtIG5idEl0ZW0gPSBuZXcgTkJUSXRlbShpdGVtKTsNCiAgICAgICAgcmV0dXJuIG5idEl0ZW0uaGFzS2V5KCJib3VudGllc3BsdXNfIiArIGtleSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ3JlYXRlcyBhIHZlcnNpb24tc2FmZSBJdGVtU3RhY2sgdXNpbmcgWE1hdGVyaWFsIGZvciBjcm9zcy12ZXJzaW9uIGNvbXBhdGliaWxpdHkNCiAgICAgKiAvLyBub3RlOiBSZXNvbHZlcyBtYXRlcmlhbCBuYW1lcyB0byBJdGVtU3RhY2tzLCBlbnN1cmluZyBjb3JyZWN0IG1hdGVyaWFscyBmb3IgdGhlIHNlcnZlciB2ZXJzaW9uDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBJdGVtU3RhY2sgZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKFN0cmluZyBtYXRlcmlhbE5hbWUsIGludCBhbW91bnQpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRGVidWcoIlJlc29sdmluZyBtYXRlcmlhbDogIiArIG1hdGVyaWFsTmFtZSArICIsIGlzTGVnYWN5PSIgKyBpc0xlZ2FjeSgpKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW07DQoNCiAgICAgICAgaWYgKCFpc0xlZ2FjeSgpKSB7DQogICAgICAgICAgICAvLyBNb2Rlcm4gdmVyc2lvbnMgKDEuMTMrKTogVXNlIGRpcmVjdCBNYXRlcmlhbCBsb29rdXAgZm9yIHJlbGlhYmlsaXR5DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIE1hdGVyaWFsIG1hdGVyaWFsID0gTWF0ZXJpYWwudmFsdWVPZihtYXRlcmlhbE5hbWUudG9VcHBlckNhc2UoKSk7DQogICAgICAgICAgICAgICAgaXRlbSA9IG5ldyBJdGVtU3RhY2sobWF0ZXJpYWwsIGFtb3VudCk7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckRlYnVnKCJDcmVhdGVkIEl0ZW1TdGFjayB2aWEgTWF0ZXJpYWwudmFsdWVPZigiICsgbWF0ZXJpYWxOYW1lICsgIik6ICIgKyBpdGVtLmdldFR5cGUoKS5uYW1lKCkgKyAiLCBhbW91bnQ6ICIgKyBhbW91bnQpOw0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtOw0KICAgICAgICAgICAgfSBjYXRjaCAoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiTWF0ZXJpYWwudmFsdWVPZiBmYWlsZWQgZm9yICciICsgbWF0ZXJpYWxOYW1lICsgIic6ICIgKyBlLmdldE1lc3NhZ2UoKSArICIsIHRyeWluZyBYTWF0ZXJpYWwgZmFsbGJhY2siKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIExlZ2FjeSBvciBmYWxsYmFjazogVXNlIFhNYXRlcmlhbCBmb3IgY29tcGF0aWJpbGl0eQ0KICAgICAgICBYTWF0ZXJpYWwgeE1hdGVyaWFsID0gWE1hdGVyaWFsLm1hdGNoWE1hdGVyaWFsKG1hdGVyaWFsTmFtZS50b1VwcGVyQ2FzZSgpKS5vckVsc2UoWE1hdGVyaWFsLlNUT05FKTsNCiAgICAgICAgaXRlbSA9IHhNYXRlcmlhbC5wYXJzZUl0ZW0oKTsNCiAgICAgICAgaWYgKGl0ZW0gPT0gbnVsbCkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIlhNYXRlcmlhbCBmYWlsZWQgdG8gY3JlYXRlIGl0ZW0gZm9yICciICsgbWF0ZXJpYWxOYW1lICsgIicsIHVzaW5nIFNUT05FIik7DQogICAgICAgICAgICBpdGVtID0gbmV3IEl0ZW1TdGFjayhNYXRlcmlhbC5TVE9ORSwgYW1vdW50KTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGl0ZW0uc2V0QW1vdW50KGFtb3VudCk7DQogICAgICAgICAgICBpZiAoaXNMZWdhY3koKSAmJiBtYXRlcmlhbE5hbWUuZXF1YWxzSWdub3JlQ2FzZSgiUExBWUVSX0hFQUQiKSkgew0KICAgICAgICAgICAgICAgIGl0ZW0uc2V0VHlwZShNYXRlcmlhbC52YWx1ZU9mKCJTS1VMTF9JVEVNIikpOw0KICAgICAgICAgICAgICAgIGl0ZW0uc2V0RHVyYWJpbGl0eSgoc2hvcnQpIDMpOw0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5idWZmZXJEZWJ1ZygiRm9yY2VkIFBMQVlFUl9IRUFEIHRvIFNLVUxMX0lURU06MyBmb3IgbGVnYWN5IHZlcnNpb24iKTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNMZWdhY3koKSAmJiB4TWF0ZXJpYWwuZ2V0RGF0YSgpICE9IDApIHsNCiAgICAgICAgICAgICAgICBpdGVtLnNldER1cmFiaWxpdHkoeE1hdGVyaWFsLmdldERhdGEoKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRGVidWcoIlJlc29sdmVkIG1hdGVyaWFsIGZvciAiICsgbWF0ZXJpYWxOYW1lICsgIjogIiArIGl0ZW0uZ2V0VHlwZSgpLm5hbWUoKSArIChpc0xlZ2FjeSgpID8gIjoiICsgaXRlbS5nZXREdXJhYmlsaXR5KCkgOiAiIikpOw0KICAgICAgICByZXR1cm4gaXRlbTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGVja3MgaWYgYW4gSXRlbVN0YWNrIGlzIGEgZ2xhc3MgcGFuZQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc0dsYXNzUGFuZShJdGVtU3RhY2sgaXRlbSkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0VHlwZSgpID09IG51bGwpIHJldHVybiBmYWxzZTsNCiAgICAgICAgU3RyaW5nIHR5cGVOYW1lID0gaXRlbS5nZXRUeXBlKCkubmFtZSgpOw0KICAgICAgICBpZiAoaXNMZWdhY3koKSkgew0KICAgICAgICAgICAgcmV0dXJuIHR5cGVOYW1lLmVxdWFscygiU1RBSU5FRF9HTEFTU19QQU5FIikgfHwgdHlwZU5hbWUuZXF1YWxzKCJUSElOX0dMQVNTIik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gdHlwZU5hbWUuZW5kc1dpdGgoIl9TVEFJTkVEX0dMQVNTX1BBTkUiKSB8fCB0eXBlTmFtZS5lcXVhbHMoIkdMQVNTX1BBTkUiKTsNCiAgICAgICAgfQ0KICAgIH0NCi8vIGZpbGU6IGphdmEvdG9ueTI2L2JvdW50aWVzUGx1cy91dGlscy9WZXJzaW9uVXRpbHMuamF2YQ0KDQogICAgLyoqDQogICAgICogUmV0cmlldmVzIGFuIEl0ZW1TdGFjayBmb3IgdGhlIHNwZWNpZmllZCBtYXRlcmlhbCBuYW1lDQogICAgICogLy8gbm90ZTogQ3JlYXRlcyBhbiBpdGVtIHN0YWNrIHdpdGggdmVyc2lvbi1zYWZlIG1hdGVyaWFsIGhhbmRsaW5nDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBJdGVtU3RhY2sgZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKFN0cmluZyBtYXRlcmlhbE5hbWUpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBpbnQgYW1vdW50ID0gMTsNCg0KICAgICAgICBpZiAobWF0ZXJpYWxOYW1lID09IG51bGwgfHwgbWF0ZXJpYWxOYW1lLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltWZXJzaW9uVXRpbHNdIE1hdGVyaWFsIG5hbWUgaXMgbnVsbCBvciBlbXB0eSwgcmV0dXJuaW5nIFNUT05FIik7DQogICAgICAgICAgICByZXR1cm4gbmV3IEl0ZW1TdGFjayhNYXRlcmlhbC5TVE9ORSwgYW1vdW50KTsNCiAgICAgICAgfQ0KDQogICAgICAgIGRlYnVnTWFuYWdlci5idWZmZXJEZWJ1ZygiUmVzb2x2aW5nIG1hdGVyaWFsOiAiICsgbWF0ZXJpYWxOYW1lICsgIiwgaXNMZWdhY3k9IiArIGlzTGVnYWN5KCkpOw0KICAgICAgICBJdGVtU3RhY2sgaXRlbTsNCg0KICAgICAgICBpZiAoIWlzTGVnYWN5KCkpIHsNCiAgICAgICAgICAgIC8vIE1vZGVybiB2ZXJzaW9ucyAoMS4xMyspOiBVc2UgZGlyZWN0IE1hdGVyaWFsIGxvb2t1cCBmb3IgcmVsaWFiaWxpdHkNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgTWF0ZXJpYWwgbWF0ZXJpYWwgPSBNYXRlcmlhbC52YWx1ZU9mKG1hdGVyaWFsTmFtZS50b1VwcGVyQ2FzZSgpKTsNCiAgICAgICAgICAgICAgICBpdGVtID0gbmV3IEl0ZW1TdGFjayhtYXRlcmlhbCwgYW1vdW50KTsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRGVidWcoIkNyZWF0ZWQgSXRlbVN0YWNrIHZpYSBNYXRlcmlhbC52YWx1ZU9mKCIgKyBtYXRlcmlhbE5hbWUgKyAiKTogIiArIGl0ZW0uZ2V0VHlwZSgpLm5hbWUoKSArICIsIGFtb3VudDogIiArIGFtb3VudCk7DQogICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07DQogICAgICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbVmVyc2lvblV0aWxzXSBNYXRlcmlhbC52YWx1ZU9mIGZhaWxlZCBmb3IgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJzogIiArIGUuZ2V0TWVzc2FnZSgpICsgIiwgdHJ5aW5nIFhNYXRlcmlhbCBmYWxsYmFjayIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gTGVnYWN5IG9yIGZhbGxiYWNrOiBVc2UgWE1hdGVyaWFsIGZvciBjb21wYXRpYmlsaXR5DQogICAgICAgIFhNYXRlcmlhbCB4TWF0ZXJpYWwgPSBYTWF0ZXJpYWwubWF0Y2hYTWF0ZXJpYWwobWF0ZXJpYWxOYW1lLnRvVXBwZXJDYXNlKCkpLm9yRWxzZShYTWF0ZXJpYWwuU1RPTkUpOw0KICAgICAgICBpdGVtID0geE1hdGVyaWFsLnBhcnNlSXRlbSgpOw0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW1ZlcnNpb25VdGlsc10gWE1hdGVyaWFsIGZhaWxlZCB0byBjcmVhdGUgaXRlbSBmb3IgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJywgdXNpbmcgU1RPTkUiKTsNCiAgICAgICAgICAgIGl0ZW0gPSBuZXcgSXRlbVN0YWNrKE1hdGVyaWFsLlNUT05FLCBhbW91bnQpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaXRlbS5zZXRBbW91bnQoYW1vdW50KTsNCiAgICAgICAgICAgIGlmIChpc0xlZ2FjeSgpICYmIG1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJQTEFZRVJfSEVBRCIpKSB7DQogICAgICAgICAgICAgICAgaXRlbS5zZXRUeXBlKE1hdGVyaWFsLnZhbHVlT2YoIlNLVUxMX0lURU0iKSk7DQogICAgICAgICAgICAgICAgaXRlbS5zZXREdXJhYmlsaXR5KChzaG9ydCkgMyk7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckRlYnVnKCJGb3JjZWQgUExBWUVSX0hFQUQgdG8gU0tVTExfSVRFTTozIGZvciBsZWdhY3kgdmVyc2lvbiIpOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChpc0xlZ2FjeSgpICYmIHhNYXRlcmlhbC5nZXREYXRhKCkgIT0gMCkgew0KICAgICAgICAgICAgICAgIGl0ZW0uc2V0RHVyYWJpbGl0eSh4TWF0ZXJpYWwuZ2V0RGF0YSgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGRlYnVnTWFuYWdlci5idWZmZXJEZWJ1ZygiUmVzb2x2ZWQgbWF0ZXJpYWwgZm9yICIgKyBtYXRlcmlhbE5hbWUgKyAiOiAiICsgaXRlbS5nZXRUeXBlKCkubmFtZSgpICsgKGlzTGVnYWN5KCkgPyAiOiIgKyBpdGVtLmdldER1cmFiaWxpdHkoKSA6ICIiKSk7DQogICAgICAgIHJldHVybiBpdGVtOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiB0aGUgc2VydmVyIHZlcnNpb24gaXMgYXQgbGVhc3QgdGhlIHNwZWNpZmllZCB2ZXJzaW9uDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGlzU2VydmVyVmVyc2lvbkF0TGVhc3QoaW50IG1ham9yLCBpbnQgbWlub3IpIHsNCiAgICAgICAgcmV0dXJuIHZlcnNpb25OdW1iZXJzWzBdID4gbWFqb3IgfHwgKHZlcnNpb25OdW1iZXJzWzBdID09IG1ham9yICYmIHZlcnNpb25OdW1iZXJzWzFdID49IG1pbm9yKTsgLy8gQ2hlY2tzIHNlcnZlciB2ZXJzaW9uDQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIHRoZSBzZXJ2ZXIgc3VwcG9ydHMgZ2xvd2luZyBlZmZlY3QNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW4gc3VwcG9ydHNHbG93aW5nRWZmZWN0KCkgew0KICAgICAgICByZXR1cm4gaXNQb3N0MTkoKTsgLy8gUmV0dXJucyB0cnVlIGZvciAxLjkrDQogICAgfQ0KDQogICAgLyoqDQogICAgICogUGFyc2VzIHRoZSBzZXJ2ZXIgdmVyc2lvbiBpbnRvIG1ham9yLCBtaW5vciwgYW5kIHBhdGNoIG51bWJlcnMNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyBpbnRbXSBwYXJzZVZlcnNpb24oKSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBTdHJpbmcgY2xlYW5WZXJzaW9uID0gdmVyc2lvbi5zcGxpdCgiLSIpWzBdOw0KICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkuaW5mbygiUGFyc2luZyBzZXJ2ZXIgdmVyc2lvbjogcmF3PSIgKyB2ZXJzaW9uICsgIiwgY2xlYW49IiArIGNsZWFuVmVyc2lvbik7DQogICAgICAgICAgICBTdHJpbmdbXSBwYXJ0cyA9IGNsZWFuVmVyc2lvbi5zcGxpdCgiXFwuIik7DQogICAgICAgICAgICBpbnRbXSBudW1zID0gbmV3IGludFszXTsNCiAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPCAxKSB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigiSW52YWxpZCB2ZXJzaW9uIGZvcm1hdDogIiArIGNsZWFuVmVyc2lvbik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBudW1zWzBdID0gSW50ZWdlci5wYXJzZUludChwYXJ0c1swXSk7DQogICAgICAgICAgICBudW1zWzFdID0gcGFydHMubGVuZ3RoID4gMSA/IEludGVnZXIucGFyc2VJbnQocGFydHNbMV0ucmVwbGFjZUFsbCgiW14wLTldIiwgIiIpKSA6IDA7DQogICAgICAgICAgICBudW1zWzJdID0gcGFydHMubGVuZ3RoID4gMiA/IEludGVnZXIucGFyc2VJbnQocGFydHNbMl0ucmVwbGFjZUFsbCgiW14wLTldIiwgIiIpKSA6IDA7DQogICAgICAgICAgICBTdHJpbmcgcGFyc2VkVmVyc2lvbiA9IG51bXNbMF0gKyAiLiIgKyBudW1zWzFdICsgIi4iICsgbnVtc1syXTsNCiAgICAgICAgICAgIGJvb2xlYW4gaXNMZWdhY3kgPSBudW1zWzBdID09IDEgJiYgbnVtc1sxXSA8IDEzOw0KICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkuaW5mbygiUGFyc2VkIHNlcnZlciB2ZXJzaW9uOiAiICsgcGFyc2VkVmVyc2lvbiArICIgKFJhdzogIiArIHZlcnNpb24gKyAiLCBNYWpvcjogIiArIG51bXNbMF0gKyAiLCBNaW5vcjogIiArIG51bXNbMV0gKyAiLCBQYXRjaDogIiArIG51bXNbMl0gKyAiLCBMZWdhY3k6ICIgKyBpc0xlZ2FjeSArICIpIik7DQogICAgICAgICAgICByZXR1cm4gbnVtczsNCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLndhcm5pbmcoIkZhaWxlZCB0byBwYXJzZSBzZXJ2ZXIgdmVyc2lvbiAnIiArIHZlcnNpb24gKyAiJzogIiArIGUuZ2V0TWVzc2FnZSgpICsgIiwgZGVmYXVsdGluZyB0byAxLjguOCIpOw0KICAgICAgICAgICAgcmV0dXJuIG5ldyBpbnRbXXsxLCA4LCA4fTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc2VydmVyIGlzIHJ1bm5pbmcgYSB2ZXJzaW9uIG9sZGVyIHRoYW4gMS4xMyAobGVnYWN5KQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc0xlZ2FjeSgpIHsNCiAgICAgICAgcmV0dXJuIHZlcnNpb25OdW1iZXJzWzBdID09IDEgJiYgdmVyc2lvbk51bWJlcnNbMV0gPCAxMzsgLy8gQ2hlY2tzIGZvciBwcmUtMS4xMw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc2VydmVyIGlzIHJ1bm5pbmcgMS45IG9yIGhpZ2hlcg0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc1Bvc3QxOSgpIHsNCiAgICAgICAgcmV0dXJuIHZlcnNpb25OdW1iZXJzWzBdID4gMSB8fCAodmVyc2lvbk51bWJlcnNbMF0gPT0gMSAmJiB2ZXJzaW9uTnVtYmVyc1sxXSA+PSA5KTsgLy8gQ2hlY2tzIGZvciAxLjkrDQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzZXJ2ZXIgaXMgcnVubmluZyAxLjExIG9yIGhpZ2hlcg0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc1Bvc3QxMTEoKSB7DQogICAgICAgIHJldHVybiB2ZXJzaW9uTnVtYmVyc1swXSA+IDEgfHwgKHZlcnNpb25OdW1iZXJzWzBdID09IDEgJiYgdmVyc2lvbk51bWJlcnNbMV0gPj0gMTEpOyAvLyBDaGVja3MgZm9yIDEuMTErDQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzZXJ2ZXIgaXMgcnVubmluZyAxLjEzIG9yIGhpZ2hlcg0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc1Bvc3QxMTMoKSB7DQogICAgICAgIHJldHVybiB2ZXJzaW9uTnVtYmVyc1swXSA+IDEgfHwgKHZlcnNpb25OdW1iZXJzWzBdID09IDEgJiYgdmVyc2lvbk51bWJlcnNbMV0gPj0gMTMpOyAvLyBDaGVja3MgZm9yIDEuMTMrDQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzZXJ2ZXIgaXMgcnVubmluZyAxLjE2IG9yIGhpZ2hlcg0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc1Bvc3QxMTYoKSB7DQogICAgICAgIHJldHVybiB2ZXJzaW9uTnVtYmVyc1swXSA+IDEgfHwgKHZlcnNpb25OdW1iZXJzWzBdID09IDEgJiYgdmVyc2lvbk51bWJlcnNbMV0gPj0gMTYpOyAvLyBDaGVja3MgZm9yIDEuMTYrDQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzZXJ2ZXIgaXMgcnVubmluZyAxLjIwIG9yIGhpZ2hlcg0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc1Bvc3QxMjAoKSB7DQogICAgICAgIHJldHVybiB2ZXJzaW9uTnVtYmVyc1swXSA+IDEgfHwgKHZlcnNpb25OdW1iZXJzWzBdID09IDEgJiYgdmVyc2lvbk51bWJlcnNbMV0gPj0gMjApOyAvLyBDaGVja3MgZm9yIDEuMjArDQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIGFuIEl0ZW1TdGFjayBpcyBhIHBsYXllciBoZWFkDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGlzUGxheWVySGVhZChJdGVtU3RhY2sgaXRlbSkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0VHlwZSgpID09IG51bGwpIHJldHVybiBmYWxzZTsNCiAgICAgICAgU3RyaW5nIHR5cGVOYW1lID0gaXRlbS5nZXRUeXBlKCkubmFtZSgpOw0KICAgICAgICBpZiAoaXNMZWdhY3koKSkgew0KICAgICAgICAgICAgcmV0dXJuIHR5cGVOYW1lLmVxdWFscygiU0tVTExfSVRFTSIpICYmIChpdGVtLmdldER1cmFiaWxpdHkoKSA9PSAzIHx8IGl0ZW0uZ2V0RHVyYWJpbGl0eSgpID09IDApOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIHR5cGVOYW1lLmVxdWFscygiUExBWUVSX0hFQUQiKSB8fCB0eXBlTmFtZS5lcXVhbHMoIlNLVUxMX0lURU0iKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdmVyc2lvbi1zcGVjaWZpYyBwbGF5ZXIgaGVhZCBtYXRlcmlhbA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWwgZ2V0UGxheWVySGVhZE1hdGVyaWFsKCkgew0KICAgICAgICByZXR1cm4gZ2V0TWF0ZXJpYWxTYWZlbHkoIlBMQVlFUl9IRUFEIiwgIlNLVUxMX0lURU0iKTsgLy8gUmVzb2x2ZXMgcGxheWVyIGhlYWQgbWF0ZXJpYWwNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHZlcnNpb24tc3BlY2lmaWMgZ2xhc3MgcGFuZSBtYXRlcmlhbA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWwgZ2V0R2xhc3NQYW5lTWF0ZXJpYWwoKSB7DQogICAgICAgIHJldHVybiBnZXRNYXRlcmlhbFNhZmVseSgiQkxBQ0tfU1RBSU5FRF9HTEFTU19QQU5FIiwgIlNUQUlORURfR0xBU1NfUEFORSIpOyAvLyBSZXNvbHZlcyBibGFjayBnbGFzcyBwYW5lDQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB3aGl0ZSBnbGFzcyBwYW5lIG1hdGVyaWFsDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBNYXRlcmlhbCBnZXRXaGl0ZUdsYXNzUGFuZU1hdGVyaWFsKCkgew0KICAgICAgICByZXR1cm4gZ2V0TWF0ZXJpYWxTYWZlbHkoIldISVRFX1NUQUlORURfR0xBU1NfUEFORSIsICJTVEFJTkVEX0dMQVNTX1BBTkUiKTsgLy8gUmVzb2x2ZXMgd2hpdGUgZ2xhc3MgcGFuZQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgZXhwZXJpZW5jZSBib3R0bGUgbWF0ZXJpYWwNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIE1hdGVyaWFsIGdldEV4cGVyaWVuY2VCb3R0bGVNYXRlcmlhbCgpIHsNCiAgICAgICAgcmV0dXJuIGdldE1hdGVyaWFsU2FmZWx5KCJFWFBFUklFTkNFX0JPVFRMRSIsICJFWFBfQk9UVExFIik7IC8vIFJlc29sdmVzIGV4cGVyaWVuY2UgYm90dGxlDQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyByZWQgd29vbCBtYXRlcmlhbA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWwgZ2V0UmVkV29vbE1hdGVyaWFsKCkgew0KICAgICAgICByZXR1cm4gZ2V0TWF0ZXJpYWxTYWZlbHkoIlJFRF9XT09MIiwgIldPT0wiKTsgLy8gUmVzb2x2ZXMgcmVkIHdvb2wNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIGZpcmV3b3JrIHN0YXIgbWF0ZXJpYWwNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIE1hdGVyaWFsIGdldEZpcmV3b3JrU3Rhck1hdGVyaWFsKCkgew0KICAgICAgICByZXR1cm4gZ2V0TWF0ZXJpYWxTYWZlbHkoIkZJUkVXT1JLX1NUQVIiLCAiRklSRVdPUktfQ0hBUkdFIik7IC8vIFJlc29sdmVzIGZpcmV3b3JrIHN0YXINCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIGZpcmV3b3JrIHJvY2tldCBtYXRlcmlhbA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWwgZ2V0RmlyZXdvcmtSb2NrZXRNYXRlcmlhbCgpIHsNCiAgICAgICAgcmV0dXJuIGdldE1hdGVyaWFsU2FmZWx5KCJGSVJFV09SS19ST0NLRVQiLCAiRklSRVdPUksiKTsgLy8gUmVzb2x2ZXMgZmlyZXdvcmsgcm9ja2V0DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyBsYXBpcyBsYXp1bGkgbWF0ZXJpYWwNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIE1hdGVyaWFsIGdldExhcGlzTGF6dWxpTWF0ZXJpYWwoKSB7DQogICAgICAgIHJldHVybiBnZXRNYXRlcmlhbFNhZmVseSgiTEFQSVNfTEFaVUxJIiwgIklOS19TQUNLIik7IC8vIFJlc29sdmVzIGxhcGlzIGxhenVsaQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdG90ZW0gb2YgdW5keWluZyBtYXRlcmlhbA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWwgZ2V0VG90ZW1PZlVuZHlpbmdNYXRlcmlhbCgpIHsNCiAgICAgICAgcmV0dXJuIGdldE1hdGVyaWFsU2FmZWx5KCJUT1RFTV9PRl9VTkRZSU5HIiwgIkdPTERFTl9BUFBMRSIpOyAvLyBSZXNvbHZlcyB0b3RlbQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgY2xvY2sgbWF0ZXJpYWwgKHZlcnNpb24tc2FmZSkNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIE1hdGVyaWFsIGdldENsb2NrTWF0ZXJpYWwoKSB7DQogICAgICAgIHJldHVybiBnZXRNYXRlcmlhbFNhZmVseSgiQ0xPQ0siLCAiV0FUQ0giKTsgLy8gUmVzb2x2ZXMgY2xvY2sNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIGNvbmZpcm0gYnV0dG9uIG1hdGVyaWFsIChncmVlbiBjb25jcmV0ZSBvciBlcXVpdmFsZW50KQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWwgZ2V0Q29uZmlybUJ1dHRvbk1hdGVyaWFsKCkgew0KICAgICAgICByZXR1cm4gZ2V0TWF0ZXJpYWxTYWZlbHkoIkdSRUVOX0NPTkNSRVRFIiwgIldPT0wiKTsgLy8gUmVzb2x2ZXMgZ3JlZW4gY29uY3JldGUNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIGNhbmNlbCBidXR0b24gbWF0ZXJpYWwgKHJlZCBjb25jcmV0ZSBvciBlcXVpdmFsZW50KQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWwgZ2V0Q2FuY2VsQnV0dG9uTWF0ZXJpYWwoKSB7DQogICAgICAgIHJldHVybiBnZXRNYXRlcmlhbFNhZmVseSgiUkVEX0NPTkNSRVRFIiwgIldPT0wiKTsgLy8gUmVzb2x2ZXMgcmVkIGNvbmNyZXRlDQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyBleHBlcmllbmNlIGJ1dHRvbiBtYXRlcmlhbA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWwgZ2V0RXhwZXJpZW5jZUJ1dHRvbk1hdGVyaWFsKCkgew0KICAgICAgICByZXR1cm4gZ2V0RXhwZXJpZW5jZUJvdHRsZU1hdGVyaWFsKCk7IC8vIFVzZXMgZXhwZXJpZW5jZSBib3R0bGUgbWF0ZXJpYWwNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIG1vbmV5IGJ1dHRvbiBtYXRlcmlhbA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWwgZ2V0TW9uZXlCdXR0b25NYXRlcmlhbCgpIHsNCiAgICAgICAgcmV0dXJuIE1hdGVyaWFsLkVNRVJBTEQ7IC8vIFJldHVybnMgZW1lcmFsZCAoY29uc2lzdGVudCBhY3Jvc3MgdmVyc2lvbnMpDQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB0b3RhbCB2YWx1ZSBidXR0b24gbWF0ZXJpYWwNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIE1hdGVyaWFsIGdldFRvdGFsVmFsdWVCdXR0b25NYXRlcmlhbCgpIHsNCiAgICAgICAgcmV0dXJuIE1hdGVyaWFsLkVNRVJBTEQ7IC8vIFJldHVybnMgZW1lcmFsZA0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYWRkIGl0ZW1zIGJ1dHRvbiBtYXRlcmlhbA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWwgZ2V0QWRkSXRlbXNCdXR0b25NYXRlcmlhbCgpIHsNCiAgICAgICAgcmV0dXJuIE1hdGVyaWFsLkNIRVNUOyAvLyBSZXR1cm5zIGNoZXN0IChjb25zaXN0ZW50IGFjcm9zcyB2ZXJzaW9ucykNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHZlcnNpb24tc2FmZSBwbGF5ZXIgaGVhZCBtYXRlcmlhbCB1c2luZyBYTWF0ZXJpYWwNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIE1hdGVyaWFsIGdldFBsYXllckhlYWRNYXRlcmlhbFhNKCkgew0KICAgICAgICByZXR1cm4gWE1hdGVyaWFsLlBMQVlFUl9IRUFELnBhcnNlTWF0ZXJpYWwoKTsgLy8gUmVzb2x2ZXMgcGxheWVyIGhlYWQgdmlhIFhNYXRlcmlhbA0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdmVyc2lvbi1zYWZlIGdsYXNzIHBhbmUgbWF0ZXJpYWwgdXNpbmcgWE1hdGVyaWFsDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBNYXRlcmlhbCBnZXRHbGFzc1BhbmVNYXRlcmlhbFhNKCkgew0KICAgICAgICByZXR1cm4gWE1hdGVyaWFsLldISVRFX1NUQUlORURfR0xBU1NfUEFORS5wYXJzZU1hdGVyaWFsKCk7IC8vIFJlc29sdmVzIHdoaXRlIGdsYXNzIHBhbmUgdmlhIFhNYXRlcmlhbA0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdmVyc2lvbi1zYWZlIGxhcGlzIGxhenVsaSBtYXRlcmlhbCB1c2luZyBYTWF0ZXJpYWwNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIE1hdGVyaWFsIGdldExhcGlzTGF6dWxpTWF0ZXJpYWxYTSgpIHsNCiAgICAgICAgcmV0dXJuIFhNYXRlcmlhbC5MQVBJU19MQVpVTEkucGFyc2VNYXRlcmlhbCgpOyAvLyBSZXNvbHZlcyBsYXBpcyBsYXp1bGkgdmlhIFhNYXRlcmlhbA0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdmVyc2lvbi1zYWZlIHRvdGVtIG9mIHVuZHlpbmcgbWF0ZXJpYWwgdXNpbmcgWE1hdGVyaWFsDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBNYXRlcmlhbCBnZXRUb3RlbU9mVW5keWluZ01hdGVyaWFsWE0oKSB7DQogICAgICAgIHJldHVybiBYTWF0ZXJpYWwuVE9URU1fT0ZfVU5EWUlORy5wYXJzZU1hdGVyaWFsKCk7IC8vIFJlc29sdmVzIHRvdGVtIHZpYSBYTWF0ZXJpYWwNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIG1hdGVyaWFsIHVzaW5nIFhNYXRlcmlhbCB3aXRoIGZhbGxiYWNrDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBNYXRlcmlhbCBnZXRNYXRlcmlhbFhNKFN0cmluZyBtYXRlcmlhbE5hbWUpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIFhNYXRlcmlhbCB4TWF0ZXJpYWwgPSBYTWF0ZXJpYWwudmFsdWVPZihtYXRlcmlhbE5hbWUudG9VcHBlckNhc2UoKSk7IC8vIFJlc29sdmVzIG1hdGVyaWFsDQogICAgICAgICAgICByZXR1cm4geE1hdGVyaWFsLnBhcnNlTWF0ZXJpYWwoKTsgLy8gUmV0dXJucyBwYXJzZWQgbWF0ZXJpYWwNCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIHJldHVybiBnZXRNYXRlcmlhbFNhZmVseShtYXRlcmlhbE5hbWUsICJTVE9ORSIpOyAvLyBGYWxscyBiYWNrIHRvIHNhZmUgbWV0aG9kDQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGVja3MgaWYgYW4gSXRlbVN0YWNrIGlzIGEgcGxheWVyIGhlYWQgdXNpbmcgWE1hdGVyaWFsDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGlzUGxheWVySGVhZFhNKEl0ZW1TdGFjayBpdGVtKSB7DQogICAgICAgIGlmIChpdGVtID09IG51bGwpIHJldHVybiBmYWxzZTsgLy8gQ2hlY2tzIGZvciBudWxsIGl0ZW0NCiAgICAgICAgcmV0dXJuIFhNYXRlcmlhbC5QTEFZRVJfSEVBRC5pc1NpbWlsYXIoaXRlbSk7IC8vIENoZWNrcyBpZiBpdGVtIGlzIHBsYXllciBoZWFkDQogICAgfQ0KDQovLyBmaWxlOiBqYXZhL3RvbnkyNi9ib3VudGllc1BsdXMvdXRpbHMvVmVyc2lvblV0aWxzLmphdmENCg0KICAgIC8qKg0KICAgICAqIFNhZmVseSBnZXRzIGEgbWF0ZXJpYWwgYnkgbmFtZSB3aXRoIG11bHRpcGxlIGZhbGxiYWNrcw0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWwgZ2V0TWF0ZXJpYWxTYWZlbHkoU3RyaW5nIHByaW1hcnlOYW1lLCBTdHJpbmcgZmFsbGJhY2tOYW1lKSB7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckRlYnVnKCJBdHRlbXB0aW5nIHRvIHJlc29sdmUgbWF0ZXJpYWw6IHByaW1hcnk9IiArIHByaW1hcnlOYW1lICsgIiwgZmFsbGJhY2s9IiArIGZhbGxiYWNrTmFtZSArICIsIGlzTGVnYWN5PSIgKyBpc0xlZ2FjeSgpKTsNCg0KICAgICAgICAvLyBUcnkgWE1hdGVyaWFsIGZpcnN0IGZvciBtb2Rlcm4gYW5kIGxlZ2FjeSBjb21wYXRpYmlsaXR5DQogICAgICAgIFhNYXRlcmlhbCB4TWF0ZXJpYWwgPSBYTWF0ZXJpYWwubWF0Y2hYTWF0ZXJpYWwocHJpbWFyeU5hbWUudG9VcHBlckNhc2UoKSkub3JFbHNlKG51bGwpOw0KICAgICAgICBpZiAoeE1hdGVyaWFsICE9IG51bGwpIHsNCiAgICAgICAgICAgIE1hdGVyaWFsIG1hdGVyaWFsID0geE1hdGVyaWFsLnBhcnNlTWF0ZXJpYWwoKTsNCiAgICAgICAgICAgIGlmIChtYXRlcmlhbCAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckRlYnVnKCJSZXNvbHZlZCBtYXRlcmlhbCB2aWEgWE1hdGVyaWFsOiAiICsgcHJpbWFyeU5hbWUgKyAiIC0+ICIgKyBtYXRlcmlhbC5uYW1lKCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbVmVyc2lvblV0aWxzXSBYTWF0ZXJpYWwgcGFyc2VkIG51bGwgZm9yICciICsgcHJpbWFyeU5hbWUgKyAiJywgdHJ5aW5nIGRpcmVjdCBsb29rdXAiKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEZhbGwgYmFjayB0byBkaXJlY3QgbG9va3VwDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBNYXRlcmlhbCBtYXRlcmlhbCA9IE1hdGVyaWFsLnZhbHVlT2YocHJpbWFyeU5hbWUudG9VcHBlckNhc2UoKSk7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRGVidWcoIlJlc29sdmVkIG1hdGVyaWFsIHZpYSBNYXRlcmlhbC52YWx1ZU9mOiAiICsgcHJpbWFyeU5hbWUgKyAiIC0+ICIgKyBtYXRlcmlhbC5uYW1lKCkpOw0KICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsOw0KICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltWZXJzaW9uVXRpbHNdIE1hdGVyaWFsICciICsgcHJpbWFyeU5hbWUgKyAiJyBub3QgZm91bmQsIHRyeWluZyBmYWxsYmFjazogIiArIGZhbGxiYWNrTmFtZSk7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIE1hdGVyaWFsIG1hdGVyaWFsID0gTWF0ZXJpYWwudmFsdWVPZihmYWxsYmFja05hbWUudG9VcHBlckNhc2UoKSk7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckRlYnVnKCJSZXNvbHZlZCBmYWxsYmFjayBtYXRlcmlhbDogIiArIGZhbGxiYWNrTmFtZSArICIgLT4gIiArIG1hdGVyaWFsLm5hbWUoKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsOw0KICAgICAgICAgICAgfSBjYXRjaCAoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGUyKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltWZXJzaW9uVXRpbHNdIEZhbGxiYWNrIG1hdGVyaWFsICciICsgZmFsbGJhY2tOYW1lICsgIicgbm90IGZvdW5kLCB1c2luZyBTVE9ORSIpOw0KICAgICAgICAgICAgICAgIHJldHVybiBNYXRlcmlhbC5TVE9ORTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHMgdGhlIGNvbG9yIG9mIGEgZmlyZXdvcmsgc3RhciBpdGVtIGJhc2VkIG9uIGNvbmZpZ3VyYXRpb24NCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgc2V0RmlyZXdvcmtTdGFyQ29sb3IoSXRlbVN0YWNrIGl0ZW0sIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZywgU3RyaW5nIGNvbG9yUGF0aCkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0VHlwZSgpICE9IGdldEZpcmV3b3JrU3Rhck1hdGVyaWFsKCkpIHsNCiAgICAgICAgICAgIHJldHVybjsgLy8gQ2hlY2tzIGZvciB2YWxpZCBmaXJld29yayBzdGFyDQogICAgICAgIH0NCiAgICAgICAgRmlyZXdvcmtFZmZlY3RNZXRhIG1ldGEgPSAoRmlyZXdvcmtFZmZlY3RNZXRhKSBpdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmIChtZXRhID09IG51bGwpIHJldHVybjsgLy8gQ2hlY2tzIGZvciB2YWxpZCBtZXRhDQogICAgICAgIFN0cmluZyBjb2xvck5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKGNvbG9yUGF0aCwgIldISVRFIik7IC8vIEdldHMgY29sb3IgZnJvbSBjb25maWcNCiAgICAgICAgQ29sb3IgY29sb3IgPSBnZXRDb2xvckZyb21OYW1lKGNvbG9yTmFtZSk7IC8vIFJlc29sdmVzIGNvbG9yDQogICAgICAgIEZpcmV3b3JrRWZmZWN0IGVmZmVjdCA9IEZpcmV3b3JrRWZmZWN0LmJ1aWxkZXIoKQ0KICAgICAgICAgICAgICAgIC53aXRoQ29sb3IoY29sb3IpIC8vIFNldHMgY29sb3INCiAgICAgICAgICAgICAgICAud2l0aChGaXJld29ya0VmZmVjdC5UeXBlLkJBTEwpIC8vIFNldHMgZWZmZWN0IHR5cGUNCiAgICAgICAgICAgICAgICAuYnVpbGQoKTsNCiAgICAgICAgbWV0YS5zZXRFZmZlY3QoZWZmZWN0KTsgLy8gQXBwbGllcyBlZmZlY3QNCiAgICAgICAgaXRlbS5zZXRJdGVtTWV0YShtZXRhKTsgLy8gVXBkYXRlcyBpdGVtDQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyBhIENvbG9yIG9iamVjdCBmcm9tIGEgY29sb3IgbmFtZSBzdHJpbmcNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyBDb2xvciBnZXRDb2xvckZyb21OYW1lKFN0cmluZyBjb2xvck5hbWUpIHsNCiAgICAgICAgc3dpdGNoIChjb2xvck5hbWUudG9VcHBlckNhc2UoKSkgew0KICAgICAgICAgICAgY2FzZSAiUkVEIjogcmV0dXJuIENvbG9yLlJFRDsgLy8gUmV0dXJucyByZWQNCiAgICAgICAgICAgIGNhc2UgIkJMVUUiOiByZXR1cm4gQ29sb3IuQkxVRTsgLy8gUmV0dXJucyBibHVlDQogICAgICAgICAgICBjYXNlICJHUkVFTiI6IHJldHVybiBDb2xvci5HUkVFTjsgLy8gUmV0dXJucyBncmVlbg0KICAgICAgICAgICAgY2FzZSAiWUVMTE9XIjogcmV0dXJuIENvbG9yLllFTExPVzsgLy8gUmV0dXJucyB5ZWxsb3cNCiAgICAgICAgICAgIGNhc2UgIk9SQU5HRSI6IHJldHVybiBDb2xvci5PUkFOR0U7IC8vIFJldHVybnMgb3JhbmdlDQogICAgICAgICAgICBjYXNlICJQVVJQTEUiOiByZXR1cm4gQ29sb3IuUFVSUExFOyAvLyBSZXR1cm5zIHB1cnBsZQ0KICAgICAgICAgICAgY2FzZSAiUElOSyI6IHJldHVybiBDb2xvci5GVUNIU0lBOyAvLyBSZXR1cm5zIHBpbmsNCiAgICAgICAgICAgIGNhc2UgIkxJTUUiOiByZXR1cm4gQ29sb3IuTElNRTsgLy8gUmV0dXJucyBsaW1lDQogICAgICAgICAgICBjYXNlICJBUVVBIjogcmV0dXJuIENvbG9yLkFRVUE7IC8vIFJldHVybnMgYXF1YQ0KICAgICAgICAgICAgY2FzZSAiU0lMVkVSIjogcmV0dXJuIENvbG9yLlNJTFZFUjsgLy8gUmV0dXJucyBzaWx2ZXINCiAgICAgICAgICAgIGNhc2UgIkdSQVkiOiByZXR1cm4gQ29sb3IuR1JBWTsgLy8gUmV0dXJucyBncmF5DQogICAgICAgICAgICBjYXNlICJCTEFDSyI6IHJldHVybiBDb2xvci5CTEFDSzsgLy8gUmV0dXJucyBibGFjaw0KICAgICAgICAgICAgY2FzZSAiTUFST09OIjogcmV0dXJuIENvbG9yLk1BUk9PTjsgLy8gUmV0dXJucyBtYXJvb24NCiAgICAgICAgICAgIGNhc2UgIk5BVlkiOiByZXR1cm4gQ29sb3IuTkFWWTsgLy8gUmV0dXJucyBuYXZ5DQogICAgICAgICAgICBjYXNlICJURUFMIjogcmV0dXJuIENvbG9yLlRFQUw7IC8vIFJldHVybnMgdGVhbA0KICAgICAgICAgICAgY2FzZSAiV0hJVEUiOiBkZWZhdWx0OiByZXR1cm4gQ29sb3IuV0hJVEU7IC8vIFJldHVybnMgd2hpdGUNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNlbmRzIGEgdGl0bGUgdG8gYSBwbGF5ZXIgaW4gYSB2ZXJzaW9uLXNhZmUgd2F5DQogICAgICogLy8gbm90ZTogRGlzcGxheXMgYSB0aXRsZSBhbmQgc3VidGl0bGUgd2l0aCBmb3JtYXR0ZWQgbWVzc2FnZXMNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgc2VuZFRpdGxlKFBsYXllciBwbGF5ZXIsIFN0cmluZyB0aXRsZSwgU3RyaW5nIHN1YnRpdGxlLCBpbnQgZmFkZUluLCBpbnQgc3RheSwgaW50IGZhZGVPdXQpIHsNCiAgICAgICAgaWYgKGlzUG9zdDExMSgpKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIE1ldGhvZCBzZW5kVGl0bGVNZXRob2QgPSBwbGF5ZXIuZ2V0Q2xhc3MoKS5nZXRNZXRob2QoInNlbmRUaXRsZSIsIFN0cmluZy5jbGFzcywgU3RyaW5nLmNsYXNzLCBpbnQuY2xhc3MsIGludC5jbGFzcywgaW50LmNsYXNzKTsNCiAgICAgICAgICAgICAgICBzZW5kVGl0bGVNZXRob2QuaW52b2tlKHBsYXllciwgdGl0bGUsIHN1YnRpdGxlLCBmYWRlSW4sIHN0YXksIGZhZGVPdXQpOw0KICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZFRpdGxlKHRpdGxlLCBzdWJ0aXRsZSk7DQogICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUyKSB7DQogICAgICAgICAgICAgICAgICAgIGlmICh0aXRsZSAhPSBudWxsICYmICF0aXRsZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsIHRpdGxlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAoc3VidGl0bGUgIT0gbnVsbCAmJiAhc3VidGl0bGUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCBzdWJ0aXRsZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBpZiAodGl0bGUgIT0gbnVsbCAmJiAhdGl0bGUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgdGl0bGUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHN1YnRpdGxlICE9IG51bGwgJiYgIXN1YnRpdGxlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsIHN1YnRpdGxlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgYSBib3NzIGJhciBpbiBhIHZlcnNpb24tc2FmZSB3YXkNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIE9iamVjdCBjcmVhdGVCb3NzQmFyKFN0cmluZyBtZXNzYWdlKSB7DQogICAgICAgIGlmICghaXNQb3N0MTkoKSkgew0KICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIEJvc3MgYmFycyBub3Qgc3VwcG9ydGVkIHByZS0xLjkNCiAgICAgICAgfQ0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgQ2xhc3M8Pz4gYm9zc0JhckNsYXNzID0gQ2xhc3MuZm9yTmFtZSgib3JnLmJ1a2tpdC5ib3NzLkJvc3NCYXIiKTsgLy8gR2V0cyBib3NzIGJhciBjbGFzcw0KICAgICAgICAgICAgQ2xhc3M8Pz4gYmFyQ29sb3JDbGFzcyA9IENsYXNzLmZvck5hbWUoIm9yZy5idWtraXQuYm9zcy5CYXJDb2xvciIpOyAvLyBHZXRzIGJhciBjb2xvciBjbGFzcw0KICAgICAgICAgICAgQ2xhc3M8Pz4gYmFyU3R5bGVDbGFzcyA9IENsYXNzLmZvck5hbWUoIm9yZy5idWtraXQuYm9zcy5CYXJTdHlsZSIpOyAvLyBHZXRzIGJhciBzdHlsZSBjbGFzcw0KICAgICAgICAgICAgT2JqZWN0IHB1cnBsZSA9IGJhckNvbG9yQ2xhc3MuZ2V0RmllbGQoIlBVUlBMRSIpLmdldChudWxsKTsgLy8gR2V0cyBwdXJwbGUgY29sb3INCiAgICAgICAgICAgIE9iamVjdCBzb2xpZCA9IGJhclN0eWxlQ2xhc3MuZ2V0RmllbGQoIlNPTElEIikuZ2V0KG51bGwpOyAvLyBHZXRzIHNvbGlkIHN0eWxlDQogICAgICAgICAgICBNZXRob2QgY3JlYXRlQm9zc0JhciA9IEJ1a2tpdC5jbGFzcy5nZXRNZXRob2QoImNyZWF0ZUJvc3NCYXIiLCBTdHJpbmcuY2xhc3MsIGJhckNvbG9yQ2xhc3MsIGJhclN0eWxlQ2xhc3MpOyAvLyBHZXRzIGNyZWF0ZSBtZXRob2QNCiAgICAgICAgICAgIHJldHVybiBjcmVhdGVCb3NzQmFyLmludm9rZShudWxsLCBtZXNzYWdlLCBwdXJwbGUsIHNvbGlkKTsgLy8gQ3JlYXRlcyBib3NzIGJhcg0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIFJldHVybnMgbnVsbCBvbiBmYWlsdXJlDQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTcGF3bnMgcGFydGljbGVzIGluIGEgdmVyc2lvbi1zYWZlIHdheQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBzcGF3blBhcnRpY2xlKFBsYXllciBwbGF5ZXIsIFN0cmluZyBwYXJ0aWNsZU5hbWUsIExvY2F0aW9uIGxvY2F0aW9uLCBpbnQgY291bnQsIGRvdWJsZSBvZmZzZXRYLCBkb3VibGUgb2Zmc2V0WSwgZG91YmxlIG9mZnNldFosIGRvdWJsZSBzcGVlZCkgew0KICAgICAgICBpZiAoIWlzUG9zdDE5KCkpIHsNCiAgICAgICAgICAgIHJldHVybjsgLy8gUGFydGljbGVzIG5vdCBzdXBwb3J0ZWQgcHJlLTEuOQ0KICAgICAgICB9DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBQYXJ0aWNsZSBwYXJ0aWNsZSA9IFBhcnRpY2xlLnZhbHVlT2YocGFydGljbGVOYW1lKTsgLy8gUmVzb2x2ZXMgcGFydGljbGUNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgTWV0aG9kIHNwYXduUGFydGljbGVNZXRob2QgPSBwbGF5ZXIuZ2V0Q2xhc3MoKS5nZXRNZXRob2QoInNwYXduUGFydGljbGUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgUGFydGljbGUuY2xhc3MsIExvY2F0aW9uLmNsYXNzLCBpbnQuY2xhc3MsIGRvdWJsZS5jbGFzcywgZG91YmxlLmNsYXNzLCBkb3VibGUuY2xhc3MsIGRvdWJsZS5jbGFzcyk7IC8vIEF0dGVtcHRzIGZ1bGwgbWV0aG9kDQogICAgICAgICAgICAgICAgc3Bhd25QYXJ0aWNsZU1ldGhvZC5pbnZva2UocGxheWVyLCBwYXJ0aWNsZSwgbG9jYXRpb24sIGNvdW50LCBvZmZzZXRYLCBvZmZzZXRZLCBvZmZzZXRaLCBzcGVlZCk7IC8vIFNwYXducyBwYXJ0aWNsZXMNCiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgTWV0aG9kIHNwYXduUGFydGljbGVNZXRob2QgPSBwbGF5ZXIuZ2V0Q2xhc3MoKS5nZXRNZXRob2QoInNwYXduUGFydGljbGUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcnRpY2xlLmNsYXNzLCBMb2NhdGlvbi5jbGFzcywgaW50LmNsYXNzKTsgLy8gRmFsbHMgYmFjayB0byBzaW1wbGVyIG1ldGhvZA0KICAgICAgICAgICAgICAgICAgICBzcGF3blBhcnRpY2xlTWV0aG9kLmludm9rZShwbGF5ZXIsIHBhcnRpY2xlLCBsb2NhdGlvbiwgY291bnQpOyAvLyBTcGF3bnMgcGFydGljbGVzDQogICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUyKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZXMgZmFpbHVyZQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCAoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgUGFydGljbGUgZmFsbGJhY2tQYXJ0aWNsZSA9IFBhcnRpY2xlLnZhbHVlT2YoIlJFRFNUT05FIik7IC8vIFVzZXMgcmVkc3RvbmUgYXMgZmFsbGJhY2sNCiAgICAgICAgICAgICAgICBNZXRob2Qgc3Bhd25QYXJ0aWNsZU1ldGhvZCA9IHBsYXllci5nZXRDbGFzcygpLmdldE1ldGhvZCgic3Bhd25QYXJ0aWNsZSIsDQogICAgICAgICAgICAgICAgICAgICAgICBQYXJ0aWNsZS5jbGFzcywgTG9jYXRpb24uY2xhc3MsIGludC5jbGFzcyk7IC8vIEF0dGVtcHRzIHNpbXBsZXIgbWV0aG9kDQogICAgICAgICAgICAgICAgc3Bhd25QYXJ0aWNsZU1ldGhvZC5pbnZva2UocGxheWVyLCBmYWxsYmFja1BhcnRpY2xlLCBsb2NhdGlvbiwgY291bnQpOyAvLyBTcGF3bnMgZmFsbGJhY2sgcGFydGljbGVzDQogICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gaWdub3JlZCkgew0KICAgICAgICAgICAgICAgIC8vIElnbm9yZXMgZmFpbHVyZQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgLy8gSWdub3JlcyBvdGhlciBleGNlcHRpb25zDQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZXR1cm5zIHRoZSBzZXJ2ZXIgdmVyc2lvbiBhcyBhIGNvbXBhcmFibGUgaW50ZWdlciAoZS5nLiwgMS44LjggPSAxMDg4KQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldFZlcnNpb25OdW1iZXIoKSB7DQogICAgICAgIHJldHVybiB2ZXJzaW9uTnVtYmVyc1swXSAqIDEwMDAgKyB2ZXJzaW9uTnVtYmVyc1sxXSAqIDEwICsgdmVyc2lvbk51bWJlcnNbMl07IC8vIFJldHVybnMgdmVyc2lvbiBudW1iZXINCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZXR1cm5zIHRoZSByYXcgdmVyc2lvbiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIFN0cmluZyBnZXRWZXJzaW9uU3RyaW5nKCkgew0KICAgICAgICByZXR1cm4gdmVyc2lvbjsgLy8gUmV0dXJucyB2ZXJzaW9uIHN0cmluZw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYXBwcm9wcmlhdGUgc291bmQgbmFtZSBmb3Igc3VjY2Vzcw0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5nIGdldFN1Y2Nlc3NTb3VuZCgpIHsNCiAgICAgICAgcmV0dXJuIGlzTGVnYWN5KCkgPyAiTEVWRUxfVVAiIDogIkVOVElUWV9QTEFZRVJfTEVWRUxVUCI7IC8vIFJldHVybnMgc3VjY2VzcyBzb3VuZA0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYXBwcm9wcmlhdGUgc291bmQgbmFtZSBmb3IgZXJyb3INCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIFN0cmluZyBnZXRFcnJvclNvdW5kKCkgew0KICAgICAgICByZXR1cm4gaXNMZWdhY3koKSA/ICJWSUxMQUdFUl9OTyIgOiAiRU5USVRZX1ZJTExBR0VSX05PIjsgLy8gUmV0dXJucyBlcnJvciBzb3VuZA0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYXBwcm9wcmlhdGUgcGFydGljbGUgbmFtZSBmb3IgcmVkc3RvbmUNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIFN0cmluZyBnZXRSZWRzdG9uZVBhcnRpY2xlTmFtZSgpIHsNCiAgICAgICAgcmV0dXJuICJSRURTVE9ORSI7IC8vIFJldHVybnMgcmVkc3RvbmUgcGFydGljbGUNCiAgICB9DQoNCiAgICBwcml2YXRlIHN0YXRpYyB2b2lkIGluaXRpYWxpemVNYXRlcmlhbE1hcHBpbmdzKCkgew0KICAgICAgICAvLyBXb29sIGNvbG9ycyAvLyBNYXBzIGxlZ2FjeSB3b29sIGNvbG9ycw0KICAgICAgICBpZiAoaXNMZWdhY3koKSkgew0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJXSElURV9XT09MIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJXT09MIiksIChzaG9ydCkgMCkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJPUkFOR0VfV09PTCIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDEpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiTUFHRU5UQV9XT09MIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJXT09MIiksIChzaG9ydCkgMikpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJMSUdIVF9CTFVFX1dPT0wiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIldPT0wiKSwgKHNob3J0KSAzKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIllFTExPV19XT09MIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJXT09MIiksIChzaG9ydCkgNCkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJMSU1FX1dPT0wiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIldPT0wiKSwgKHNob3J0KSA1KSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIlBJTktfV09PTCIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDYpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiR1JBWV9XT09MIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJXT09MIiksIChzaG9ydCkgNykpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJMSUdIVF9HUkFZX1dPT0wiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIldPT0wiKSwgKHNob3J0KSA4KSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkNZQU5fV09PTCIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDkpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiUFVSUExFX1dPT0wiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIldPT0wiKSwgKHNob3J0KSAxMCkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJCTFVFX1dPT0wiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIldPT0wiKSwgKHNob3J0KSAxMSkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJCUk9XTl9XT09MIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJXT09MIiksIChzaG9ydCkgMTIpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiR1JFRU5fV09PTCIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDEzKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIlJFRF9XT09MIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJXT09MIiksIChzaG9ydCkgMTQpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiQkxBQ0tfV09PTCIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDE1KSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBTdGFpbmVkIGdsYXNzIC8vIE1hcHMgbGVnYWN5IHN0YWluZWQgZ2xhc3MNCiAgICAgICAgaWYgKGlzTGVnYWN5KCkpIHsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiV0hJVEVfU1RBSU5FRF9HTEFTUyIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9HTEFTUyIpLCAoc2hvcnQpIDApKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiT1JBTkdFX1NUQUlORURfR0xBU1MiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1MiKSwgKHNob3J0KSAxKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIk1BR0VOVEFfU1RBSU5FRF9HTEFTUyIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9HTEFTUyIpLCAoc2hvcnQpIDIpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiTElHSFRfQkxVRV9TVEFJTkVEX0dMQVNTIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0dMQVNTIiksIChzaG9ydCkgMykpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJZRUxMT1dfU1RBSU5FRF9HTEFTUyIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9HTEFTUyIpLCAoc2hvcnQpIDQpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiTElNRV9TVEFJTkVEX0dMQVNTIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0dMQVNTIiksIChzaG9ydCkgNSkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJQSU5LX1NUQUlORURfR0xBU1MiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1MiKSwgKHNob3J0KSA2KSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkdSQVlfU1RBSU5FRF9HTEFTUyIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9HTEFTUyIpLCAoc2hvcnQpIDcpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiTElHSFRfR1JBWV9TVEFJTkVEX0dMQVNTIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0dMQVNTIiksIChzaG9ydCkgOCkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJDWUFOX1NUQUlORURfR0xBU1MiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1MiKSwgKHNob3J0KSA5KSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIlBVUlBMRV9TVEFJTkVEX0dMQVNTIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0dMQVNTIiksIChzaG9ydCkgMTApKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiQkxVRV9TVEFJTkVEX0dMQVNTIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0dMQVNTIiksIChzaG9ydCkgMTEpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiQlJPV05fU1RBSU5FRF9HTEFTUyIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9HTEFTUyIpLCAoc2hvcnQpIDEyKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkdSRUVOX1NUQUlORURfR0xBU1MiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1MiKSwgKHNob3J0KSAxMykpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJSRURfU1RBSU5FRF9HTEFTUyIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9HTEFTUyIpLCAoc2hvcnQpIDE0KSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkJMQUNLX1NUQUlORURfR0xBU1MiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1MiKSwgKHNob3J0KSAxNSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gU3RhaW5lZCBnbGFzcyBwYW5lcyAvLyBNYXBzIGxlZ2FjeSBzdGFpbmVkIGdsYXNzIHBhbmVzDQogICAgICAgIGlmIChpc0xlZ2FjeSgpKSB7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIldISVRFX1NUQUlORURfR0xBU1NfUEFORSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9HTEFTU19QQU5FIiksIChzaG9ydCkgMCkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJPUkFOR0VfU1RBSU5FRF9HTEFTU19QQU5FIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0dMQVNTX1BBTkUiKSwgKHNob3J0KSAxKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIk1BR0VOVEFfU1RBSU5FRF9HTEFTU19QQU5FIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0dMQVNTX1BBTkUiKSwgKHNob3J0KSAyKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkxJR0hUX0JMVUVfU1RBSU5FRF9HTEFTU19QQU5FIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0dMQVNTX1BBTkUiKSwgKHNob3J0KSAzKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIllFTExPV19TVEFJTkVEX0dMQVNTX1BBTkUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1NfUEFORSIpLCAoc2hvcnQpIDQpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiTElNRV9TVEFJTkVEX0dMQVNTX1BBTkUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1NfUEFORSIpLCAoc2hvcnQpIDUpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiUElOS19TVEFJTkVEX0dMQVNTX1BBTkUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1NfUEFORSIpLCAoc2hvcnQpIDYpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiR1JBWV9TVEFJTkVEX0dMQVNTX1BBTkUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1NfUEFORSIpLCAoc2hvcnQpIDcpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiTElHSFRfR1JBWV9TVEFJTkVEX0dMQVNTX1BBTkUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1NfUEFORSIpLCAoc2hvcnQpIDgpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiQ1lBTl9TVEFJTkVEX0dMQVNTX1BBTkUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1NfUEFORSIpLCAoc2hvcnQpIDkpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiUFVSUExFX1NUQUlORURfR0xBU1NfUEFORSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9HTEFTU19QQU5FIiksIChzaG9ydCkgMTApKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiQkxVRV9TVEFJTkVEX0dMQVNTX1BBTkUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1NfUEFORSIpLCAoc2hvcnQpIDExKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkJST1dOX1NUQUlORURfR0xBU1NfUEFORSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9HTEFTU19QQU5FIiksIChzaG9ydCkgMTIpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiR1JFRU5fU1RBSU5FRF9HTEFTU19QQU5FIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0dMQVNTX1BBTkUiKSwgKHNob3J0KSAxMykpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJSRURfU1RBSU5FRF9HTEFTU19QQU5FIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0dMQVNTX1BBTkUiKSwgKHNob3J0KSAxNCkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJCTEFDS19TVEFJTkVEX0dMQVNTX1BBTkUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfR0xBU1NfUEFORSIpLCAoc2hvcnQpIDE1KSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDb25jcmV0ZSBtYXBwaW5ncyAvLyBNYXBzIGxlZ2FjeSBjb25jcmV0ZSB0byB3b29sDQogICAgICAgIGlmIChnZXRWZXJzaW9uTnVtYmVyKCkgPCAxMTIwKSB7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIldISVRFX0NPTkNSRVRFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJXT09MIiksIChzaG9ydCkgMCkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJPUkFOR0VfQ09OQ1JFVEUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIldPT0wiKSwgKHNob3J0KSAxKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIk1BR0VOVEFfQ09OQ1JFVEUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIldPT0wiKSwgKHNob3J0KSAyKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkxJR0hUX0JMVUVfQ09OQ1JFVEUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIldPT0wiKSwgKHNob3J0KSAzKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIllFTExPV19DT05DUkVURSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDQpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiTElNRV9DT05DUkVURSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDUpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiUElOS19DT05DUkVURSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDYpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiR1JBWV9DT05DUkVURSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDcpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiTElHSFRfR1JBWV9DT05DUkVURSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDgpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiQ1lBTl9DT05DUkVURSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDkpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiUFVSUExFX0NPTkNSRVRFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJXT09MIiksIChzaG9ydCkgMTApKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiQkxVRV9DT05DUkVURSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDExKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkJST1dOX0NPTkNSRVRFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJXT09MIiksIChzaG9ydCkgMTIpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiR1JFRU5fQ09OQ1JFVEUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIldPT0wiKSwgKHNob3J0KSAxMykpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJSRURfQ09OQ1JFVEUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIldPT0wiKSwgKHNob3J0KSAxNCkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJCTEFDS19DT05DUkVURSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiV09PTCIpLCAoc2hvcnQpIDE1KSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBUZXJyYWNvdHRhIG1hcHBpbmdzIC8vIE1hcHMgbGVnYWN5IHRlcnJhY290dGENCiAgICAgICAgaWYgKGlzTGVnYWN5KCkpIHsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiVEVSUkFDT1RUQSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiSEFSRF9DTEFZIikpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiV0hJVEVfVEVSUkFDT1RUQSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9DTEFZIiksIChzaG9ydCkgMCkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJPUkFOR0VfVEVSUkFDT1RUQSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9DTEFZIiksIChzaG9ydCkgMSkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJNQUdFTlRBX1RFUlJBQ09UVEEiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfQ0xBWSIpLCAoc2hvcnQpIDIpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiTElHSFRfQkxVRV9URVJSQUNPVFRBIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0NMQVkiKSwgKHNob3J0KSAzKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIllFTExPV19URVJSQUNPVFRBIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0NMQVkiKSwgKHNob3J0KSA0KSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkxJTUVfVEVSUkFDT1RUQSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9DTEFZIiksIChzaG9ydCkgNSkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJQSU5LX1RFUlJBQ09UVEEiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfQ0xBWSIpLCAoc2hvcnQpIDYpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiR1JBWV9URVJSQUNPVFRBIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJTVEFJTkVEX0NMQVkiKSwgKHNob3J0KSA3KSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkxJR0hUX0dSQVlfVEVSUkFDT1RUQSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9DTEFZIiksIChzaG9ydCkgOCkpOw0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJDWUFOX1RFUlJBQ09UVEEiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfQ0xBWSIpLCAoc2hvcnQpIDkpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiUFVSUExFX1RFUlJBQ09UVEEiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfQ0xBWSIpLCAoc2hvcnQpIDEwKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkJMVUVfVEVSUkFDT1RUQSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9DTEFZIiksIChzaG9ydCkgMTEpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiQlJPV05fVEVSUkFDT1RUQSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9DTEFZIiksIChzaG9ydCkgMTIpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiR1JFRU5fVEVSUkFDT1RUQSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU1RBSU5FRF9DTEFZIiksIChzaG9ydCkgMTMpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiUkVEX1RFUlJBQ09UVEEiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfQ0xBWSIpLCAoc2hvcnQpIDE0KSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkJMQUNLX1RFUlJBQ09UVEEiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNUQUlORURfQ0xBWSIpLCAoc2hvcnQpIDE1KSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBEeWUgbWFwcGluZ3MgLy8gTWFwcyBsZWdhY3kgZHllcw0KICAgICAgICBpZiAoZ2V0VmVyc2lvbk51bWJlcigpIDwgMTE0MCkgew0KICAgICAgICAgICAgaWYgKGlzTGVnYWN5KCkpIHsNCiAgICAgICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkJMQUNLX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiSU5LX1NBQ0siKSwgKHNob3J0KSAwKSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJSRURfRFlFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJJTktfU0FDSyIpLCAoc2hvcnQpIDEpKTsNCiAgICAgICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkdSRUVOX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiSU5LX1NBQ0siKSwgKHNob3J0KSAyKSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJCUk9XTl9EWUUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIklOS19TQUNLIiksIChzaG9ydCkgMykpOw0KICAgICAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiQkxVRV9EWUUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIklOS19TQUNLIiksIChzaG9ydCkgNCkpOw0KICAgICAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiUFVSUExFX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiSU5LX1NBQ0siKSwgKHNob3J0KSA1KSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJDWUFOX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiSU5LX1NBQ0siKSwgKHNob3J0KSA2KSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJMSUdIVF9HUkFZX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiSU5LX1NBQ0siKSwgKHNob3J0KSA3KSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJHUkFZX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiSU5LX1NBQ0siKSwgKHNob3J0KSA4KSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJQSU5LX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiSU5LX1NBQ0siKSwgKHNob3J0KSA5KSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJMSU1FX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiSU5LX1NBQ0siKSwgKHNob3J0KSAxMCkpOw0KICAgICAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiWUVMTE9XX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiSU5LX1NBQ0siKSwgKHNob3J0KSAxMSkpOw0KICAgICAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiTElHSFRfQkxVRV9EWUUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIklOS19TQUNLIiksIChzaG9ydCkgMTIpKTsNCiAgICAgICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIk1BR0VOVEFfRFlFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJJTktfU0FDSyIpLCAoc2hvcnQpIDEzKSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJPUkFOR0VfRFlFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJJTktfU0FDSyIpLCAoc2hvcnQpIDE0KSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJXSElURV9EWUUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIklOS19TQUNLIiksIChzaG9ydCkgMTUpKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJCTEFDS19EWUUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIkRZRSIpLCAoc2hvcnQpIDApKTsNCiAgICAgICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIlJFRF9EWUUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIkRZRSIpLCAoc2hvcnQpIDEpKTsNCiAgICAgICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkdSRUVOX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiRFlFIiksIChzaG9ydCkgMikpOw0KICAgICAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiQlJPV05fRFlFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJEWUUiKSwgKHNob3J0KSAzKSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJCTFVFX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiRFlFIiksIChzaG9ydCkgNCkpOw0KICAgICAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiUFVSUExFX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiRFlFIiksIChzaG9ydCkgNSkpOw0KICAgICAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiQ1lBTl9EWUUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIkRZRSIpLCAoc2hvcnQpIDYpKTsNCiAgICAgICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkxJR0hUX0dSQVlfRFlFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJEWUUiKSwgKHNob3J0KSA3KSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJHUkFZX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiRFlFIiksIChzaG9ydCkgOCkpOw0KICAgICAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiUElOS19EWUUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIkRZRSIpLCAoc2hvcnQpIDkpKTsNCiAgICAgICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkxJTUVfRFlFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJEWUUiKSwgKHNob3J0KSAxMCkpOw0KICAgICAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiWUVMTE9XX0RZRSIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiRFlFIiksIChzaG9ydCkgMTEpKTsNCiAgICAgICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkxJR0hUX0JMVUVfRFlFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJEWUUiKSwgKHNob3J0KSAxMikpOw0KICAgICAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiTUFHRU5UQV9EWUUiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIkRZRSIpLCAoc2hvcnQpIDEzKSk7DQogICAgICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJPUkFOR0VfRFlFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJEWUUiKSwgKHNob3J0KSAxNCkpOw0KICAgICAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiV0hJVEVfRFlFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJEWUUiKSwgKHNob3J0KSAxNSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gT3RoZXIgY29tbW9uIG1hdGVyaWFsIGNoYW5nZXMgLy8gTWFwcyBsZWdhY3kgc2t1bGxzIGFuZCBleHBlcmllbmNlIGJvdHRsZQ0KICAgICAgICBpZiAoaXNMZWdhY3koKSkgew0KICAgICAgICAgICAgTUFURVJJQUxfTUFQUElOR1MucHV0KCJQTEFZRVJfSEVBRCIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU0tVTExfSVRFTSIpLCAoc2hvcnQpIDMpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiU0tFTEVUT05fU0tVTEwiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNLVUxMX0lURU0iKSwgKHNob3J0KSAwKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIldJVEhFUl9TS0VMRVRPTl9TS1VMTCIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU0tVTExfSVRFTSIpLCAoc2hvcnQpIDEpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiWk9NQklFX0hFQUQiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNLVUxMX0lURU0iKSwgKHNob3J0KSAyKSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkNSRUVQRVJfSEVBRCIsIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwudmFsdWVPZigiU0tVTExfSVRFTSIpLCAoc2hvcnQpIDQpKTsNCiAgICAgICAgICAgIE1BVEVSSUFMX01BUFBJTkdTLnB1dCgiRFJBR09OX0hFQUQiLCBuZXcgTWF0ZXJpYWxEYXRhKE1hdGVyaWFsLnZhbHVlT2YoIlNLVUxMX0lURU0iKSwgKHNob3J0KSA1KSk7DQogICAgICAgICAgICBNQVRFUklBTF9NQVBQSU5HUy5wdXQoIkVYUEVSSUVOQ0VfQk9UVExFIiwgbmV3IE1hdGVyaWFsRGF0YShNYXRlcmlhbC52YWx1ZU9mKCJFWFBfQk9UVExFIikpKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgYW4gSXRlbVN0YWNrIHdpdGggcHJvcGVyIG1hdGVyaWFsIGFuZCBkYW1hZ2UgdmFsdWUgZm9yIHRoZSBjdXJyZW50IHZlcnNpb24NCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIEl0ZW1TdGFjayBjcmVhdGVWZXJzaW9uU2FmZUl0ZW1TdGFjayhTdHJpbmcgbWF0ZXJpYWxOYW1lLCBpbnQgYW1vdW50KSB7DQogICAgICAgIE1hdGVyaWFsRGF0YSBtYXREYXRhID0gZ2V0TWF0ZXJpYWxEYXRhKG1hdGVyaWFsTmFtZSk7IC8vIEdldHMgbWF0ZXJpYWwgZGF0YQ0KICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IG5ldyBJdGVtU3RhY2sobWF0RGF0YS5nZXRNYXRlcmlhbCgpLCBhbW91bnQpOyAvLyBDcmVhdGVzIGl0ZW0NCiAgICAgICAgaWYgKGlzTGVnYWN5KCkgJiYgbWF0RGF0YS5nZXREYXRhKCkgIT0gMCkgew0KICAgICAgICAgICAgaXRlbS5zZXREdXJhYmlsaXR5KG1hdERhdGEuZ2V0RGF0YSgpKTsgLy8gU2V0cyBsZWdhY3kgZGF0YSB2YWx1ZQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBpdGVtOyAvLyBSZXR1cm5zIGl0ZW0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGFuIEl0ZW1TdGFjayB3aXRoIGFtb3VudCBvZiAxDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBJdGVtU3RhY2sgY3JlYXRlVmVyc2lvblNhZmVJdGVtU3RhY2soU3RyaW5nIG1hdGVyaWFsTmFtZSkgew0KICAgICAgICByZXR1cm4gY3JlYXRlVmVyc2lvblNhZmVJdGVtU3RhY2sobWF0ZXJpYWxOYW1lLCAxKTsgLy8gQ2FsbHMgbWFpbiBtZXRob2Qgd2l0aCBhbW91bnQgMQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgbWF0ZXJpYWwgZGF0YSAobWF0ZXJpYWwgKyBkYW1hZ2UgdmFsdWUpIGZvciBhbnkgbWF0ZXJpYWwgbmFtZQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTWF0ZXJpYWxEYXRhIGdldE1hdGVyaWFsRGF0YShTdHJpbmcgbWF0ZXJpYWxOYW1lKSB7DQogICAgICAgIFN0cmluZyB1cHBlck5hbWUgPSBtYXRlcmlhbE5hbWUudG9VcHBlckNhc2UoKTsgLy8gTm9ybWFsaXplcyBtYXRlcmlhbCBuYW1lDQogICAgICAgIGlmIChNQVRFUklBTF9NQVBQSU5HUy5jb250YWluc0tleSh1cHBlck5hbWUpKSB7DQogICAgICAgICAgICByZXR1cm4gTUFURVJJQUxfTUFQUElOR1MuZ2V0KHVwcGVyTmFtZSk7IC8vIFJldHVybnMgbWFwcGVkIG1hdGVyaWFsDQogICAgICAgIH0NCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIE1hdGVyaWFsIG1hdGVyaWFsID0gTWF0ZXJpYWwudmFsdWVPZih1cHBlck5hbWUpOyAvLyBBdHRlbXB0cyBkaXJlY3QgbG9va3VwDQogICAgICAgICAgICByZXR1cm4gbmV3IE1hdGVyaWFsRGF0YShtYXRlcmlhbCk7IC8vIFJldHVybnMgbWF0ZXJpYWwgZGF0YQ0KICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBNYXRlcmlhbERhdGEoTWF0ZXJpYWwuU1RPTkUpOyAvLyBGYWxscyBiYWNrIHRvIFNUT05FDQogICAgICAgIH0NCiAgICB9DQp9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL0l0ZW1zL0RlY3JlYXNlVGltZS5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMzMzMjcgMTUwMjYwNjI2NjIgMDE3MzYwACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0KcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzLkl0ZW1zOw0KDQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5DaGF0Q29sb3I7DQppbXBvcnQgb3JnLmJ1a2tpdC5NYXRlcmlhbDsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5GaWxlQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmVudGl0eS5QbGF5ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5FdmVudEhhbmRsZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5MaXN0ZW5lcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LnBsYXllci5QbGF5ZXJJbnRlcmFjdEV2ZW50Ow0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuYmxvY2suQWN0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1TdGFjazsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5tZXRhLkl0ZW1NZXRhOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuQm91bnRpZXNQbHVzOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuRXZlbnRNYW5hZ2VyOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuVmVyc2lvblV0aWxzOw0KDQppbXBvcnQgamF2YS51dGlsLio7DQoNCnB1YmxpYyBjbGFzcyBEZWNyZWFzZVRpbWUgaW1wbGVtZW50cyBMaXN0ZW5lciB7DQoNCiAgICBwcml2YXRlIGZpbmFsIEJvdW50aWVzUGx1cyBwbHVnaW47DQoNCiAgICAvLyBDb25maWd1cmF0aW9uIHZhbHVlcw0KICAgIHByaXZhdGUgU3RyaW5nIGNocm9ub3NTaGFyZE5hbWU7DQogICAgcHJpdmF0ZSBMaXN0PFN0cmluZz4gY2hyb25vc1NoYXJkTG9yZTsNCiAgICBwcml2YXRlIFN0cmluZyBpdGVtSWRlbnRpZmllcjsNCiAgICBwcml2YXRlIFN0cmluZyBub0JvdW50eU1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgc3VjY2Vzc01lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgZmFpbHVyZU1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgZmFpbHVyZVdpdGhUaW1lTWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyBzZXJ2ZXJCcm9hZGNhc3RNZXNzYWdlOw0KICAgIHByaXZhdGUgZG91YmxlIG1pbkRlY3JlYXNlUGVyY2VudDsNCiAgICBwcml2YXRlIGRvdWJsZSBtYXhEZWNyZWFzZVBlcmNlbnQ7DQogICAgcHJpdmF0ZSBkb3VibGUgbWluRmFpbHVyZUNoYW5jZTsNCiAgICBwcml2YXRlIGRvdWJsZSBtYXhGYWlsdXJlQ2hhbmNlOw0KICAgIHByaXZhdGUgYm9vbGVhbiBmYWlsdXJlQWRkc1RpbWU7DQogICAgcHJpdmF0ZSBkb3VibGUgZmFpbHVyZUluY3JlYXNlUGVyY2VudDsNCg0KICAgIC8qKg0KICAgICAqIEluaXRpYWxpemVzIHRoZSBEZWNyZWFzZVRpbWUgc3lzdGVtDQogICAgICogLy8gbm90ZTogU2V0cyB1cCBjb25maWd1cmF0aW9uIGFuZCByZWdpc3RlcnMgbGlzdGVuZXINCiAgICAgKi8NCiAgICBwdWJsaWMgRGVjcmVhc2VUaW1lKEJvdW50aWVzUGx1cyBwbHVnaW4sIEV2ZW50TWFuYWdlciBldmVudE1hbmFnZXIpIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgICAgIGxvYWRDb25maWd1cmF0aW9uKCk7DQogICAgICAgIGV2ZW50TWFuYWdlci5yZWdpc3Rlcih0aGlzKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgbG9hZENvbmZpZ3VyYXRpb24oKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGl0ZW1zQ29uZmlnID0gcGx1Z2luLmdldEl0ZW1zQ29uZmlnKCk7DQoNCiAgICAgICAgdGhpcy5jaHJvbm9zU2hhcmROYW1lID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJjaHJvbm9zLXNoYXJkLml0ZW0tbmFtZSIsICImYiZsQ2hyb25vcyBTaGFyZCIpOw0KICAgICAgICB0aGlzLmNocm9ub3NTaGFyZExvcmUgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmdMaXN0KCJjaHJvbm9zLXNoYXJkLml0ZW0tbG9yZSIpOw0KICAgICAgICB0aGlzLml0ZW1JZGVudGlmaWVyID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJjaHJvbm9zLXNoYXJkLml0ZW0taWRlbnRpZmllciIsICJDSFJPTk9TX1NIQVJEX0lURU0iKTsNCiAgICAgICAgdGhpcy5ub0JvdW50eU1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoImNocm9ub3Mtc2hhcmQubWVzc2FnZXMubm8tYm91bnR5IiwgIiZjWW91IGhhdmUgbm8gYm91bnR5IHRvIGRlY3JlYXNlISIpOw0KICAgICAgICB0aGlzLnN1Y2Nlc3NNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJjaHJvbm9zLXNoYXJkLm1lc3NhZ2VzLnN1Y2Nlc3MiLCAiJmFDaHJvbm9zIFNoYXJkIGFjdGl2YXRlZCEgWW91ciBib3VudHkgdGltZSB3YXMgZGVjcmVhc2VkIGJ5ICZlJXBlcmNlbnRhZ2UlJmElISIpOw0KICAgICAgICB0aGlzLmZhaWx1cmVNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJjaHJvbm9zLXNoYXJkLm1lc3NhZ2VzLmZhaWx1cmUiLCAiJmNDaHJvbm9zIFNoYXJkIGZhaWxlZCEgVGhlIHRpbWUgbWFuaXB1bGF0aW9uIHdhcyB1bnN1Y2Nlc3NmdWwuIik7DQogICAgICAgIHRoaXMuZmFpbHVyZVdpdGhUaW1lTWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygiY2hyb25vcy1zaGFyZC5tZXNzYWdlcy5mYWlsdXJlLXdpdGgtdGltZSIsICImY0Nocm9ub3MgU2hhcmQgYmFja2ZpcmVkISBZb3VyIGJvdW50eSB0aW1lIHdhcyBpbmNyZWFzZWQgYnkgJmUlcGVyY2VudGFnZSUmYyUhIik7DQogICAgICAgIHRoaXMuc2VydmVyQnJvYWRjYXN0TWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygiY2hyb25vcy1zaGFyZC5zZXJ2ZXItYnJvYWRjYXN0LW1lc3NhZ2UiLCAiJjYmbFtCT1VOVFldICZlJXBsYXllciUgJjZ1c2VkIGEgQ2hyb25vcyBTaGFyZCBhbmQgZGVjcmVhc2VkIHRoZWlyIGJvdW50eSB0aW1lISIpOw0KICAgICAgICB0aGlzLm1pbkRlY3JlYXNlUGVyY2VudCA9IGl0ZW1zQ29uZmlnLmdldERvdWJsZSgiY2hyb25vcy1zaGFyZC5kZWNyZWFzZS1yYW5nZS5taW4tcGVyY2VudCIsIDUuMCk7DQogICAgICAgIHRoaXMubWF4RGVjcmVhc2VQZXJjZW50ID0gaXRlbXNDb25maWcuZ2V0RG91YmxlKCJjaHJvbm9zLXNoYXJkLmRlY3JlYXNlLXJhbmdlLm1heC1wZXJjZW50IiwgMTUuMCk7DQoNCiAgICAgICAgLy8gTG9hZCBmYWlsdXJlIHJhbmdlIHNldHRpbmdzDQogICAgICAgIHRoaXMubWluRmFpbHVyZUNoYW5jZSA9IGl0ZW1zQ29uZmlnLmdldERvdWJsZSgiY2hyb25vcy1zaGFyZC5mYWlsdXJlLXJhbmdlLm1pbi1jaGFuY2UiLCAxNS4wKTsNCiAgICAgICAgdGhpcy5tYXhGYWlsdXJlQ2hhbmNlID0gaXRlbXNDb25maWcuZ2V0RG91YmxlKCJjaHJvbm9zLXNoYXJkLmZhaWx1cmUtcmFuZ2UubWF4LWNoYW5jZSIsIDI1LjApOw0KDQogICAgICAgIHRoaXMuZmFpbHVyZUFkZHNUaW1lID0gaXRlbXNDb25maWcuZ2V0Qm9vbGVhbigiY2hyb25vcy1zaGFyZC5mYWlsdXJlLmFkZHMtdGltZSIsIHRydWUpOw0KICAgICAgICB0aGlzLmZhaWx1cmVJbmNyZWFzZVBlcmNlbnQgPSBpdGVtc0NvbmZpZy5nZXREb3VibGUoImNocm9ub3Mtc2hhcmQuZmFpbHVyZS5pbmNyZWFzZS1wZXJjZW50IiwgMTAuMCk7DQoNCiAgICAgICAgLy8gU2V0IGRlZmF1bHQgbG9yZSBpZiBub25lIGNvbmZpZ3VyZWQNCiAgICAgICAgaWYgKGNocm9ub3NTaGFyZExvcmUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBjaHJvbm9zU2hhcmRMb3JlID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICBjaHJvbm9zU2hhcmRMb3JlLmFkZCgiJjdSaWdodC1jbGljayB0byBtYW5pcHVsYXRlIHRpbWUgYW5kIik7DQogICAgICAgICAgICBjaHJvbm9zU2hhcmRMb3JlLmFkZCgiJjdkZWNyZWFzZSB5b3VyIGJvdW50eSBkdXJhdGlvbiIpOw0KICAgICAgICAgICAgY2hyb25vc1NoYXJkTG9yZS5hZGQoIiIpOw0KICAgICAgICAgICAgY2hyb25vc1NoYXJkTG9yZS5hZGQoIiZlRGVjcmVhc2UgUmFuZ2U6ICZhJW1pbl9kZWNyZWFzZSUlLSZhJW1heF9kZWNyZWFzZSUlIik7DQogICAgICAgICAgICBjaHJvbm9zU2hhcmRMb3JlLmFkZCgiJmNGYWlsdXJlIENoYW5jZTogJmUlbWluX2ZhaWx1cmUlJS0mZSVtYXhfZmFpbHVyZSUlIik7DQogICAgICAgICAgICBpZiAoZmFpbHVyZUFkZHNUaW1lKSB7DQogICAgICAgICAgICAgICAgY2hyb25vc1NoYXJkTG9yZS5hZGQoIiZjRmFpbHVyZSBFZmZlY3Q6ICZlKyVmYWlsdXJlX2luY3JlYXNlJSUgdGltZSIpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBjaHJvbm9zU2hhcmRMb3JlLmFkZCgiJmNGYWlsdXJlIEVmZmVjdDogJmVObyBwZW5hbHR5Iik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjaHJvbm9zU2hhcmRMb3JlLmFkZCgiIik7DQogICAgICAgICAgICBjaHJvbm9zU2hhcmRMb3JlLmFkZCgiJjdIYXJuZXNzIHRoZSBwb3dlciBvZiB0aW1lIGl0c2VsZiEiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgYSBuZXcgQ2hyb25vcyBTaGFyZCBpdGVtIC8vIG5vdGU6IENyZWF0ZXMgYSBwcmlzbWFyaW5lIHNoYXJkIGl0ZW0gd2l0aCBOQlQgdGFnIGZvciB0eXBlDQogICAgICovDQogICAgcHVibGljIEl0ZW1TdGFjayBjcmVhdGVDaHJvbm9zU2hhcmRJdGVtKCkgew0KICAgICAgICBJdGVtU3RhY2sgY2hyb25vc1NoYXJkID0gbmV3IEl0ZW1TdGFjayhNYXRlcmlhbC5QUklTTUFSSU5FX1NIQVJEKTsNCiAgICAgICAgSXRlbU1ldGEgbWV0YSA9IGNocm9ub3NTaGFyZC5nZXRJdGVtTWV0YSgpOw0KDQogICAgICAgIGlmIChtZXRhICE9IG51bGwpIHsNCiAgICAgICAgICAgIG1ldGEuc2V0RGlzcGxheU5hbWUoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBjaHJvbm9zU2hhcmROYW1lKSk7DQogICAgICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgZm9yIChTdHJpbmcgbGluZSA6IGNocm9ub3NTaGFyZExvcmUpIHsNCiAgICAgICAgICAgICAgICBTdHJpbmcgcHJvY2Vzc2VkTGluZSA9IGxpbmUNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlbWluX2RlY3JlYXNlJSIsIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBtaW5EZWNyZWFzZVBlcmNlbnQpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVtYXhfZGVjcmVhc2UlIiwgU3RyaW5nLmZvcm1hdCgiJS4xZiIsIG1heERlY3JlYXNlUGVyY2VudCkpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW1pbl9mYWlsdXJlJSIsIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBtaW5GYWlsdXJlQ2hhbmNlKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlbWF4X2ZhaWx1cmUlIiwgU3RyaW5nLmZvcm1hdCgiJS4xZiIsIG1heEZhaWx1cmVDaGFuY2UpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVmYWlsdXJlX2luY3JlYXNlJSIsIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBmYWlsdXJlSW5jcmVhc2VQZXJjZW50KSk7DQogICAgICAgICAgICAgICAgbG9yZS5hZGQoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBwcm9jZXNzZWRMaW5lKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBtZXRhLnNldExvcmUobG9yZSk7DQogICAgICAgICAgICBjaHJvbm9zU2hhcmQuc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgICAgICBjaHJvbm9zU2hhcmQgPSBWZXJzaW9uVXRpbHMuc2V0TkJUU3RyaW5nKGNocm9ub3NTaGFyZCwgIml0ZW1fdHlwZSIsICJjaHJvbm9zX3NoYXJkIik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gY2hyb25vc1NoYXJkOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiBhbiBpdGVtIGlzIGEgQ2hyb25vcyBTaGFyZCBpdGVtIC8vIG5vdGU6IFZlcmlmaWVzIGl0ZW0gdHlwZSB1c2luZyBOQlQgdGFnDQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gaXNDaHJvbm9zU2hhcmRJdGVtKEl0ZW1TdGFjayBpdGVtKSB7DQogICAgICAgIGlmIChpdGVtID09IG51bGwgfHwgaXRlbS5nZXRJdGVtTWV0YSgpID09IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gImNocm9ub3Nfc2hhcmQiLmVxdWFscyhWZXJzaW9uVXRpbHMuZ2V0TkJUU3RyaW5nKGl0ZW0sICJpdGVtX3R5cGUiKSk7DQogICAgfQ0KDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uUGxheWVySW50ZXJhY3QoUGxheWVySW50ZXJhY3RFdmVudCBldmVudCkgew0KICAgICAgICBpZiAoZXZlbnQuZ2V0QWN0aW9uKCkgIT0gQWN0aW9uLlJJR0hUX0NMSUNLX0FJUiAmJiBldmVudC5nZXRBY3Rpb24oKSAhPSBBY3Rpb24uUklHSFRfQ0xJQ0tfQkxPQ0spIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIFBsYXllciBwbGF5ZXIgPSBldmVudC5nZXRQbGF5ZXIoKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBldmVudC5nZXRJdGVtKCk7DQoNCiAgICAgICAgaWYgKCFpc0Nocm9ub3NTaGFyZEl0ZW0oaXRlbSkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGV2ZW50LnNldENhbmNlbGxlZCh0cnVlKTsNCg0KICAgICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaGFzIGEgYm91bnR5DQogICAgICAgIGlmICghcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5oYXNCb3VudHkocGxheWVyLmdldFVuaXF1ZUlkKCkpKSB7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBub0JvdW50eU1lc3NhZ2UpKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFJlbW92ZSB0aGUgaXRlbSBmcm9tIGludmVudG9yeQ0KICAgICAgICBpZiAoaXRlbS5nZXRBbW91bnQoKSA+IDEpIHsNCiAgICAgICAgICAgIGl0ZW0uc2V0QW1vdW50KGl0ZW0uZ2V0QW1vdW50KCkgLSAxKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHBsYXllci5nZXRJbnZlbnRvcnkoKS5yZW1vdmUoaXRlbSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIHNoYXJkIHNob3VsZCBmYWlsDQogICAgICAgIGJvb2xlYW4gc2hvdWxkRmFpbCA9IHNob3VsZEZhaWwoKTsNCg0KICAgICAgICBpZiAoc2hvdWxkRmFpbCkgew0KICAgICAgICAgICAgaWYgKGZhaWx1cmVBZGRzVGltZSkgew0KICAgICAgICAgICAgICAgIC8vIEluY3JlYXNlIGJvdW50eSB0aW1lIGJ5IGZhaWx1cmUgcGVyY2VudGFnZQ0KICAgICAgICAgICAgICAgIGluY3JlYXNlQWxsQm91bnR5VGltZXMocGxheWVyLCBmYWlsdXJlSW5jcmVhc2VQZXJjZW50KTsNCiAgICAgICAgICAgICAgICBTdHJpbmcgbWVzc2FnZSA9IGZhaWx1cmVXaXRoVGltZU1lc3NhZ2UucmVwbGFjZSgiJXBlcmNlbnRhZ2UlIiwgU3RyaW5nLmZvcm1hdCgiJS4xZiIsIGZhaWx1cmVJbmNyZWFzZVBlcmNlbnQpKTsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIC8vIEp1c3QgZmFpbCB3aXRob3V0IHBlbmFsdHkNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBmYWlsdXJlTWVzc2FnZSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy8gU3VjY2VzcyAtIGRlY3JlYXNlIGJvdW50eSB0aW1lDQogICAgICAgICAgICBkb3VibGUgZGVjcmVhc2VQZXJjZW50ID0gZ2V0UmFuZG9tRGVjcmVhc2VQZXJjZW50KCk7DQogICAgICAgICAgICBkZWNyZWFzZUFsbEJvdW50eVRpbWVzKHBsYXllciwgZGVjcmVhc2VQZXJjZW50KTsNCg0KICAgICAgICAgICAgU3RyaW5nIG1lc3NhZ2UgPSBzdWNjZXNzTWVzc2FnZS5yZXBsYWNlKCIlcGVyY2VudGFnZSUiLCBTdHJpbmcuZm9ybWF0KCIlLjFmIiwgZGVjcmVhc2VQZXJjZW50KSk7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKSk7DQoNCiAgICAgICAgICAgIC8vIEJyb2FkY2FzdCB0byBzZXJ2ZXIgaWYgY29uZmlndXJlZA0KICAgICAgICAgICAgaWYgKHNlcnZlckJyb2FkY2FzdE1lc3NhZ2UgIT0gbnVsbCAmJiAhc2VydmVyQnJvYWRjYXN0TWVzc2FnZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBTdHJpbmcgYnJvYWRjYXN0ID0gc2VydmVyQnJvYWRjYXN0TWVzc2FnZS5yZXBsYWNlKCIlcGxheWVyJSIsIHBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgICAgIEJ1a2tpdC5icm9hZGNhc3RNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgYnJvYWRjYXN0KSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBEZWNyZWFzZXMgYWxsIGJvdW50eSB0aW1lcyBmb3IgYSBwbGF5ZXIgYnkgdGhlIHNwZWNpZmllZCBwZXJjZW50YWdlDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGRlY3JlYXNlQWxsQm91bnR5VGltZXMoUGxheWVyIHBsYXllciwgZG91YmxlIHBlcmNlbnRhZ2UpIHsNCiAgICAgICAgVVVJRCBwbGF5ZXJVVUlEID0gcGxheWVyLmdldFVuaXF1ZUlkKCk7DQogICAgICAgIE1hcDxVVUlELCBNYXA8VVVJRCwgSW50ZWdlcj4+IGFsbEJvdW50aWVzID0gcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5saXN0QWxsQm91bnRpZXMoKTsNCg0KICAgICAgICBpZiAoIWFsbEJvdW50aWVzLmNvbnRhaW5zS2V5KHBsYXllclVVSUQpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBNYXA8VVVJRCwgSW50ZWdlcj4gcGxheWVyQm91bnRpZXMgPSBhbGxCb3VudGllcy5nZXQocGxheWVyVVVJRCk7DQogICAgICAgIGJvb2xlYW4gbW9kaWZpZWQgPSBmYWxzZTsNCg0KICAgICAgICAvLyBHZXQgZXhwaXJlIHRpbWVzIGZvciB0aGlzIHBsYXllcidzIGJvdW50aWVzDQogICAgICAgIGZvciAoVVVJRCBzZXR0ZXJVVUlEIDogcGxheWVyQm91bnRpZXMua2V5U2V0KCkpIHsNCiAgICAgICAgICAgIFN0cmluZyBleHBpcmVUaW1lID0gcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5nZXRCb3VudHlFeHBpcmVUaW1lKHNldHRlclVVSUQsIHBsYXllclVVSUQpOw0KICAgICAgICAgICAgaWYgKGV4cGlyZVRpbWUgIT0gbnVsbCAmJiAhZXhwaXJlVGltZS5lcXVhbHMoIk5ldmVyIikpIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBsb25nIGV4cGlyZVRpbWVNcyA9IExvbmcucGFyc2VMb25nKGV4cGlyZVRpbWUpOw0KICAgICAgICAgICAgICAgICAgICBsb25nIGN1cnJlbnRUaW1lID0gU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCk7DQogICAgICAgICAgICAgICAgICAgIGxvbmcgcmVtYWluaW5nVGltZSA9IGV4cGlyZVRpbWVNcyAtIGN1cnJlbnRUaW1lOw0KDQogICAgICAgICAgICAgICAgICAgIGlmIChyZW1haW5pbmdUaW1lID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBuZXcgcmVtYWluaW5nIHRpbWUgKGRlY3JlYXNlZCBieSBwZXJjZW50YWdlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbG9uZyBkZWNyZWFzZUFtb3VudCA9IChsb25nKSAocmVtYWluaW5nVGltZSAqIChwZXJjZW50YWdlIC8gMTAwLjApKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmcgbmV3UmVtYWluaW5nVGltZSA9IHJlbWFpbmluZ1RpbWUgLSBkZWNyZWFzZUFtb3VudDsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGRvbid0IGdvIGJlbG93IDEgbWludXRlIG1pbmltdW0NCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1JlbWFpbmluZ1RpbWUgPSBNYXRoLm1heChuZXdSZW1haW5pbmdUaW1lLCA2MDAwMCk7IC8vIDEgbWludXRlIG1pbmltdW0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBleHBpcmUgdGltZQ0KICAgICAgICAgICAgICAgICAgICAgICAgbG9uZyBuZXdFeHBpcmVUaW1lID0gY3VycmVudFRpbWUgKyBuZXdSZW1haW5pbmdUaW1lOw0KICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5zZXRCb3VudHkoc2V0dGVyVVVJRCwgcGxheWVyVVVJRCwgcGxheWVyQm91bnRpZXMuZ2V0KHNldHRlclVVSUQpLCBuZXdFeHBpcmVUaW1lKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIFNraXAgaW52YWxpZCBleHBpcmUgdGltZXMNCiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkludmFsaWQgZXhwaXJlIHRpbWUgZm9ybWF0IGZvciBib3VudHk6ICIgKyBleHBpcmVUaW1lKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAobW9kaWZpZWQpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuc2F2ZUJvdW50aWVzKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBJbmNyZWFzZXMgYWxsIGJvdW50eSB0aW1lcyBmb3IgYSBwbGF5ZXIgYnkgdGhlIHNwZWNpZmllZCBwZXJjZW50YWdlIChmb3IgZmFpbHVyZXMpDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGluY3JlYXNlQWxsQm91bnR5VGltZXMoUGxheWVyIHBsYXllciwgZG91YmxlIHBlcmNlbnRhZ2UpIHsNCiAgICAgICAgVVVJRCBwbGF5ZXJVVUlEID0gcGxheWVyLmdldFVuaXF1ZUlkKCk7DQogICAgICAgIE1hcDxVVUlELCBNYXA8VVVJRCwgSW50ZWdlcj4+IGFsbEJvdW50aWVzID0gcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5saXN0QWxsQm91bnRpZXMoKTsNCg0KICAgICAgICBpZiAoIWFsbEJvdW50aWVzLmNvbnRhaW5zS2V5KHBsYXllclVVSUQpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBNYXA8VVVJRCwgSW50ZWdlcj4gcGxheWVyQm91bnRpZXMgPSBhbGxCb3VudGllcy5nZXQocGxheWVyVVVJRCk7DQogICAgICAgIGJvb2xlYW4gbW9kaWZpZWQgPSBmYWxzZTsNCg0KICAgICAgICAvLyBHZXQgZXhwaXJlIHRpbWVzIGZvciB0aGlzIHBsYXllcidzIGJvdW50aWVzDQogICAgICAgIGZvciAoVVVJRCBzZXR0ZXJVVUlEIDogcGxheWVyQm91bnRpZXMua2V5U2V0KCkpIHsNCiAgICAgICAgICAgIFN0cmluZyBleHBpcmVUaW1lID0gcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5nZXRCb3VudHlFeHBpcmVUaW1lKHNldHRlclVVSUQsIHBsYXllclVVSUQpOw0KICAgICAgICAgICAgaWYgKGV4cGlyZVRpbWUgIT0gbnVsbCAmJiAhZXhwaXJlVGltZS5lcXVhbHMoIk5ldmVyIikpIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBsb25nIGV4cGlyZVRpbWVNcyA9IExvbmcucGFyc2VMb25nKGV4cGlyZVRpbWUpOw0KICAgICAgICAgICAgICAgICAgICBsb25nIGN1cnJlbnRUaW1lID0gU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCk7DQogICAgICAgICAgICAgICAgICAgIGxvbmcgcmVtYWluaW5nVGltZSA9IGV4cGlyZVRpbWVNcyAtIGN1cnJlbnRUaW1lOw0KDQogICAgICAgICAgICAgICAgICAgIGlmIChyZW1haW5pbmdUaW1lID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBuZXcgcmVtYWluaW5nIHRpbWUgKGluY3JlYXNlZCBieSBwZXJjZW50YWdlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbG9uZyBpbmNyZWFzZUFtb3VudCA9IChsb25nKSAocmVtYWluaW5nVGltZSAqIChwZXJjZW50YWdlIC8gMTAwLjApKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmcgbmV3UmVtYWluaW5nVGltZSA9IHJlbWFpbmluZ1RpbWUgKyBpbmNyZWFzZUFtb3VudDsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBleHBpcmUgdGltZQ0KICAgICAgICAgICAgICAgICAgICAgICAgbG9uZyBuZXdFeHBpcmVUaW1lID0gY3VycmVudFRpbWUgKyBuZXdSZW1haW5pbmdUaW1lOw0KICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5zZXRCb3VudHkoc2V0dGVyVVVJRCwgcGxheWVyVVVJRCwgcGxheWVyQm91bnRpZXMuZ2V0KHNldHRlclVVSUQpLCBuZXdFeHBpcmVUaW1lKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIFNraXAgaW52YWxpZCBleHBpcmUgdGltZXMNCiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkludmFsaWQgZXhwaXJlIHRpbWUgZm9ybWF0IGZvciBib3VudHk6ICIgKyBleHBpcmVUaW1lKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAobW9kaWZpZWQpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuc2F2ZUJvdW50aWVzKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIGEgcmFuZG9tIGRlY3JlYXNlIHBlcmNlbnRhZ2Ugd2l0aGluIHRoZSBjb25maWd1cmVkIHJhbmdlDQogICAgICovDQogICAgcHJpdmF0ZSBkb3VibGUgZ2V0UmFuZG9tRGVjcmVhc2VQZXJjZW50KCkgew0KICAgICAgICBSYW5kb20gcmFuZG9tID0gbmV3IFJhbmRvbSgpOw0KICAgICAgICByZXR1cm4gbWluRGVjcmVhc2VQZXJjZW50ICsgKHJhbmRvbS5uZXh0RG91YmxlKCkgKiAobWF4RGVjcmVhc2VQZXJjZW50IC0gbWluRGVjcmVhc2VQZXJjZW50KSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgQ2hyb25vcyBTaGFyZCBzaG91bGQgZmFpbCBiYXNlZCBvbiByYW5kb20gY2hhbmNlIHdpdGhpbiByYW5nZQ0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBzaG91bGRGYWlsKCkgew0KICAgICAgICBSYW5kb20gcmFuZG9tID0gbmV3IFJhbmRvbSgpOw0KICAgICAgICBkb3VibGUgZmFpbHVyZUNoYW5jZSA9IG1pbkZhaWx1cmVDaGFuY2UgKyAobWF4RmFpbHVyZUNoYW5jZSAtIG1pbkZhaWx1cmVDaGFuY2UpICogcmFuZG9tLm5leHREb3VibGUoKTsNCiAgICAgICAgZG91YmxlIHJvbGwgPSByYW5kb20ubmV4dERvdWJsZSgpICogMTAwLjA7DQoNCiAgICAgICAgcmV0dXJuIHJvbGwgPCBmYWlsdXJlQ2hhbmNlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENsZWFuIHVwIHdoZW4gcGx1Z2luIGRpc2FibGVzDQogICAgICovDQogICAgcHVibGljIHZvaWQgY2xlYW51cCgpIHsNCiAgICAgICAgLy8gTm8gY2xlYW51cCBuZWVkZWQgZm9yIHRoaXMgaXRlbQ0KICAgIH0NCg0KICAgIC8vIEdldHRlcnMgZm9yIGNvbmZpZ3VyYXRpb24gdmFsdWVzDQogICAgcHVibGljIGRvdWJsZSBnZXRNaW5EZWNyZWFzZVBlcmNlbnQoKSB7IHJldHVybiBtaW5EZWNyZWFzZVBlcmNlbnQ7IH0NCiAgICBwdWJsaWMgZG91YmxlIGdldE1heERlY3JlYXNlUGVyY2VudCgpIHsgcmV0dXJuIG1heERlY3JlYXNlUGVyY2VudDsgfQ0KICAgIHB1YmxpYyBkb3VibGUgZ2V0TWluRmFpbHVyZUNoYW5jZSgpIHsgcmV0dXJuIG1pbkZhaWx1cmVDaGFuY2U7IH0NCiAgICBwdWJsaWMgZG91YmxlIGdldE1heEZhaWx1cmVDaGFuY2UoKSB7IHJldHVybiBtYXhGYWlsdXJlQ2hhbmNlOyB9DQogICAgcHVibGljIGJvb2xlYW4gaXNGYWlsdXJlQWRkc1RpbWUoKSB7IHJldHVybiBmYWlsdXJlQWRkc1RpbWU7IH0NCiAgICBwdWJsaWMgZG91YmxlIGdldEZhaWx1cmVJbmNyZWFzZVBlcmNlbnQoKSB7IHJldHVybiBmYWlsdXJlSW5jcmVhc2VQZXJjZW50OyB9DQp9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy9JdGVtcy9KYW1tZXIuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDM0NDY2IDE1MDI2MDYyNjYyIDAxNjI0NgAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMuSXRlbXM7DQoNCmltcG9ydCBjb20uY29tcGhlbml4LnByb3RvY29sLlBhY2tldFR5cGU7DQppbXBvcnQgY29tLmNvbXBoZW5peC5wcm90b2NvbC5Qcm90b2NvbExpYnJhcnk7DQppbXBvcnQgY29tLmNvbXBoZW5peC5wcm90b2NvbC5Qcm90b2NvbE1hbmFnZXI7DQppbXBvcnQgY29tLmNvbXBoZW5peC5wcm90b2NvbC5ldmVudHMuUGFja2V0Q29udGFpbmVyOw0KaW1wb3J0IGNvbS5jb21waGVuaXgucHJvdG9jb2wud3JhcHBlcnMuV3JhcHBlZENoYXRDb21wb25lbnQ7DQppbXBvcnQgY29tLmNyeXB0b21vcmluLnhzZXJpZXMuWE1hdGVyaWFsOw0KaW1wb3J0IG9yZy5idWtraXQuQnVra2l0Ow0KaW1wb3J0IG9yZy5idWtraXQuQ2hhdENvbG9yOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LkV2ZW50SGFuZGxlcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50Lkxpc3RlbmVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQucGxheWVyLlBsYXllckludGVyYWN0RXZlbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5ibG9jay5BY3Rpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbVN0YWNrOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lm1ldGEuSXRlbU1ldGE7DQppbXBvcnQgb3JnLmJ1a2tpdC5zY2hlZHVsZXIuQnVra2l0UnVubmFibGU7DQppbXBvcnQgb3JnLmJ1a2tpdC5zY2hlZHVsZXIuQnVra2l0VGFzazsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkJvdW50aWVzUGx1czsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLkV2ZW50TWFuYWdlcjsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlZlcnNpb25VdGlsczsNCg0KaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7DQppbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7DQppbXBvcnQgamF2YS51dGlsLkxpc3Q7DQppbXBvcnQgamF2YS51dGlsLk1hcDsNCmltcG9ydCBqYXZhLnV0aWwuVVVJRDsNCg0KcHVibGljIGNsYXNzIEphbW1lciBpbXBsZW1lbnRzIExpc3RlbmVyIHsNCg0KICAgIHByaXZhdGUgZmluYWwgQm91bnRpZXNQbHVzIHBsdWdpbjsNCiAgICBwcml2YXRlIGZpbmFsIE1hcDxVVUlELCBMb25nPiBhY3RpdmVKYW1tZXJzID0gbmV3IEhhc2hNYXA8PigpOyAvLyBQbGF5ZXIgVVVJRCAtPiBFeHBpcnkgdGltZQ0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIEJ1a2tpdFRhc2s+IGFjdGlvbkJhclRhc2tzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIEJ1a2tpdFRhc2s+IGphbW1lclRhc2tzID0gbmV3IEhhc2hNYXA8PigpOw0KDQogICAgLy8gQ29uZmlndXJhdGlvbiB2YWx1ZXMNCiAgICBwcml2YXRlIGludCBqYW1taW5nRHVyYXRpb247IC8vIGluIHNlY29uZHMNCiAgICBwcml2YXRlIFN0cmluZyBqYW1tZXJOYW1lOw0KICAgIHByaXZhdGUgTGlzdDxTdHJpbmc+IGphbW1lckxvcmU7DQogICAgcHJpdmF0ZSBTdHJpbmcgaXRlbUlkZW50aWZpZXI7DQogICAgcHJpdmF0ZSBTdHJpbmcgamFtbWVyQWN0aXZhdGVkTWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyBqYW1tZXJEZWFjdGl2YXRlZE1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgamFtbWVyRXhwaXJlZE1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgYWN0aW9uQmFyTWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyBqYW1tZXJCbG9ja2VkTWVzc2FnZTsNCg0KICAgIC8qKg0KICAgICAqIEluaXRpYWxpemVzIHRoZSBKYW1tZXIgc3lzdGVtDQogICAgICogLy8gbm90ZTogU2V0cyB1cCBjb25maWd1cmF0aW9uIGFuZCByZWdpc3RlcnMgbGlzdGVuZXINCiAgICAgKi8NCiAgICBwdWJsaWMgSmFtbWVyKEJvdW50aWVzUGx1cyBwbHVnaW4sIEV2ZW50TWFuYWdlciBldmVudE1hbmFnZXIpIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgICAgIGxvYWRDb25maWd1cmF0aW9uKCk7DQogICAgICAgIGV2ZW50TWFuYWdlci5yZWdpc3Rlcih0aGlzKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgbG9hZENvbmZpZ3VyYXRpb24oKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGl0ZW1zQ29uZmlnID0gcGx1Z2luLmdldEl0ZW1zQ29uZmlnKCk7DQoNCiAgICAgICAgdGhpcy5qYW1taW5nRHVyYXRpb24gPSBpdGVtc0NvbmZpZy5nZXRJbnQoImphbW1lci5qYW1taW5nLWR1cmF0aW9uIiwgMzAwKTsgLy8gNSBtaW51dGVzIGRlZmF1bHQNCiAgICAgICAgdGhpcy5qYW1tZXJOYW1lID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJqYW1tZXIuaXRlbS1uYW1lIiwgIiZjJmxTaWduYWwgSmFtbWVyIik7DQogICAgICAgIHRoaXMuamFtbWVyTG9yZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZ0xpc3QoImphbW1lci5pdGVtLWxvcmUiKTsNCiAgICAgICAgdGhpcy5pdGVtSWRlbnRpZmllciA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygiamFtbWVyLml0ZW0taWRlbnRpZmllciIsICJTSUdOQUxfSkFNTUVSX0lURU0iKTsNCiAgICAgICAgdGhpcy5qYW1tZXJBY3RpdmF0ZWRNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJqYW1tZXIubWVzc2FnZXMuamFtbWVyLWFjdGl2YXRlZCIsICImYUphbW1lciBhY3RpdmF0ZWQhIFlvdSBhcmUgbm93IHByb3RlY3RlZCBmcm9tIHRyYWNraW5nIGZvciAmZSVkdXJhdGlvbiUgJmFzZWNvbmRzLiIpOw0KICAgICAgICB0aGlzLmphbW1lckRlYWN0aXZhdGVkTWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygiamFtbWVyLm1lc3NhZ2VzLmphbW1lci1kZWFjdGl2YXRlZCIsICImY0phbW1lciBkZWFjdGl2YXRlZC4iKTsNCiAgICAgICAgdGhpcy5qYW1tZXJFeHBpcmVkTWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygiamFtbWVyLm1lc3NhZ2VzLmphbW1lci1leHBpcmVkIiwgIiZjWW91ciBqYW1tZXIgaGFzIGV4cGlyZWQgYW5kIHdhcyByZW1vdmVkISIpOw0KICAgICAgICB0aGlzLmphbW1lckJsb2NrZWRNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJqYW1tZXIubWVzc2FnZXMuamFtbWVyLWJsb2NrZWQiLCAiJmNZb3VyIGFjdGlvbiB3YXMgYmxvY2tlZCBieSBhbiBhY3RpdmUgamFtbWVyISIpOw0KICAgICAgICB0aGlzLmFjdGlvbkJhck1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoImphbW1lci5hY3Rpb24tYmFyLW1lc3NhZ2UiLCAiJmNKYW1tZXIgQWN0aXZlOiAmZSV0aW1lJXMgcmVtYWluaW5nIik7DQoNCiAgICAgICAgLy8gU2V0IGRlZmF1bHQgbG9yZSBpZiBub25lIGNvbmZpZ3VyZWQNCiAgICAgICAgaWYgKGphbW1lckxvcmUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBqYW1tZXJMb3JlID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICBqYW1tZXJMb3JlLmFkZCgiJjdSaWdodC1jbGljayB0byB0b2dnbGUgamFtbWVyIG9uL29mZiIpOw0KICAgICAgICAgICAgamFtbWVyTG9yZS5hZGQoIiY3QmxvY2tzIHRyYWNrZXIgYW5kIFVBViBmdW5jdGlvbmFsaXR5Iik7DQogICAgICAgICAgICBqYW1tZXJMb3JlLmFkZCgiJjd3aGVuIGFjdGl2ZSBhbmQgaW4gaW52ZW50b3J5Iik7DQogICAgICAgICAgICBqYW1tZXJMb3JlLmFkZCgiIik7DQogICAgICAgICAgICBqYW1tZXJMb3JlLmFkZCgiJmVEdXJhdGlvbjogJmEiICsgKGphbW1pbmdEdXJhdGlvbiAvIDYwKSArICIgJmVtaW51dGVzIik7DQogICAgICAgICAgICBqYW1tZXJMb3JlLmFkZCgiJmNCcmVha3MgYWZ0ZXIgZnVsbCBkdXJhdGlvbiBvZiB1c2UiKTsNCiAgICAgICAgICAgIGphbW1lckxvcmUuYWRkKCIiKTsNCiAgICAgICAgICAgIGphbW1lckxvcmUuYWRkKCImN1BlcmZlY3QgZm9yIHN0YXlpbmcgb2ZmIHRoZSByYWRhciEiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgYSBuZXcgamFtbWVyIGl0ZW0NCiAgICAgKiAvLyBub3RlOiBDcmVhdGVzIGEgcmVkc3RvbmUgdG9yY2ggaXRlbSB3aXRoIE5CVCB0YWcgZm9yIHR5cGUNCiAgICAgKi8NCiAgICBwdWJsaWMgSXRlbVN0YWNrIGNyZWF0ZUphbW1lckl0ZW0oKSB7DQogICAgICAgIEl0ZW1TdGFjayBqYW1tZXIgPSBuZXcgSXRlbVN0YWNrKFhNYXRlcmlhbC5SRURTVE9ORV9UT1JDSC5wYXJzZU1hdGVyaWFsKCkpOw0KICAgICAgICBJdGVtTWV0YSBtZXRhID0gamFtbWVyLmdldEl0ZW1NZXRhKCk7DQoNCiAgICAgICAgaWYgKG1ldGEgIT0gbnVsbCkgew0KICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGphbW1lck5hbWUpKTsNCiAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICBmb3IgKFN0cmluZyBsaW5lIDogamFtbWVyTG9yZSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBwcm9jZXNzZWRMaW5lID0gbGluZS5yZXBsYWNlKCIlZHVyYXRpb24lIiwgU3RyaW5nLnZhbHVlT2YoamFtbWluZ0R1cmF0aW9uKSk7DQogICAgICAgICAgICAgICAgbG9yZS5hZGQoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBwcm9jZXNzZWRMaW5lKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBtZXRhLnNldExvcmUobG9yZSk7DQogICAgICAgICAgICBqYW1tZXIuc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgICAgICBqYW1tZXIgPSBWZXJzaW9uVXRpbHMuc2V0TkJUU3RyaW5nKGphbW1lciwgIml0ZW1fdHlwZSIsICJqYW1tZXIiKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBqYW1tZXI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIGFuIGl0ZW0gaXMgYSBqYW1tZXIgaXRlbSAvLyBub3RlOiBWZXJpZmllcyBpdGVtIHR5cGUgdXNpbmcgTkJUIHRhZw0KICAgICAqLw0KICAgIHB1YmxpYyBib29sZWFuIGlzSmFtbWVySXRlbShJdGVtU3RhY2sgaXRlbSkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0SXRlbU1ldGEoKSA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICJqYW1tZXIiLmVxdWFscyhWZXJzaW9uVXRpbHMuZ2V0TkJUU3RyaW5nKGl0ZW0sICJpdGVtX3R5cGUiKSk7DQogICAgfQ0KDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uUGxheWVySW50ZXJhY3QoUGxheWVySW50ZXJhY3RFdmVudCBldmVudCkgew0KICAgICAgICBpZiAoZXZlbnQuZ2V0QWN0aW9uKCkgIT0gQWN0aW9uLlJJR0hUX0NMSUNLX0FJUiAmJiBldmVudC5nZXRBY3Rpb24oKSAhPSBBY3Rpb24uUklHSFRfQ0xJQ0tfQkxPQ0spIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIFBsYXllciBwbGF5ZXIgPSBldmVudC5nZXRQbGF5ZXIoKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBldmVudC5nZXRJdGVtKCk7DQoNCiAgICAgICAgaWYgKCFpc0phbW1lckl0ZW0oaXRlbSkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGV2ZW50LnNldENhbmNlbGxlZCh0cnVlKTsNCg0KICAgICAgICBVVUlEIHBsYXllclVVSUQgPSBwbGF5ZXIuZ2V0VW5pcXVlSWQoKTsNCg0KICAgICAgICAvLyBDaGVjayBpZiBqYW1tZXIgaXMgYWxyZWFkeSBhY3RpdmUNCiAgICAgICAgaWYgKGlzSmFtbWVyQWN0aXZlKHBsYXllcikpIHsNCiAgICAgICAgICAgIC8vIERlYWN0aXZhdGUgamFtbWVyDQogICAgICAgICAgICBkZWFjdGl2YXRlSmFtbWVyKHBsYXllcik7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBqYW1tZXJEZWFjdGl2YXRlZE1lc3NhZ2UpKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIC8vIEFjdGl2YXRlIGphbW1lcg0KICAgICAgICAgICAgYWN0aXZhdGVKYW1tZXIocGxheWVyKTsNCiAgICAgICAgICAgIFN0cmluZyBtZXNzYWdlID0gamFtbWVyQWN0aXZhdGVkTWVzc2FnZS5yZXBsYWNlKCIlZHVyYXRpb24lIiwgU3RyaW5nLnZhbHVlT2YoamFtbWluZ0R1cmF0aW9uKSk7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBY3RpdmF0ZXMgdGhlIGphbW1lciBmb3IgYSBwbGF5ZXINCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgYWN0aXZhdGVKYW1tZXIoUGxheWVyIHBsYXllcikgew0KICAgICAgICBVVUlEIHBsYXllclVVSUQgPSBwbGF5ZXIuZ2V0VW5pcXVlSWQoKTsNCiAgICAgICAgbG9uZyBleHBpcnlUaW1lID0gU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkgKyAoamFtbWluZ0R1cmF0aW9uICogMTAwMEwpOw0KDQogICAgICAgIGFjdGl2ZUphbW1lcnMucHV0KHBsYXllclVVSUQsIGV4cGlyeVRpbWUpOw0KDQogICAgICAgIC8vIFN0YXJ0IGFjdGlvbiBiYXIgY291bnRkb3duDQogICAgICAgIHN0YXJ0QWN0aW9uQmFyKHBsYXllcik7DQoNCiAgICAgICAgLy8gU2NoZWR1bGUgamFtbWVyIGV4cGlyeQ0KICAgICAgICBCdWtraXRUYXNrIHRhc2sgPSBuZXcgQnVra2l0UnVubmFibGUoKSB7DQogICAgICAgICAgICBAT3ZlcnJpZGUNCiAgICAgICAgICAgIHB1YmxpYyB2b2lkIHJ1bigpIHsNCiAgICAgICAgICAgICAgICBleHBpcmVKYW1tZXIocGxheWVyVVVJRCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0ucnVuVGFza0xhdGVyKHBsdWdpbiwgamFtbWluZ0R1cmF0aW9uICogMjBMKTsNCg0KICAgICAgICBqYW1tZXJUYXNrcy5wdXQocGxheWVyVVVJRCwgdGFzayk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRGVhY3RpdmF0ZXMgdGhlIGphbW1lciBmb3IgYSBwbGF5ZXINCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgZGVhY3RpdmF0ZUphbW1lcihQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIFVVSUQgcGxheWVyVVVJRCA9IHBsYXllci5nZXRVbmlxdWVJZCgpOw0KDQogICAgICAgIGFjdGl2ZUphbW1lcnMucmVtb3ZlKHBsYXllclVVSUQpOw0KICAgICAgICBzdG9wQWN0aW9uQmFyKHBsYXllclVVSUQpOw0KDQogICAgICAgIC8vIENhbmNlbCB0aGUgZXhwaXJ5IHRhc2sNCiAgICAgICAgQnVra2l0VGFzayB0YXNrID0gamFtbWVyVGFza3MucmVtb3ZlKHBsYXllclVVSUQpOw0KICAgICAgICBpZiAodGFzayAhPSBudWxsKSB7DQogICAgICAgICAgICB0YXNrLmNhbmNlbCgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRXhwaXJlcyB0aGUgamFtbWVyIGFuZCByZW1vdmVzIHRoZSBpdGVtDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGV4cGlyZUphbW1lcihVVUlEIHBsYXllclVVSUQpIHsNCiAgICAgICAgUGxheWVyIHBsYXllciA9IEJ1a2tpdC5nZXRQbGF5ZXIocGxheWVyVVVJRCk7DQogICAgICAgIGlmIChwbGF5ZXIgIT0gbnVsbCAmJiBwbGF5ZXIuaXNPbmxpbmUoKSkgew0KICAgICAgICAgICAgLy8gUmVtb3ZlIGphbW1lciBpdGVtIGZyb20gaW52ZW50b3J5DQogICAgICAgICAgICBmb3IgKEl0ZW1TdGFjayBpdGVtIDogcGxheWVyLmdldEludmVudG9yeSgpLmdldENvbnRlbnRzKCkpIHsNCiAgICAgICAgICAgICAgICBpZiAoaXNKYW1tZXJJdGVtKGl0ZW0pKSB7DQogICAgICAgICAgICAgICAgICAgIHBsYXllci5nZXRJbnZlbnRvcnkoKS5yZW1vdmUoaXRlbSk7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGphbW1lckV4cGlyZWRNZXNzYWdlKSk7DQogICAgICAgIH0NCg0KICAgICAgICBhY3RpdmVKYW1tZXJzLnJlbW92ZShwbGF5ZXJVVUlEKTsNCiAgICAgICAgc3RvcEFjdGlvbkJhcihwbGF5ZXJVVUlEKTsNCiAgICAgICAgamFtbWVyVGFza3MucmVtb3ZlKHBsYXllclVVSUQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFN0YXJ0cyB0aGUgYWN0aW9uIGJhciBjb3VudGRvd24NCiAgICAgKiAvLyBub3RlOiBEaXNwbGF5cyBhIGNvdW50ZG93biBmb3IgdGhlIGphbW1lcidzIHJlbWFpbmluZyB0aW1lDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIHN0YXJ0QWN0aW9uQmFyKFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgVVVJRCBwbGF5ZXJVVUlEID0gcGxheWVyLmdldFVuaXF1ZUlkKCk7DQoNCiAgICAgICAgLy8gU3RvcCBhbnkgZXhpc3RpbmcgYWN0aW9uIGJhciB0YXNrDQogICAgICAgIHN0b3BBY3Rpb25CYXIocGxheWVyVVVJRCk7DQoNCiAgICAgICAgQnVra2l0VGFzayBhY3Rpb25CYXJUYXNrID0gbmV3IEJ1a2tpdFJ1bm5hYmxlKCkgew0KICAgICAgICAgICAgQE92ZXJyaWRlDQogICAgICAgICAgICBwdWJsaWMgdm9pZCBydW4oKSB7DQogICAgICAgICAgICAgICAgUGxheWVyIGN1cnJlbnRQbGF5ZXIgPSBCdWtraXQuZ2V0UGxheWVyKHBsYXllclVVSUQpOw0KICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGxheWVyID09IG51bGwgfHwgIWN1cnJlbnRQbGF5ZXIuaXNPbmxpbmUoKSkgew0KICAgICAgICAgICAgICAgICAgICBjYW5jZWwoKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmICghaXNKYW1tZXJBY3RpdmUoY3VycmVudFBsYXllcikpIHsNCiAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBsb25nIGV4cGlyeVRpbWUgPSBhY3RpdmVKYW1tZXJzLmdldChwbGF5ZXJVVUlEKTsNCiAgICAgICAgICAgICAgICBsb25nIHRpbWVSZW1haW5pbmcgPSAoZXhwaXJ5VGltZSAtIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpKSAvIDEwMDA7DQoNCiAgICAgICAgICAgICAgICBpZiAodGltZVJlbWFpbmluZyA8PSAwKSB7DQogICAgICAgICAgICAgICAgICAgIGNhbmNlbCgpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gU2VuZCBhY3Rpb24gYmFyIG1lc3NhZ2UNCiAgICAgICAgICAgICAgICBTdHJpbmcgbWVzc2FnZSA9IGFjdGlvbkJhck1lc3NhZ2UucmVwbGFjZSgiJXRpbWUlIiwgU3RyaW5nLnZhbHVlT2YodGltZVJlbWFpbmluZykpOw0KICAgICAgICAgICAgICAgIHNlbmRBY3Rpb25CYXIoY3VycmVudFBsYXllciwgQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEBPdmVycmlkZQ0KICAgICAgICAgICAgcHVibGljIHZvaWQgY2FuY2VsKCkgew0KICAgICAgICAgICAgICAgIHN1cGVyLmNhbmNlbCgpOw0KICAgICAgICAgICAgICAgIGFjdGlvbkJhclRhc2tzLnJlbW92ZShwbGF5ZXJVVUlEKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfS5ydW5UYXNrVGltZXIocGx1Z2luLCAwTCwgMjBMKTsNCg0KICAgICAgICBhY3Rpb25CYXJUYXNrcy5wdXQocGxheWVyVVVJRCwgYWN0aW9uQmFyVGFzayk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU3RvcHMgdGhlIGFjdGlvbiBiYXIgZm9yIGEgcGxheWVyDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIHN0b3BBY3Rpb25CYXIoVVVJRCBwbGF5ZXJVVUlEKSB7DQogICAgICAgIEJ1a2tpdFRhc2sgdGFzayA9IGFjdGlvbkJhclRhc2tzLnJlbW92ZShwbGF5ZXJVVUlEKTsNCiAgICAgICAgaWYgKHRhc2sgIT0gbnVsbCkgew0KICAgICAgICAgICAgdGFzay5jYW5jZWwoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEhhbmRsZXMgaW52ZW50b3J5IGNoYW5nZXMgdG8gZGVhY3RpdmF0ZSBqYW1tZXIgaWYgaXRlbSBpcyByZW1vdmVkDQogICAgICogLy8gbm90ZTogVG9nZ2xlcyBvZmYgamFtbWVyIHdoZW4gdGhlIHBsYXllciBubyBsb25nZXIgaGFzIGEgSmFtbWVyIGl0ZW0gaW4gdGhlaXIgaW52ZW50b3J5DQogICAgICovDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uSW52ZW50b3J5Q2hhbmdlKG9yZy5idWtraXQuZXZlbnQuaW52ZW50b3J5LkludmVudG9yeUNsaWNrRXZlbnQgZXZlbnQpIHsNCiAgICAgICAgUGxheWVyIHBsYXllciA9IChQbGF5ZXIpIGV2ZW50LmdldFdob0NsaWNrZWQoKTsNCiAgICAgICAgVVVJRCBwbGF5ZXJVVUlEID0gcGxheWVyLmdldFVuaXF1ZUlkKCk7DQoNCiAgICAgICAgaWYgKCFpc0phbW1lckFjdGl2ZShwbGF5ZXIpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBTY2hlZHVsZSBjaGVjayBhZnRlciBpbnZlbnRvcnkgY2hhbmdlIHRvIGVuc3VyZSBpbnZlbnRvcnkgaXMgdXBkYXRlZA0KICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFzayhwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgIGlmICghaGFzSmFtbWVySW5JbnZlbnRvcnkocGxheWVyKSkgew0KICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVKYW1tZXIocGxheWVyKTsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBqYW1tZXJEZWFjdGl2YXRlZE1lc3NhZ2UpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBwbGF5ZXIgZHJvcHBpbmcgaXRlbXMgdG8gZGVhY3RpdmF0ZSBqYW1tZXINCiAgICAgKiAvLyBub3RlOiBUb2dnbGVzIG9mZiBqYW1tZXIgd2hlbiBhIEphbW1lciBpdGVtIGlzIGRyb3BwZWQNCiAgICAgKi8NCiAgICBARXZlbnRIYW5kbGVyDQogICAgcHVibGljIHZvaWQgb25QbGF5ZXJEcm9wSXRlbShvcmcuYnVra2l0LmV2ZW50LnBsYXllci5QbGF5ZXJEcm9wSXRlbUV2ZW50IGV2ZW50KSB7DQogICAgICAgIFBsYXllciBwbGF5ZXIgPSBldmVudC5nZXRQbGF5ZXIoKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBldmVudC5nZXRJdGVtRHJvcCgpLmdldEl0ZW1TdGFjaygpOw0KDQogICAgICAgIGlmICghaXNKYW1tZXJJdGVtKGl0ZW0pIHx8ICFpc0phbW1lckFjdGl2ZShwbGF5ZXIpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBkZWFjdGl2YXRlSmFtbWVyKHBsYXllcik7DQogICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGphbW1lckRlYWN0aXZhdGVkTWVzc2FnZSkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEhhbmRsZXMgcGxheWVyIGRlYXRoIHRvIGRlYWN0aXZhdGUgamFtbWVyDQogICAgICogLy8gbm90ZTogVG9nZ2xlcyBvZmYgamFtbWVyIHdoZW4gYSBwbGF5ZXIgZGllcyBhbmQgZHJvcHMgdGhlaXIgaW52ZW50b3J5DQogICAgICovDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uUGxheWVyRGVhdGgob3JnLmJ1a2tpdC5ldmVudC5lbnRpdHkuUGxheWVyRGVhdGhFdmVudCBldmVudCkgew0KICAgICAgICBQbGF5ZXIgcGxheWVyID0gZXZlbnQuZ2V0RW50aXR5KCk7DQoNCiAgICAgICAgaWYgKCFpc0phbW1lckFjdGl2ZShwbGF5ZXIpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBkZWFjdGl2YXRlSmFtbWVyKHBsYXllcik7DQogICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGphbW1lckRlYWN0aXZhdGVkTWVzc2FnZSkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdGhlIG1lc3NhZ2Ugc2VudCB3aGVuIGEgamFtbWVyIGJsb2NrcyBhbiBhY3Rpb24NCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIHRoZSBjb25maWd1cmVkIGphbW1lciBibG9ja2VkIG1lc3NhZ2UNCiAgICAgKi8NCiAgICBwdWJsaWMgU3RyaW5nIGdldEphbW1lckJsb2NrZWRNZXNzYWdlKCkgew0KICAgICAgICByZXR1cm4gamFtbWVyQmxvY2tlZE1lc3NhZ2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2VuZHMgYW4gYWN0aW9uIGJhciBtZXNzYWdlIHRvIGEgcGxheWVyIC8vIG5vdGU6IFNlbmRzIGFjdGlvbiBiYXIgbWVzc2FnZSB1c2luZyBQcm90b2NvbExpYiBmb3IgY3Jvc3MtdmVyc2lvbiBjb21wYXRpYmlsaXR5DQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIHNlbmRBY3Rpb25CYXIoUGxheWVyIHBsYXllciwgU3RyaW5nIG1lc3NhZ2UpIHsNCiAgICAgICAgUHJvdG9jb2xNYW5hZ2VyIHByb3RvY29sTWFuYWdlciA9IFByb3RvY29sTGlicmFyeS5nZXRQcm90b2NvbE1hbmFnZXIoKTsNCiAgICAgICAgUGFja2V0Q29udGFpbmVyIHBhY2tldCA9IHByb3RvY29sTWFuYWdlci5jcmVhdGVQYWNrZXQoUGFja2V0VHlwZS5QbGF5LlNlcnZlci5DSEFUKTsNCiAgICAgICAgcGFja2V0LmdldENoYXRDb21wb25lbnRzKCkud3JpdGUoMCwgV3JhcHBlZENoYXRDb21wb25lbnQuZnJvbVRleHQobWVzc2FnZSkpOw0KICAgICAgICBwYWNrZXQuZ2V0Qnl0ZXMoKS53cml0ZSgwLCAoYnl0ZSkgMik7DQoNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIHByb3RvY29sTWFuYWdlci5zZW5kU2VydmVyUGFja2V0KHBsYXllciwgcGFja2V0KTsNCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShtZXNzYWdlKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICAvKioNCiAgICAgKiBDaGVja3MgaWYgYSBwbGF5ZXIgaGFzIGFuIGFjdGl2ZSBqYW1tZXINCiAgICAgKiAvLyBub3RlOiBWZXJpZmllcyBpZiBhIGphbW1lciBpcyBhY3RpdmUgYmFzZWQgb24gZXhwaXJ5IHRpbWUNCiAgICAgKi8NCiAgICBwdWJsaWMgYm9vbGVhbiBpc0phbW1lckFjdGl2ZShQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIFVVSUQgcGxheWVyVVVJRCA9IHBsYXllci5nZXRVbmlxdWVJZCgpOw0KICAgICAgICBMb25nIGV4cGlyeVRpbWUgPSBhY3RpdmVKYW1tZXJzLmdldChwbGF5ZXJVVUlEKTsNCg0KICAgICAgICBpZiAoZXhwaXJ5VGltZSA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDaGVjayBpZiBqYW1tZXIgaGFzIGV4cGlyZWQNCiAgICAgICAgaWYgKFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpID4gZXhwaXJ5VGltZSkgew0KICAgICAgICAgICAgZXhwaXJlSmFtbWVyKHBsYXllclVVSUQpOw0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIHBsYXllciBoYXMgamFtbWVyIGl0ZW0gaW4gaW52ZW50b3J5DQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIGhhc0phbW1lckluSW52ZW50b3J5KFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgZm9yIChJdGVtU3RhY2sgaXRlbSA6IHBsYXllci5nZXRJbnZlbnRvcnkoKS5nZXRDb250ZW50cygpKSB7DQogICAgICAgICAgICBpZiAoaXNKYW1tZXJJdGVtKGl0ZW0pKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEJsb2NrcyB0cmFja2VyL1VBViBmdW5jdGlvbmFsaXR5IGlmIGphbW1lciBpcyBhY3RpdmUNCiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJ5IFRyYWNrZXIgYW5kIFVBViBjbGFzc2VzDQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gaXNCbG9ja2VkKFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgaWYgKGlzSmFtbWVyQWN0aXZlKHBsYXllcikpIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGphbW1lckJsb2NrZWRNZXNzYWdlKSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2xlYW4gdXAgd2hlbiBwbHVnaW4gZGlzYWJsZXMNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBjbGVhbnVwKCkgew0KICAgICAgICBmb3IgKEJ1a2tpdFRhc2sgdGFzayA6IGFjdGlvbkJhclRhc2tzLnZhbHVlcygpKSB7DQogICAgICAgICAgICB0YXNrLmNhbmNlbCgpOw0KICAgICAgICB9DQogICAgICAgIGZvciAoQnVra2l0VGFzayB0YXNrIDogamFtbWVyVGFza3MudmFsdWVzKCkpIHsNCiAgICAgICAgICAgIHRhc2suY2FuY2VsKCk7DQogICAgICAgIH0NCiAgICAgICAgYWN0aW9uQmFyVGFza3MuY2xlYXIoKTsNCiAgICAgICAgamFtbWVyVGFza3MuY2xlYXIoKTsNCiAgICAgICAgYWN0aXZlSmFtbWVycy5jbGVhcigpOw0KICAgIH0NCg0KICAgIC8vIEdldHRlcnMgZm9yIGNvbmZpZ3VyYXRpb24gdmFsdWVzDQogICAgcHVibGljIGludCBnZXRKYW1taW5nRHVyYXRpb24oKSB7IHJldHVybiBqYW1taW5nRHVyYXRpb247IH0NCn0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy9JdGVtcy9NYW51YWxCb29zdC5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDMzMTIyIDE1MDI2MDYyNjYyIDAxNzI0MwAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCnBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy5JdGVtczsNCg0KaW1wb3J0IG9yZy5idWtraXQuQnVra2l0Ow0KaW1wb3J0IG9yZy5idWtraXQuQ2hhdENvbG9yOw0KaW1wb3J0IG9yZy5idWtraXQuTWF0ZXJpYWw7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuRmlsZUNvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuRXZlbnRIYW5kbGVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuTGlzdGVuZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5wbGF5ZXIuQXN5bmNQbGF5ZXJDaGF0RXZlbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5wbGF5ZXIuUGxheWVySW50ZXJhY3RFdmVudDsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LmJsb2NrLkFjdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JdGVtU3RhY2s7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkubWV0YS5JdGVtTWV0YTsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkJvdW50aWVzUGx1czsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLkV2ZW50TWFuYWdlcjsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlZlcnNpb25VdGlsczsNCg0KaW1wb3J0IGphdmEudXRpbC4qOw0KDQpwdWJsaWMgY2xhc3MgTWFudWFsQm9vc3QgaW1wbGVtZW50cyBMaXN0ZW5lciB7DQoNCiAgICBwcml2YXRlIGZpbmFsIEJvdW50aWVzUGx1cyBwbHVnaW47DQogICAgcHJpdmF0ZSBmaW5hbCBTZXQ8VVVJRD4gYXdhaXRpbmdQbGF5ZXJOYW1lID0gbmV3IEhhc2hTZXQ8PigpOw0KDQogICAgLy8gQ29uZmlndXJhdGlvbiB2YWx1ZXMNCiAgICBwcml2YXRlIFN0cmluZyBtYW51YWxCb29zdE5hbWU7DQogICAgcHJpdmF0ZSBMaXN0PFN0cmluZz4gbWFudWFsQm9vc3RMb3JlOw0KICAgIHByaXZhdGUgU3RyaW5nIGl0ZW1JZGVudGlmaWVyOw0KICAgIHByaXZhdGUgZG91YmxlIG1pbk11bHRpcGxpZXI7DQogICAgcHJpdmF0ZSBkb3VibGUgbWF4TXVsdGlwbGllcjsNCiAgICBwcml2YXRlIGludCBtaW5UaW1lTWludXRlczsNCiAgICBwcml2YXRlIGludCBtYXhUaW1lTWludXRlczsNCiAgICBwcml2YXRlIGRvdWJsZSBtaW5GYWlsdXJlQ2hhbmNlOw0KICAgIHByaXZhdGUgZG91YmxlIG1heEZhaWx1cmVDaGFuY2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgcHJvbXB0TWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyBjYW5jZWxNZXNzYWdlOw0KICAgIHByaXZhdGUgU3RyaW5nIGludmFsaWRQbGF5ZXJNZXNzYWdlOw0KICAgIHByaXZhdGUgU3RyaW5nIHBsYXllck9mZmxpbmVNZXNzYWdlOw0KICAgIHByaXZhdGUgU3RyaW5nIHBsYXllck5vdEZvdW5kTWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyBhbHJlYWR5Qm9vc3RlZE1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgc3VjY2Vzc01lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgZmFpbHVyZU1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgc2VydmVyQnJvYWRjYXN0TWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyBjYW5jZWxDb21tYW5kOw0KDQogICAgLyoqDQogICAgICogSW5pdGlhbGl6ZXMgdGhlIE1hbnVhbEJvb3N0IHN5c3RlbQ0KICAgICAqIC8vIG5vdGU6IFNldHMgdXAgY29uZmlndXJhdGlvbiBhbmQgcmVnaXN0ZXJzIGxpc3RlbmVyDQogICAgICovDQogICAgcHVibGljIE1hbnVhbEJvb3N0KEJvdW50aWVzUGx1cyBwbHVnaW4sIEV2ZW50TWFuYWdlciBldmVudE1hbmFnZXIpIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgICAgIGxvYWRDb25maWd1cmF0aW9uKCk7DQogICAgICAgIGV2ZW50TWFuYWdlci5yZWdpc3Rlcih0aGlzKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgbG9hZENvbmZpZ3VyYXRpb24oKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGl0ZW1zQ29uZmlnID0gcGx1Z2luLmdldEl0ZW1zQ29uZmlnKCk7DQoNCiAgICAgICAgdGhpcy5tYW51YWxCb29zdE5hbWUgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoIm1hbnVhbC1ib29zdC5pdGVtLW5hbWUiLCAiJmQmbE1hbnVhbCBCb29zdCIpOw0KICAgICAgICB0aGlzLm1hbnVhbEJvb3N0TG9yZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZ0xpc3QoIm1hbnVhbC1ib29zdC5pdGVtLWxvcmUiKTsNCiAgICAgICAgdGhpcy5pdGVtSWRlbnRpZmllciA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygibWFudWFsLWJvb3N0Lml0ZW0taWRlbnRpZmllciIsICJNQU5VQUxfQk9PU1RfSVRFTSIpOw0KICAgICAgICB0aGlzLm1pbk11bHRpcGxpZXIgPSBpdGVtc0NvbmZpZy5nZXREb3VibGUoIm1hbnVhbC1ib29zdC5tdWx0aXBsaWVyLXJhbmdlLm1pbi1tdWx0aXBsaWVyIiwgMS41KTsNCiAgICAgICAgdGhpcy5tYXhNdWx0aXBsaWVyID0gaXRlbXNDb25maWcuZ2V0RG91YmxlKCJtYW51YWwtYm9vc3QubXVsdGlwbGllci1yYW5nZS5tYXgtbXVsdGlwbGllciIsIDMuMCk7DQogICAgICAgIHRoaXMubWluVGltZU1pbnV0ZXMgPSBpdGVtc0NvbmZpZy5nZXRJbnQoIm1hbnVhbC1ib29zdC50aW1lLXJhbmdlLm1pbi1taW51dGVzIiwgMTApOw0KICAgICAgICB0aGlzLm1heFRpbWVNaW51dGVzID0gaXRlbXNDb25maWcuZ2V0SW50KCJtYW51YWwtYm9vc3QudGltZS1yYW5nZS5tYXgtbWludXRlcyIsIDMwKTsNCiAgICAgICAgdGhpcy5taW5GYWlsdXJlQ2hhbmNlID0gaXRlbXNDb25maWcuZ2V0RG91YmxlKCJtYW51YWwtYm9vc3QuZmFpbHVyZS1yYW5nZS5taW4tY2hhbmNlIiwgMTAuMCk7DQogICAgICAgIHRoaXMubWF4RmFpbHVyZUNoYW5jZSA9IGl0ZW1zQ29uZmlnLmdldERvdWJsZSgibWFudWFsLWJvb3N0LmZhaWx1cmUtcmFuZ2UubWF4LWNoYW5jZSIsIDIwLjApOw0KICAgICAgICB0aGlzLnByb21wdE1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoIm1hbnVhbC1ib29zdC5tZXNzYWdlcy5wcm9tcHQiLCAiJmVUeXBlIHRoZSBuYW1lIG9mIHRoZSBwbGF5ZXIgeW91IHdhbnQgdG8gYm9vc3QsIG9yIHR5cGUgJ2NhbmNlbCcgdG8gY2FuY2VsOiIpOw0KICAgICAgICB0aGlzLmNhbmNlbE1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoIm1hbnVhbC1ib29zdC5tZXNzYWdlcy5jYW5jZWwiLCAiJmNNYW51YWwgYm9vc3QgY2FuY2VsbGVkLiBJdGVtIHJldHVybmVkIHRvIHlvdXIgaW52ZW50b3J5LiIpOw0KICAgICAgICB0aGlzLmludmFsaWRQbGF5ZXJNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJtYW51YWwtYm9vc3QubWVzc2FnZXMuaW52YWxpZC1wbGF5ZXIiLCAiJmNJbnZhbGlkIHBsYXllciBuYW1lLiBQbGVhc2UgdHJ5IGFnYWluIG9yIHR5cGUgJ2NhbmNlbCcuIik7DQogICAgICAgIHRoaXMucGxheWVyT2ZmbGluZU1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoIm1hbnVhbC1ib29zdC5tZXNzYWdlcy5wbGF5ZXItb2ZmbGluZSIsICImY1RoYXQgcGxheWVyIGlzIGN1cnJlbnRseSBvZmZsaW5lLiBQbGVhc2UgY2hvb3NlIGFuIG9ubGluZSBwbGF5ZXIuIik7DQogICAgICAgIHRoaXMucGxheWVyTm90Rm91bmRNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJtYW51YWwtYm9vc3QubWVzc2FnZXMucGxheWVyLW5vdC1mb3VuZCIsICImY1BsYXllciBub3QgZm91bmQuIFBsZWFzZSB0cnkgYWdhaW4gb3IgdHlwZSAnY2FuY2VsJy4iKTsNCiAgICAgICAgdGhpcy5hbHJlYWR5Qm9vc3RlZE1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoIm1hbnVhbC1ib29zdC5tZXNzYWdlcy5hbHJlYWR5LWJvb3N0ZWQiLCAiJmNUaGF0IHBsYXllciBhbHJlYWR5IGhhcyBhbiBhY3RpdmUgbWFudWFsIGJvb3N0ISIpOw0KICAgICAgICB0aGlzLnN1Y2Nlc3NNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJtYW51YWwtYm9vc3QubWVzc2FnZXMuc3VjY2VzcyIsICImYU1hbnVhbCBib29zdCBhcHBsaWVkISAmZSV0YXJnZXQlJmEgbm93IGhhcyBhICZlJW11bHRpcGxpZXIleCZhIGJvb3N0IGZvciAmZSV0aW1lJSZhIG1pbnV0ZXMhIik7DQogICAgICAgIHRoaXMuZmFpbHVyZU1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoIm1hbnVhbC1ib29zdC5tZXNzYWdlcy5mYWlsdXJlIiwgIiZjTWFudWFsIGJvb3N0IGZhaWxlZCEgVGhlIGJvb3N0IGFwcGxpY2F0aW9uIHdhcyB1bnN1Y2Nlc3NmdWwuIik7DQogICAgICAgIHRoaXMuc2VydmVyQnJvYWRjYXN0TWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygibWFudWFsLWJvb3N0LnNlcnZlci1icm9hZGNhc3QtbWVzc2FnZSIsICImNiZsW0JPVU5UWV0gJmUlcGxheWVyJSAmNmhhcyBhcHBsaWVkIGEgbWFudWFsIGJvb3N0IHRvICZlJXRhcmdldCUmNiEiKTsNCiAgICAgICAgdGhpcy5jYW5jZWxDb21tYW5kID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJtYW51YWwtYm9vc3QuY2FuY2VsLWNvbW1hbmQiLCAiY2FuY2VsIik7DQoNCiAgICAgICAgLy8gU2V0IGRlZmF1bHQgbG9yZSBpZiBub25lIGNvbmZpZ3VyZWQNCiAgICAgICAgaWYgKG1hbnVhbEJvb3N0TG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIG1hbnVhbEJvb3N0TG9yZSA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgbWFudWFsQm9vc3RMb3JlLmFkZCgiJjdSaWdodC1jbGljayB0byBhcHBseSBhIG1hbnVhbCBib29zdCIpOw0KICAgICAgICAgICAgbWFudWFsQm9vc3RMb3JlLmFkZCgiJjd0byBhIHBsYXllcidzIGJvdW50eSByZXdhcmRzIik7DQogICAgICAgICAgICBtYW51YWxCb29zdExvcmUuYWRkKCIiKTsNCiAgICAgICAgICAgIG1hbnVhbEJvb3N0TG9yZS5hZGQoIiZlTXVsdGlwbGllciBSYW5nZTogJmElbWluX211bHRpcGxpZXIleC0mYSVtYXhfbXVsdGlwbGllciV4Iik7DQogICAgICAgICAgICBtYW51YWxCb29zdExvcmUuYWRkKCImZUR1cmF0aW9uIFJhbmdlOiAmYSVtaW5fdGltZSUtJmElbWF4X3RpbWUlIG1pbnV0ZXMiKTsNCiAgICAgICAgICAgIG1hbnVhbEJvb3N0TG9yZS5hZGQoIiZjRmFpbHVyZSBDaGFuY2U6ICZlJW1pbl9mYWlsdXJlJSUtJmUlbWF4X2ZhaWx1cmUlJSIpOw0KICAgICAgICAgICAgbWFudWFsQm9vc3RMb3JlLmFkZCgiIik7DQogICAgICAgICAgICBtYW51YWxCb29zdExvcmUuYWRkKCImN1BlcmZlY3QgZm9yIHJld2FyZGluZyBodW50ZXJzISIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ3JlYXRlcyBhIG5ldyBtYW51YWwgYm9vc3QgaXRlbSAvLyBub3RlOiBDcmVhdGVzIGFuIGVuY2hhbnRlZCBib29rIGl0ZW0gd2l0aCBOQlQgdGFnIGZvciB0eXBlDQogICAgICovDQogICAgcHVibGljIEl0ZW1TdGFjayBjcmVhdGVNYW51YWxCb29zdEl0ZW0oKSB7DQogICAgICAgIEl0ZW1TdGFjayBtYW51YWxCb29zdCA9IG5ldyBJdGVtU3RhY2soTWF0ZXJpYWwuRU5DSEFOVEVEX0JPT0spOw0KICAgICAgICBJdGVtTWV0YSBtZXRhID0gbWFudWFsQm9vc3QuZ2V0SXRlbU1ldGEoKTsNCg0KICAgICAgICBpZiAobWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbWFudWFsQm9vc3ROYW1lKSk7DQogICAgICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgZm9yIChTdHJpbmcgbGluZSA6IG1hbnVhbEJvb3N0TG9yZSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBwcm9jZXNzZWRMaW5lID0gbGluZQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVtaW5fbXVsdGlwbGllciUiLCBTdHJpbmcuZm9ybWF0KCIlLjFmIiwgbWluTXVsdGlwbGllcikpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW1heF9tdWx0aXBsaWVyJSIsIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBtYXhNdWx0aXBsaWVyKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlbWluX3RpbWUlIiwgU3RyaW5nLnZhbHVlT2YobWluVGltZU1pbnV0ZXMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVtYXhfdGltZSUiLCBTdHJpbmcudmFsdWVPZihtYXhUaW1lTWludXRlcykpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW1pbl9mYWlsdXJlJSIsIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBtaW5GYWlsdXJlQ2hhbmNlKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlbWF4X2ZhaWx1cmUlIiwgU3RyaW5nLmZvcm1hdCgiJS4xZiIsIG1heEZhaWx1cmVDaGFuY2UpKTsNCiAgICAgICAgICAgICAgICBsb3JlLmFkZChDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHByb2Nlc3NlZExpbmUpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIG1ldGEuc2V0TG9yZShsb3JlKTsNCiAgICAgICAgICAgIG1hbnVhbEJvb3N0LnNldEl0ZW1NZXRhKG1ldGEpOw0KICAgICAgICAgICAgbWFudWFsQm9vc3QgPSBWZXJzaW9uVXRpbHMuc2V0TkJUU3RyaW5nKG1hbnVhbEJvb3N0LCAiaXRlbV90eXBlIiwgIm1hbnVhbF9ib29zdCIpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIG1hbnVhbEJvb3N0Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiBhbiBpdGVtIGlzIGEgbWFudWFsIGJvb3N0IGl0ZW0gLy8gbm90ZTogVmVyaWZpZXMgaXRlbSB0eXBlIHVzaW5nIE5CVCB0YWcNCiAgICAgKi8NCiAgICBwdWJsaWMgYm9vbGVhbiBpc01hbnVhbEJvb3N0SXRlbShJdGVtU3RhY2sgaXRlbSkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0SXRlbU1ldGEoKSA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICJtYW51YWxfYm9vc3QiLmVxdWFscyhWZXJzaW9uVXRpbHMuZ2V0TkJUU3RyaW5nKGl0ZW0sICJpdGVtX3R5cGUiKSk7DQogICAgfQ0KDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uUGxheWVySW50ZXJhY3QoUGxheWVySW50ZXJhY3RFdmVudCBldmVudCkgew0KICAgICAgICBpZiAoZXZlbnQuZ2V0QWN0aW9uKCkgIT0gQWN0aW9uLlJJR0hUX0NMSUNLX0FJUiAmJiBldmVudC5nZXRBY3Rpb24oKSAhPSBBY3Rpb24uUklHSFRfQ0xJQ0tfQkxPQ0spIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIFBsYXllciBwbGF5ZXIgPSBldmVudC5nZXRQbGF5ZXIoKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBldmVudC5nZXRJdGVtKCk7DQoNCiAgICAgICAgaWYgKCFpc01hbnVhbEJvb3N0SXRlbShpdGVtKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgZXZlbnQuc2V0Q2FuY2VsbGVkKHRydWUpOw0KDQogICAgICAgIC8vIFJlbW92ZSB0aGUgaXRlbSBmcm9tIGludmVudG9yeSBmaXJzdCAoY29uc3VtZWQgcmVnYXJkbGVzcykNCiAgICAgICAgaWYgKGl0ZW0uZ2V0QW1vdW50KCkgPiAxKSB7DQogICAgICAgICAgICBpdGVtLnNldEFtb3VudChpdGVtLmdldEFtb3VudCgpIC0gMSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBwbGF5ZXIuZ2V0SW52ZW50b3J5KCkucmVtb3ZlKGl0ZW0pOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQWRkIHBsYXllciB0byB3YWl0aW5nIGxpc3QgYW5kIHNlbmQgcHJvbXB0DQogICAgICAgIGF3YWl0aW5nUGxheWVyTmFtZS5hZGQocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBwcm9tcHRNZXNzYWdlKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBwbGF5ZXIgY2hhdCBpbnB1dCBmb3IgbWFudWFsIGJvb3N0IHRhcmdldCBzZWxlY3Rpb24NCiAgICAgKiAvLyBub3RlOiBQcm9jZXNzZXMgcGxheWVyIG5hbWUgaW5wdXQgb3IgY2FuY2VsIGNvbW1hbmQgZm9yIGJvb3N0aW5nIGEgcGxheWVyJ3MgYm91bnR5DQogICAgICovDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uUGxheWVyQ2hhdChBc3luY1BsYXllckNoYXRFdmVudCBldmVudCkgew0KICAgICAgICBQbGF5ZXIgcGxheWVyID0gZXZlbnQuZ2V0UGxheWVyKCk7DQogICAgICAgIFVVSUQgcGxheWVyVVVJRCA9IHBsYXllci5nZXRVbmlxdWVJZCgpOw0KDQogICAgICAgIGlmICghYXdhaXRpbmdQbGF5ZXJOYW1lLmNvbnRhaW5zKHBsYXllclVVSUQpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBldmVudC5zZXRDYW5jZWxsZWQodHJ1ZSk7DQogICAgICAgIGF3YWl0aW5nUGxheWVyTmFtZS5yZW1vdmUocGxheWVyVVVJRCk7DQoNCiAgICAgICAgU3RyaW5nIG1lc3NhZ2UgPSBldmVudC5nZXRNZXNzYWdlKCkudHJpbSgpOw0KDQogICAgICAgIC8vIFJ1biBpbnZlbnRvcnkgYW5kIGJvdW50eSBvcGVyYXRpb25zIG9uIHRoZSBtYWluIHRocmVhZA0KICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFzayhwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgIC8vIENoZWNrIGZvciBjYW5jZWwgY29tbWFuZA0KICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZXF1YWxzSWdub3JlQ2FzZShjYW5jZWxDb21tYW5kKSkgew0KICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaXRlbSB0byBwbGF5ZXINCiAgICAgICAgICAgICAgICBwbHVnaW4ucmV0dXJuSXRlbVRvUGxheWVyKHBsYXllciwgY3JlYXRlTWFudWFsQm9vc3RJdGVtKCkpOw0KICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGNhbmNlbE1lc3NhZ2UpKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIEZpbmQgdGhlIHRhcmdldCBwbGF5ZXINCiAgICAgICAgICAgIFBsYXllciB0YXJnZXRQbGF5ZXIgPSBCdWtraXQuZ2V0UGxheWVyKG1lc3NhZ2UpOw0KICAgICAgICAgICAgaWYgKHRhcmdldFBsYXllciA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgLy8gVHJ5IGV4YWN0IG5hbWUgbWF0Y2ggd2l0aCBvbmxpbmUgcGxheWVycw0KICAgICAgICAgICAgICAgIGZvciAoUGxheWVyIG9ubGluZVBsYXllciA6IEJ1a2tpdC5nZXRPbmxpbmVQbGF5ZXJzKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKG9ubGluZVBsYXllci5nZXROYW1lKCkuZXF1YWxzSWdub3JlQ2FzZShtZXNzYWdlKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0UGxheWVyID0gb25saW5lUGxheWVyOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICh0YXJnZXRQbGF5ZXIgPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHBsYXllck5vdEZvdW5kTWVzc2FnZSkpOw0KICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaXRlbQ0KICAgICAgICAgICAgICAgIHBsdWdpbi5yZXR1cm5JdGVtVG9QbGF5ZXIocGxheWVyLCBjcmVhdGVNYW51YWxCb29zdEl0ZW0oKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIXRhcmdldFBsYXllci5pc09ubGluZSgpKSB7DQogICAgICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgcGxheWVyT2ZmbGluZU1lc3NhZ2UpKTsNCiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGl0ZW0NCiAgICAgICAgICAgICAgICBwbHVnaW4ucmV0dXJuSXRlbVRvUGxheWVyKHBsYXllciwgY3JlYXRlTWFudWFsQm9vc3RJdGVtKCkpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGFyZ2V0IGFscmVhZHkgaGFzIGFuIGFjdGl2ZSBtYW51YWwgYm9vc3QNCiAgICAgICAgICAgIGlmIChwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLmhhc0FjdGl2ZU1hbnVhbEJvb3N0KHRhcmdldFBsYXllci5nZXRVbmlxdWVJZCgpKSkgew0KICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGFscmVhZHlCb29zdGVkTWVzc2FnZSkpOw0KICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaXRlbQ0KICAgICAgICAgICAgICAgIHBsdWdpbi5yZXR1cm5JdGVtVG9QbGF5ZXIocGxheWVyLCBjcmVhdGVNYW51YWxCb29zdEl0ZW0oKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIGJvb3N0IHNob3VsZCBmYWlsDQogICAgICAgICAgICBib29sZWFuIHNob3VsZEZhaWwgPSBzaG91bGRGYWlsKCk7DQoNCiAgICAgICAgICAgIGlmIChzaG91bGRGYWlsKSB7DQogICAgICAgICAgICAgICAgLy8gQm9vc3QgZmFpbGVkIC0gc2VuZCBmYWlsdXJlIG1lc3NhZ2UNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBmYWlsdXJlTWVzc2FnZSkpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAvLyBTdWNjZXNzIC0gYXBwbHkgdGhlIGJvb3N0DQogICAgICAgICAgICAgICAgZG91YmxlIG11bHRpcGxpZXIgPSBnZXRSYW5kb21NdWx0aXBsaWVyKCk7DQogICAgICAgICAgICAgICAgaW50IHRpbWVNaW51dGVzID0gZ2V0UmFuZG9tVGltZU1pbnV0ZXMoKTsNCg0KICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBtYW51YWwgYm9vc3QNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLmFwcGx5TWFudWFsQm9vc3QodGFyZ2V0UGxheWVyLmdldFVuaXF1ZUlkKCksIG11bHRpcGxpZXIsICJib3RoIiwgdGltZU1pbnV0ZXMpOw0KDQogICAgICAgICAgICAgICAgLy8gU2VuZCBzdWNjZXNzIG1lc3NhZ2UgdG8gdXNlcg0KICAgICAgICAgICAgICAgIFN0cmluZyBzdWNjZXNzTXNnID0gc3VjY2Vzc01lc3NhZ2UNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIldGFyZ2V0JSIsIHRhcmdldFBsYXllci5nZXROYW1lKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW11bHRpcGxpZXIlIiwgU3RyaW5nLmZvcm1hdCgiJS4xZiIsIG11bHRpcGxpZXIpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiV0aW1lJSIsIFN0cmluZy52YWx1ZU9mKHRpbWVNaW51dGVzKSk7DQogICAgICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgc3VjY2Vzc01zZykpOw0KDQogICAgICAgICAgICAgICAgLy8gQnJvYWRjYXN0IHNlcnZlciBtZXNzYWdlIGlmIGNvbmZpZ3VyZWQNCiAgICAgICAgICAgICAgICBpZiAoc2VydmVyQnJvYWRjYXN0TWVzc2FnZSAhPSBudWxsICYmICFzZXJ2ZXJCcm9hZGNhc3RNZXNzYWdlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgICAgICBTdHJpbmcgYnJvYWRjYXN0ID0gc2VydmVyQnJvYWRjYXN0TWVzc2FnZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlcGxheWVyJSIsIHBsYXllci5nZXROYW1lKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiV0YXJnZXQlIiwgdGFyZ2V0UGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICAgICAgICAgIEJ1a2tpdC5icm9hZGNhc3RNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgYnJvYWRjYXN0KSk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gU2VuZCBub3RpZmljYXRpb24gdG8gdGFyZ2V0IHBsYXllcg0KICAgICAgICAgICAgICAgIFN0cmluZyB0YXJnZXROb3RpZmljYXRpb24gPSAiJmFZb3UgaGF2ZSByZWNlaXZlZCBhIG1hbnVhbCBib29zdCEgWW91ciBib3VudHkgcmV3YXJkcyBhcmUgbm93IGJvb3N0ZWQgYnkgJmUiDQogICAgICAgICAgICAgICAgICAgICAgICArIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBtdWx0aXBsaWVyKSArICJ4JmEgZm9yICZlIiArIHRpbWVNaW51dGVzICsgIiZhIG1pbnV0ZXMhIjsNCiAgICAgICAgICAgICAgICB0YXJnZXRQbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCB0YXJnZXROb3RpZmljYXRpb24pKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyBhIHJhbmRvbSBtdWx0aXBsaWVyIHdpdGhpbiB0aGUgY29uZmlndXJlZCByYW5nZQ0KICAgICAqLw0KICAgIHByaXZhdGUgZG91YmxlIGdldFJhbmRvbU11bHRpcGxpZXIoKSB7DQogICAgICAgIFJhbmRvbSByYW5kb20gPSBuZXcgUmFuZG9tKCk7DQogICAgICAgIHJldHVybiBtaW5NdWx0aXBsaWVyICsgKHJhbmRvbS5uZXh0RG91YmxlKCkgKiAobWF4TXVsdGlwbGllciAtIG1pbk11bHRpcGxpZXIpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIGEgcmFuZG9tIHRpbWUgaW4gbWludXRlcyB3aXRoaW4gdGhlIGNvbmZpZ3VyZWQgcmFuZ2UNCiAgICAgKi8NCiAgICBwcml2YXRlIGludCBnZXRSYW5kb21UaW1lTWludXRlcygpIHsNCiAgICAgICAgUmFuZG9tIHJhbmRvbSA9IG5ldyBSYW5kb20oKTsNCiAgICAgICAgcmV0dXJuIG1pblRpbWVNaW51dGVzICsgcmFuZG9tLm5leHRJbnQobWF4VGltZU1pbnV0ZXMgLSBtaW5UaW1lTWludXRlcyArIDEpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIERldGVybWluZXMgaWYgdGhlIG1hbnVhbCBib29zdCBzaG91bGQgZmFpbCBiYXNlZCBvbiByYW5kb20gY2hhbmNlIHdpdGhpbiByYW5nZQ0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBzaG91bGRGYWlsKCkgew0KICAgICAgICBSYW5kb20gcmFuZG9tID0gbmV3IFJhbmRvbSgpOw0KICAgICAgICBkb3VibGUgZmFpbHVyZUNoYW5jZSA9IG1pbkZhaWx1cmVDaGFuY2UgKyAobWF4RmFpbHVyZUNoYW5jZSAtIG1pbkZhaWx1cmVDaGFuY2UpICogcmFuZG9tLm5leHREb3VibGUoKTsNCiAgICAgICAgZG91YmxlIHJvbGwgPSByYW5kb20ubmV4dERvdWJsZSgpICogMTAwLjA7DQoNCiAgICAgICAgcmV0dXJuIHJvbGwgPCBmYWlsdXJlQ2hhbmNlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENsZWFuIHVwIHdoZW4gcGx1Z2luIGRpc2FibGVzDQogICAgICovDQogICAgcHVibGljIHZvaWQgY2xlYW51cCgpIHsNCiAgICAgICAgYXdhaXRpbmdQbGF5ZXJOYW1lLmNsZWFyKCk7DQogICAgfQ0KDQogICAgLy8gR2V0dGVycyBmb3IgY29uZmlndXJhdGlvbiB2YWx1ZXMNCiAgICBwdWJsaWMgZG91YmxlIGdldE1pbk11bHRpcGxpZXIoKSB7IHJldHVybiBtaW5NdWx0aXBsaWVyOyB9DQogICAgcHVibGljIGRvdWJsZSBnZXRNYXhNdWx0aXBsaWVyKCkgeyByZXR1cm4gbWF4TXVsdGlwbGllcjsgfQ0KICAgIHB1YmxpYyBpbnQgZ2V0TWluVGltZU1pbnV0ZXMoKSB7IHJldHVybiBtaW5UaW1lTWludXRlczsgfQ0KICAgIHB1YmxpYyBpbnQgZ2V0TWF4VGltZU1pbnV0ZXMoKSB7IHJldHVybiBtYXhUaW1lTWludXRlczsgfQ0KICAgIHB1YmxpYyBkb3VibGUgZ2V0TWluRmFpbHVyZUNoYW5jZSgpIHsgcmV0dXJuIG1pbkZhaWx1cmVDaGFuY2U7IH0NCiAgICBwdWJsaWMgZG91YmxlIGdldE1heEZhaWx1cmVDaGFuY2UoKSB7IHJldHVybiBtYXhGYWlsdXJlQ2hhbmNlOyB9DQpvbnkyNi9ib3VudGllc1BsdXMvSXRlbXMvTWFudWFsRnJlbnp5LmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAyNzY1NSAxNTAyNjA2MjY2MiAwMTc0NTAAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQpwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMuSXRlbXM7DQoNCmltcG9ydCBvcmcuYnVra2l0LkJ1a2tpdDsNCmltcG9ydCBvcmcuYnVra2l0LkNoYXRDb2xvcjsNCmltcG9ydCBvcmcuYnVra2l0Lk1hdGVyaWFsOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LkV2ZW50SGFuZGxlcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50Lkxpc3RlbmVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQucGxheWVyLlBsYXllckludGVyYWN0RXZlbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5ibG9jay5BY3Rpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbVN0YWNrOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lm1ldGEuSXRlbU1ldGE7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudGllc1BsdXM7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy5FdmVudE1hbmFnZXI7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy5WZXJzaW9uVXRpbHM7DQoNCmltcG9ydCBqYXZhLnV0aWwuKjsNCg0KcHVibGljIGNsYXNzIE1hbnVhbEZyZW56eSBpbXBsZW1lbnRzIExpc3RlbmVyIHsNCg0KICAgIHByaXZhdGUgZmluYWwgQm91bnRpZXNQbHVzIHBsdWdpbjsNCg0KICAgIC8vIENvbmZpZ3VyYXRpb24gdmFsdWVzDQogICAgcHJpdmF0ZSBTdHJpbmcgbWFudWFsRnJlbnp5TmFtZTsNCiAgICBwcml2YXRlIExpc3Q8U3RyaW5nPiBtYW51YWxGcmVuenlMb3JlOw0KICAgIHByaXZhdGUgU3RyaW5nIGl0ZW1JZGVudGlmaWVyOw0KICAgIHByaXZhdGUgZG91YmxlIG1pbk11bHRpcGxpZXI7DQogICAgcHJpdmF0ZSBkb3VibGUgbWF4TXVsdGlwbGllcjsNCiAgICBwcml2YXRlIGludCBtaW5UaW1lTWludXRlczsNCiAgICBwcml2YXRlIGludCBtYXhUaW1lTWludXRlczsNCiAgICBwcml2YXRlIGRvdWJsZSBtaW5GYWlsdXJlQ2hhbmNlOw0KICAgIHByaXZhdGUgZG91YmxlIG1heEZhaWx1cmVDaGFuY2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgc3VjY2Vzc01lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgZmFpbHVyZU1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgYWxyZWFkeUFjdGl2ZU1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgc2VydmVyQnJvYWRjYXN0TWVzc2FnZTsNCg0KICAgIC8qKg0KICAgICAqIEluaXRpYWxpemVzIHRoZSBNYW51YWxGcmVuenkgc3lzdGVtDQogICAgICogLy8gbm90ZTogU2V0cyB1cCBjb25maWd1cmF0aW9uIGFuZCByZWdpc3RlcnMgbGlzdGVuZXINCiAgICAgKi8NCiAgICBwdWJsaWMgTWFudWFsRnJlbnp5KEJvdW50aWVzUGx1cyBwbHVnaW4sIEV2ZW50TWFuYWdlciBldmVudE1hbmFnZXIpIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgICAgIGxvYWRDb25maWd1cmF0aW9uKCk7DQogICAgICAgIGV2ZW50TWFuYWdlci5yZWdpc3Rlcih0aGlzKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgbG9hZENvbmZpZ3VyYXRpb24oKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGl0ZW1zQ29uZmlnID0gcGx1Z2luLmdldEl0ZW1zQ29uZmlnKCk7DQoNCiAgICAgICAgdGhpcy5tYW51YWxGcmVuenlOYW1lID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJtYW51YWwtZnJlbnp5Lml0ZW0tbmFtZSIsICImYyZsTWFudWFsIEZyZW56eSIpOw0KICAgICAgICB0aGlzLm1hbnVhbEZyZW56eUxvcmUgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmdMaXN0KCJtYW51YWwtZnJlbnp5Lml0ZW0tbG9yZSIpOw0KICAgICAgICB0aGlzLml0ZW1JZGVudGlmaWVyID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJtYW51YWwtZnJlbnp5Lml0ZW0taWRlbnRpZmllciIsICJNQU5VQUxfRlJFTlpZX0lURU0iKTsNCiAgICAgICAgdGhpcy5taW5NdWx0aXBsaWVyID0gaXRlbXNDb25maWcuZ2V0RG91YmxlKCJtYW51YWwtZnJlbnp5Lm11bHRpcGxpZXItcmFuZ2UubWluLW11bHRpcGxpZXIiLCAyLjApOw0KICAgICAgICB0aGlzLm1heE11bHRpcGxpZXIgPSBpdGVtc0NvbmZpZy5nZXREb3VibGUoIm1hbnVhbC1mcmVuenkubXVsdGlwbGllci1yYW5nZS5tYXgtbXVsdGlwbGllciIsIDQuMCk7DQogICAgICAgIHRoaXMubWluVGltZU1pbnV0ZXMgPSBpdGVtc0NvbmZpZy5nZXRJbnQoIm1hbnVhbC1mcmVuenkudGltZS1yYW5nZS5taW4tbWludXRlcyIsIDUpOw0KICAgICAgICB0aGlzLm1heFRpbWVNaW51dGVzID0gaXRlbXNDb25maWcuZ2V0SW50KCJtYW51YWwtZnJlbnp5LnRpbWUtcmFuZ2UubWF4LW1pbnV0ZXMiLCAxNSk7DQogICAgICAgIHRoaXMubWluRmFpbHVyZUNoYW5jZSA9IGl0ZW1zQ29uZmlnLmdldERvdWJsZSgibWFudWFsLWZyZW56eS5mYWlsdXJlLXJhbmdlLm1pbi1jaGFuY2UiLCAxNS4wKTsNCiAgICAgICAgdGhpcy5tYXhGYWlsdXJlQ2hhbmNlID0gaXRlbXNDb25maWcuZ2V0RG91YmxlKCJtYW51YWwtZnJlbnp5LmZhaWx1cmUtcmFuZ2UubWF4LWNoYW5jZSIsIDI1LjApOw0KICAgICAgICB0aGlzLnN1Y2Nlc3NNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJtYW51YWwtZnJlbnp5Lm1lc3NhZ2VzLnN1Y2Nlc3MiLCAiJmFNYW51YWwgZnJlbnp5IGFjdGl2YXRlZCEgQWxsIGJvdW50eSByZXdhcmRzIGFyZSBub3cgYm9vc3RlZCBieSAmZSVtdWx0aXBsaWVyJXgmYSBmb3IgJmUldGltZSUmYSBtaW51dGVzISIpOw0KICAgICAgICB0aGlzLmZhaWx1cmVNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJtYW51YWwtZnJlbnp5Lm1lc3NhZ2VzLmZhaWx1cmUiLCAiJmNNYW51YWwgZnJlbnp5IGZhaWxlZCEgVGhlIGZyZW56eSBhY3RpdmF0aW9uIHdhcyB1bnN1Y2Nlc3NmdWwuIik7DQogICAgICAgIHRoaXMuYWxyZWFkeUFjdGl2ZU1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoIm1hbnVhbC1mcmVuenkubWVzc2FnZXMuYWxyZWFkeS1hY3RpdmUiLCAiJmNGcmVuenkgbW9kZSBpcyBhbHJlYWR5IGFjdGl2ZSEiKTsNCiAgICAgICAgdGhpcy5zZXJ2ZXJCcm9hZGNhc3RNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJtYW51YWwtZnJlbnp5LnNlcnZlci1icm9hZGNhc3QtbWVzc2FnZSIsICImNiZsW0JPVU5UWV0gJmUlcGxheWVyJSAmNmhhcyBhY3RpdmF0ZWQgYSBtYW51YWwgZnJlbnp5ISBBbGwgYm91bnR5IHJld2FyZHMgYXJlIGJvb3N0ZWQgYnkgJmUlbXVsdGlwbGllciV4JjYhIik7DQoNCiAgICAgICAgLy8gU2V0IGRlZmF1bHQgbG9yZSBpZiBub25lIGNvbmZpZ3VyZWQNCiAgICAgICAgaWYgKG1hbnVhbEZyZW56eUxvcmUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBtYW51YWxGcmVuenlMb3JlID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICBtYW51YWxGcmVuenlMb3JlLmFkZCgiJjdSaWdodC1jbGljayB0byBhY3RpdmF0ZSBhIG1hbnVhbCIpOw0KICAgICAgICAgICAgbWFudWFsRnJlbnp5TG9yZS5hZGQoIiY3ZnJlbnp5IG1vZGUgZm9yIGFsbCBib3VudHkgcmV3YXJkcyIpOw0KICAgICAgICAgICAgbWFudWFsRnJlbnp5TG9yZS5hZGQoIiIpOw0KICAgICAgICAgICAgbWFudWFsRnJlbnp5TG9yZS5hZGQoIiZlTXVsdGlwbGllciBSYW5nZTogJmMlbWluX211bHRpcGxpZXIleC0mYyVtYXhfbXVsdGlwbGllciV4Iik7DQogICAgICAgICAgICBtYW51YWxGcmVuenlMb3JlLmFkZCgiJmVEdXJhdGlvbiBSYW5nZTogJmMlbWluX3RpbWUlLSZjJW1heF90aW1lJSBtaW51dGVzIik7DQogICAgICAgICAgICBtYW51YWxGcmVuenlMb3JlLmFkZCgiJmNGYWlsdXJlIENoYW5jZTogJmUlbWluX2ZhaWx1cmUlJS0mZSVtYXhfZmFpbHVyZSUlIik7DQogICAgICAgICAgICBtYW51YWxGcmVuenlMb3JlLmFkZCgiIik7DQogICAgICAgICAgICBtYW51YWxGcmVuenlMb3JlLmFkZCgiJmNBZmZlY3RzIEFMTCBib3VudHkga2lsbHMgZHVyaW5nIGR1cmF0aW9uISIpOw0KICAgICAgICAgICAgbWFudWFsRnJlbnp5TG9yZS5hZGQoIiY3VW5sZWFzaCBjaGFvcyB1cG9uIHRoZSBzZXJ2ZXIhIik7DQogICAgICAgIH0NCiAgICB9DQogICAgLyoqDQogICAgICogQ3JlYXRlcyBhIG5ldyBtYW51YWwgZnJlbnp5IGl0ZW0gd2l0aCBzcGVjaWZpZWQgcGFyYW1ldGVycyAvLyBub3RlOiBDcmVhdGVzIGEgYmxhemUgcG93ZGVyIGl0ZW0gd2l0aCBjdXN0b20gbXVsdGlwbGllciwgdGltZSwgYW5kIGZhaWx1cmUgY2hhbmNlDQogICAgICovDQogICAgcHVibGljIEl0ZW1TdGFjayBjcmVhdGVNYW51YWxGcmVuenlJdGVtKGRvdWJsZSBtdWx0aXBsaWVyLCBpbnQgdGltZU1pbnV0ZXMsIGRvdWJsZSBmYWlsdXJlQ2hhbmNlKSB7DQogICAgICAgIEl0ZW1TdGFjayBtYW51YWxGcmVuenkgPSBuZXcgSXRlbVN0YWNrKE1hdGVyaWFsLkJMQVpFX1BPV0RFUik7DQogICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBtYW51YWxGcmVuenkuZ2V0SXRlbU1ldGEoKTsNCg0KICAgICAgICBpZiAobWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbWFudWFsRnJlbnp5TmFtZSkpOw0KICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiBtYW51YWxGcmVuenlMb3JlKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIHByb2Nlc3NlZExpbmUgPSBsaW5lDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW11bHRpcGxpZXIlIiwgU3RyaW5nLmZvcm1hdCgiJS4xZiIsIG11bHRpcGxpZXIpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiV0aW1lJSIsIFN0cmluZy52YWx1ZU9mKHRpbWVNaW51dGVzKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlZmFpbHVyZSUiLCBTdHJpbmcuZm9ybWF0KCIlLjFmIiwgZmFpbHVyZUNoYW5jZSkpOw0KICAgICAgICAgICAgICAgIGxvcmUuYWRkKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgcHJvY2Vzc2VkTGluZSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgbWV0YS5zZXRMb3JlKGxvcmUpOw0KICAgICAgICAgICAgbWFudWFsRnJlbnp5LnNldEl0ZW1NZXRhKG1ldGEpOw0KICAgICAgICAgICAgbWFudWFsRnJlbnp5ID0gVmVyc2lvblV0aWxzLnNldE5CVFN0cmluZyhtYW51YWxGcmVuenksICJpdGVtX3R5cGUiLCAibWFudWFsX2ZyZW56eSIpOw0KICAgICAgICAgICAgbWFudWFsRnJlbnp5ID0gVmVyc2lvblV0aWxzLnNldE5CVERvdWJsZShtYW51YWxGcmVuenksICJtdWx0aXBsaWVyIiwgbXVsdGlwbGllcik7DQogICAgICAgICAgICBtYW51YWxGcmVuenkgPSBWZXJzaW9uVXRpbHMuc2V0TkJUSW50ZWdlcihtYW51YWxGcmVuenksICJ0aW1lX21pbnV0ZXMiLCB0aW1lTWludXRlcyk7DQogICAgICAgICAgICBtYW51YWxGcmVuenkgPSBWZXJzaW9uVXRpbHMuc2V0TkJURG91YmxlKG1hbnVhbEZyZW56eSwgImZhaWx1cmVfY2hhbmNlIiwgZmFpbHVyZUNoYW5jZSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gbWFudWFsRnJlbnp5Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgYSBuZXcgbWFudWFsIGZyZW56eSBpdGVtIHdpdGggZGVmYXVsdCBjb25maWd1cmF0aW9uIHZhbHVlcyAvLyBub3RlOiBDcmVhdGVzIGEgYmxhemUgcG93ZGVyIGl0ZW0gdXNpbmcgZGVmYXVsdHMgZnJvbSBpdGVtcy55bWwNCiAgICAgKi8NCiAgICBwdWJsaWMgSXRlbVN0YWNrIGNyZWF0ZU1hbnVhbEZyZW56eUl0ZW0oKSB7DQogICAgICAgIEl0ZW1TdGFjayBtYW51YWxGcmVuenkgPSBuZXcgSXRlbVN0YWNrKE1hdGVyaWFsLkJMQVpFX1BPV0RFUik7DQogICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBtYW51YWxGcmVuenkuZ2V0SXRlbU1ldGEoKTsNCg0KICAgICAgICBpZiAobWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbWFudWFsRnJlbnp5TmFtZSkpOw0KICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiBtYW51YWxGcmVuenlMb3JlKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIHByb2Nlc3NlZExpbmUgPSBsaW5lDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW1pbl9tdWx0aXBsaWVyJSIsIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBtaW5NdWx0aXBsaWVyKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlbWF4X211bHRpcGxpZXIlIiwgU3RyaW5nLmZvcm1hdCgiJS4xZiIsIG1heE11bHRpcGxpZXIpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVtaW5fdGltZSUiLCBTdHJpbmcudmFsdWVPZihtaW5UaW1lTWludXRlcykpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW1heF90aW1lJSIsIFN0cmluZy52YWx1ZU9mKG1heFRpbWVNaW51dGVzKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlbWluX2ZhaWx1cmUlIiwgU3RyaW5nLmZvcm1hdCgiJS4xZiIsIG1pbkZhaWx1cmVDaGFuY2UpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVtYXhfZmFpbHVyZSUiLCBTdHJpbmcuZm9ybWF0KCIlLjFmIiwgbWF4RmFpbHVyZUNoYW5jZSkpOw0KICAgICAgICAgICAgICAgIGxvcmUuYWRkKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgcHJvY2Vzc2VkTGluZSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgbWV0YS5zZXRMb3JlKGxvcmUpOw0KICAgICAgICAgICAgbWFudWFsRnJlbnp5LnNldEl0ZW1NZXRhKG1ldGEpOw0KICAgICAgICAgICAgbWFudWFsRnJlbnp5ID0gVmVyc2lvblV0aWxzLnNldE5CVFN0cmluZyhtYW51YWxGcmVuenksICJpdGVtX3R5cGUiLCAibWFudWFsX2ZyZW56eSIpOw0KICAgICAgICAgICAgbWFudWFsRnJlbnp5ID0gVmVyc2lvblV0aWxzLnNldE5CVERvdWJsZShtYW51YWxGcmVuenksICJtdWx0aXBsaWVyIiwgbWluTXVsdGlwbGllcik7DQogICAgICAgICAgICBtYW51YWxGcmVuenkgPSBWZXJzaW9uVXRpbHMuc2V0TkJUSW50ZWdlcihtYW51YWxGcmVuenksICJ0aW1lX21pbnV0ZXMiLCBtaW5UaW1lTWludXRlcyk7DQogICAgICAgICAgICBtYW51YWxGcmVuenkgPSBWZXJzaW9uVXRpbHMuc2V0TkJURG91YmxlKG1hbnVhbEZyZW56eSwgImZhaWx1cmVfY2hhbmNlIiwgbWluRmFpbHVyZUNoYW5jZSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gbWFudWFsRnJlbnp5Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiBhbiBpdGVtIGlzIGEgbWFudWFsIGZyZW56eSBpdGVtIC8vIG5vdGU6IFZlcmlmaWVzIGl0ZW0gdHlwZSB1c2luZyBOQlQgdGFnDQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gaXNNYW51YWxGcmVuenlJdGVtKEl0ZW1TdGFjayBpdGVtKSB7DQogICAgICAgIGlmIChpdGVtID09IG51bGwgfHwgaXRlbS5nZXRJdGVtTWV0YSgpID09IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gIm1hbnVhbF9mcmVuenkiLmVxdWFscyhWZXJzaW9uVXRpbHMuZ2V0TkJUU3RyaW5nKGl0ZW0sICJpdGVtX3R5cGUiKSk7DQogICAgfQ0KDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uUGxheWVySW50ZXJhY3QoUGxheWVySW50ZXJhY3RFdmVudCBldmVudCkgew0KICAgICAgICBpZiAoZXZlbnQuZ2V0QWN0aW9uKCkgIT0gQWN0aW9uLlJJR0hUX0NMSUNLX0FJUiAmJiBldmVudC5nZXRBY3Rpb24oKSAhPSBBY3Rpb24uUklHSFRfQ0xJQ0tfQkxPQ0spIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIFBsYXllciBwbGF5ZXIgPSBldmVudC5nZXRQbGF5ZXIoKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBldmVudC5nZXRJdGVtKCk7DQoNCiAgICAgICAgaWYgKCFpc01hbnVhbEZyZW56eUl0ZW0oaXRlbSkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGV2ZW50LnNldENhbmNlbGxlZCh0cnVlKTsNCg0KICAgICAgICAvLyBDaGVjayBpZiBmcmVuenkgaXMgYWxyZWFkeSBhY3RpdmUNCiAgICAgICAgaWYgKHBsdWdpbi5nZXRGcmVuenkoKS5pc0ZyZW56eUFjdGl2ZSgpKSB7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBhbHJlYWR5QWN0aXZlTWVzc2FnZSkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gUmVtb3ZlIHRoZSBpdGVtIGZyb20gaW52ZW50b3J5IGZpcnN0IChjb25zdW1lZCByZWdhcmRsZXNzKQ0KICAgICAgICBpZiAoaXRlbS5nZXRBbW91bnQoKSA+IDEpIHsNCiAgICAgICAgICAgIGl0ZW0uc2V0QW1vdW50KGl0ZW0uZ2V0QW1vdW50KCkgLSAxKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHBsYXllci5nZXRJbnZlbnRvcnkoKS5yZW1vdmUoaXRlbSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIGZyZW56eSBzaG91bGQgZmFpbA0KICAgICAgICBib29sZWFuIHNob3VsZEZhaWwgPSBzaG91bGRGYWlsKCk7DQoNCiAgICAgICAgaWYgKHNob3VsZEZhaWwpIHsNCiAgICAgICAgICAgIC8vIEZyZW56eSBmYWlsZWQgLSBqdXN0IHNlbmQgZmFpbHVyZSBtZXNzYWdlDQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBmYWlsdXJlTWVzc2FnZSkpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy8gU3VjY2VzcyAtIGFjdGl2YXRlIG1hbnVhbCBmcmVuenkNCiAgICAgICAgICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBtdWx0aXBsaWVyIGFuZCB0aW1lIHdpdGhpbiByYW5nZXMNCiAgICAgICAgICAgIGRvdWJsZSBtdWx0aXBsaWVyID0gZ2V0UmFuZG9tTXVsdGlwbGllcigpOw0KICAgICAgICAgICAgaW50IHRpbWVNaW51dGVzID0gZ2V0UmFuZG9tVGltZU1pbnV0ZXMoKTsNCg0KICAgICAgICAgICAgLy8gQWN0aXZhdGUgbWFudWFsIGZyZW56eSBtb2RlDQogICAgICAgICAgICBhY3RpdmF0ZU1hbnVhbEZyZW56eShtdWx0aXBsaWVyLCB0aW1lTWludXRlcyk7DQoNCiAgICAgICAgICAgIC8vIFNlbmQgc3VjY2VzcyBtZXNzYWdlIHRvIHVzZXINCiAgICAgICAgICAgIFN0cmluZyBzdWNjZXNzTXNnID0gc3VjY2Vzc01lc3NhZ2UNCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVtdWx0aXBsaWVyJSIsIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBtdWx0aXBsaWVyKSkNCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiV0aW1lJSIsIFN0cmluZy52YWx1ZU9mKHRpbWVNaW51dGVzKSk7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBzdWNjZXNzTXNnKSk7DQoNCiAgICAgICAgICAgIC8vIEJyb2FkY2FzdCBzZXJ2ZXIgbWVzc2FnZSBpZiBjb25maWd1cmVkDQogICAgICAgICAgICBpZiAoc2VydmVyQnJvYWRjYXN0TWVzc2FnZSAhPSBudWxsICYmICFzZXJ2ZXJCcm9hZGNhc3RNZXNzYWdlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBicm9hZGNhc3QgPSBzZXJ2ZXJCcm9hZGNhc3RNZXNzYWdlDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJXBsYXllciUiLCBwbGF5ZXIuZ2V0TmFtZSgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVtdWx0aXBsaWVyJSIsIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBtdWx0aXBsaWVyKSk7DQogICAgICAgICAgICAgICAgQnVra2l0LmJyb2FkY2FzdE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBicm9hZGNhc3QpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEFjdGl2YXRlcyBtYW51YWwgZnJlbnp5IG1vZGUgdXNpbmcgdGhlIGV4aXN0aW5nIEZyZW56eSBzeXN0ZW0NCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgYWN0aXZhdGVNYW51YWxGcmVuenkoZG91YmxlIG11bHRpcGxpZXIsIGludCB0aW1lTWludXRlcykgew0KICAgICAgICAvLyBDb252ZXJ0IG1pbnV0ZXMgdG8gc2Vjb25kcyBmb3IgdGhlIEZyZW56eSBzeXN0ZW0NCiAgICAgICAgaW50IHRpbWVTZWNvbmRzID0gdGltZU1pbnV0ZXMgKiA2MDsNCg0KICAgICAgICAvLyBVc2UgdGhlIGV4aXN0aW5nIGFjdGl2YXRlTWFudWFsRnJlbnp5IG1ldGhvZCBmcm9tIEZyZW56eSBjbGFzcw0KICAgICAgICBib29sZWFuIHN1Y2Nlc3MgPSBwbHVnaW4uZ2V0RnJlbnp5KCkuYWN0aXZhdGVNYW51YWxGcmVuenkobXVsdGlwbGllciwgdGltZVNlY29uZHMpOw0KDQogICAgICAgIGlmICghc3VjY2Vzcykgew0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkZhaWxlZCB0byBhY3RpdmF0ZSBtYW51YWwgZnJlbnp5IC0gZnJlbnp5IHN5c3RlbSB1bmF2YWlsYWJsZSIpOw0KICAgICAgICB9DQoNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIGEgcmFuZG9tIG11bHRpcGxpZXIgd2l0aGluIHRoZSBjb25maWd1cmVkIHJhbmdlDQogICAgICovDQogICAgcHJpdmF0ZSBkb3VibGUgZ2V0UmFuZG9tTXVsdGlwbGllcigpIHsNCiAgICAgICAgUmFuZG9tIHJhbmRvbSA9IG5ldyBSYW5kb20oKTsNCiAgICAgICAgcmV0dXJuIG1pbk11bHRpcGxpZXIgKyAocmFuZG9tLm5leHREb3VibGUoKSAqIChtYXhNdWx0aXBsaWVyIC0gbWluTXVsdGlwbGllcikpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYSByYW5kb20gdGltZSBpbiBtaW51dGVzIHdpdGhpbiB0aGUgY29uZmlndXJlZCByYW5nZQ0KICAgICAqLw0KICAgIHByaXZhdGUgaW50IGdldFJhbmRvbVRpbWVNaW51dGVzKCkgew0KICAgICAgICBSYW5kb20gcmFuZG9tID0gbmV3IFJhbmRvbSgpOw0KICAgICAgICByZXR1cm4gbWluVGltZU1pbnV0ZXMgKyByYW5kb20ubmV4dEludChtYXhUaW1lTWludXRlcyAtIG1pblRpbWVNaW51dGVzICsgMSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgbWFudWFsIGZyZW56eSBzaG91bGQgZmFpbCBiYXNlZCBvbiByYW5kb20gY2hhbmNlIHdpdGhpbiByYW5nZQ0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBzaG91bGRGYWlsKCkgew0KICAgICAgICBSYW5kb20gcmFuZG9tID0gbmV3IFJhbmRvbSgpOw0KICAgICAgICBkb3VibGUgZmFpbHVyZUNoYW5jZSA9IG1pbkZhaWx1cmVDaGFuY2UgKyAobWF4RmFpbHVyZUNoYW5jZSAtIG1pbkZhaWx1cmVDaGFuY2UpICogcmFuZG9tLm5leHREb3VibGUoKTsNCiAgICAgICAgZG91YmxlIHJvbGwgPSByYW5kb20ubmV4dERvdWJsZSgpICogMTAwLjA7DQoNCiAgICAgICAgcmV0dXJuIHJvbGwgPCBmYWlsdXJlQ2hhbmNlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENsZWFuIHVwIHdoZW4gcGx1Z2luIGRpc2FibGVzDQogICAgICovDQogICAgcHVibGljIHZvaWQgY2xlYW51cCgpIHsNCiAgICAgICAgLy8gTm8gY2xlYW51cCBuZWVkZWQgZm9yIHRoaXMgaXRlbQ0KICAgIH0NCg0KICAgIC8vIEdldHRlcnMgZm9yIGNvbmZpZ3VyYXRpb24gdmFsdWVzDQogICAgcHVibGljIGRvdWJsZSBnZXRNaW5NdWx0aXBsaWVyKCkgeyByZXR1cm4gbWluTXVsdGlwbGllcjsgfQ0KICAgIHB1YmxpYyBkb3VibGUgZ2V0TWF4TXVsdGlwbGllcigpIHsgcmV0dXJuIG1heE11bHRpcGxpZXI7IH0NCiAgICBwdWJsaWMgaW50IGdldE1pblRpbWVNaW51dGVzKCkgeyByZXR1cm4gbWluVGltZU1pbnV0ZXM7IH0NCiAgICBwdWJsaWMgaW50IGdldE1heFRpbWVNaW51dGVzKCkgeyByZXR1cm4gbWF4VGltZU1pbnV0ZXM7IH0NCiAgICBwdWJsaWMgZG91YmxlIGdldE1pbkZhaWx1cmVDaGFuY2UoKSB7IHJldHVybiBtaW5GYWlsdXJlQ2hhbmNlOyB9DQogICAgcHVibGljIGRvdWJsZSBnZXRNYXhGYWlsdXJlQ2hhbmNlKCkgeyByZXR1cm4gbWF4RmFpbHVyZUNoYW5jZTsgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy9JdGVtcy9SZXZlcnNlQm91bnR5LmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDIyNjUwIDE1MDI2MDYyNjYyIDAxNzYzNwAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMuSXRlbXM7DQoNCmltcG9ydCBvcmcuYnVra2l0LkJ1a2tpdDsNCmltcG9ydCBvcmcuYnVra2l0LkNoYXRDb2xvcjsNCmltcG9ydCBvcmcuYnVra2l0Lk1hdGVyaWFsOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LkV2ZW50SGFuZGxlcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50Lkxpc3RlbmVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQucGxheWVyLlBsYXllckludGVyYWN0RXZlbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5ibG9jay5BY3Rpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbVN0YWNrOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lm1ldGEuSXRlbU1ldGE7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudGllc1BsdXM7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy5FdmVudE1hbmFnZXI7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy5WZXJzaW9uVXRpbHM7DQoNCmltcG9ydCBqYXZhLnV0aWwuKjsNCg0KcHVibGljIGNsYXNzIFJldmVyc2VCb3VudHkgaW1wbGVtZW50cyBMaXN0ZW5lciB7DQoNCiAgICBwcml2YXRlIGZpbmFsIEJvdW50aWVzUGx1cyBwbHVnaW47DQoNCiAgICAvLyBDb25maWd1cmF0aW9uIHZhbHVlcw0KICAgIHByaXZhdGUgU3RyaW5nIHJldmVyc2VCb3VudHlOYW1lOw0KICAgIHByaXZhdGUgTGlzdDxTdHJpbmc+IHJldmVyc2VCb3VudHlMb3JlOw0KICAgIHByaXZhdGUgU3RyaW5nIGl0ZW1JZGVudGlmaWVyOw0KICAgIHByaXZhdGUgU3RyaW5nIG5vQm91bnR5TWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyByZXZlcnNlQm91bnR5U3VjY2Vzc01lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgcmV2ZXJzZUJvdW50eUZhaWx1cmVNZXNzYWdlOw0KICAgIHByaXZhdGUgU3RyaW5nIHNlcnZlckJyb2FkY2FzdE1lc3NhZ2U7DQogICAgcHJpdmF0ZSBib29sZWFuIGNoYW5jZUVuYWJsZWQ7DQogICAgcHJpdmF0ZSBkb3VibGUgbWluRmFpbHVyZUNoYW5jZTsNCiAgICBwcml2YXRlIGRvdWJsZSBtYXhGYWlsdXJlQ2hhbmNlOw0KDQogICAgLyoqDQogICAgICogSW5pdGlhbGl6ZXMgdGhlIFJldmVyc2VCb3VudHkgc3lzdGVtDQogICAgICogLy8gbm90ZTogU2V0cyB1cCBjb25maWd1cmF0aW9uIGFuZCByZWdpc3RlcnMgbGlzdGVuZXINCiAgICAgKi8NCiAgICBwdWJsaWMgUmV2ZXJzZUJvdW50eShCb3VudGllc1BsdXMgcGx1Z2luLCBFdmVudE1hbmFnZXIgZXZlbnRNYW5hZ2VyKSB7DQogICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luOw0KICAgICAgICBsb2FkQ29uZmlndXJhdGlvbigpOw0KICAgICAgICBldmVudE1hbmFnZXIucmVnaXN0ZXIodGhpcyk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIGxvYWRDb25maWd1cmF0aW9uKCkgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBpdGVtc0NvbmZpZyA9IHBsdWdpbi5nZXRJdGVtc0NvbmZpZygpOw0KDQogICAgICAgIHRoaXMucmV2ZXJzZUJvdW50eU5hbWUgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoInJldmVyc2UtYm91bnR5Lml0ZW0tbmFtZSIsICImZCZsUmV2ZXJzZSBCb3VudHkiKTsNCiAgICAgICAgdGhpcy5yZXZlcnNlQm91bnR5TG9yZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZ0xpc3QoInJldmVyc2UtYm91bnR5Lml0ZW0tbG9yZSIpOw0KICAgICAgICB0aGlzLml0ZW1JZGVudGlmaWVyID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJyZXZlcnNlLWJvdW50eS5pdGVtLWlkZW50aWZpZXIiLCAiUkVWRVJTRV9CT1VOVFlfSVRFTSIpOw0KICAgICAgICB0aGlzLm5vQm91bnR5TWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygicmV2ZXJzZS1ib3VudHkubWVzc2FnZXMubm8tYm91bnR5IiwgIiZjWW91IGhhdmUgbm8gYm91bnR5IHRvIHJldmVyc2UhIik7DQogICAgICAgIHRoaXMucmV2ZXJzZUJvdW50eVN1Y2Nlc3NNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJyZXZlcnNlLWJvdW50eS5tZXNzYWdlcy5zdWNjZXNzIiwgIiZhUmV2ZXJzZSBib3VudHkgc3VjY2Vzc2Z1bCEgVGhlIGJvdW50eSBoYXMgYmVlbiB0cmFuc2ZlcnJlZCB0byAmZSV0YXJnZXQlJmEuIik7DQogICAgICAgIHRoaXMucmV2ZXJzZUJvdW50eUZhaWx1cmVNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJyZXZlcnNlLWJvdW50eS5tZXNzYWdlcy5mYWlsdXJlIiwgIiZjUmV2ZXJzZSBib3VudHkgZmFpbGVkISBUaGUgaXRlbSB3YXMgY29uc3VtZWQgYnV0IHRoZSByZXZlcnNhbCBkaWQgbm90IHdvcmsuIik7DQogICAgICAgIHRoaXMuc2VydmVyQnJvYWRjYXN0TWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygicmV2ZXJzZS1ib3VudHkuc2VydmVyLWJyb2FkY2FzdC1tZXNzYWdlIiwgIiY2JmxbQk9VTlRZXSAmZSVwbGF5ZXIlICY2aGFzIHVzZWQgYSByZXZlcnNlIGJvdW50eSEgVGhlIGJvdW50eSBpcyBub3cgb24gJmUldGFyZ2V0JSY2ISIpOw0KICAgICAgICB0aGlzLmNoYW5jZUVuYWJsZWQgPSBpdGVtc0NvbmZpZy5nZXRCb29sZWFuKCJyZXZlcnNlLWJvdW50eS5jaGFuY2UuZW5hYmxlZCIsIHRydWUpOw0KICAgICAgICB0aGlzLm1pbkZhaWx1cmVDaGFuY2UgPSBpdGVtc0NvbmZpZy5nZXREb3VibGUoInJldmVyc2UtYm91bnR5LmNoYW5jZS5taW4tZmFpbHVyZSIsIDEwLjApOw0KICAgICAgICB0aGlzLm1heEZhaWx1cmVDaGFuY2UgPSBpdGVtc0NvbmZpZy5nZXREb3VibGUoInJldmVyc2UtYm91bnR5LmNoYW5jZS5tYXgtZmFpbHVyZSIsIDMwLjApOw0KDQogICAgICAgIC8vIFNldCBkZWZhdWx0IGxvcmUgaWYgbm9uZSBjb25maWd1cmVkDQogICAgICAgIGlmIChyZXZlcnNlQm91bnR5TG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIHJldmVyc2VCb3VudHlMb3JlID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICByZXZlcnNlQm91bnR5TG9yZS5hZGQoIiY3UmlnaHQtY2xpY2sgdG8gcmV2ZXJzZSB5b3VyIGJvdW50eSIpOw0KICAgICAgICAgICAgcmV2ZXJzZUJvdW50eUxvcmUuYWRkKCImN29udG8gdGhlIHBsYXllciB3aG8gY29udHJpYnV0ZWQiKTsNCiAgICAgICAgICAgIHJldmVyc2VCb3VudHlMb3JlLmFkZCgiJjd0aGUgbW9zdCBtb25leSB0byB5b3VyIGJvdW50eSIpOw0KICAgICAgICAgICAgcmV2ZXJzZUJvdW50eUxvcmUuYWRkKCIiKTsNCiAgICAgICAgICAgIHJldmVyc2VCb3VudHlMb3JlLmFkZCgiJmVUcmFuc2ZlcnMgYWxsIGJvdW50aWVzIGZyb20geW91Iik7DQogICAgICAgICAgICByZXZlcnNlQm91bnR5TG9yZS5hZGQoIiZldG8gdGhlIGhpZ2hlc3QgY29udHJpYnV0b3IiKTsNCiAgICAgICAgICAgIHJldmVyc2VCb3VudHlMb3JlLmFkZCgiIik7DQogICAgICAgICAgICBpZiAoY2hhbmNlRW5hYmxlZCkgew0KICAgICAgICAgICAgICAgIHJldmVyc2VCb3VudHlMb3JlLmFkZCgiJmNDaGFuY2Ugb2YgZmFpbHVyZTogJmUiICsgKGludCltaW5GYWlsdXJlQ2hhbmNlICsgIiUtIiArIChpbnQpbWF4RmFpbHVyZUNoYW5jZSArICIlIik7DQogICAgICAgICAgICAgICAgcmV2ZXJzZUJvdW50eUxvcmUuYWRkKCIiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldmVyc2VCb3VudHlMb3JlLmFkZCgiJjdQZXJmZWN0IGZvciB0dXJuaW5nIHRoZSB0YWJsZXMhIik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGEgbmV3IHJldmVyc2UgYm91bnR5IGl0ZW0gLy8gbm90ZTogQ3JlYXRlcyBhIG5ldGhlciBzdGFyIGl0ZW0gd2l0aCBOQlQgdGFnIGZvciB0eXBlDQogICAgICovDQogICAgcHVibGljIEl0ZW1TdGFjayBjcmVhdGVSZXZlcnNlQm91bnR5SXRlbSgpIHsNCiAgICAgICAgSXRlbVN0YWNrIHJldmVyc2VCb3VudHkgPSBuZXcgSXRlbVN0YWNrKE1hdGVyaWFsLk5FVEhFUl9TVEFSKTsNCiAgICAgICAgSXRlbU1ldGEgbWV0YSA9IHJldmVyc2VCb3VudHkuZ2V0SXRlbU1ldGEoKTsNCg0KICAgICAgICBpZiAobWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgcmV2ZXJzZUJvdW50eU5hbWUpKTsNCiAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICBmb3IgKFN0cmluZyBsaW5lIDogcmV2ZXJzZUJvdW50eUxvcmUpIHsNCiAgICAgICAgICAgICAgICBsb3JlLmFkZChDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGxpbmUpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIG1ldGEuc2V0TG9yZShsb3JlKTsNCiAgICAgICAgICAgIHJldmVyc2VCb3VudHkuc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgICAgICByZXZlcnNlQm91bnR5ID0gVmVyc2lvblV0aWxzLnNldE5CVFN0cmluZyhyZXZlcnNlQm91bnR5LCAiaXRlbV90eXBlIiwgInJldmVyc2VfYm91bnR5Iik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gcmV2ZXJzZUJvdW50eTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGVja3MgaWYgYW4gaXRlbSBpcyBhIHJldmVyc2UgYm91bnR5IGl0ZW0gLy8gbm90ZTogVmVyaWZpZXMgaXRlbSB0eXBlIHVzaW5nIE5CVCB0YWcNCiAgICAgKi8NCiAgICBwdWJsaWMgYm9vbGVhbiBpc1JldmVyc2VCb3VudHlJdGVtKEl0ZW1TdGFjayBpdGVtKSB7DQogICAgICAgIGlmIChpdGVtID09IG51bGwgfHwgaXRlbS5nZXRJdGVtTWV0YSgpID09IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gInJldmVyc2VfYm91bnR5Ii5lcXVhbHMoVmVyc2lvblV0aWxzLmdldE5CVFN0cmluZyhpdGVtLCAiaXRlbV90eXBlIikpOw0KICAgIH0NCg0KICAgIEBFdmVudEhhbmRsZXINCiAgICBwdWJsaWMgdm9pZCBvblBsYXllckludGVyYWN0KFBsYXllckludGVyYWN0RXZlbnQgZXZlbnQpIHsNCiAgICAgICAgaWYgKGV2ZW50LmdldEFjdGlvbigpICE9IEFjdGlvbi5SSUdIVF9DTElDS19BSVIgJiYgZXZlbnQuZ2V0QWN0aW9uKCkgIT0gQWN0aW9uLlJJR0hUX0NMSUNLX0JMT0NLKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBQbGF5ZXIgcGxheWVyID0gZXZlbnQuZ2V0UGxheWVyKCk7DQogICAgICAgIEl0ZW1TdGFjayBpdGVtID0gZXZlbnQuZ2V0SXRlbSgpOw0KDQogICAgICAgIGlmICghaXNSZXZlcnNlQm91bnR5SXRlbShpdGVtKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgZXZlbnQuc2V0Q2FuY2VsbGVkKHRydWUpOw0KDQogICAgICAgIFVVSUQgcGxheWVyVVVJRCA9IHBsYXllci5nZXRVbmlxdWVJZCgpOw0KDQogICAgICAgIC8vIENoZWNrIGlmIHBsYXllciBoYXMgYW55IGJvdW50aWVzDQogICAgICAgIE1hcDxVVUlELCBJbnRlZ2VyPiBwbGF5ZXJCb3VudGllcyA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuZ2V0Qm91bnRpZXNPblRhcmdldChwbGF5ZXJVVUlEKTsNCiAgICAgICAgaWYgKHBsYXllckJvdW50aWVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbm9Cb3VudHlNZXNzYWdlKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBGaW5kIHRoZSBwbGF5ZXIgd2hvIGNvbnRyaWJ1dGVkIHRoZSBtb3N0IG1vbmV5DQogICAgICAgIFVVSUQgaGlnaGVzdENvbnRyaWJ1dG9yID0gZmluZEhpZ2hlc3RDb250cmlidXRvcihwbGF5ZXJCb3VudGllcyk7DQogICAgICAgIGlmIChoaWdoZXN0Q29udHJpYnV0b3IgPT0gbnVsbCkgew0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbm9Cb3VudHlNZXNzYWdlKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBSZW1vdmUgdGhlIGl0ZW0gZmlyc3QgKGNvbnN1bWVkIHJlZ2FyZGxlc3Mgb2Ygc3VjY2Vzcy9mYWlsdXJlKQ0KICAgICAgICBpZiAoaXRlbS5nZXRBbW91bnQoKSA+IDEpIHsNCiAgICAgICAgICAgIGl0ZW0uc2V0QW1vdW50KGl0ZW0uZ2V0QW1vdW50KCkgLSAxKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHBsYXllci5nZXRJbnZlbnRvcnkoKS5yZW1vdmUoaXRlbSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDaGVjayBmb3IgZmFpbHVyZSBjaGFuY2UgaWYgZW5hYmxlZA0KICAgICAgICBpZiAoY2hhbmNlRW5hYmxlZCAmJiBzaG91bGRGYWlsKCkpIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHJldmVyc2VCb3VudHlGYWlsdXJlTWVzc2FnZSkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRvdGFsIGJvdW50eSBhbW91bnQNCiAgICAgICAgaW50IHRvdGFsQm91bnR5QW1vdW50ID0gcGxheWVyQm91bnRpZXMudmFsdWVzKCkuc3RyZWFtKCkubWFwVG9JbnQoSW50ZWdlcjo6aW50VmFsdWUpLnN1bSgpOw0KDQogICAgICAgIC8vIFJlbW92ZSBhbGwgYm91bnRpZXMgZnJvbSB0aGUgcGxheWVyDQogICAgICAgIGZvciAoVVVJRCBzZXR0ZXJVVUlEIDogbmV3IEhhc2hTZXQ8PihwbGF5ZXJCb3VudGllcy5rZXlTZXQoKSkpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkucmVtb3ZlQm91bnR5KHBsYXllclVVSUQsIHNldHRlclVVSUQpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQWRkIHRoZSB0b3RhbCBib3VudHkgYW1vdW50IHRvIHRoZSBoaWdoZXN0IGNvbnRyaWJ1dG9yDQogICAgICAgIC8vIFVzZSB0aGUgb3JpZ2luYWwgcGxheWVyIGFzIHRoZSBzZXR0ZXIgZm9yIHRoZSByZXZlcnNlZCBib3VudHkNCiAgICAgICAgcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5hZGRCb3VudHkoaGlnaGVzdENvbnRyaWJ1dG9yLCBwbGF5ZXJVVUlELCB0b3RhbEJvdW50eUFtb3VudCk7DQoNCiAgICAgICAgLy8gR2V0IHRhcmdldCBwbGF5ZXIgbmFtZSBmb3IgbWVzc2FnZXMNCiAgICAgICAgU3RyaW5nIHRhcmdldE5hbWUgPSBnZXRQbGF5ZXJOYW1lKGhpZ2hlc3RDb250cmlidXRvcik7DQoNCiAgICAgICAgLy8gU2VuZCBzdWNjZXNzIG1lc3NhZ2UgdG8gcGxheWVyDQogICAgICAgIFN0cmluZyBzdWNjZXNzTXNnID0gcmV2ZXJzZUJvdW50eVN1Y2Nlc3NNZXNzYWdlLnJlcGxhY2UoIiV0YXJnZXQlIiwgdGFyZ2V0TmFtZSk7DQogICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHN1Y2Nlc3NNc2cpKTsNCg0KICAgICAgICAvLyBTZW5kIHNlcnZlciBicm9hZGNhc3QgbWVzc2FnZQ0KICAgICAgICBTdHJpbmcgYnJvYWRjYXN0TXNnID0gc2VydmVyQnJvYWRjYXN0TWVzc2FnZQ0KICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlcGxheWVyJSIsIHBsYXllci5nZXROYW1lKCkpDQogICAgICAgICAgICAgICAgLnJlcGxhY2UoIiV0YXJnZXQlIiwgdGFyZ2V0TmFtZSk7DQogICAgICAgIEJ1a2tpdC5icm9hZGNhc3RNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgYnJvYWRjYXN0TXNnKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRmluZHMgdGhlIHBsYXllciB3aG8gY29udHJpYnV0ZWQgdGhlIG1vc3QgbW9uZXkgdG8gdGhlIGJvdW50eSBwb29sDQogICAgICovDQogICAgcHJpdmF0ZSBVVUlEIGZpbmRIaWdoZXN0Q29udHJpYnV0b3IoTWFwPFVVSUQsIEludGVnZXI+IGJvdW50aWVzKSB7DQogICAgICAgIFVVSUQgaGlnaGVzdENvbnRyaWJ1dG9yID0gbnVsbDsNCiAgICAgICAgaW50IGhpZ2hlc3RBbW91bnQgPSAwOw0KDQogICAgICAgIGZvciAoTWFwLkVudHJ5PFVVSUQsIEludGVnZXI+IGVudHJ5IDogYm91bnRpZXMuZW50cnlTZXQoKSkgew0KICAgICAgICAgICAgaWYgKGVudHJ5LmdldFZhbHVlKCkgPiBoaWdoZXN0QW1vdW50KSB7DQogICAgICAgICAgICAgICAgaGlnaGVzdEFtb3VudCA9IGVudHJ5LmdldFZhbHVlKCk7DQogICAgICAgICAgICAgICAgaGlnaGVzdENvbnRyaWJ1dG9yID0gZW50cnkuZ2V0S2V5KCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gaGlnaGVzdENvbnRyaWJ1dG9yOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIERldGVybWluZXMgaWYgdGhlIHJldmVyc2UgYm91bnR5IHNob3VsZCBmYWlsIGJhc2VkIG9uIGNoYW5jZQ0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBzaG91bGRGYWlsKCkgew0KICAgICAgICBpZiAoIWNoYW5jZUVuYWJsZWQpIHJldHVybiBmYWxzZTsNCg0KICAgICAgICBSYW5kb20gcmFuZG9tID0gbmV3IFJhbmRvbSgpOw0KICAgICAgICBkb3VibGUgZmFpbHVyZUNoYW5jZSA9IG1pbkZhaWx1cmVDaGFuY2UgKyAobWF4RmFpbHVyZUNoYW5jZSAtIG1pbkZhaWx1cmVDaGFuY2UpICogcmFuZG9tLm5leHREb3VibGUoKTsNCiAgICAgICAgZG91YmxlIHJvbGwgPSByYW5kb20ubmV4dERvdWJsZSgpICogMTAwLjA7DQoNCiAgICAgICAgcmV0dXJuIHJvbGwgPCBmYWlsdXJlQ2hhbmNlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgYSBwbGF5ZXIncyBuYW1lIGZyb20gVVVJRCAoaGFuZGxlcyBvZmZsaW5lIHBsYXllcnMpDQogICAgICovDQogICAgcHJpdmF0ZSBTdHJpbmcgZ2V0UGxheWVyTmFtZShVVUlEIHBsYXllclVVSUQpIHsNCiAgICAgICAgUGxheWVyIHBsYXllciA9IEJ1a2tpdC5nZXRQbGF5ZXIocGxheWVyVVVJRCk7DQogICAgICAgIGlmIChwbGF5ZXIgIT0gbnVsbCkgew0KICAgICAgICAgICAgcmV0dXJuIHBsYXllci5nZXROYW1lKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBUcnkgdG8gZ2V0IG9mZmxpbmUgcGxheWVyIG5hbWUNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIHJldHVybiBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcihwbGF5ZXJVVUlEKS5nZXROYW1lKCk7DQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICByZXR1cm4gIlVua25vd24gUGxheWVyIjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENsZWFuIHVwIHdoZW4gcGx1Z2luIGRpc2FibGVzDQogICAgICovDQogICAgcHVibGljIHZvaWQgY2xlYW51cCgpIHsNCiAgICAgICAgLy8gTm8gY2xlYW51cCBuZWVkZWQgZm9yIHRoaXMgaXRlbQ0KICAgIH0NCg0KICAgIC8vIEdldHRlcnMgZm9yIGNvbmZpZ3VyYXRpb24gdmFsdWVzDQogICAgcHVibGljIGJvb2xlYW4gaXNDaGFuY2VFbmFibGVkKCkgeyByZXR1cm4gY2hhbmNlRW5hYmxlZDsgfQ0KICAgIHB1YmxpYyBkb3VibGUgZ2V0TWluRmFpbHVyZUNoYW5jZSgpIHsgcmV0dXJuIG1pbkZhaWx1cmVDaGFuY2U7IH0NCiAgICBwdWJsaWMgZG91YmxlIGdldE1heEZhaWx1cmVDaGFuY2UoKSB7IHJldHVybiBtYXhGYWlsdXJlQ2hhbmNlOyB9DQp9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRvbnkyNi9ib3VudGllc1BsdXMvSXRlbXMvVHJhY2tlci5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDA0MzIyNCAxNTAyNjA2MjY2MiAwMTY0MTYAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQpwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMuSXRlbXM7DQoNCmltcG9ydCBvcmcuYnVra2l0LkJ1a2tpdDsNCmltcG9ydCBvcmcuYnVra2l0LkNoYXRDb2xvcjsNCmltcG9ydCBvcmcuYnVra2l0LkxvY2F0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuTWF0ZXJpYWw7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuRmlsZUNvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuRXZlbnRIYW5kbGVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuTGlzdGVuZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5wbGF5ZXIuUGxheWVySW50ZXJhY3RFdmVudDsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LmJsb2NrLkFjdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JdGVtU3RhY2s7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkubWV0YS5JdGVtTWV0YTsNCmltcG9ydCBvcmcuYnVra2l0LnNjaGVkdWxlci5CdWtraXRSdW5uYWJsZTsNCmltcG9ydCBvcmcuYnVra2l0LnNjaGVkdWxlci5CdWtraXRUYXNrOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuQm91bnRpZXNQbHVzOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuRXZlbnRNYW5hZ2VyOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuVmVyc2lvblV0aWxzOw0KaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7DQppbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7DQppbXBvcnQgamF2YS51dGlsLkxpc3Q7DQppbXBvcnQgamF2YS51dGlsLk1hcDsNCmltcG9ydCBqYXZhLnV0aWwuVVVJRDsNCmltcG9ydCBjb20uY29tcGhlbml4LnByb3RvY29sLlByb3RvY29sTGlicmFyeTsNCmltcG9ydCBjb20uY29tcGhlbml4LnByb3RvY29sLlByb3RvY29sTWFuYWdlcjsNCmltcG9ydCBjb20uY29tcGhlbml4LnByb3RvY29sLndyYXBwZXJzLldyYXBwZWRDaGF0Q29tcG9uZW50Ow0KaW1wb3J0IGNvbS5jb21waGVuaXgucHJvdG9jb2wuUGFja2V0VHlwZTsNCmltcG9ydCBjb20uY29tcGhlbml4LnByb3RvY29sLmV2ZW50cy5QYWNrZXRDb250YWluZXI7DQoNCnB1YmxpYyBjbGFzcyBUcmFja2VyIGltcGxlbWVudHMgTGlzdGVuZXIgew0KDQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIEJ1a2tpdFRhc2s+IGFjdGl2ZVRyYWNrZXJzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIEJ1a2tpdFRhc2s+IGFjdGlvbkJhclRhc2tzID0gbmV3IEhhc2hNYXA8PigpOw0KDQogICAgLy8gQ29uZmlndXJhdGlvbiB2YWx1ZXMgLSB3aWxsIGJlIGxvYWRlZCBmcm9tIGl0ZW1zLnltbA0KICAgIHByaXZhdGUgaW50IG1heFVzZXM7DQogICAgcHJpdmF0ZSBkb3VibGUgc2VhcmNoUmFkaXVzOw0KICAgIHByaXZhdGUgaW50IHRyYWNraW5nRHVyYXRpb247IC8vIGluIHNlY29uZHMNCiAgICBwcml2YXRlIFN0cmluZyBhY3Rpb25CYXJNZXNzYWdlOw0KICAgIHByaXZhdGUgU3RyaW5nIHRyYWNrZXJOYW1lOw0KICAgIHByaXZhdGUgTGlzdDxTdHJpbmc+IHRyYWNrZXJMb3JlOw0KICAgIHByaXZhdGUgU3RyaW5nIG5vVGFyZ2V0TWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyB0cmFja2luZ1N0YXJ0TWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyB0cmFja2VyRXhwaXJlZE1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgaXRlbUlkZW50aWZpZXI7DQogICAgcHJpdmF0ZSBTdHJpbmcgYWxyZWFkeUFjdGl2ZU1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgdGFyZ2V0TG9zdE1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgdHJhY2tpbmdFeHBpcmVkTWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyBqYW1tZXJCbG9ja2VkTWVzc2FnZTsNCg0KICAgIC8qKg0KICAgICAqIEluaXRpYWxpemVzIHRoZSBUcmFja2VyIHN5c3RlbQ0KICAgICAqIC8vIG5vdGU6IFNldHMgdXAgY29uZmlndXJhdGlvbiBhbmQgcmVnaXN0ZXJzIGxpc3RlbmVyDQogICAgICovDQogICAgcHVibGljIFRyYWNrZXIoQm91bnRpZXNQbHVzIHBsdWdpbiwgRXZlbnRNYW5hZ2VyIGV2ZW50TWFuYWdlcikgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICAgICAgbG9hZENvbmZpZ3VyYXRpb24oKTsNCiAgICAgICAgZXZlbnRNYW5hZ2VyLnJlZ2lzdGVyKHRoaXMpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBsb2FkQ29uZmlndXJhdGlvbigpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gaXRlbXNDb25maWcgPSBwbHVnaW4uZ2V0SXRlbXNDb25maWcoKTsNCg0KICAgICAgICAvLyBMb2FkIGNvbmZpZ3VyYXRpb24gdmFsdWVzIHdpdGggZGVmYXVsdHMNCiAgICAgICAgdGhpcy5tYXhVc2VzID0gaXRlbXNDb25maWcuZ2V0SW50KCJ0cmFja2VyLm1heC11c2VzIiwgNSk7DQogICAgICAgIHRoaXMuc2VhcmNoUmFkaXVzID0gaXRlbXNDb25maWcuZ2V0RG91YmxlKCJ0cmFja2VyLnNlYXJjaC1yYWRpdXMiLCAxMDAuMCk7DQogICAgICAgIHRoaXMudHJhY2tpbmdEdXJhdGlvbiA9IGl0ZW1zQ29uZmlnLmdldEludCgidHJhY2tlci50cmFja2luZy1kdXJhdGlvbiIsIDMwKTsNCiAgICAgICAgdGhpcy5hY3Rpb25CYXJNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJ0cmFja2VyLmFjdGlvbi1iYXItbWVzc2FnZSIsICImZVRyYWNraW5nIHRpbWUgcmVtYWluaW5nOiAmYyV0aW1lJXMiKTsNCiAgICAgICAgdGhpcy50cmFja2VyTmFtZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygidHJhY2tlci5pdGVtLW5hbWUiLCAiJjYmbEJvdW50eSBUcmFja2VyIik7DQogICAgICAgIHRoaXMudHJhY2tlckxvcmUgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmdMaXN0KCJ0cmFja2VyLml0ZW0tbG9yZSIpOw0KICAgICAgICB0aGlzLm5vVGFyZ2V0TWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygidHJhY2tlci5tZXNzYWdlcy5uby10YXJnZXQiLCAiJmNObyBwbGF5ZXJzIGZvdW5kIHdpdGhpbiB0cmFja2luZyByYW5nZSEiKTsNCiAgICAgICAgdGhpcy50cmFja2luZ1N0YXJ0TWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygidHJhY2tlci5tZXNzYWdlcy50cmFja2luZy1zdGFydCIsICImYVRyYWNrZXIgYWN0aXZhdGVkISBQb2ludGluZyB0byBuZWFyZXN0IHBsYXllciBmb3IgJWR1cmF0aW9uJSBzZWNvbmRzLiIpOw0KICAgICAgICB0aGlzLnRyYWNrZXJFeHBpcmVkTWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygidHJhY2tlci5tZXNzYWdlcy50cmFja2VyLWV4cGlyZWQiLCAiJmNZb3VyIHRyYWNrZXIgaGFzIHJ1biBvdXQgb2YgdXNlcyBhbmQgd2FzIHJlbW92ZWQhIik7DQogICAgICAgIHRoaXMuYWxyZWFkeUFjdGl2ZU1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoInRyYWNrZXIubWVzc2FnZXMuYWxyZWFkeS1hY3RpdmUiLCAiJmNUcmFja2VyIGlzIGFscmVhZHkgYWN0aXZlISIpOw0KICAgICAgICB0aGlzLnRhcmdldExvc3RNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJ0cmFja2VyLm1lc3NhZ2VzLnRhcmdldC1sb3N0IiwgIiZjVGFyZ2V0IGxvc3QhIE5vIG90aGVyIHBsYXllcnMgaW4gcmFuZ2UuIik7DQogICAgICAgIHRoaXMudHJhY2tpbmdFeHBpcmVkTWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygidHJhY2tlci5tZXNzYWdlcy50cmFja2luZy1leHBpcmVkIiwgIiZlVHJhY2tlciBoYXMgZXhwaXJlZC4iKTsNCiAgICAgICAgdGhpcy5qYW1tZXJCbG9ja2VkTWVzc2FnZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZygidHJhY2tlci5tZXNzYWdlcy5qYW1tZXItYmxvY2tlZCIsICImYyZsSkFNTUVEISAmN0VuZW15IGNvdW50ZXJtZWFzdXJlcyBhcmUgYmxvY2tpbmcgeW91ciB0cmFja2VyISIpOw0KICAgICAgICB0aGlzLml0ZW1JZGVudGlmaWVyID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJ0cmFja2VyLml0ZW0taWRlbnRpZmllciIsICJCT1VOVFlfVFJBQ0tFUl9JVEVNIik7DQoNCiAgICAgICAgLy8gU2V0IGRlZmF1bHQgbG9yZSBpZiBub25lIGNvbmZpZ3VyZWQNCiAgICAgICAgaWYgKHRyYWNrZXJMb3JlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgdHJhY2tlckxvcmUgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgICAgIHRyYWNrZXJMb3JlLmFkZCgiJjdSaWdodC1jbGljayB0byB0cmFjayB0aGUgbmVhcmVzdCBwbGF5ZXIiKTsNCiAgICAgICAgICAgIHRyYWNrZXJMb3JlLmFkZCgiJjd3aXRoaW4gYSAiICsgKGludCkgc2VhcmNoUmFkaXVzICsgIiBibG9jayByYWRpdXMiKTsNCiAgICAgICAgICAgIHRyYWNrZXJMb3JlLmFkZCgiJmMmbFVzZXM6ICZmJXVzZXMlJmMvJmYlbWF4X3VzZXMlIik7DQogICAgICAgICAgICB0cmFja2VyTG9yZS5hZGQoIiIpOw0KICAgICAgICAgICAgdHJhY2tlckxvcmUuYWRkKCImZVRoaXMgY29tcGFzcyB3aWxsIHBvaW50IHRvIHlvdXIiKTsNCiAgICAgICAgICAgIHRyYWNrZXJMb3JlLmFkZCgiJmV0YXJnZXQgZm9yICIgKyB0cmFja2luZ0R1cmF0aW9uICsgIiBzZWNvbmRzIik7DQogICAgICAgICAgICB0cmFja2VyTG9yZS5hZGQoIiIpOw0KICAgICAgICAgICAgdHJhY2tlckxvcmUuYWRkKCImYyZsV0FSTklORzogJjdDYW4gYmUgYmxvY2tlZCBieSBqYW1tZXJzISIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ3JlYXRlcyBhIG5ldyB0cmFja2VyIGl0ZW0gd2l0aCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB1c2VzIC8vIG5vdGU6IENyZWF0ZXMgYSBjb21wYXNzIGl0ZW0gd2l0aCBOQlQgdGFncyBmb3IgdHlwZSBhbmQgdXNlcw0KICAgICAqLw0KICAgIHB1YmxpYyBJdGVtU3RhY2sgY3JlYXRlVHJhY2tlckl0ZW0oaW50IHVzZXMpIHsNCiAgICAgICAgSXRlbVN0YWNrIHRyYWNrZXIgPSBuZXcgSXRlbVN0YWNrKE1hdGVyaWFsLkNPTVBBU1MpOw0KICAgICAgICBJdGVtTWV0YSBtZXRhID0gdHJhY2tlci5nZXRJdGVtTWV0YSgpOw0KDQogICAgICAgIGlmIChtZXRhICE9IG51bGwpIHsNCiAgICAgICAgICAgIG1ldGEuc2V0RGlzcGxheU5hbWUoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCB0cmFja2VyTmFtZSkpOw0KICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiB0cmFja2VyTG9yZSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBwcm9jZXNzZWRMaW5lID0gbGluZS5yZXBsYWNlKCIldXNlcyUiLCBTdHJpbmcudmFsdWVPZih1c2VzKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlbWF4X3VzZXMlIiwgU3RyaW5nLnZhbHVlT2YobWF4VXNlcykpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJXJhZGl1cyUiLCBTdHJpbmcudmFsdWVPZigoaW50KSBzZWFyY2hSYWRpdXMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVkdXJhdGlvbiUiLCBTdHJpbmcudmFsdWVPZih0cmFja2luZ0R1cmF0aW9uKSk7DQogICAgICAgICAgICAgICAgbG9yZS5hZGQoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBwcm9jZXNzZWRMaW5lKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBtZXRhLnNldExvcmUobG9yZSk7DQogICAgICAgICAgICB0cmFja2VyLnNldEl0ZW1NZXRhKG1ldGEpOw0KICAgICAgICAgICAgdHJhY2tlciA9IFZlcnNpb25VdGlscy5zZXROQlRTdHJpbmcodHJhY2tlciwgIml0ZW1fdHlwZSIsICJ0cmFja2VyIik7DQogICAgICAgICAgICB0cmFja2VyID0gVmVyc2lvblV0aWxzLnNldE5CVEludGVnZXIodHJhY2tlciwgInVzZXMiLCB1c2VzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cmFja2VyOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiBhbiBpdGVtIGlzIGEgdHJhY2tlciBpdGVtIC8vIG5vdGU6IFZlcmlmaWVzIGl0ZW0gdHlwZSB1c2luZyBOQlQgdGFnDQogICAgICovDQogICAgcHVibGljIGJvb2xlYW4gaXNUcmFja2VySXRlbShJdGVtU3RhY2sgaXRlbSkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0VHlwZSgpICE9IE1hdGVyaWFsLkNPTVBBU1MgfHwgaXRlbS5nZXRJdGVtTWV0YSgpID09IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gInRyYWNrZXIiLmVxdWFscyhWZXJzaW9uVXRpbHMuZ2V0TkJUU3RyaW5nKGl0ZW0sICJpdGVtX3R5cGUiKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB0aGUgcmVtYWluaW5nIHVzZXMgZnJvbSBhIHRyYWNrZXIgaXRlbSAvLyBub3RlOiBSZXRyaWV2ZXMgdXNlcyBmcm9tIE5CVCB0YWcNCiAgICAgKi8NCiAgICBwcml2YXRlIGludCBnZXRVc2VzRnJvbUl0ZW0oSXRlbVN0YWNrIGl0ZW0pIHsNCiAgICAgICAgaWYgKCFpc1RyYWNrZXJJdGVtKGl0ZW0pKSByZXR1cm4gMDsNCiAgICAgICAgSW50ZWdlciB1c2VzID0gVmVyc2lvblV0aWxzLmdldE5CVEludGVnZXIoaXRlbSwgInVzZXMiKTsNCiAgICAgICAgcmV0dXJuIHVzZXMgIT0gbnVsbCA/IHVzZXMgOiAwOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFVwZGF0ZXMgdGhlIHRyYWNrZXIgaXRlbSB3aXRoIG5ldyB1c2VzIGNvdW50IC8vIG5vdGU6IENyZWF0ZXMgYSBuZXcgaXRlbSB3aXRoIHVwZGF0ZWQgdXNlcyBpbiBOQlQgYW5kIGxvcmUNCiAgICAgKi8NCiAgICBwcml2YXRlIEl0ZW1TdGFjayB1cGRhdGVUcmFja2VyVXNlcyhJdGVtU3RhY2sgaXRlbSwgaW50IG5ld1VzZXMpIHsNCiAgICAgICAgaWYgKCFpc1RyYWNrZXJJdGVtKGl0ZW0pKSByZXR1cm4gaXRlbTsNCiAgICAgICAgcmV0dXJuIGNyZWF0ZVRyYWNrZXJJdGVtKG5ld1VzZXMpOw0KICAgIH0NCg0KICAgIEBFdmVudEhhbmRsZXINCiAgICBwdWJsaWMgdm9pZCBvblBsYXllckludGVyYWN0KFBsYXllckludGVyYWN0RXZlbnQgZXZlbnQpIHsNCiAgICAgICAgaWYgKGV2ZW50LmdldEFjdGlvbigpICE9IEFjdGlvbi5SSUdIVF9DTElDS19BSVIgJiYgZXZlbnQuZ2V0QWN0aW9uKCkgIT0gQWN0aW9uLlJJR0hUX0NMSUNLX0JMT0NLKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBQbGF5ZXIgcGxheWVyID0gZXZlbnQuZ2V0UGxheWVyKCk7DQogICAgICAgIEl0ZW1TdGFjayBpdGVtID0gZXZlbnQuZ2V0SXRlbSgpOw0KDQogICAgICAgIGlmICghaXNUcmFja2VySXRlbShpdGVtKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgZXZlbnQuc2V0Q2FuY2VsbGVkKHRydWUpOw0KDQogICAgICAgIC8vIENoZWNrIGlmIHBsYXllciBpcyBhbHJlYWR5IHRyYWNraW5nDQogICAgICAgIGlmIChhY3RpdmVUcmFja2Vycy5jb250YWluc0tleShwbGF5ZXIuZ2V0VW5pcXVlSWQoKSkpIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGFscmVhZHlBY3RpdmVNZXNzYWdlKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBHZXQgY3VycmVudCB1c2VzDQogICAgICAgIGludCBjdXJyZW50VXNlcyA9IGdldFVzZXNGcm9tSXRlbShpdGVtKTsNCiAgICAgICAgaWYgKGN1cnJlbnRVc2VzIDw9IDApIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHRyYWNrZXJFeHBpcmVkTWVzc2FnZSkpOw0KICAgICAgICAgICAgcGxheWVyLmdldEludmVudG9yeSgpLnJlbW92ZShpdGVtKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEZpbmQgbmVhcmVzdCBwbGF5ZXINCiAgICAgICAgUGxheWVyIG5lYXJlc3RQbGF5ZXIgPSBmaW5kTmVhcmVzdFBsYXllcihwbGF5ZXIpOw0KICAgICAgICBpZiAobmVhcmVzdFBsYXllciA9PSBudWxsKSB7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBub1RhcmdldE1lc3NhZ2UpKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEpBTU1FUiBDSEVDSzogQ2hlY2sgaWYgdGhlIHRhcmdldCBoYXMgYW4gYWN0aXZlIGphbW1lcg0KICAgICAgICBpZiAocGx1Z2luLmdldEphbW1lcigpICE9IG51bGwgJiYgcGx1Z2luLmdldEphbW1lcigpLmlzSmFtbWVyQWN0aXZlKG5lYXJlc3RQbGF5ZXIpKSB7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBqYW1tZXJCbG9ja2VkTWVzc2FnZSkpOw0KICAgICAgICAgICAgLy8gU3RpbGwgY29uc3VtZSB0aGUgdHJhY2tlciB1c2Ugd2hlbiBibG9ja2VkIGJ5IGphbW1lcg0KICAgICAgICAgICAgaW50IG5ld1VzZXMgPSBjdXJyZW50VXNlcyAtIDE7DQogICAgICAgICAgICBpZiAobmV3VXNlcyA8PSAwKSB7DQogICAgICAgICAgICAgICAgcGxheWVyLmdldEludmVudG9yeSgpLnJlbW92ZShpdGVtKTsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCB0cmFja2VyRXhwaXJlZE1lc3NhZ2UpKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgSXRlbVN0YWNrIHVwZGF0ZWRJdGVtID0gdXBkYXRlVHJhY2tlclVzZXMoaXRlbSwgbmV3VXNlcyk7DQogICAgICAgICAgICAgICAgaW50IHNsb3QgPSBwbGF5ZXIuZ2V0SW52ZW50b3J5KCkuZ2V0SGVsZEl0ZW1TbG90KCk7DQogICAgICAgICAgICAgICAgcGxheWVyLmdldEludmVudG9yeSgpLnNldEl0ZW0oc2xvdCwgdXBkYXRlZEl0ZW0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gU3RhcnQgdHJhY2tpbmcNCiAgICAgICAgc3RhcnRUcmFja2luZyhwbGF5ZXIsIG5lYXJlc3RQbGF5ZXIpOw0KDQogICAgICAgIC8vIFVwZGF0ZSBpdGVtIHVzZXMNCiAgICAgICAgaW50IG5ld1VzZXMgPSBjdXJyZW50VXNlcyAtIDE7DQogICAgICAgIGlmIChuZXdVc2VzIDw9IDApIHsNCiAgICAgICAgICAgIC8vIFJlbW92ZSBpdGVtIHdoZW4gdXNlcyBhcmUgZXhoYXVzdGVkDQogICAgICAgICAgICBwbGF5ZXIuZ2V0SW52ZW50b3J5KCkucmVtb3ZlKGl0ZW0pOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgdHJhY2tlckV4cGlyZWRNZXNzYWdlKSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAvLyBVcGRhdGUgaXRlbSB3aXRoIG5ldyB1c2VzIGNvdW50DQogICAgICAgICAgICBJdGVtU3RhY2sgdXBkYXRlZEl0ZW0gPSB1cGRhdGVUcmFja2VyVXNlcyhpdGVtLCBuZXdVc2VzKTsNCiAgICAgICAgICAgIGludCBzbG90ID0gcGxheWVyLmdldEludmVudG9yeSgpLmdldEhlbGRJdGVtU2xvdCgpOw0KICAgICAgICAgICAgcGxheWVyLmdldEludmVudG9yeSgpLnNldEl0ZW0oc2xvdCwgdXBkYXRlZEl0ZW0pOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gU2VuZCB0cmFja2luZyBzdGFydCBtZXNzYWdlDQogICAgICAgIFN0cmluZyBtZXNzYWdlID0gdHJhY2tpbmdTdGFydE1lc3NhZ2UucmVwbGFjZSgiJWR1cmF0aW9uJSIsIFN0cmluZy52YWx1ZU9mKHRyYWNraW5nRHVyYXRpb24pKTsNCiAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbWVzc2FnZSkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZpbmRzIHRoZSBuZWFyZXN0IHBsYXllciB3aXRoaW4gdGhlIHNlYXJjaCByYWRpdXMNCiAgICAgKi8NCiAgICBwcml2YXRlIFBsYXllciBmaW5kTmVhcmVzdFBsYXllcihQbGF5ZXIgdHJhY2tlcikgew0KICAgICAgICBMb2NhdGlvbiB0cmFja2VyTG9jYXRpb24gPSB0cmFja2VyLmdldExvY2F0aW9uKCk7DQogICAgICAgIFBsYXllciBuZWFyZXN0UGxheWVyID0gbnVsbDsNCiAgICAgICAgZG91YmxlIG5lYXJlc3REaXN0YW5jZSA9IERvdWJsZS5NQVhfVkFMVUU7DQoNCiAgICAgICAgZm9yIChQbGF5ZXIgb25saW5lUGxheWVyIDogQnVra2l0LmdldE9ubGluZVBsYXllcnMoKSkgew0KICAgICAgICAgICAgLy8gU2tpcCBzZWxmDQogICAgICAgICAgICBpZiAob25saW5lUGxheWVyLmdldFVuaXF1ZUlkKCkuZXF1YWxzKHRyYWNrZXIuZ2V0VW5pcXVlSWQoKSkpIHsNCiAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gU2tpcCBpZiBpbiBkaWZmZXJlbnQgd29ybGQNCiAgICAgICAgICAgIGlmICghb25saW5lUGxheWVyLmdldFdvcmxkKCkuZXF1YWxzKHRyYWNrZXIuZ2V0V29ybGQoKSkpIHsNCiAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gQ2hlY2sgZGlzdGFuY2UNCiAgICAgICAgICAgIGRvdWJsZSBkaXN0YW5jZSA9IHRyYWNrZXJMb2NhdGlvbi5kaXN0YW5jZShvbmxpbmVQbGF5ZXIuZ2V0TG9jYXRpb24oKSk7DQogICAgICAgICAgICBpZiAoZGlzdGFuY2UgPD0gc2VhcmNoUmFkaXVzICYmIGRpc3RhbmNlIDwgbmVhcmVzdERpc3RhbmNlKSB7DQogICAgICAgICAgICAgICAgbmVhcmVzdERpc3RhbmNlID0gZGlzdGFuY2U7DQogICAgICAgICAgICAgICAgbmVhcmVzdFBsYXllciA9IG9ubGluZVBsYXllcjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBuZWFyZXN0UGxheWVyOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFN0YXJ0cyB0cmFja2luZyBhIHRhcmdldCBwbGF5ZXINCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgc3RhcnRUcmFja2luZyhQbGF5ZXIgdHJhY2tlciwgUGxheWVyIHRhcmdldCkgew0KICAgICAgICBVVUlEIHRyYWNrZXJVVUlEID0gdHJhY2tlci5nZXRVbmlxdWVJZCgpOw0KDQogICAgICAgIC8vIENhbmNlbCBhbnkgZXhpc3RpbmcgdHJhY2tpbmcgZm9yIHRoaXMgcGxheWVyDQogICAgICAgIHN0b3BUcmFja2luZyh0cmFja2VyVVVJRCk7DQoNCiAgICAgICAgLy8gU3RhcnQgY29tcGFzcyB0cmFja2luZyB0YXNrDQogICAgICAgIEJ1a2tpdFRhc2sgdHJhY2tpbmdUYXNrID0gbmV3IEJ1a2tpdFJ1bm5hYmxlKCkgew0KICAgICAgICAgICAgcHJpdmF0ZSBpbnQgdGltZVJlbWFpbmluZyA9IHRyYWNraW5nRHVyYXRpb247DQoNCiAgICAgICAgICAgIEBPdmVycmlkZQ0KICAgICAgICAgICAgcHVibGljIHZvaWQgcnVuKCkgew0KICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRyYWNrZXIgaXMgc3RpbGwgb25saW5lDQogICAgICAgICAgICAgICAgUGxheWVyIGN1cnJlbnRUcmFja2VyID0gQnVra2l0LmdldFBsYXllcih0cmFja2VyVVVJRCk7DQogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUcmFja2VyID09IG51bGwgfHwgIWN1cnJlbnRUcmFja2VyLmlzT25saW5lKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0YXJnZXQgaXMgc3RpbGwgb25saW5lDQogICAgICAgICAgICAgICAgUGxheWVyIGN1cnJlbnRUYXJnZXQgPSBCdWtraXQuZ2V0UGxheWVyKHRhcmdldC5nZXRVbmlxdWVJZCgpKTsNCiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFRhcmdldCA9PSBudWxsIHx8ICFjdXJyZW50VGFyZ2V0LmlzT25saW5lKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gVGFyZ2V0IHdlbnQgb2ZmbGluZSwgZmluZCBuZXcgdGFyZ2V0DQogICAgICAgICAgICAgICAgICAgIFBsYXllciBuZXdUYXJnZXQgPSBmaW5kTmVhcmVzdFBsYXllcihjdXJyZW50VHJhY2tlcik7DQogICAgICAgICAgICAgICAgICAgIGlmIChuZXdUYXJnZXQgPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRyYWNrZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCB0YXJnZXRMb3N0TWVzc2FnZSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBuZXcgdGFyZ2V0IGhhcyBqYW1tZXIgYWN0aXZlDQogICAgICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uZ2V0SmFtbWVyKCkgIT0gbnVsbCAmJiBwbHVnaW4uZ2V0SmFtbWVyKCkuaXNKYW1tZXJBY3RpdmUobmV3VGFyZ2V0KSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRyYWNrZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBqYW1tZXJCbG9ja2VkTWVzc2FnZSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG8gdHJhY2sgbmV3IHRhcmdldCAocmVzdGFydCB0cmFja2luZyB3aXRoIG5ldyB0YXJnZXQpDQogICAgICAgICAgICAgICAgICAgIGNhbmNlbCgpOw0KICAgICAgICAgICAgICAgICAgICBzdGFydFRyYWNraW5nKGN1cnJlbnRUcmFja2VyLCBuZXdUYXJnZXQpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gQ09OVElOVU9VUyBKQU1NRVIgQ0hFQ0s6IENoZWNrIGlmIHRhcmdldCBhY3RpdmF0ZWQgamFtbWVyIGR1cmluZyB0cmFja2luZw0KICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uZ2V0SmFtbWVyKCkgIT0gbnVsbCAmJiBwbHVnaW4uZ2V0SmFtbWVyKCkuaXNKYW1tZXJBY3RpdmUoY3VycmVudFRhcmdldCkpIHsNCiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRyYWNrZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBqYW1tZXJCbG9ja2VkTWVzc2FnZSkpOw0KICAgICAgICAgICAgICAgICAgICBjYW5jZWwoKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBjb21wYXNzIGRpcmVjdGlvbg0KICAgICAgICAgICAgICAgIGN1cnJlbnRUcmFja2VyLnNldENvbXBhc3NUYXJnZXQoY3VycmVudFRhcmdldC5nZXRMb2NhdGlvbigpKTsNCg0KICAgICAgICAgICAgICAgIHRpbWVSZW1haW5pbmctLTsNCiAgICAgICAgICAgICAgICBpZiAodGltZVJlbWFpbmluZyA8PSAwKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IGNvbXBhc3MgdG8gd29ybGQgc3Bhd24NCiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRyYWNrZXIuc2V0Q29tcGFzc1RhcmdldChjdXJyZW50VHJhY2tlci5nZXRXb3JsZCgpLmdldFNwYXduTG9jYXRpb24oKSk7DQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUcmFja2VyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgdHJhY2tpbmdFeHBpcmVkTWVzc2FnZSkpOw0KICAgICAgICAgICAgICAgICAgICBjYW5jZWwoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEBPdmVycmlkZQ0KICAgICAgICAgICAgcHVibGljIHZvaWQgY2FuY2VsKCkgew0KICAgICAgICAgICAgICAgIHN1cGVyLmNhbmNlbCgpOw0KICAgICAgICAgICAgICAgIGFjdGl2ZVRyYWNrZXJzLnJlbW92ZSh0cmFja2VyVVVJRCk7DQogICAgICAgICAgICAgICAgc3RvcEFjdGlvbkJhcih0cmFja2VyVVVJRCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0ucnVuVGFza1RpbWVyKHBsdWdpbiwgMEwsIDIwTCk7IC8vIFJ1biBldmVyeSBzZWNvbmQNCg0KICAgICAgICBhY3RpdmVUcmFja2Vycy5wdXQodHJhY2tlclVVSUQsIHRyYWNraW5nVGFzayk7DQoNCiAgICAgICAgLy8gU3RhcnQgYWN0aW9uIGJhciBjb3VudGRvd24NCiAgICAgICAgc3RhcnRBY3Rpb25CYXIodHJhY2tlcik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU3RhcnRzIHRoZSBhY3Rpb24gYmFyIGNvdW50ZG93bg0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBzdGFydEFjdGlvbkJhcihQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIFVVSUQgcGxheWVyVVVJRCA9IHBsYXllci5nZXRVbmlxdWVJZCgpOw0KDQogICAgICAgIEJ1a2tpdFRhc2sgYWN0aW9uQmFyVGFzayA9IG5ldyBCdWtraXRSdW5uYWJsZSgpIHsNCiAgICAgICAgICAgIHByaXZhdGUgaW50IHRpbWVSZW1haW5pbmcgPSB0cmFja2luZ0R1cmF0aW9uOw0KDQogICAgICAgICAgICBAT3ZlcnJpZGUNCiAgICAgICAgICAgIHB1YmxpYyB2b2lkIHJ1bigpIHsNCiAgICAgICAgICAgICAgICBQbGF5ZXIgY3VycmVudFBsYXllciA9IEJ1a2tpdC5nZXRQbGF5ZXIocGxheWVyVVVJRCk7DQogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQbGF5ZXIgPT0gbnVsbCB8fCAhY3VycmVudFBsYXllci5pc09ubGluZSgpKSB7DQogICAgICAgICAgICAgICAgICAgIGNhbmNlbCgpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKHRpbWVSZW1haW5pbmcgPD0gMCB8fCAhYWN0aXZlVHJhY2tlcnMuY29udGFpbnNLZXkocGxheWVyVVVJRCkpIHsNCiAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvLyBTZW5kIGFjdGlvbiBiYXIgbWVzc2FnZQ0KICAgICAgICAgICAgICAgIFN0cmluZyBtZXNzYWdlID0gYWN0aW9uQmFyTWVzc2FnZS5yZXBsYWNlKCIldGltZSUiLCBTdHJpbmcudmFsdWVPZih0aW1lUmVtYWluaW5nKSk7DQogICAgICAgICAgICAgICAgc2VuZEFjdGlvbkJhcihjdXJyZW50UGxheWVyLCBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIG1lc3NhZ2UpKTsNCg0KICAgICAgICAgICAgICAgIHRpbWVSZW1haW5pbmctLTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgQE92ZXJyaWRlDQogICAgICAgICAgICBwdWJsaWMgdm9pZCBjYW5jZWwoKSB7DQogICAgICAgICAgICAgICAgc3VwZXIuY2FuY2VsKCk7DQogICAgICAgICAgICAgICAgYWN0aW9uQmFyVGFza3MucmVtb3ZlKHBsYXllclVVSUQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LnJ1blRhc2tUaW1lcihwbHVnaW4sIDBMLCAyMEwpOw0KDQogICAgICAgIGFjdGlvbkJhclRhc2tzLnB1dChwbGF5ZXJVVUlELCBhY3Rpb25CYXJUYXNrKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZW5kcyBhbiBhY3Rpb24gYmFyIG1lc3NhZ2UgdG8gYSBwbGF5ZXIgLy8gbm90ZTogU2VuZHMgYWN0aW9uIGJhciBtZXNzYWdlIHVzaW5nIFByb3RvY29sTGliIGZvciBjcm9zcy12ZXJzaW9uIGNvbXBhdGliaWxpdHkNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgc2VuZEFjdGlvbkJhcihQbGF5ZXIgcGxheWVyLCBTdHJpbmcgbWVzc2FnZSkgew0KICAgICAgICBQcm90b2NvbE1hbmFnZXIgcHJvdG9jb2xNYW5hZ2VyID0gUHJvdG9jb2xMaWJyYXJ5LmdldFByb3RvY29sTWFuYWdlcigpOw0KICAgICAgICBQYWNrZXRDb250YWluZXIgcGFja2V0ID0gcHJvdG9jb2xNYW5hZ2VyLmNyZWF0ZVBhY2tldChQYWNrZXRUeXBlLlBsYXkuU2VydmVyLkNIQVQpOw0KICAgICAgICBwYWNrZXQuZ2V0Q2hhdENvbXBvbmVudHMoKS53cml0ZSgwLCBXcmFwcGVkQ2hhdENvbXBvbmVudC5mcm9tVGV4dChtZXNzYWdlKSk7DQogICAgICAgIHBhY2tldC5nZXRCeXRlcygpLndyaXRlKDAsIChieXRlKSAyKTsNCg0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgcHJvdG9jb2xNYW5hZ2VyLnNlbmRTZXJ2ZXJQYWNrZXQocGxheWVyLCBwYWNrZXQpOw0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKG1lc3NhZ2UpOw0KICAgICAgICB9DQogICAgfQ0KDQoNCiAgICAvKioNCiAgICAgKiBTdG9wcyB0cmFja2luZyBmb3IgYSBwbGF5ZXINCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgc3RvcFRyYWNraW5nKFVVSUQgcGxheWVyVVVJRCkgew0KICAgICAgICBCdWtraXRUYXNrIHRhc2sgPSBhY3RpdmVUcmFja2Vycy5yZW1vdmUocGxheWVyVVVJRCk7DQogICAgICAgIGlmICh0YXNrICE9IG51bGwpIHsNCiAgICAgICAgICAgIHRhc2suY2FuY2VsKCk7DQogICAgICAgIH0NCiAgICAgICAgc3RvcEFjdGlvbkJhcihwbGF5ZXJVVUlEKTsNCg0KICAgICAgICAvLyBSZXNldCBjb21wYXNzIHRvIHdvcmxkIHNwYXduDQogICAgICAgIFBsYXllciBwbGF5ZXIgPSBCdWtraXQuZ2V0UGxheWVyKHBsYXllclVVSUQpOw0KICAgICAgICBpZiAocGxheWVyICE9IG51bGwgJiYgcGxheWVyLmlzT25saW5lKCkpIHsNCiAgICAgICAgICAgIHBsYXllci5zZXRDb21wYXNzVGFyZ2V0KHBsYXllci5nZXRXb3JsZCgpLmdldFNwYXduTG9jYXRpb24oKSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTdG9wcyBhY3Rpb24gYmFyIGZvciBhIHBsYXllcg0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBzdG9wQWN0aW9uQmFyKFVVSUQgcGxheWVyVVVJRCkgew0KICAgICAgICBCdWtraXRUYXNrIHRhc2sgPSBhY3Rpb25CYXJUYXNrcy5yZW1vdmUocGxheWVyVVVJRCk7DQogICAgICAgIGlmICh0YXNrICE9IG51bGwpIHsNCiAgICAgICAgICAgIHRhc2suY2FuY2VsKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDbGVhbiB1cCB3aGVuIHBsdWdpbiBkaXNhYmxlcw0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGNsZWFudXAoKSB7DQogICAgICAgIGZvciAoQnVra2l0VGFzayB0YXNrIDogYWN0aXZlVHJhY2tlcnMudmFsdWVzKCkpIHsNCiAgICAgICAgICAgIHRhc2suY2FuY2VsKCk7DQogICAgICAgIH0NCiAgICAgICAgZm9yIChCdWtraXRUYXNrIHRhc2sgOiBhY3Rpb25CYXJUYXNrcy52YWx1ZXMoKSkgew0KICAgICAgICAgICAgdGFzay5jYW5jZWwoKTsNCiAgICAgICAgfQ0KICAgICAgICBhY3RpdmVUcmFja2Vycy5jbGVhcigpOw0KICAgICAgICBhY3Rpb25CYXJUYXNrcy5jbGVhcigpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrIGlmIGEgcGxheWVyIGlzIGN1cnJlbnRseSB0cmFja2luZw0KICAgICAqLw0KICAgIHB1YmxpYyBib29sZWFuIGlzVHJhY2tpbmcoUGxheWVyIHBsYXllcikgew0KICAgICAgICByZXR1cm4gYWN0aXZlVHJhY2tlcnMuY29udGFpbnNLZXkocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIE1hbnVhbGx5IHN0b3AgdHJhY2tpbmcgZm9yIGEgcGxheWVyICh1c2VmdWwgZm9yIG90aGVyIHBsdWdpbnMgb3IgY29tbWFuZHMpDQogICAgICovDQogICAgcHVibGljIHZvaWQgc3RvcFRyYWNraW5nKFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgc3RvcFRyYWNraW5nKHBsYXllci5nZXRVbmlxdWVJZCgpKTsNCiAgICB9DQoNCiAgICAvLyBHZXR0ZXJzIGZvciBjb25maWd1cmF0aW9uIHZhbHVlcyAodXNlZnVsIGZvciBvdGhlciBjbGFzc2VzKQ0KICAgIHB1YmxpYyBpbnQgZ2V0TWF4VXNlcygpIHsgcmV0dXJuIG1heFVzZXM7IH0NCiAgICBwdWJsaWMgZG91YmxlIGdldFNlYXJjaFJhZGl1cygpIHsgcmV0dXJuIHNlYXJjaFJhZGl1czsgfQ0KICAgIHB1YmxpYyBpbnQgZ2V0VHJhY2tpbmdEdXJhdGlvbigpIHsgcmV0dXJuIHRyYWNraW5nRHVyYXRpb247IH0NCiAgICBwdWJsaWMgU3RyaW5nIGdldEphbW1lckJsb2NrZWRNZXNzYWdlKCkgeyByZXR1cm4gamFtbWVyQmxvY2tlZE1lc3NhZ2U7IH0NCn0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy9JdGVtcy9VQVYuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDMwMDQzIDE1MDI2MDYyNjYyIDAxNTQ1MQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMuSXRlbXM7DQoNCmltcG9ydCBvcmcuYnVra2l0LkJ1a2tpdDsNCmltcG9ydCBvcmcuYnVra2l0LkNoYXRDb2xvcjsNCmltcG9ydCBvcmcuYnVra2l0Lk1hdGVyaWFsOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LkV2ZW50SGFuZGxlcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50Lkxpc3RlbmVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQucGxheWVyLlBsYXllckludGVyYWN0RXZlbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5ibG9jay5BY3Rpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbVN0YWNrOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lm1ldGEuSXRlbU1ldGE7DQppbXBvcnQgb3JnLmJ1a2tpdC5wb3Rpb24uUG90aW9uRWZmZWN0Ow0KaW1wb3J0IG9yZy5idWtraXQucG90aW9uLlBvdGlvbkVmZmVjdFR5cGU7DQppbXBvcnQgb3JnLmJ1a2tpdC5zY2hlZHVsZXIuQnVra2l0UnVubmFibGU7DQppbXBvcnQgb3JnLmJ1a2tpdC5zY2hlZHVsZXIuQnVra2l0VGFzazsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkJvdW50aWVzUGx1czsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLkV2ZW50TWFuYWdlcjsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlZlcnNpb25VdGlsczsNCmltcG9ydCBqYXZhLnV0aWwuKjsNCg0KcHVibGljIGNsYXNzIFVBViBpbXBsZW1lbnRzIExpc3RlbmVyIHsNCg0KICAgIHByaXZhdGUgZmluYWwgQm91bnRpZXNQbHVzIHBsdWdpbjsNCiAgICBwcml2YXRlIGZpbmFsIE1hcDxVVUlELCBCdWtraXRUYXNrPiBhY3RpdmVVQVZzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIFNldDxVVUlEPj4gZ2xvd2luZ1RhcmdldHMgPSBuZXcgSGFzaE1hcDw+KCk7DQoNCiAgICBwcml2YXRlIGludCBtYXhVc2VzOw0KICAgIHByaXZhdGUgZG91YmxlIHNlYXJjaFJhZGl1czsNCiAgICBwcml2YXRlIGludCBlZmZlY3REdXJhdGlvbjsNCiAgICBwcml2YXRlIFN0cmluZyB1YXZOYW1lOw0KICAgIHByaXZhdGUgTGlzdDxTdHJpbmc+IHVhdkxvcmU7DQogICAgcHJpdmF0ZSBTdHJpbmcgbm9UYXJnZXRNZXNzYWdlOw0KICAgIHByaXZhdGUgU3RyaW5nIHVhdlN0YXJ0TWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyB1YXZFeHBpcmVkTWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyBpdGVtSWRlbnRpZmllcjsNCiAgICBwcml2YXRlIFN0cmluZyBhbHJlYWR5QWN0aXZlTWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyB2ZXJzaW9uTm90U3VwcG9ydGVkTWVzc2FnZTsNCiAgICBwcml2YXRlIFN0cmluZyB0YXJnZXRGb3VuZE1lc3NhZ2U7DQogICAgcHJpdmF0ZSBTdHJpbmcgZWZmZWN0RXhwaXJlZE1lc3NhZ2U7DQoNCiAgICAvKioNCiAgICAgKiBJbml0aWFsaXplcyB0aGUgVUFWIHN5c3RlbQ0KICAgICAqIC8vIG5vdGU6IFNldHMgdXAgY29uZmlndXJhdGlvbiBhbmQgcmVnaXN0ZXJzIGxpc3RlbmVyIGlmIGdsb3dpbmcgZWZmZWN0IGlzIHN1cHBvcnRlZA0KICAgICAqLw0KICAgIHB1YmxpYyBVQVYoQm91bnRpZXNQbHVzIHBsdWdpbiwgRXZlbnRNYW5hZ2VyIGV2ZW50TWFuYWdlcikgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICAgICAgbG9hZENvbmZpZ3VyYXRpb24oKTsNCg0KICAgICAgICBpZiAoVmVyc2lvblV0aWxzLnN1cHBvcnRzR2xvd2luZ0VmZmVjdCgpKSB7DQogICAgICAgICAgICBldmVudE1hbmFnZXIucmVnaXN0ZXIodGhpcyk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiVUFWIGRpc2FibGVkIC0gcmVxdWlyZXMgTWluZWNyYWZ0IDEuOSsgZm9yIGdsb3cgZWZmZWN0Iik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgbG9hZENvbmZpZ3VyYXRpb24oKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGl0ZW1zQ29uZmlnID0gcGx1Z2luLmdldEl0ZW1zQ29uZmlnKCk7DQoNCiAgICAgICAgdGhpcy5tYXhVc2VzID0gaXRlbXNDb25maWcuZ2V0SW50KCJ1YXYubWF4LXVzZXMiLCAzKTsNCiAgICAgICAgdGhpcy5zZWFyY2hSYWRpdXMgPSBpdGVtc0NvbmZpZy5nZXREb3VibGUoInVhdi5zZWFyY2gtcmFkaXVzIiwgMTAwLjApOw0KICAgICAgICB0aGlzLmVmZmVjdER1cmF0aW9uID0gaXRlbXNDb25maWcuZ2V0SW50KCJ1YXYuZWZmZWN0LWR1cmF0aW9uIiwgMzApOw0KICAgICAgICB0aGlzLnVhdk5hbWUgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoInVhdi5pdGVtLW5hbWUiLCAiJjYmbFVBViBTY2FubmVyIik7DQogICAgICAgIHRoaXMudWF2TG9yZSA9IGl0ZW1zQ29uZmlnLmdldFN0cmluZ0xpc3QoInVhdi5pdGVtLWxvcmUiKTsNCiAgICAgICAgdGhpcy5ub1RhcmdldE1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoInVhdi5tZXNzYWdlcy5uby10YXJnZXQiLCAiJmNObyBib3VudHkgdGFyZ2V0cyBmb3VuZCB3aXRoaW4gcmFuZ2UhIik7DQogICAgICAgIHRoaXMudWF2U3RhcnRNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJ1YXYubWVzc2FnZXMudWF2LXN0YXJ0IiwgIiZhVUFWIGRlcGxveWVkISBCb3VudHkgdGFyZ2V0cyBhcmUgbm93IGdsb3dpbmcuIik7DQogICAgICAgIHRoaXMudWF2RXhwaXJlZE1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoInVhdi5tZXNzYWdlcy51YXYtZXhwaXJlZCIsICImY1lvdXIgVUFWIGhhcyBydW4gb3V0IG9mIHVzZXMgYW5kIHdhcyByZW1vdmVkISIpOw0KICAgICAgICB0aGlzLmFscmVhZHlBY3RpdmVNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJ1YXYubWVzc2FnZXMuYWxyZWFkeS1hY3RpdmUiLCAiJmNVQVYgaXMgYWxyZWFkeSBhY3RpdmUhIik7DQogICAgICAgIHRoaXMudmVyc2lvbk5vdFN1cHBvcnRlZE1lc3NhZ2UgPSBpdGVtc0NvbmZpZy5nZXRTdHJpbmcoInVhdi5tZXNzYWdlcy52ZXJzaW9uLW5vdC1zdXBwb3J0ZWQiLCAiJmNVQVYgcmVxdWlyZXMgTWluZWNyYWZ0IDEuOSBvciBoaWdoZXIhIik7DQogICAgICAgIHRoaXMudGFyZ2V0Rm91bmRNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJ1YXYubWVzc2FnZXMudGFyZ2V0LWZvdW5kIiwgIiZhQm91bnR5IHRhcmdldCBkZXRlY3RlZDogJmUldGFyZ2V0JSIpOw0KICAgICAgICB0aGlzLmVmZmVjdEV4cGlyZWRNZXNzYWdlID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJ1YXYubWVzc2FnZXMuZWZmZWN0LWV4cGlyZWQiLCAiJmVVQVYgZWZmZWN0IGhhcyBleHBpcmVkLiIpOw0KICAgICAgICB0aGlzLml0ZW1JZGVudGlmaWVyID0gaXRlbXNDb25maWcuZ2V0U3RyaW5nKCJ1YXYuaXRlbS1pZGVudGlmaWVyIiwgIlVBVl9TQ0FOTkVSX0lURU0iKTsNCg0KICAgICAgICBpZiAodWF2TG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIHVhdkxvcmUgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgICAgIHVhdkxvcmUuYWRkKCImN1JpZ2h0LWNsaWNrIHRvIGRlcGxveSBVQVYgc2Nhbm5lciIpOw0KICAgICAgICAgICAgdWF2TG9yZS5hZGQoIiY3d2l0aGluIGEgIiArIChpbnQpc2VhcmNoUmFkaXVzICsgIiBibG9jayByYWRpdXMiKTsNCiAgICAgICAgICAgIHVhdkxvcmUuYWRkKCImYyZsVXNlczogJmYldXNlcyUmYy8mZiVtYXhfdXNlcyUiKTsNCiAgICAgICAgICAgIHVhdkxvcmUuYWRkKCIiKTsNCiAgICAgICAgICAgIHVhdkxvcmUuYWRkKCImZUJvdW50eSB0YXJnZXRzIHdpbGwgZ2xvdyBmb3IiKTsNCiAgICAgICAgICAgIHVhdkxvcmUuYWRkKCImZSIgKyBlZmZlY3REdXJhdGlvbiArICIgc2Vjb25kcyB0aHJvdWdoIHdhbGxzIik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGEgbmV3IFVBViBpdGVtIHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdXNlcyAvLyBub3RlOiBDcmVhdGVzIGEgY29tcGFzcyBpdGVtIHdpdGggTkJUIHRhZ3MgZm9yIHR5cGUgYW5kIHVzZXMNCiAgICAgKi8NCiAgICBwdWJsaWMgSXRlbVN0YWNrIGNyZWF0ZVVBVkl0ZW0oaW50IHVzZXMpIHsNCiAgICAgICAgaWYgKCFWZXJzaW9uVXRpbHMuc3VwcG9ydHNHbG93aW5nRWZmZWN0KCkpIHJldHVybiBudWxsOw0KDQogICAgICAgIEl0ZW1TdGFjayB1YXYgPSBuZXcgSXRlbVN0YWNrKE1hdGVyaWFsLkNPTVBBU1MpOw0KICAgICAgICBJdGVtTWV0YSBtZXRhID0gdWF2LmdldEl0ZW1NZXRhKCk7DQoNCiAgICAgICAgaWYgKG1ldGEgIT0gbnVsbCkgew0KICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHVhdk5hbWUpKTsNCiAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICBmb3IgKFN0cmluZyBsaW5lIDogdWF2TG9yZSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBwcm9jZXNzZWRMaW5lID0gbGluZS5yZXBsYWNlKCIldXNlcyUiLCBTdHJpbmcudmFsdWVPZih1c2VzKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlbWF4X3VzZXMlIiwgU3RyaW5nLnZhbHVlT2YobWF4VXNlcykpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJXJhZGl1cyUiLCBTdHJpbmcudmFsdWVPZigoaW50KXNlYXJjaFJhZGl1cykpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJWR1cmF0aW9uJSIsIFN0cmluZy52YWx1ZU9mKGVmZmVjdER1cmF0aW9uKSk7DQogICAgICAgICAgICAgICAgbG9yZS5hZGQoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBwcm9jZXNzZWRMaW5lKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBtZXRhLnNldExvcmUobG9yZSk7DQogICAgICAgICAgICB1YXYuc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgICAgICB1YXYgPSBWZXJzaW9uVXRpbHMuc2V0TkJUU3RyaW5nKHVhdiwgIml0ZW1fdHlwZSIsICJ1YXYiKTsNCiAgICAgICAgICAgIHVhdiA9IFZlcnNpb25VdGlscy5zZXROQlRJbnRlZ2VyKHVhdiwgInVzZXMiLCB1c2VzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB1YXY7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIGFuIGl0ZW0gaXMgYSBVQVYgaXRlbSAvLyBub3RlOiBWZXJpZmllcyBpdGVtIHR5cGUgdXNpbmcgTkJUIHRhZw0KICAgICAqLw0KICAgIHB1YmxpYyBib29sZWFuIGlzVUFWSXRlbShJdGVtU3RhY2sgaXRlbSkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0VHlwZSgpICE9IE1hdGVyaWFsLkNPTVBBU1MgfHwgaXRlbS5nZXRJdGVtTWV0YSgpID09IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gInVhdiIuZXF1YWxzKFZlcnNpb25VdGlscy5nZXROQlRTdHJpbmcoaXRlbSwgIml0ZW1fdHlwZSIpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSByZW1haW5pbmcgdXNlcyBmcm9tIGEgVUFWIGl0ZW0gLy8gbm90ZTogUmV0cmlldmVzIHVzZXMgZnJvbSBOQlQgdGFnDQogICAgICovDQogICAgcHJpdmF0ZSBpbnQgZ2V0VXNlc0Zyb21JdGVtKEl0ZW1TdGFjayBpdGVtKSB7DQogICAgICAgIGlmICghaXNVQVZJdGVtKGl0ZW0pKSByZXR1cm4gMDsNCiAgICAgICAgSW50ZWdlciB1c2VzID0gVmVyc2lvblV0aWxzLmdldE5CVEludGVnZXIoaXRlbSwgInVzZXMiKTsNCiAgICAgICAgcmV0dXJuIHVzZXMgIT0gbnVsbCA/IHVzZXMgOiAwOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFVwZGF0ZXMgdGhlIFVBViBpdGVtIHdpdGggbmV3IHVzZXMgY291bnQgLy8gbm90ZTogQ3JlYXRlcyBhIG5ldyBpdGVtIHdpdGggdXBkYXRlZCB1c2VzIGluIE5CVCBhbmQgbG9yZQ0KICAgICAqLw0KICAgIHByaXZhdGUgSXRlbVN0YWNrIHVwZGF0ZVVBVlVzZXMoSXRlbVN0YWNrIGl0ZW0sIGludCBuZXdVc2VzKSB7DQogICAgICAgIGlmICghaXNVQVZJdGVtKGl0ZW0pKSByZXR1cm4gaXRlbTsNCiAgICAgICAgcmV0dXJuIGNyZWF0ZVVBVkl0ZW0obmV3VXNlcyk7DQogICAgfQ0KDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uUGxheWVySW50ZXJhY3QoUGxheWVySW50ZXJhY3RFdmVudCBldmVudCkgew0KICAgICAgICBpZiAoZXZlbnQuZ2V0QWN0aW9uKCkgIT0gQWN0aW9uLlJJR0hUX0NMSUNLX0FJUiAmJiBldmVudC5nZXRBY3Rpb24oKSAhPSBBY3Rpb24uUklHSFRfQ0xJQ0tfQkxPQ0spIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIFBsYXllciBwbGF5ZXIgPSBldmVudC5nZXRQbGF5ZXIoKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBldmVudC5nZXRJdGVtKCk7DQoNCiAgICAgICAgaWYgKCFpc1VBVkl0ZW0oaXRlbSkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGV2ZW50LnNldENhbmNlbGxlZCh0cnVlKTsNCg0KICAgICAgICBpZiAoIVZlcnNpb25VdGlscy5zdXBwb3J0c0dsb3dpbmdFZmZlY3QoKSkgew0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgdmVyc2lvbk5vdFN1cHBvcnRlZE1lc3NhZ2UpKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChhY3RpdmVVQVZzLmNvbnRhaW5zS2V5KHBsYXllci5nZXRVbmlxdWVJZCgpKSkgew0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgYWxyZWFkeUFjdGl2ZU1lc3NhZ2UpKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGludCBjdXJyZW50VXNlcyA9IGdldFVzZXNGcm9tSXRlbShpdGVtKTsNCiAgICAgICAgaWYgKGN1cnJlbnRVc2VzIDw9IDApIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHVhdkV4cGlyZWRNZXNzYWdlKSk7DQogICAgICAgICAgICBwbGF5ZXIuZ2V0SW52ZW50b3J5KCkucmVtb3ZlKGl0ZW0pOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgTGlzdDxQbGF5ZXI+IGJvdW50eVRhcmdldHMgPSBmaW5kQm91bnR5VGFyZ2V0cyhwbGF5ZXIpOw0KICAgICAgICBpZiAoYm91bnR5VGFyZ2V0cy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIG5vVGFyZ2V0TWVzc2FnZSkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgc3RhcnRVQVYocGxheWVyLCBib3VudHlUYXJnZXRzKTsNCg0KICAgICAgICBpbnQgbmV3VXNlcyA9IGN1cnJlbnRVc2VzIC0gMTsNCiAgICAgICAgaWYgKG5ld1VzZXMgPD0gMCkgew0KICAgICAgICAgICAgcGxheWVyLmdldEludmVudG9yeSgpLnJlbW92ZShpdGVtKTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHVhdkV4cGlyZWRNZXNzYWdlKSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBJdGVtU3RhY2sgdXBkYXRlZEl0ZW0gPSB1cGRhdGVVQVZVc2VzKGl0ZW0sIG5ld1VzZXMpOw0KICAgICAgICAgICAgaW50IHNsb3QgPSBwbGF5ZXIuZ2V0SW52ZW50b3J5KCkuZ2V0SGVsZEl0ZW1TbG90KCk7DQogICAgICAgICAgICBwbGF5ZXIuZ2V0SW52ZW50b3J5KCkuc2V0SXRlbShzbG90LCB1cGRhdGVkSXRlbSk7DQogICAgICAgIH0NCg0KICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCB1YXZTdGFydE1lc3NhZ2UpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBGaW5kcyBwbGF5ZXJzIHdpdGggYm91bnRpZXMgd2l0aGluIHRoZSBzZWFyY2ggcmFkaXVzDQogICAgICogLy8gbm90ZTogUmV0dXJucyBhIGxpc3Qgb2YgdmFsaWQgYm91bnR5IHRhcmdldHMsIHJlc3BlY3RpbmcgamFtbWVycw0KICAgICAqLw0KICAgIHByaXZhdGUgTGlzdDxQbGF5ZXI+IGZpbmRCb3VudHlUYXJnZXRzKFBsYXllciBzY2FubmVyKSB7DQogICAgICAgIExpc3Q8UGxheWVyPiB0YXJnZXRzID0gbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgZm9yIChQbGF5ZXIgdGFyZ2V0IDogQnVra2l0LmdldE9ubGluZVBsYXllcnMoKSkgew0KICAgICAgICAgICAgaWYgKHRhcmdldC5lcXVhbHMoc2Nhbm5lcikpIGNvbnRpbnVlOw0KDQogICAgICAgICAgICBpZiAoIXBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuaGFzQm91bnR5KHRhcmdldC5nZXRVbmlxdWVJZCgpKSkgY29udGludWU7DQoNCiAgICAgICAgICAgIGlmICghdGFyZ2V0LmdldFdvcmxkKCkuZXF1YWxzKHNjYW5uZXIuZ2V0V29ybGQoKSkpIGNvbnRpbnVlOw0KDQogICAgICAgICAgICBpZiAoc2Nhbm5lci5nZXRMb2NhdGlvbigpLmRpc3RhbmNlKHRhcmdldC5nZXRMb2NhdGlvbigpKSA+IHNlYXJjaFJhZGl1cykgY29udGludWU7DQoNCiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRhcmdldCBoYXMgYW4gYWN0aXZlIGphbW1lcg0KICAgICAgICAgICAgaWYgKHBsdWdpbi5nZXRKYW1tZXIoKSAhPSBudWxsICYmIHBsdWdpbi5nZXRKYW1tZXIoKS5pc0Jsb2NrZWQodGFyZ2V0KSkgew0KICAgICAgICAgICAgICAgIHNjYW5uZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBwbHVnaW4uZ2V0SmFtbWVyKCkuZ2V0SmFtbWVyQmxvY2tlZE1lc3NhZ2UoKSkpOw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB0YXJnZXRzLmFkZCh0YXJnZXQpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHRhcmdldHM7DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIHN0YXJ0VUFWKFBsYXllciBzY2FubmVyLCBMaXN0PFBsYXllcj4gdGFyZ2V0cykgew0KICAgICAgICBVVUlEIHNjYW5uZXJVVUlEID0gc2Nhbm5lci5nZXRVbmlxdWVJZCgpOw0KICAgICAgICBTZXQ8VVVJRD4gdGFyZ2V0VVVJRHMgPSBuZXcgSGFzaFNldDw+KCk7DQoNCiAgICAgICAgZm9yIChQbGF5ZXIgdGFyZ2V0IDogdGFyZ2V0cykgew0KICAgICAgICAgICAgdGFyZ2V0VVVJRHMuYWRkKHRhcmdldC5nZXRVbmlxdWVJZCgpKTsNCiAgICAgICAgICAgIGFwcGx5R2xvd0VmZmVjdCh0YXJnZXQpOw0KICAgICAgICAgICAgU3RyaW5nIG1lc3NhZ2UgPSB0YXJnZXRGb3VuZE1lc3NhZ2UucmVwbGFjZSgiJXRhcmdldCUiLCB0YXJnZXQuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgIHNjYW5uZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKSk7DQogICAgICAgIH0NCg0KICAgICAgICBnbG93aW5nVGFyZ2V0cy5wdXQoc2Nhbm5lclVVSUQsIHRhcmdldFVVSURzKTsNCg0KICAgICAgICBCdWtraXRUYXNrIHRhc2sgPSBuZXcgQnVra2l0UnVubmFibGUoKSB7DQogICAgICAgICAgICBAT3ZlcnJpZGUNCiAgICAgICAgICAgIHB1YmxpYyB2b2lkIHJ1bigpIHsNCiAgICAgICAgICAgICAgICBlbmRVQVYoc2Nhbm5lclVVSUQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LnJ1blRhc2tMYXRlcihwbHVnaW4sIGVmZmVjdER1cmF0aW9uICogMjBMKTsNCg0KICAgICAgICBhY3RpdmVVQVZzLnB1dChzY2FubmVyVVVJRCwgdGFzayk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIGFwcGx5R2xvd0VmZmVjdChQbGF5ZXIgdGFyZ2V0KSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBQb3Rpb25FZmZlY3RUeXBlIGdsb3dUeXBlID0gUG90aW9uRWZmZWN0VHlwZS5nZXRCeU5hbWUoIkdMT1dJTkciKTsNCiAgICAgICAgICAgIGlmIChnbG93VHlwZSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgdGFyZ2V0LmFkZFBvdGlvbkVmZmVjdChuZXcgUG90aW9uRWZmZWN0KGdsb3dUeXBlLCBlZmZlY3REdXJhdGlvbiAqIDIwLCAwLCBmYWxzZSwgZmFsc2UpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJGYWlsZWQgdG8gYXBwbHkgZ2xvdyBlZmZlY3Q6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgZW5kVUFWKFVVSUQgc2Nhbm5lclVVSUQpIHsNCiAgICAgICAgU2V0PFVVSUQ+IHRhcmdldHMgPSBnbG93aW5nVGFyZ2V0cy5yZW1vdmUoc2Nhbm5lclVVSUQpOw0KICAgICAgICBpZiAodGFyZ2V0cyAhPSBudWxsKSB7DQogICAgICAgICAgICBmb3IgKFVVSUQgdGFyZ2V0VVVJRCA6IHRhcmdldHMpIHsNCiAgICAgICAgICAgICAgICBQbGF5ZXIgdGFyZ2V0ID0gQnVra2l0LmdldFBsYXllcih0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgUG90aW9uRWZmZWN0VHlwZSBnbG93VHlwZSA9IFBvdGlvbkVmZmVjdFR5cGUuZ2V0QnlOYW1lKCJHTE9XSU5HIik7DQogICAgICAgICAgICAgICAgICAgIGlmIChnbG93VHlwZSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQucmVtb3ZlUG90aW9uRWZmZWN0KGdsb3dUeXBlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIEJ1a2tpdFRhc2sgdGFzayA9IGFjdGl2ZVVBVnMucmVtb3ZlKHNjYW5uZXJVVUlEKTsNCiAgICAgICAgaWYgKHRhc2sgIT0gbnVsbCkgew0KICAgICAgICAgICAgdGFzay5jYW5jZWwoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIFBsYXllciBzY2FubmVyID0gQnVra2l0LmdldFBsYXllcihzY2FubmVyVVVJRCk7DQogICAgICAgIGlmIChzY2FubmVyICE9IG51bGwpIHsNCiAgICAgICAgICAgIHNjYW5uZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBlZmZlY3RFeHBpcmVkTWVzc2FnZSkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgY2xlYW51cCgpIHsNCiAgICAgICAgZm9yIChCdWtraXRUYXNrIHRhc2sgOiBhY3RpdmVVQVZzLnZhbHVlcygpKSB7DQogICAgICAgICAgICB0YXNrLmNhbmNlbCgpOw0KICAgICAgICB9DQogICAgICAgIGFjdGl2ZVVBVnMuY2xlYXIoKTsNCg0KICAgICAgICBmb3IgKFNldDxVVUlEPiB0YXJnZXRzIDogZ2xvd2luZ1RhcmdldHMudmFsdWVzKCkpIHsNCiAgICAgICAgICAgIGZvciAoVVVJRCB0YXJnZXRVVUlEIDogdGFyZ2V0cykgew0KICAgICAgICAgICAgICAgIFBsYXllciB0YXJnZXQgPSBCdWtraXQuZ2V0UGxheWVyKHRhcmdldFVVSUQpOw0KICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBQb3Rpb25FZmZlY3RUeXBlIGdsb3dUeXBlID0gUG90aW9uRWZmZWN0VHlwZS5nZXRCeU5hbWUoIkdMT1dJTkciKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGdsb3dUeXBlICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5yZW1vdmVQb3Rpb25FZmZlY3QoZ2xvd1R5cGUpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGdsb3dpbmdUYXJnZXRzLmNsZWFyKCk7DQogICAgfQ0KDQogICAgcHVibGljIGJvb2xlYW4gaGFzQWN0aXZlVUFWKFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgcmV0dXJuIGFjdGl2ZVVBVnMuY29udGFpbnNLZXkocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHN0b3BVQVYoUGxheWVyIHBsYXllcikgew0KICAgICAgICBlbmRVQVYocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgIH0NCg0KICAgIHB1YmxpYyBpbnQgZ2V0TWF4VXNlcygpIHsgcmV0dXJuIG1heFVzZXM7IH0NCiAgICBwdWJsaWMgZG91YmxlIGdldFNlYXJjaFJhZGl1cygpIHsgcmV0dXJuIHNlYXJjaFJhZGl1czsgfQ0KICAgIHB1YmxpYyBpbnQgZ2V0RWZmZWN0RHVyYXRpb24oKSB7IHJldHVybiBlZmZlY3REdXJhdGlvbjsgfQ0KfvbnkyNi9ib3VudGllc1BsdXMvR1VJcy9BZGRJdGVtc0dVSS5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDEyMjA3NCAxNTAyNjcwMzcwNCAwMTY2MTAAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcGFja2FnZSB0b255MjYuYm91bnRpZXNQbHVzLkdVSXM7DQoNCmltcG9ydCBuZXQubWRfNS5idW5nZWUuYXBpLmNoYXQuQmFzZUNvbXBvbmVudDsNCmltcG9ydCBvcmcuYnVra2l0LkJ1a2tpdDsNCg0KaW1wb3J0IGphdmEuaW8uRmlsZTsNCmltcG9ydCBqYXZhLnV0aWwuQXJyYXlzOw0KaW1wb3J0IG9yZy5idWtraXQuQ2hhdENvbG9yOw0KaW1wb3J0IG9yZy5idWtraXQuTWF0ZXJpYWw7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuRmlsZUNvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuWWFtbENvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuRXZlbnRIYW5kbGVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuTGlzdGVuZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5pbnZlbnRvcnkuSW52ZW50b3J5Q2xpY2tFdmVudDsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LmludmVudG9yeS5JbnZlbnRvcnlEcmFnRXZlbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5pbnZlbnRvcnkuSW52ZW50b3J5Q2xvc2VFdmVudDsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JbnZlbnRvcnk7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbVN0YWNrOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lm1ldGEuSXRlbU1ldGE7DQppbXBvcnQgb3JnLmJ1a2tpdC5lbmNoYW50bWVudHMuRW5jaGFudG1lbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbUZsYWc7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudGllc1BsdXM7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy5Cb3VudHlDcmVhdGlvblNlc3Npb247DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy5FdmVudE1hbmFnZXI7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy4qOw0KaW1wb3J0IG5ldC5tZF81LmJ1bmdlZS5hcGkuY2hhdC5UZXh0Q29tcG9uZW50Ow0KaW1wb3J0IG1lLmNsaXAucGxhY2Vob2xkZXJhcGkuUGxhY2Vob2xkZXJBUEk7DQoNCmltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7DQoNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLndyYXBwZXJzLlZlcnNpb25XcmFwcGVyOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMud3JhcHBlcnMuVmVyc2lvbldyYXBwZXJGYWN0b3J5Ow0KDQppbXBvcnQgamF2YS51dGlsLio7DQoNCnB1YmxpYyBjbGFzcyBBZGRJdGVtc0dVSSBpbXBsZW1lbnRzIExpc3RlbmVyIHsNCg0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBHVUlfVElUTEUgPSBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsICImNkFkZCBJdGVtcyB0byBCb3VudHkiKTsNCg0KICAgIC8vIFRyYWNrIGluc3RhbmNlcyB0byBwcmV2ZW50IG11bHRpcGxlIGxpc3RlbmVycw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIE1hcDxVVUlELCBBZGRJdGVtc0dVST4gYWN0aXZlSW5zdGFuY2VzID0gbmV3IEhhc2hNYXA8PigpOw0KDQogICAgLy8gRGVmaW5lIHByb3RlY3RlZCBzbG90cyB0aGF0IGNhbm5vdCBiZSBtb2RpZmllZCBieSBwbGF5ZXJzIChsb2FkZWQgZHluYW1pY2FsbHkpDQogICAgcHJpdmF0ZSBmaW5hbCBTZXQ8SW50ZWdlcj4gcHJvdGVjdGVkU2xvdHMgPSBuZXcgSGFzaFNldDw+KCk7DQoNCiAgICBwcml2YXRlIGZpbmFsIFNldDxNYXRlcmlhbD4gYmxhY2tsaXN0ZWRJdGVtczsgLy8gU3RvcmVzIGJsYWNrbGlzdGVkIG1hdGVyaWFscw0KDQogICAgLy8gVHJhY2sgb3JpZ2luYWwgaXRlbXMgc3RhdGUgZm9yIGVhY2ggcGxheWVyIHRvIGRldGVjdCBjaGFuZ2VzDQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgTWFwPFVVSUQsIExpc3Q8SXRlbVN0YWNrPj4gb3JpZ2luYWxJdGVtc1N0YXRlID0gbmV3IEhhc2hNYXA8PigpOw0KDQogICAgcHJpdmF0ZSBmaW5hbCBQbGF5ZXIgcGxheWVyOw0KICAgIHByaXZhdGUgZmluYWwgSW52ZW50b3J5IGludmVudG9yeTsNCg0KICAgIC8qKg0KICAgICAqIENvbnN0cnVjdHMgdGhlIEFkZEl0ZW1zR1VJIGZvciBhIHBsYXllcg0KICAgICAqIC8vIG5vdGU6IEluaXRpYWxpemVzIEdVSSwgbG9hZHMgYmxhY2tsaXN0LCBhbmQgcmVnaXN0ZXJzIGxpc3RlbmVycw0KICAgICAqLw0KICAgIHB1YmxpYyBBZGRJdGVtc0dVSShQbGF5ZXIgcGxheWVyLCBFdmVudE1hbmFnZXIgZXZlbnRNYW5hZ2VyKSB7DQogICAgICAgIHRoaXMucGxheWVyID0gcGxheWVyOw0KICAgICAgICB0aGlzLmludmVudG9yeSA9IEJ1a2tpdC5jcmVhdGVJbnZlbnRvcnkobnVsbCwgNTQsIEdVSV9USVRMRSk7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldEFkZEl0ZW1zR1VJQ29uZmlnKCk7DQogICAgICAgIEZpbGUgY29uZmlnRmlsZSA9IG5ldyBGaWxlKEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldERhdGFGb2xkZXIoKSwgIkdVSXMvQWRkSXRlbXNHVUkueW1sIik7DQoNCiAgICAgICAgLy8gVmVyaWZ5IGNvbmZpZ3VyYXRpb24gaW50ZWdyaXR5DQogICAgICAgIGlmICghY29uZmlnRmlsZS5leGlzdHMoKSB8fCBjb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oImJ1dHRvbnMiKSA9PSBudWxsKSB7DQogICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXREZWJ1Z01hbmFnZXIoKS5sb2dXYXJuaW5nKCJbREVCVUcgLSBBZGRJdGVtc0dVSV0gQWRkSXRlbXNHVUkueW1sIGlzIG1pc3Npbmcgb3IgaW52YWxpZCwgcmVsb2FkaW5nIGRlZmF1bHQiKTsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgaWYgKGNvbmZpZ0ZpbGUuZXhpc3RzKCkpIGNvbmZpZ0ZpbGUuZGVsZXRlKCk7IC8vIFJlbW92ZSBpbnZhbGlkIGZpbGUNCiAgICAgICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5zYXZlUmVzb3VyY2UoIkdVSXMvQWRkSXRlbXNHVUkueW1sIiwgZmFsc2UpOyAvLyBDb3B5IGRlZmF1bHQNCiAgICAgICAgICAgICAgICBjb25maWcgPSBZYW1sQ29uZmlndXJhdGlvbi5sb2FkQ29uZmlndXJhdGlvbihjb25maWdGaWxlKTsNCiAgICAgICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiW0RFQlVHIC0gQWRkSXRlbXNHVUldIFJlbG9hZGVkIGRlZmF1bHQgQWRkSXRlbXNHVUkueW1sIik7DQogICAgICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldERlYnVnTWFuYWdlcigpLmxvZ1dhcm5pbmcoIltERUJVRyAtIEFkZEl0ZW1zR1VJXSBGYWlsZWQgdG8gcmVsb2FkIGRlZmF1bHQgQWRkSXRlbXNHVUkueW1sOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gTG9hZCBibGFja2xpc3RlZCBpdGVtcyBmcm9tIGNvbmZpZy55bWwNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWFpbkNvbmZpZyA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldENvbmZpZygpOw0KICAgICAgICB0aGlzLmJsYWNrbGlzdGVkSXRlbXMgPSBuZXcgSGFzaFNldDw+KCk7DQogICAgICAgIExpc3Q8U3RyaW5nPiBibGFja2xpc3QgPSBtYWluQ29uZmlnLmdldFN0cmluZ0xpc3QoImJsYWNrbGlzdGVkLWl0ZW1zIik7DQogICAgICAgIGZvciAoU3RyaW5nIG1hdGVyaWFsTmFtZSA6IGJsYWNrbGlzdCkgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBNYXRlcmlhbCBtYXRlcmlhbCA9IE1hdGVyaWFsLnZhbHVlT2YobWF0ZXJpYWxOYW1lLnRvVXBwZXJDYXNlKCkpOw0KICAgICAgICAgICAgICAgIGJsYWNrbGlzdGVkSXRlbXMuYWRkKG1hdGVyaWFsKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHIC0gQWRkSXRlbXNHVUldIEludmFsaWQgbWF0ZXJpYWwgaW4gYmxhY2tsaXN0ZWQtaXRlbXM6ICIgKyBtYXRlcmlhbE5hbWUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gTG9hZCBwcm90ZWN0ZWQgc2xvdHMgZnJvbSBBZGRJdGVtc0dVSS55bWwNCiAgICAgICAgTGlzdDxJbnRlZ2VyPiBib3JkZXJTbG90cyA9IGNvbmZpZy5nZXRJbnRlZ2VyTGlzdCgiYm9yZGVyLnNsb3RzIik7DQogICAgICAgIGlmIChib3JkZXJTbG90cy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGJvcmRlclNsb3RzID0gQXJyYXlzLmFzTGlzdCgwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxNywgMTgsIDI2LCAyNywgMzUsIDM2LCA0NCwgNDUsIDQ2LCA0OCwgNTAsIDUyLCA1Myk7DQogICAgICAgIH0NCiAgICAgICAgcHJvdGVjdGVkU2xvdHMuYWRkQWxsKGJvcmRlclNsb3RzKTsNCiAgICAgICAgcHJvdGVjdGVkU2xvdHMuYWRkKGNvbmZpZy5nZXRJbnQoImJ1dHRvbnMuY2FuY2VsLnNsb3QiLCA0NykpOw0KICAgICAgICBwcm90ZWN0ZWRTbG90cy5hZGQoY29uZmlnLmdldEludCgiYnV0dG9ucy5pbmZvLnNsb3QiLCA0OSkpOw0KICAgICAgICBwcm90ZWN0ZWRTbG90cy5hZGQoY29uZmlnLmdldEludCgiYnV0dG9ucy5jb25maXJtLnNsb3QiLCA1MSkpOw0KDQogICAgICAgIGNsZWFudXAocGxheWVyKTsNCiAgICAgICAgYWN0aXZlSW5zdGFuY2VzLnB1dChwbGF5ZXIuZ2V0VW5pcXVlSWQoKSwgdGhpcyk7DQogICAgICAgIGV2ZW50TWFuYWdlci5yZWdpc3Rlcih0aGlzKTsNCiAgICAgICAgaW5pdGlhbGl6ZUdVSSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFZhbGlkYXRlcyB0aGUgdG90YWwgYm91bnR5IHZhbHVlIGFnYWluc3QgbWF4LWJvdW50eS1hbW91bnQgLy8gbm90ZTogRW5zdXJlcyBtb25leSBhbmQgaXRlbSB2YWx1ZXMgZG8gbm90IGV4Y2VlZCBjb25maWd1cmVkIG1heGltdW0gd2hlbiBjb25maXJtaW5nIGl0ZW1zDQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIHZhbGlkYXRlVG90YWxCb3VudHlWYWx1ZShQbGF5ZXIgcGxheWVyLCBJbnZlbnRvcnkgaW52ZW50b3J5LCBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbikgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRDb25maWcoKTsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRNZXNzYWdlc0NvbmZpZygpOw0KICAgICAgICBkb3VibGUgbWF4Qm91bnR5QW1vdW50ID0gY29uZmlnLmdldERvdWJsZSgibWF4LWJvdW50eS1hbW91bnQiLCAxMDAwMDAwLjApOw0KICAgICAgICBkb3VibGUgdG90YWxNb25leSA9IHNlc3Npb24uZ2V0TW9uZXkoKTsNCiAgICAgICAgZG91YmxlIHRvdGFsSXRlbVZhbHVlID0gMC4wOw0KDQogICAgICAgIEl0ZW1WYWx1ZUNhbGN1bGF0b3IgY2FsY3VsYXRvciA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldEl0ZW1WYWx1ZUNhbGN1bGF0b3IoKTsNCiAgICAgICAgZm9yIChpbnQgc2xvdCA9IDA7IHNsb3QgPCBpbnZlbnRvcnkuZ2V0U2l6ZSgpOyBzbG90KyspIHsNCiAgICAgICAgICAgIGlmICghcHJvdGVjdGVkU2xvdHMuY29udGFpbnMoc2xvdCkpIHsNCiAgICAgICAgICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IGludmVudG9yeS5nZXRJdGVtKHNsb3QpOw0KICAgICAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgaXRlbS5nZXRUeXBlKCkgIT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICAgICAgICAgIHRvdGFsSXRlbVZhbHVlICs9IGNhbGN1bGF0b3IuY2FsY3VsYXRlSXRlbVZhbHVlKGl0ZW0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGRvdWJsZSB0b3RhbFZhbHVlID0gdG90YWxNb25leSArIHRvdGFsSXRlbVZhbHVlOw0KICAgICAgICBpZiAodG90YWxWYWx1ZSA+IG1heEJvdW50eUFtb3VudCkgew0KICAgICAgICAgICAgU3RyaW5nIGVycm9yTWVzc2FnZSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LWludmFsaWQtYW1vdW50IiwgIiZjVG90YWwgYm91bnR5IHZhbHVlIGNhbm5vdCBleGNlZWQgJCVib3VudGllc3BsdXNfbWF4X2Ftb3VudCUhIik7DQogICAgICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKS5wbGF5ZXIocGxheWVyKS53aXRoQW1vdW50KG1heEJvdW50eUFtb3VudCk7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KGVycm9yTWVzc2FnZS5yZXBsYWNlKCIlcHJlZml4JSIsIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygicHJlZml4IiwgIiIpKSwgY29udGV4dCkpOw0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiBhbiBpdGVtIGlzIGJsYWNrbGlzdGVkIC8vIG5vdGU6IFJldHVybnMgdHJ1ZSBpZiB0aGUgaXRlbSdzIG1hdGVyaWFsIG9yIE5CVCB0YWdzIG1hdGNoIHRoZSBibGFja2xpc3QNCiAgICAgKi8NCiAgICBwcml2YXRlIGJvb2xlYW4gaXNCbGFja2xpc3RlZChJdGVtU3RhY2sgaXRlbSkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgIGlmIChibGFja2xpc3RlZEl0ZW1zLmNvbnRhaW5zKGl0ZW0uZ2V0VHlwZSgpKSkgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0Q29uZmlnKCk7DQogICAgICAgIExpc3Q8TWFwPD8sID8+PiBuYnRCbGFja2xpc3QgPSBjb25maWcuZ2V0TWFwTGlzdCgiYmxhY2tsaXN0ZWQtbmJ0LWl0ZW1zIik7DQogICAgICAgIGZvciAoTWFwPD8sID8+IGVudHJ5IDogbmJ0QmxhY2tsaXN0KSB7DQogICAgICAgICAgICBTdHJpbmcgbmJ0S2V5ID0gKFN0cmluZykgZW50cnkuZ2V0KCJuYnRfa2V5Iik7DQogICAgICAgICAgICBTdHJpbmcgbmJ0VmFsdWUgPSAoU3RyaW5nKSBlbnRyeS5nZXQoIm5idF92YWx1ZSIpOw0KICAgICAgICAgICAgU3RyaW5nIGl0ZW1OYnRWYWx1ZSA9IFZlcnNpb25VdGlscy5nZXROQlRTdHJpbmcoaXRlbSwgbmJ0S2V5KTsNCiAgICAgICAgICAgIGlmIChuYnRWYWx1ZS5lcXVhbHMoaXRlbU5idFZhbHVlKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZXR1cm5zIGFuIGl0ZW0gdG8gdGhlIHBsYXllcidzIGludmVudG9yeSBvciBkcm9wcyBpdCBpZiBmdWxsIC8vIG5vdGU6IEFkZHMgaXRlbSB0byBpbnZlbnRvcnkgb3IgZHJvcHMgYXQgcGxheWVyJ3MgbG9jYXRpb24NCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgcmV0dXJuSXRlbVRvUGxheWVyKFBsYXllciBwbGF5ZXIsIEl0ZW1TdGFjayBpdGVtKSB7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgaWYgKGl0ZW0gPT0gbnVsbCB8fCBpdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5BSVIpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQWRkSXRlbXNHVUldIEF0dGVtcHRlZCB0byByZXR1cm4gbnVsbCBvciBBSVIgaXRlbSB0byAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgSGFzaE1hcDxJbnRlZ2VyLCBJdGVtU3RhY2s+IG92ZXJmbG93ID0gcGxheWVyLmdldEludmVudG9yeSgpLmFkZEl0ZW0oaXRlbS5jbG9uZSgpKTsNCiAgICAgICAgcGxheWVyLnVwZGF0ZUludmVudG9yeSgpOw0KICAgICAgICBpZiAoIW92ZXJmbG93LmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgZm9yIChJdGVtU3RhY2sgb3ZlcmZsb3dJdGVtIDogb3ZlcmZsb3cudmFsdWVzKCkpIHsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuZ2V0V29ybGQoKS5kcm9wSXRlbU5hdHVyYWxseShwbGF5ZXIuZ2V0TG9jYXRpb24oKSwgb3ZlcmZsb3dJdGVtKTsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIEFkZEl0ZW1zR1VJXSBEcm9wcGVkIGJsYWNrbGlzdGVkIGl0ZW0gIiArIG92ZXJmbG93SXRlbS5nZXRUeXBlKCkubmFtZSgpICsgIiB4IiArIG92ZXJmbG93SXRlbS5nZXRBbW91bnQoKSArICIgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBkdWUgdG8gZnVsbCBpbnZlbnRvcnkiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TWVzc2FnZXNDb25maWcoKTsNCiAgICAgICAgICAgIFN0cmluZyBpbnZlbnRvcnlGdWxsID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJpbnZlbnRvcnktZnVsbCIsICImZVlvdXIgaW52ZW50b3J5IGlzIGZ1bGwuIFNvbWUgaXRlbXMgd2VyZSBkcm9wcGVkIG9uIHRoZSBncm91bmQuIik7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBpbnZlbnRvcnlGdWxsKSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIEFkZEl0ZW1zR1VJXSBSZXR1cm5lZCBibGFja2xpc3RlZCBpdGVtICIgKyBpdGVtLmdldFR5cGUoKS5uYW1lKCkgKyAiIHgiICsgaXRlbS5nZXRBbW91bnQoKSArICIgdG8gIiArIHBsYXllci5nZXROYW1lKCkgKyAiJ3MgaW52ZW50b3J5Iik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgY2xlYW51cChQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIFVVSUQgcGxheWVyVVVJRCA9IHBsYXllci5nZXRVbmlxdWVJZCgpOw0KICAgICAgICBBZGRJdGVtc0dVSSBleGlzdGluZ0luc3RhbmNlID0gYWN0aXZlSW5zdGFuY2VzLmdldChwbGF5ZXJVVUlEKTsNCiAgICAgICAgaWYgKGV4aXN0aW5nSW5zdGFuY2UgIT0gbnVsbCkgew0KICAgICAgICAgICAgLy8gVW5yZWdpc3RlciB0aGUgb2xkIGxpc3RlbmVyDQogICAgICAgICAgICBJbnZlbnRvcnlDbGlja0V2ZW50LmdldEhhbmRsZXJMaXN0KCkudW5yZWdpc3RlcihleGlzdGluZ0luc3RhbmNlKTsNCiAgICAgICAgICAgIEludmVudG9yeURyYWdFdmVudC5nZXRIYW5kbGVyTGlzdCgpLnVucmVnaXN0ZXIoZXhpc3RpbmdJbnN0YW5jZSk7DQogICAgICAgICAgICBJbnZlbnRvcnlDbG9zZUV2ZW50LmdldEhhbmRsZXJMaXN0KCkudW5yZWdpc3RlcihleGlzdGluZ0luc3RhbmNlKTsNCiAgICAgICAgICAgIGFjdGl2ZUluc3RhbmNlcy5yZW1vdmUocGxheWVyVVVJRCk7DQogICAgICAgIH0NCiAgICAgICAgLy8gQ2xlYW4gdXAgdHJhY2tpbmcgZGF0YQ0KICAgICAgICBvcmlnaW5hbEl0ZW1zU3RhdGUucmVtb3ZlKHBsYXllclVVSUQpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBpbml0aWFsaXplR1VJKCkgew0KICAgICAgICAvLyBDcmVhdGUgYm9yZGVyDQogICAgICAgIGFkZEJvcmRlcnMoKTsNCg0KICAgICAgICAvLyBBZGQgYm90dG9tIHJvdyBidXR0b25zDQogICAgICAgIGFkZEJvdHRvbVJvd0J1dHRvbnMoaW52ZW50b3J5KTsNCg0KICAgICAgICAvLyBMb2FkIGV4aXN0aW5nIGl0ZW1zIGZyb20gc2Vzc2lvbg0KICAgICAgICBsb2FkRXhpc3RpbmdJdGVtcyhwbGF5ZXIsIGludmVudG9yeSk7DQoNCiAgICAgICAgLy8gU3RvcmUgdGhlIGluaXRpYWwgc3RhdGUNCiAgICAgICAgc3RvcmVPcmlnaW5hbEl0ZW1zU3RhdGUocGxheWVyLCBpbnZlbnRvcnkpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBsb2FkRXhpc3RpbmdJdGVtcyhQbGF5ZXIgcGxheWVyLCBJbnZlbnRvcnkgaW52ZW50b3J5KSB7DQogICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBzZXNzaW9uID0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLmdldFNlc3Npb24ocGxheWVyKTsNCiAgICAgICAgaWYgKHNlc3Npb24gIT0gbnVsbCAmJiBzZXNzaW9uLmhhc0l0ZW1SZXdhcmRzKCkpIHsNCiAgICAgICAgICAgIExpc3Q8SXRlbVN0YWNrPiBleGlzdGluZ0l0ZW1zID0gc2Vzc2lvbi5nZXRJdGVtUmV3YXJkcygpOw0KDQogICAgICAgICAgICAvLyBQbGFjZSBleGlzdGluZyBpdGVtcyBpbiBjb250ZW50IGFyZWEgc2xvdHMNCiAgICAgICAgICAgIGludCBzbG90SW5kZXggPSAwOw0KICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCA1NCAmJiBzbG90SW5kZXggPCBleGlzdGluZ0l0ZW1zLnNpemUoKTsgaSsrKSB7DQogICAgICAgICAgICAgICAgaWYgKCFwcm90ZWN0ZWRTbG90cy5jb250YWlucyhpKSkgew0KICAgICAgICAgICAgICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IGV4aXN0aW5nSXRlbXMuZ2V0KHNsb3RJbmRleCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKGksIGl0ZW0uY2xvbmUoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgc2xvdEluZGV4Kys7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIHN0b3JlT3JpZ2luYWxJdGVtc1N0YXRlKFBsYXllciBwbGF5ZXIsIEludmVudG9yeSBpbnZlbnRvcnkpIHsNCiAgICAgICAgTGlzdDxJdGVtU3RhY2s+IG9yaWdpbmFsSXRlbXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCg0KICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDU0OyBpKyspIHsNCiAgICAgICAgICAgIGlmICghcHJvdGVjdGVkU2xvdHMuY29udGFpbnMoaSkpIHsNCiAgICAgICAgICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IGludmVudG9yeS5nZXRJdGVtKGkpOw0KICAgICAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgaXRlbS5nZXRUeXBlKCkgIT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsSXRlbXMuYWRkKGl0ZW0uY2xvbmUoKSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxJdGVtcy5hZGQobnVsbCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgb3JpZ2luYWxJdGVtc1N0YXRlLnB1dChwbGF5ZXIuZ2V0VW5pcXVlSWQoKSwgb3JpZ2luYWxJdGVtcyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQWRkcyBib3JkZXIgaXRlbXMgdG8gdGhlIEdVSSBiYXNlZCBvbiBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogUG9wdWxhdGVzIGJvcmRlciBzbG90cyB3aXRoIGNvbmZpZ3VyZWQgbWF0ZXJpYWwNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgYWRkQm9yZGVycygpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0QWRkSXRlbXNHVUlDb25maWcoKTsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldERlYnVnTWFuYWdlcigpOw0KDQogICAgICAgIGlmICghY29uZmlnLmdldEJvb2xlYW4oImJvcmRlci5lbmFibGVkIiwgdHJ1ZSkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQWRkSXRlbXNHVUldIEJvcmRlcnMgZGlzYWJsZWQgaW4gQWRkSXRlbXNHVUkueW1sIik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gY29uZmlnLmdldFN0cmluZygiYm9yZGVyLm1hdGVyaWFsIiwgIldISVRFX1NUQUlORURfR0xBU1NfUEFORSIpOw0KICAgICAgICBTdHJpbmcgbmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoImJvcmRlci5uYW1lIiwgIiAiKTsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdCgiYm9yZGVyLmxvcmUiKTsNCiAgICAgICAgYm9vbGVhbiBlbmNoYW50bWVudEdsb3cgPSBjb25maWcuZ2V0Qm9vbGVhbigiYm9yZGVyLmVuY2hhbnRtZW50LWdsb3ciLCBmYWxzZSk7DQogICAgICAgIExpc3Q8SW50ZWdlcj4gYm9yZGVyU2xvdHMgPSBjb25maWcuZ2V0SW50ZWdlckxpc3QoImJvcmRlci5zbG90cyIpOw0KDQogICAgICAgIGlmIChib3JkZXJTbG90cy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGJvcmRlclNsb3RzID0gQXJyYXlzLmFzTGlzdCgwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxNywgMTgsIDI2LCAyNywgMzUsIDM2LCA0NCwgNDUsIDQ2LCA0OCwgNTAsIDUyLCA1Myk7DQogICAgICAgIH0NCg0KICAgICAgICBJdGVtU3RhY2sgYm9yZGVySXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2sobWF0ZXJpYWxOYW1lKTsNCiAgICAgICAgaWYgKGJvcmRlckl0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLlNUT05FICYmICFtYXRlcmlhbE5hbWUuZXF1YWxzSWdub3JlQ2FzZSgiV0hJVEVfU1RBSU5FRF9HTEFTU19QQU5FIikpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBBZGRJdGVtc0dVSV0gSW52YWxpZCBib3JkZXIgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyBpbiBBZGRJdGVtc0dVSS55bWwsIHVzaW5nIFdISVRFX1NUQUlORURfR0xBU1NfUEFORSIpOw0KICAgICAgICAgICAgYm9yZGVySXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIldISVRFX1NUQUlORURfR0xBU1NfUEFORSIpOw0KICAgICAgICB9DQoNCiAgICAgICAgSXRlbU1ldGEgYm9yZGVyTWV0YSA9IGJvcmRlckl0ZW0uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgaWYgKGJvcmRlck1ldGEgIT0gbnVsbCkgew0KICAgICAgICAgICAgYm9yZGVyTWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIG5hbWUpKTsNCiAgICAgICAgICAgIGlmICghbG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKS5wbGF5ZXIocGxheWVyKTsNCiAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gcHJvY2Vzc2VkTG9yZSA9IFBsYWNlaG9sZGVycy5hcHBseShsb3JlLCBjb250ZXh0KTsNCiAgICAgICAgICAgICAgICBib3JkZXJNZXRhLnNldExvcmUocHJvY2Vzc2VkTG9yZSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoZW5jaGFudG1lbnRHbG93KSB7DQogICAgICAgICAgICAgICAgYm9yZGVyTWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgICAgIGJvcmRlck1ldGEuYWRkSXRlbUZsYWdzKEl0ZW1GbGFnLkhJREVfRU5DSEFOVFMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgYm9yZGVySXRlbS5zZXRJdGVtTWV0YShib3JkZXJNZXRhKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBBZGRJdGVtc0dVSV0gRmFpbGVkIHRvIGdldCBJdGVtTWV0YSBmb3IgYm9yZGVyIGl0ZW0iKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGludCB0b3RhbEl0ZW1zID0gYm9yZGVyU2xvdHMuc2l6ZSgpOw0KICAgICAgICBpbnQgc3VjY2Vzc2Z1bEl0ZW1zID0gMDsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGZhaWx1cmVzID0gbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgZm9yIChpbnQgc2xvdCA6IGJvcmRlclNsb3RzKSB7DQogICAgICAgICAgICBpZiAoc2xvdCA+PSAwICYmIHNsb3QgPCBpbnZlbnRvcnkuZ2V0U2l6ZSgpKSB7DQogICAgICAgICAgICAgICAgaW52ZW50b3J5LnNldEl0ZW0oc2xvdCwgYm9yZGVySXRlbS5jbG9uZSgpKTsNCiAgICAgICAgICAgICAgICBwcm90ZWN0ZWRTbG90cy5hZGQoc2xvdCk7DQogICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bEl0ZW1zKys7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBBZGRJdGVtc0dVSV0gSW52YWxpZCBzbG90ICIgKyBzbG90ICsgIiBpbiBBZGRJdGVtc0dVSS55bWwgYm9yZGVyIGNvbmZpZ3VyYXRpb24gKG11c3QgYmUgMC0iICsgKGludmVudG9yeS5nZXRTaXplKCkgLSAxKSArICIpIik7DQogICAgICAgICAgICAgICAgZmFpbHVyZXMuYWRkKCJib3JkZXItc2xvdC0iICsgc2xvdCArICIgUmVhc29uOiBJbnZhbGlkIHNsb3QgIiArIHNsb3QpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHN1Y2Nlc3NmdWxJdGVtcyA9PSB0b3RhbEl0ZW1zKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIEFkZEl0ZW1zR1VJXSBBbGwgYm9yZGVyIGl0ZW1zIGNyZWF0ZWQiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFN0cmluZyBmYWlsdXJlTWVzc2FnZSA9ICJbREVCVUcgLSBBZGRJdGVtc0dVSV0gIiArIHN1Y2Nlc3NmdWxJdGVtcyArICIvIiArIHRvdGFsSXRlbXMgKyAiIGJvcmRlciBpdGVtcyBjcmVhdGVkIjsNCiAgICAgICAgICAgIGlmICghZmFpbHVyZXMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgZmFpbHVyZU1lc3NhZ2UgKz0gIiwgZmFpbGVkIHRvIGNyZWF0ZTogIiArIFN0cmluZy5qb2luKCIsICIsIGZhaWx1cmVzKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5idWZmZXJGYWlsdXJlKCJBZGRJdGVtc0dVSV9ib3JkZXJfIiArIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpLCBmYWlsdXJlTWVzc2FnZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwdWJsaWMgdm9pZCBvcGVuSW52ZW50b3J5KFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgaWYgKCFwbGF5ZXIuZXF1YWxzKHRoaXMucGxheWVyKSkgew0KICAgICAgICAgICAgcmV0dXJuOyAvLyBTYWZldHkgY2hlY2sgLSBvbmx5IHRoZSBpbnRlbmRlZCBwbGF5ZXIgY2FuIG9wZW4gdGhpcyBHVUkNCiAgICAgICAgfQ0KICAgICAgICBwbGF5ZXIub3BlbkludmVudG9yeShpbnZlbnRvcnkpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgYm9vbGVhbiBoYXNJdGVtc0NoYW5nZWQoUGxheWVyIHBsYXllciwgSW52ZW50b3J5IGd1aSkgew0KICAgICAgICBMaXN0PEl0ZW1TdGFjaz4gb3JpZ2luYWxJdGVtcyA9IG9yaWdpbmFsSXRlbXNTdGF0ZS5nZXQocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICBpZiAob3JpZ2luYWxJdGVtcyA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gSWYgbm8gb3JpZ2luYWwgc3RhdGUsIGFzc3VtZSBjaGFuZ2VzIHdlcmUgbWFkZQ0KICAgICAgICB9DQoNCiAgICAgICAgTGlzdDxJdGVtU3RhY2s+IGN1cnJlbnRJdGVtcyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDU0OyBpKyspIHsNCiAgICAgICAgICAgIGlmICghcHJvdGVjdGVkU2xvdHMuY29udGFpbnMoaSkpIHsNCiAgICAgICAgICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IGd1aS5nZXRJdGVtKGkpOw0KICAgICAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgaXRlbS5nZXRUeXBlKCkgIT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJdGVtcy5hZGQoaXRlbS5jbG9uZSgpKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBjdXJyZW50SXRlbXMuYWRkKG51bGwpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIENvbXBhcmUgdGhlIHR3byBsaXN0cw0KICAgICAgICBpZiAob3JpZ2luYWxJdGVtcy5zaXplKCkgIT0gY3VycmVudEl0ZW1zLnNpemUoKSkgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG9yaWdpbmFsSXRlbXMuc2l6ZSgpOyBpKyspIHsNCiAgICAgICAgICAgIEl0ZW1TdGFjayBvcmlnaW5hbCA9IG9yaWdpbmFsSXRlbXMuZ2V0KGkpOw0KICAgICAgICAgICAgSXRlbVN0YWNrIGN1cnJlbnQgPSBjdXJyZW50SXRlbXMuZ2V0KGkpOw0KDQogICAgICAgICAgICBpZiAob3JpZ2luYWwgPT0gbnVsbCAmJiBjdXJyZW50ID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gQm90aCBudWxsLCBubyBjaGFuZ2UNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKG9yaWdpbmFsID09IG51bGwgfHwgY3VycmVudCA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIE9uZSBpcyBudWxsLCBvdGhlciBpc24ndA0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIW9yaWdpbmFsLmlzU2ltaWxhcihjdXJyZW50KSB8fCBvcmlnaW5hbC5nZXRBbW91bnQoKSAhPSBjdXJyZW50LmdldEFtb3VudCgpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIEl0ZW1zIGFyZSBkaWZmZXJlbnQNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7IC8vIE5vIGNoYW5nZXMgZGV0ZWN0ZWQNCiAgICB9DQogICAgLyoqDQogICAgICogQWRkcyBib3R0b20gcm93IGJ1dHRvbnMgdG8gdGhlIEdVSQ0KICAgICAqIC8vIG5vdGU6IFBsYWNlcyBDYW5jZWwsIEluZm8sIGFuZCBDb25maXJtIGJ1dHRvbnMNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgYWRkQm90dG9tUm93QnV0dG9ucyhJbnZlbnRvcnkgZ3VpKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldEFkZEl0ZW1zR1VJQ29uZmlnKCk7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgaW50IHRvdGFsQnV0dG9ucyA9IDM7DQogICAgICAgIGludCBzdWNjZXNzZnVsQnV0dG9ucyA9IDA7DQogICAgICAgIExpc3Q8U3RyaW5nPiBmYWlsdXJlcyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KDQogICAgICAgIC8vIENhbmNlbCBidXR0b24NCiAgICAgICAgaWYgKGNvbmZpZy5nZXRCb29sZWFuKCJidXR0b25zLmNhbmNlbC5lbmFibGVkIiwgdHJ1ZSkpIHsNCiAgICAgICAgICAgIGludCBzbG90ID0gY29uZmlnLmdldEludCgiYnV0dG9ucy5jYW5jZWwuc2xvdCIsIDQ3KTsNCiAgICAgICAgICAgIFN0cmluZyBtYXRlcmlhbE5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKCJidXR0b25zLmNhbmNlbC5tYXRlcmlhbCIsICJSRURTVE9ORSIpOw0KICAgICAgICAgICAgSXRlbVN0YWNrIGNhbmNlbEJ1dHRvbiA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2sobWF0ZXJpYWxOYW1lKTsNCiAgICAgICAgICAgIFN0cmluZyBmYWlsdXJlUmVhc29uID0gbnVsbDsNCiAgICAgICAgICAgIGlmIChjYW5jZWxCdXR0b24uZ2V0VHlwZSgpID09IE1hdGVyaWFsLlNUT05FICYmICFtYXRlcmlhbE5hbWUuZXF1YWxzSWdub3JlQ2FzZSgiUkVEU1RPTkUiKSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBBZGRJdGVtc0dVSV0gSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIGZvciBjYW5jZWwgYnV0dG9uLCB1c2luZyBSRURTVE9ORSIpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIjsNCiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b24gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJSRURTVE9ORSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgSXRlbU1ldGEgY2FuY2VsTWV0YSA9IGNhbmNlbEJ1dHRvbi5nZXRJdGVtTWV0YSgpOw0KICAgICAgICAgICAgaWYgKGNhbmNlbE1ldGEgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGNhbmNlbE1ldGEuc2V0RGlzcGxheU5hbWUoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBjb25maWcuZ2V0U3RyaW5nKCJidXR0b25zLmNhbmNlbC5uYW1lIiwgIiZjJmxDYW5jZWwiKSkpOw0KICAgICAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gY29uZmlnLmdldFN0cmluZ0xpc3QoImJ1dHRvbnMuY2FuY2VsLmxvcmUiKTsNCiAgICAgICAgICAgICAgICBpZiAobG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICAgICAgbG9yZSA9IEFycmF5cy5hc0xpc3QoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiY3Q2xpY2sgdG8gY2FuY2VsIGFuZCByZXR1cm4iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICImN3RvIHRoZSBDcmVhdGUgQm91bnR5IEdVSSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiZlTm8gaXRlbXMgd2lsbCBiZSByZXR1cm5lZCEiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICImZVVzZSBDb25maXJtIHRvIHNhdmUgY2hhbmdlcy4iDQogICAgICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNhbmNlbE1ldGEuc2V0TG9yZShsb3JlLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgICAgICAgICAubWFwKGxpbmUgLT4gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBsaW5lKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpKTsNCiAgICAgICAgICAgICAgICBpZiAoVmVyc2lvblV0aWxzLmlzUG9zdDE5KCkpIHsNCiAgICAgICAgICAgICAgICAgICAgY2FuY2VsTWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9BVFRSSUJVVEVTKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uLnNldEl0ZW1NZXRhKGNhbmNlbE1ldGEpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQWRkSXRlbXNHVUldIEZhaWxlZCB0byBnZXQgSXRlbU1ldGEgZm9yIGNhbmNlbCBidXR0b24iKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEiOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKGZhaWx1cmVSZWFzb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGd1aS5zZXRJdGVtKHNsb3QsIGNhbmNlbEJ1dHRvbik7DQogICAgICAgICAgICAgICAgcHJvdGVjdGVkU2xvdHMuYWRkKHNsb3QpOw0KICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxCdXR0b25zKys7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZCgiY2FuY2VsLWJ1dHRvbiBSZWFzb246ICIgKyBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEhvdyB0byB1c2UgKEluZm8pIGJ1dHRvbg0KICAgICAgICBpZiAoY29uZmlnLmdldEJvb2xlYW4oImJ1dHRvbnMuaW5mby5lbmFibGVkIiwgdHJ1ZSkpIHsNCiAgICAgICAgICAgIGludCBzbG90ID0gY29uZmlnLmdldEludCgiYnV0dG9ucy5pbmZvLnNsb3QiLCA0OSk7DQogICAgICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gY29uZmlnLmdldFN0cmluZygiYnV0dG9ucy5pbmZvLm1hdGVyaWFsIiwgIlBBUEVSIik7DQogICAgICAgICAgICBJdGVtU3RhY2sgaG93VG9Vc2VCdXR0b24gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQogICAgICAgICAgICBpZiAoaG93VG9Vc2VCdXR0b24uZ2V0VHlwZSgpID09IE1hdGVyaWFsLlNUT05FICYmICFtYXRlcmlhbE5hbWUuZXF1YWxzSWdub3JlQ2FzZSgiUEFQRVIiKSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBBZGRJdGVtc0dVSV0gSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIGZvciBpbmZvIGJ1dHRvbiwgdXNpbmcgUEFQRVIiKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyI7DQogICAgICAgICAgICAgICAgaG93VG9Vc2VCdXR0b24gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJQQVBFUiIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgSXRlbU1ldGEgaG93VG9Vc2VNZXRhID0gaG93VG9Vc2VCdXR0b24uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgICAgIGlmIChob3dUb1VzZU1ldGEgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGhvd1RvVXNlTWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGNvbmZpZy5nZXRTdHJpbmcoImJ1dHRvbnMuaW5mby5uYW1lIiwgIiZlJmxIb3cgdG8gVXNlIikpKTsNCiAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KCJidXR0b25zLmluZm8ubG9yZSIpOw0KICAgICAgICAgICAgICAgIGlmIChsb3JlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgICAgICBsb3JlID0gQXJyYXlzLmFzTGlzdCgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjdEcmFnIGl0ZW1zIGZyb20geW91ciBpbnZlbnRvcnkiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICImN2ludG8gdGhlIGVtcHR5IHNsb3RzIGFib3ZlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjdUaGVzZSBpdGVtcyB3aWxsIGJlIGdpdmVuIGFzIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjdyZXdhcmRzIHRvIHdob2V2ZXIgY2xhaW1zIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjd0aGUgYm91bnR5ISIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiZhQ2xpY2sgJjJDb25maXJtICZhdG8gc2F2ZSBjaGFuZ2VzISIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiY3Q3VycmVudCBpdGVtczogJmYlYm91bnRpZXNwbHVzX2l0ZW1fY291bnQlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjdUb3RhbCB2YWx1ZTogJmEkJWJvdW50aWVzcGx1c19pdGVtX3ZhbHVlJSINCiAgICAgICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgQm91bnR5Q3JlYXRpb25TZXNzaW9uIHNlc3Npb24gPSBCb3VudHlDcmVhdGlvblNlc3Npb24uZ2V0U2Vzc2lvbihwbGF5ZXIpOw0KICAgICAgICAgICAgICAgIGludCBpdGVtQ291bnQgPSBzZXNzaW9uICE9IG51bGwgPyBzZXNzaW9uLmdldEl0ZW1SZXdhcmRzKCkuc2l6ZSgpIDogMDsNCiAgICAgICAgICAgICAgICBkb3VibGUgaXRlbVZhbHVlID0gc2Vzc2lvbiAhPSBudWxsID8gc2Vzc2lvbi5nZXRJdGVtUmV3YXJkcygpLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgICAgICAgICAubWFwVG9Eb3VibGUoaXRlbSAtPiBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRJdGVtVmFsdWVDYWxjdWxhdG9yKCkuY2FsY3VsYXRlSXRlbVZhbHVlKGl0ZW0pKS5zdW0oKSA6IDAuMDsNCiAgICAgICAgICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKS5wbGF5ZXIocGxheWVyKS5pdGVtQ291bnQoaXRlbUNvdW50KS5pdGVtVmFsdWUoaXRlbVZhbHVlKTsNCiAgICAgICAgICAgICAgICBob3dUb1VzZU1ldGEuc2V0TG9yZShQbGFjZWhvbGRlcnMuYXBwbHkobG9yZSwgY29udGV4dCkpOw0KICAgICAgICAgICAgICAgIGlmIChWZXJzaW9uVXRpbHMuaXNQb3N0MTkoKSkgew0KICAgICAgICAgICAgICAgICAgICBob3dUb1VzZU1ldGEuYWRkSXRlbUZsYWdzKEl0ZW1GbGFnLkhJREVfQVRUUklCVVRFUyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGhvd1RvVXNlQnV0dG9uLnNldEl0ZW1NZXRhKGhvd1RvVXNlTWV0YSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBBZGRJdGVtc0dVSV0gRmFpbGVkIHRvIGdldCBJdGVtTWV0YSBmb3IgaW5mbyBidXR0b24iKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEiOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKGZhaWx1cmVSZWFzb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGd1aS5zZXRJdGVtKHNsb3QsIGhvd1RvVXNlQnV0dG9uKTsNCiAgICAgICAgICAgICAgICBwcm90ZWN0ZWRTbG90cy5hZGQoc2xvdCk7DQogICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bEJ1dHRvbnMrKzsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZmFpbHVyZXMuYWRkKCJpbmZvLWJ1dHRvbiBSZWFzb246ICIgKyBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIENvbmZpcm0gYnV0dG9uDQogICAgICAgIGlmIChjb25maWcuZ2V0Qm9vbGVhbigiYnV0dG9ucy5jb25maXJtLmVuYWJsZWQiLCB0cnVlKSkgew0KICAgICAgICAgICAgaW50IHNsb3QgPSBjb25maWcuZ2V0SW50KCJidXR0b25zLmNvbmZpcm0uc2xvdCIsIDUxKTsNCiAgICAgICAgICAgIFN0cmluZyBtYXRlcmlhbE5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKCJidXR0b25zLmNvbmZpcm0ubWF0ZXJpYWwiLCAiRU1FUkFMRCIpOw0KICAgICAgICAgICAgSXRlbVN0YWNrIGNvbmZpcm1CdXR0b24gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQogICAgICAgICAgICBpZiAoY29uZmlybUJ1dHRvbi5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJFTUVSQUxEIikpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQWRkSXRlbXNHVUldIEludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyBmb3IgY29uZmlybSBidXR0b24sIHVzaW5nIEVNRVJBTEQiKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyI7DQogICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbiA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIkVNRVJBTEQiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIEl0ZW1NZXRhIGNvbmZpcm1NZXRhID0gY29uZmlybUJ1dHRvbi5nZXRJdGVtTWV0YSgpOw0KICAgICAgICAgICAgaWYgKGNvbmZpcm1NZXRhICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICBjb25maXJtTWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGNvbmZpZy5nZXRTdHJpbmcoImJ1dHRvbnMuY29uZmlybS5uYW1lIiwgIiZhJmxDb25maXJtIikpKTsNCiAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KCJidXR0b25zLmNvbmZpcm0ubG9yZSIpOw0KICAgICAgICAgICAgICAgIGlmIChsb3JlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgICAgICBsb3JlID0gQXJyYXlzLmFzTGlzdCgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjdDbGljayB0byBjb25maXJtIHRoZXNlIGl0ZW1zIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjdhbmQgcmV0dXJuIHRvIENyZWF0ZSBCb3VudHkgR1VJIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJmFJdGVtcyB3aWxsIGJlIHNhdmVkISIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiY3VG90YWwgaXRlbXM6ICZmJWJvdW50aWVzcGx1c19ndWlfaXRlbV9jb3VudCUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICImN1RvdGFsIHZhbHVlOiAmYSQlYm91bnRpZXNwbHVzX2d1aV9pdGVtX3ZhbHVlJSINCiAgICAgICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcik7DQogICAgICAgICAgICAgICAgY29uZmlybU1ldGEuc2V0TG9yZShQbGFjZWhvbGRlcnMuYXBwbHkobG9yZSwgY29udGV4dCkpOw0KICAgICAgICAgICAgICAgIGlmIChjb25maWcuZ2V0Qm9vbGVhbigiYnV0dG9ucy5jb25maXJtLmVuY2hhbnRtZW50LWdsb3ciLCB0cnVlKSkgew0KICAgICAgICAgICAgICAgICAgICBjb25maXJtTWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgICAgICAgICBjb25maXJtTWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChWZXJzaW9uVXRpbHMuaXNQb3N0MTkoKSkgew0KICAgICAgICAgICAgICAgICAgICBjb25maXJtTWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9BVFRSSUJVVEVTKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbi5zZXRJdGVtTWV0YShjb25maXJtTWV0YSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBBZGRJdGVtc0dVSV0gRmFpbGVkIHRvIGdldCBJdGVtTWV0YSBmb3IgY29uZmlybSBidXR0b24iKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEiOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKGZhaWx1cmVSZWFzb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGd1aS5zZXRJdGVtKHNsb3QsIGNvbmZpcm1CdXR0b24pOw0KICAgICAgICAgICAgICAgIHByb3RlY3RlZFNsb3RzLmFkZChzbG90KTsNCiAgICAgICAgICAgICAgICBzdWNjZXNzZnVsQnV0dG9ucysrOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoImNvbmZpcm0tYnV0dG9uIFJlYXNvbjogIiArIGZhaWx1cmVSZWFzb24pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHN1Y2Nlc3NmdWxCdXR0b25zID09IHRvdGFsQnV0dG9ucykgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBBZGRJdGVtc0dVSV0gQWxsIGJ1dHRvbnMgY3JlYXRlZCIpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVNZXNzYWdlID0gIltERUJVRyAtIEFkZEl0ZW1zR1VJXSAiICsgc3VjY2Vzc2Z1bEJ1dHRvbnMgKyAiLyIgKyB0b3RhbEJ1dHRvbnMgKyAiIGJ1dHRvbnMgY3JlYXRlZCI7DQogICAgICAgICAgICBpZiAoIWZhaWx1cmVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGZhaWx1cmVNZXNzYWdlICs9ICIsIGZhaWxlZCB0byBjcmVhdGU6ICIgKyBTdHJpbmcuam9pbigiLCAiLCBmYWlsdXJlcyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRmFpbHVyZSgiQWRkSXRlbXNHVUlfYnV0dG9uc18iICsgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCksIGZhaWx1cmVNZXNzYWdlKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFVwZGF0ZXMgdGhlIENvbmZpcm0gYnV0dG9uJ3MgbG9yZSB3aXRoIGN1cnJlbnQgR1VJIGl0ZW0gY291bnQgYW5kIHZhbHVlIC8vIG5vdGU6IFJlZnJlc2hlcyBDb25maXJtIGJ1dHRvbiB0byByZWZsZWN0IHVuY29uZmlybWVkIGl0ZW1zDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIHVwZGF0ZUNvbmZpcm1CdXR0b24oSW52ZW50b3J5IGd1aSkgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRBZGRJdGVtc0dVSUNvbmZpZygpOw0KICAgICAgICBpbnQgc2xvdCA9IGNvbmZpZy5nZXRJbnQoImJ1dHRvbnMuY29uZmlybS5zbG90IiwgNTEpOw0KICAgICAgICBJdGVtU3RhY2sgY29uZmlybUJ1dHRvbiA9IGd1aS5nZXRJdGVtKHNsb3QpOw0KICAgICAgICBpZiAoY29uZmlybUJ1dHRvbiA9PSBudWxsIHx8IGNvbmZpcm1CdXR0b24uZ2V0VHlwZSgpID09IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIEl0ZW1NZXRhIGNvbmZpcm1NZXRhID0gY29uZmlybUJ1dHRvbi5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAoY29uZmlybU1ldGEgIT0gbnVsbCkgew0KICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdCgiYnV0dG9ucy5jb25maXJtLmxvcmUiKTsNCiAgICAgICAgICAgIGlmIChsb3JlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGxvcmUgPSBBcnJheXMuYXNMaXN0KA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3Q2xpY2sgdG8gY29uZmlybSB0aGVzZSBpdGVtcyIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdhbmQgcmV0dXJuIHRvIENyZWF0ZSBCb3VudHkgR1VJIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICIiLA0KICAgICAgICAgICAgICAgICAgICAgICAgIiZhSXRlbXMgd2lsbCBiZSBzYXZlZCEiLA0KICAgICAgICAgICAgICAgICAgICAgICAgIiIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdUb3RhbCBpdGVtczogJmYlYm91bnRpZXNwbHVzX2d1aV9pdGVtX2NvdW50JSIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdUb3RhbCB2YWx1ZTogJmEkJWJvdW50aWVzcGx1c19ndWlfaXRlbV92YWx1ZSUiDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpLnBsYXllcihwbGF5ZXIpOw0KICAgICAgICAgICAgY29uZmlybU1ldGEuc2V0TG9yZShQbGFjZWhvbGRlcnMuYXBwbHkobG9yZSwgY29udGV4dCkpOw0KICAgICAgICAgICAgY29uZmlybUJ1dHRvbi5zZXRJdGVtTWV0YShjb25maXJtTWV0YSk7DQogICAgICAgIH0NCiAgICAgICAgZ3VpLnNldEl0ZW0oc2xvdCwgY29uZmlybUJ1dHRvbik7DQogICAgICAgIHBsYXllci51cGRhdGVJbnZlbnRvcnkoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBIYW5kbGVzIGEgYmxhY2tsaXN0ZWQgaXRlbSBhdHRlbXB0DQogICAgICogLy8gbm90ZTogUmV0dXJucyBpdGVtLCBzZW5kcyBtZXNzYWdlLCBjbG9zZXMgR1VJLCBhbmQgcmVvcGVucyBhZnRlciBkZWxheQ0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBoYW5kbGVCbGFja2xpc3RlZEl0ZW0oUGxheWVyIHBsYXllciwgSXRlbVN0YWNrIGl0ZW0pIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIEFkZEl0ZW1zR1VJXSBCbGFja2xpc3RlZCBpdGVtIGRldGVjdGVkOiAiICsgaXRlbS5nZXRUeXBlKCkubmFtZSgpICsgIiBieSAiICsgcGxheWVyLmdldE5hbWUoKSk7DQoNCiAgICAgICAgcmV0dXJuSXRlbVRvUGxheWVyKHBsYXllciwgaXRlbSk7DQoNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gZ3VpQ29uZmlnID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0QWRkSXRlbXNHVUlDb25maWcoKTsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRNZXNzYWdlc0NvbmZpZygpOw0KICAgICAgICBpbnQgZmFkZUluID0gZ3VpQ29uZmlnLmdldEludCgidGl0bGUtZHVyYXRpb24uZmFkZS1pbiIsIDIwKTsNCiAgICAgICAgaW50IHN0YXkgPSBndWlDb25maWcuZ2V0SW50KCJ0aXRsZS1kdXJhdGlvbi5zdGF5IiwgNjApOw0KICAgICAgICBpbnQgZmFkZU91dCA9IGd1aUNvbmZpZy5nZXRJbnQoInRpdGxlLWR1cmF0aW9uLmZhZGUtb3V0IiwgMjApOw0KICAgICAgICBsb25nIHJlb3BlbkRlbGF5ID0gZ3VpQ29uZmlnLmdldExvbmcoInJlb3Blbi1kZWxheSIsIDEwMCk7DQoNCiAgICAgICAgZmFkZUluID0gTWF0aC5tYXgoMCwgZmFkZUluKTsNCiAgICAgICAgc3RheSA9IE1hdGgubWF4KDAsIHN0YXkpOw0KICAgICAgICBmYWRlT3V0ID0gTWF0aC5tYXgoMCwgZmFkZU91dCk7DQogICAgICAgIHJlb3BlbkRlbGF5ID0gTWF0aC5tYXgoMjAsIHJlb3BlbkRlbGF5KTsNCg0KICAgICAgICBTdHJpbmcgaXRlbU5hbWUgPSBpdGVtLmhhc0l0ZW1NZXRhKCkgJiYgaXRlbS5nZXRJdGVtTWV0YSgpLmhhc0Rpc3BsYXlOYW1lKCkgPw0KICAgICAgICAgICAgICAgIGl0ZW0uZ2V0SXRlbU1ldGEoKS5nZXREaXNwbGF5TmFtZSgpIDogaXRlbS5nZXRUeXBlKCkubmFtZSgpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICcgJyk7DQogICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgLnBsYXllcihwbGF5ZXIpDQogICAgICAgICAgICAgICAgLml0ZW1OYW1lKGl0ZW1OYW1lKTsNCg0KICAgICAgICBWZXJzaW9uV3JhcHBlciB3cmFwcGVyID0gVmVyc2lvbldyYXBwZXJGYWN0b3J5LmdldFdyYXBwZXIoKTsNCiAgICAgICAgaWYgKFZlcnNpb25VdGlscy5pc1Bvc3QxMTEoKSkgew0KICAgICAgICAgICAgU3RyaW5nIHRpdGxlID0gUGxhY2Vob2xkZXJzLmFwcGx5KG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYmxhY2tsaXN0ZWQtaXRlbS10aXRsZSIsICImY0JsYWNrbGlzdGVkIEl0ZW0hIiksIGNvbnRleHQpOw0KICAgICAgICAgICAgU3RyaW5nIHN1YnRpdGxlID0gUGxhY2Vob2xkZXJzLmFwcGx5KG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYmxhY2tsaXN0ZWQtaXRlbS1zdWJ0aXRsZSIsICImZSVpdGVtX25hbWUlICY3Y2Fubm90IGJlIGFkZGVkLiIpLCBjb250ZXh0KTsNCiAgICAgICAgICAgIHdyYXBwZXIuc2VuZFRpdGxlKHBsYXllciwgdGl0bGUsIHN1YnRpdGxlLCBmYWRlSW4sIHN0YXksIGZhZGVPdXQpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RyaW5nIG1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJsYWNrbGlzdGVkLWl0ZW0tbWVzc2FnZSIsICImYyVpdGVtX25hbWUlICY3aXMgYmxhY2tsaXN0ZWQgYW5kIGNhbm5vdCBiZSBhZGRlZCB0byB0aGUgYm91bnR5ISIpOw0KICAgICAgICAgICAgaWYgKEJ1a2tpdC5nZXRQbHVnaW5NYW5hZ2VyKCkuaXNQbHVnaW5FbmFibGVkKCJQbGFjZWhvbGRlckFQSSIpKSB7DQogICAgICAgICAgICAgICAgbWVzc2FnZSA9IFBsYWNlaG9sZGVyQVBJLnNldFBsYWNlaG9sZGVycyhwbGF5ZXIsIG1lc3NhZ2UpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgbWVzc2FnZSA9IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgUGxhY2Vob2xkZXJzLmFwcGx5KG1lc3NhZ2UsIGNvbnRleHQpKTsNCiAgICAgICAgICAgIEJhc2VDb21wb25lbnRbXSBjb21wb25lbnRzID0gVGV4dENvbXBvbmVudC5mcm9tTGVnYWN5VGV4dChtZXNzYWdlKTsNCiAgICAgICAgICAgIHBsYXllci5zcGlnb3QoKS5zZW5kTWVzc2FnZShjb21wb25lbnRzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBwbGF5ZXIucGxheVNvdW5kKHBsYXllci5nZXRMb2NhdGlvbigpLCB3cmFwcGVyLmdldEVycm9yU291bmQoKSwgMS4wZiwgMS4wZik7DQogICAgICAgIH0gY2F0Y2ggKElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQWRkSXRlbXNHVUldIEZhaWxlZCB0byBwbGF5IGVycm9yIHNvdW5kIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSArICI6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgIH0NCg0KICAgICAgICBwbGF5ZXIuY2xvc2VJbnZlbnRvcnkoKTsNCg0KICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFza0xhdGVyKEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLCAoKSAtPiB7DQogICAgICAgICAgICBpZiAocGxheWVyLmlzT25saW5lKCkpIHsNCiAgICAgICAgICAgICAgICBuZXcgQWRkSXRlbXNHVUkocGxheWVyLCBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRFdmVudE1hbmFnZXIoKSkub3BlbkludmVudG9yeShwbGF5ZXIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCByZW9wZW5EZWxheSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBpbnZlbnRvcnkgY2xpY2sgZXZlbnRzIGZvciB0aGUgQWRkSXRlbXNHVUkgLy8gbm90ZTogTWFuYWdlcyBpdGVtIHBsYWNlbWVudCwgYnV0dG9uIGludGVyYWN0aW9ucywgYW5kIGJsYWNrbGlzdCBjaGVja3MNCiAgICAgKi8NCiAgICBARXZlbnRIYW5kbGVyDQogICAgcHVibGljIHZvaWQgb25JbnZlbnRvcnlDbGljayhJbnZlbnRvcnlDbGlja0V2ZW50IGV2ZW50KSB7DQogICAgICAgIGlmICghKGV2ZW50LmdldFdob0NsaWNrZWQoKSBpbnN0YW5jZW9mIFBsYXllcikpIHJldHVybjsNCiAgICAgICAgaWYgKCFldmVudC5nZXRWaWV3KCkuZ2V0VGl0bGUoKS5lcXVhbHMoR1VJX1RJVExFKSkgcmV0dXJuOw0KDQogICAgICAgIFBsYXllciBwbGF5ZXIgPSAoUGxheWVyKSBldmVudC5nZXRXaG9DbGlja2VkKCk7DQogICAgICAgIGludCBzbG90ID0gZXZlbnQuZ2V0U2xvdCgpOw0KICAgICAgICBJdGVtU3RhY2sgY3VycmVudEl0ZW0gPSBldmVudC5nZXRDdXJyZW50SXRlbSgpOw0KICAgICAgICBJdGVtU3RhY2sgY3Vyc29ySXRlbSA9IGV2ZW50LmdldEN1cnNvcigpOw0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0RGVidWdNYW5hZ2VyKCk7DQoNCiAgICAgICAgLy8gR2V0IG9yIGNyZWF0ZSBzZXNzaW9uDQogICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBzZXNzaW9uID0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLmdldE9yQ3JlYXRlU2Vzc2lvbihwbGF5ZXIpOw0KDQogICAgICAgIC8vIENoZWNrIGZvciBibGFja2xpc3RlZCBjdXJzb3IgaXRlbSB3aGVuIHBsYWNpbmcgaW4gdG9wIGludmVudG9yeQ0KICAgICAgICBpZiAoc2xvdCA8IDU0ICYmICFwcm90ZWN0ZWRTbG90cy5jb250YWlucyhzbG90KSAmJiBjdXJzb3JJdGVtICE9IG51bGwgJiYgaXNCbGFja2xpc3RlZChjdXJzb3JJdGVtKSkgew0KICAgICAgICAgICAgZXZlbnQuc2V0Q2FuY2VsbGVkKHRydWUpOw0KICAgICAgICAgICAgaGFuZGxlQmxhY2tsaXN0ZWRJdGVtKHBsYXllciwgY3Vyc29ySXRlbS5jbG9uZSgpKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFByb3RlY3QgY2xpY2tzIGluIHRvcCBpbnZlbnRvcnkgKEFkZEl0ZW1zR1VJLCBzbG90cyAwLTUzKQ0KICAgICAgICBpZiAoc2xvdCA8IDU0KSB7DQogICAgICAgICAgICBpZiAocHJvdGVjdGVkU2xvdHMuY29udGFpbnMoc2xvdCkpIHsNCiAgICAgICAgICAgICAgICBldmVudC5zZXRDYW5jZWxsZWQodHJ1ZSk7DQogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJdGVtID09IG51bGwgfHwgIWN1cnJlbnRJdGVtLmhhc0l0ZW1NZXRhKCkpIHJldHVybjsNCg0KICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBidXR0b24gY2xpY2tzDQogICAgICAgICAgICAgICAgaWYgKHNsb3QgPT0gNDcpIHsgLy8gQ2FuY2VsIGJ1dHRvbg0KICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRGVidWcoIkNhbmNlbCBidXR0b24gY2xpY2tlZCBieSAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICAgICAgICAgIGhhbmRsZUNhbmNlbEJ1dHRvbihwbGF5ZXIsIGV2ZW50LmdldEludmVudG9yeSgpKTsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNsb3QgPT0gNDkpIHsgLy8gSW5mbyBidXR0b24NCiAgICAgICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckRlYnVnKCJJbmZvIGJ1dHRvbiBjbGlja2VkIGJ5ICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgICAgICAgICAgLy8gSW5mb3JtYXRpb25hbCBvbmx5LCBubyBhY3Rpb24gbmVlZGVkDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzbG90ID09IDUxKSB7IC8vIENvbmZpcm0gYnV0dG9uDQogICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5idWZmZXJEZWJ1ZygiQ29uZmlybSBidXR0b24gY2xpY2tlZCBieSAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICAgICAgICAgIGhhbmRsZUNvbmZpcm1CdXR0b24ocGxheWVyLCBldmVudC5nZXRJbnZlbnRvcnkoKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgLy8gQWxsb3cgaXRlbSBpbnRlcmFjdGlvbiBpbiBjb250ZW50IGFyZWENCiAgICAgICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFzayhCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKSwgKCkgLT4gdXBkYXRlQ29uZmlybUJ1dHRvbihldmVudC5nZXRJbnZlbnRvcnkoKSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy8gQWxsb3cgY2xpY2tzIGluIHBsYXllciBpbnZlbnRvcnkNCiAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrKEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLCAoKSAtPiB1cGRhdGVDb25maXJtQnV0dG9uKGV2ZW50LmdldEludmVudG9yeSgpKSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBIYW5kbGUgc2hpZnQtY2xpY2tpbmcgZnJvbSBwbGF5ZXIgaW52ZW50b3J5DQogICAgICAgIGlmIChldmVudC5pc1NoaWZ0Q2xpY2soKSAmJiBzbG90ID49IDU0ICYmIGN1cnJlbnRJdGVtICE9IG51bGwgJiYgY3VycmVudEl0ZW0uZ2V0VHlwZSgpICE9IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgaWYgKGlzQmxhY2tsaXN0ZWQoY3VycmVudEl0ZW0pKSB7DQogICAgICAgICAgICAgICAgZXZlbnQuc2V0Q2FuY2VsbGVkKHRydWUpOw0KICAgICAgICAgICAgICAgIGhhbmRsZUJsYWNrbGlzdGVkSXRlbShwbGF5ZXIsIGN1cnJlbnRJdGVtLmNsb25lKCkpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gRmluZCBmaXJzdCBhdmFpbGFibGUgc2xvdCBpbiBjb250ZW50IGFyZWENCiAgICAgICAgICAgIEludmVudG9yeSB0b3BJbnZlbnRvcnkgPSBldmVudC5nZXRJbnZlbnRvcnkoKTsNCiAgICAgICAgICAgIGZvciAoaW50IGkgPSAxMDsgaSA8PSA0MzsgaSsrKSB7DQogICAgICAgICAgICAgICAgaWYgKCFwcm90ZWN0ZWRTbG90cy5jb250YWlucyhpKSAmJiAodG9wSW52ZW50b3J5LmdldEl0ZW0oaSkgPT0gbnVsbCB8fCB0b3BJbnZlbnRvcnkuZ2V0SXRlbShpKS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuQUlSKSkgew0KICAgICAgICAgICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFzayhCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKSwgKCkgLT4gdXBkYXRlQ29uZmlybUJ1dHRvbih0b3BJbnZlbnRvcnkpKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZXZlbnQuc2V0Q2FuY2VsbGVkKHRydWUpOw0KICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRNZXNzYWdlc0NvbmZpZygpOw0KICAgICAgICAgICAgU3RyaW5nIG5vRW1wdHlTbG90cyA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygibm8tZW1wdHktc2xvdHMiLCAiJmNObyBlbXB0eSBzbG90cyBhdmFpbGFibGUgaW4gdGhlIGl0ZW0gR1VJISIpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbm9FbXB0eVNsb3RzKSk7DQogICAgICAgIH0NCiAgICB9DQogICAgLyoqDQogICAgICogSGFuZGxlcyBpbnZlbnRvcnkgZHJhZyBldmVudHMgZm9yIHRoZSBBZGRJdGVtc0dVSSAvLyBub3RlOiBNYW5hZ2VzIGRyYWcgaW50ZXJhY3Rpb25zIGFuZCBibGFja2xpc3QgY2hlY2tzDQogICAgICovDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uSW52ZW50b3J5RHJhZyhJbnZlbnRvcnlEcmFnRXZlbnQgZXZlbnQpIHsNCiAgICAgICAgaWYgKCEoZXZlbnQuZ2V0V2hvQ2xpY2tlZCgpIGluc3RhbmNlb2YgUGxheWVyKSkgcmV0dXJuOw0KICAgICAgICBpZiAoIWV2ZW50LmdldFZpZXcoKS5nZXRUaXRsZSgpLmVxdWFscyhHVUlfVElUTEUpKSByZXR1cm47DQoNCiAgICAgICAgUGxheWVyIHBsYXllciA9IChQbGF5ZXIpIGV2ZW50LmdldFdob0NsaWNrZWQoKTsNCiAgICAgICAgU2V0PEludGVnZXI+IGRyYWdTbG90cyA9IGV2ZW50LmdldFJhd1Nsb3RzKCk7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXREZWJ1Z01hbmFnZXIoKTsNCg0KICAgICAgICAvLyBDaGVjayBmb3IgcHJvdGVjdGVkIHNsb3RzIGluIHRvcCBpbnZlbnRvcnkNCiAgICAgICAgYm9vbGVhbiBoYXNQcm90ZWN0ZWRTbG90cyA9IGRyYWdTbG90cy5zdHJlYW0oKS5hbnlNYXRjaChzbG90IC0+IHNsb3QgPCA1NCAmJiBwcm90ZWN0ZWRTbG90cy5jb250YWlucyhzbG90KSk7DQogICAgICAgIGlmIChoYXNQcm90ZWN0ZWRTbG90cykgew0KICAgICAgICAgICAgZXZlbnQuc2V0Q2FuY2VsbGVkKHRydWUpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ2hlY2sgZm9yIGJsYWNrbGlzdGVkIGl0ZW1zDQogICAgICAgIEl0ZW1TdGFjayBjdXJzb3JJdGVtID0gZXZlbnQuZ2V0T2xkQ3Vyc29yKCk7DQogICAgICAgIGlmIChpc0JsYWNrbGlzdGVkKGN1cnNvckl0ZW0pKSB7DQogICAgICAgICAgICBldmVudC5zZXRDYW5jZWxsZWQodHJ1ZSk7DQogICAgICAgICAgICBoYW5kbGVCbGFja2xpc3RlZEl0ZW0ocGxheWVyLCBjdXJzb3JJdGVtLmNsb25lKCkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQWxsb3cgZHJhZ2dpbmcgdG8gY29udGVudCBhcmVhDQogICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrKEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLCAoKSAtPiB1cGRhdGVDb25maXJtQnV0dG9uKGV2ZW50LmdldFZpZXcoKS5nZXRUb3BJbnZlbnRvcnkoKSkpOw0KICAgIH0NCg0KICAgIEBFdmVudEhhbmRsZXINCiAgICBwdWJsaWMgdm9pZCBvbkludmVudG9yeUNsb3NlKEludmVudG9yeUNsb3NlRXZlbnQgZXZlbnQpIHsNCiAgICAgICAgLy8gT25seSBoYW5kbGUgZXZlbnRzIGZvciB0aGlzIHNwZWNpZmljIHBsYXllciBhbmQgaW52ZW50b3J5DQogICAgICAgIGlmICghZXZlbnQuZ2V0UGxheWVyKCkuZXF1YWxzKHRoaXMucGxheWVyKSkgcmV0dXJuOw0KICAgICAgICBpZiAoIWV2ZW50LmdldFZpZXcoKS5nZXRUaXRsZSgpLmVxdWFscyhHVUlfVElUTEUpKSByZXR1cm47DQoNCiAgICAgICAgLy8gQ2xlYW4gdXAgd2hlbiBpbnZlbnRvcnkgY2xvc2VzDQogICAgICAgIGNsZWFudXAodGhpcy5wbGF5ZXIpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEhhbmRsZXMgdGhlIENhbmNlbCBidXR0b24gY2xpY2sgaW4gdGhlIEFkZEl0ZW1zR1VJIC8vIG5vdGU6IERpc2NhcmRzIGNoYW5nZXMgYW5kIHJldHVybnMgdG8gQ3JlYXRlR1VJDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGhhbmRsZUNhbmNlbEJ1dHRvbihQbGF5ZXIgcGxheWVyLCBJbnZlbnRvcnkgaW52ZW50b3J5KSB7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRNZXNzYWdlc0NvbmZpZygpOw0KDQogICAgICAgIGlmIChoYXNJdGVtc0NoYW5nZWQocGxheWVyLCBpbnZlbnRvcnkpKSB7DQogICAgICAgICAgICBTdHJpbmcgbWVzc2FnZSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiY2hhbmdlcy1kaXNjYXJkZWQiLCAiJmVDaGFuZ2VzIGRpc2NhcmRlZC4gVXNlIENvbmZpcm0gdG8gc2F2ZSBpdGVtIGNoYW5nZXMuIik7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKSk7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRGVidWcoIltERUJVRyAtIEFkZEl0ZW1zR1VJXSBDaGFuZ2VzIGRpc2NhcmRlZCBmb3IgIiArIHBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RyaW5nIG1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoIm5vLWNoYW5nZXMiLCAiJmVSZXR1cm5lZCB0byBDcmVhdGUgQm91bnR5IEdVSS4gTm8gY2hhbmdlcyB3ZXJlIG1hZGUuIik7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBtZXNzYWdlKSk7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRGVidWcoIltERUJVRyAtIEFkZEl0ZW1zR1VJXSBObyBjaGFuZ2VzIGRldGVjdGVkIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgIH0NCg0KICAgICAgICBjbGVhbnVwKHBsYXllcik7DQogICAgICAgIHBsYXllci5jbG9zZUludmVudG9yeSgpOw0KICAgICAgICBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbiA9IEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5nZXRPckNyZWF0ZVNlc3Npb24ocGxheWVyKTsNCiAgICAgICAgc2Vzc2lvbi5yZXR1cm5Ub0NyZWF0ZUdVSSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEhhbmRsZXMgdGhlIENvbmZpcm0gYnV0dG9uIGNsaWNrIGluIHRoZSBBZGRJdGVtc0dVSQ0KICAgICAqIC8vIG5vdGU6IFNhdmVzIHNlbGVjdGVkIGl0ZW1zIHRvIHRoZSBib3VudHkgc2Vzc2lvbiwgc3RhcnRzIHNlc3Npb24gaWYgbmV3LCBhbmQgcmV0dXJucyB0byBDcmVhdGVHVUkNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgaGFuZGxlQ29uZmlybUJ1dHRvbihQbGF5ZXIgcGxheWVyLCBJbnZlbnRvcnkgaW52ZW50b3J5KSB7DQogICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBzZXNzaW9uID0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLmdldE9yQ3JlYXRlU2Vzc2lvbihwbGF5ZXIpOw0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0RGVidWdNYW5hZ2VyKCk7DQoNCiAgICAgICAgaWYgKCF2YWxpZGF0ZVRvdGFsQm91bnR5VmFsdWUocGxheWVyLCBpbnZlbnRvcnksIHNlc3Npb24pKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRGVidWcoIltERUJVRyAtIEFkZEl0ZW1zR1VJXUJvdW50eSB2YWx1ZSB2YWxpZGF0aW9uIGZhaWxlZCBmb3IgIiArIHBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ29sbGVjdCBpdGVtcyBmcm9tIG5vbi1wcm90ZWN0ZWQgc2xvdHMNCiAgICAgICAgTGlzdDxJdGVtU3RhY2s+IGNvbGxlY3RlZEl0ZW1zID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgIGRvdWJsZSB0b3RhbFZhbHVlID0gMC4wOw0KICAgICAgICBJdGVtVmFsdWVDYWxjdWxhdG9yIGNhbGN1bGF0b3IgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRJdGVtVmFsdWVDYWxjdWxhdG9yKCk7DQoNCiAgICAgICAgZm9yIChpbnQgc2xvdCA9IDA7IHNsb3QgPCBpbnZlbnRvcnkuZ2V0U2l6ZSgpOyBzbG90KyspIHsNCiAgICAgICAgICAgIGlmICghcHJvdGVjdGVkU2xvdHMuY29udGFpbnMoc2xvdCkpIHsNCiAgICAgICAgICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IGludmVudG9yeS5nZXRJdGVtKHNsb3QpOw0KICAgICAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgaXRlbS5nZXRUeXBlKCkgIT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICAgICAgICAgIEl0ZW1TdGFjayBjbG9uZWRJdGVtID0gaXRlbS5jbG9uZSgpOw0KICAgICAgICAgICAgICAgICAgICAvLyBFbmZvcmNlIHN0YWNrIHNpemUgbGltaXRzDQogICAgICAgICAgICAgICAgICAgIGlmIChjbG9uZWRJdGVtLmdldEFtb3VudCgpID4gY2xvbmVkSXRlbS5nZXRNYXhTdGFja1NpemUoKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVkSXRlbS5zZXRBbW91bnQoY2xvbmVkSXRlbS5nZXRNYXhTdGFja1NpemUoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGVkSXRlbXMuYWRkKGNsb25lZEl0ZW0pOw0KICAgICAgICAgICAgICAgICAgICB0b3RhbFZhbHVlICs9IGNhbGN1bGF0b3IuY2FsY3VsYXRlSXRlbVZhbHVlKGNsb25lZEl0ZW0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFVwZGF0ZSBzZXNzaW9uIGFuZCBzdGFydCBpdCBpZiBuZXcgaXRlbXMgd2VyZSBhZGRlZA0KICAgICAgICBib29sZWFuIGhhZE5vSXRlbXNCZWZvcmUgPSAhc2Vzc2lvbi5oYXNJdGVtUmV3YXJkcygpOw0KICAgICAgICBzZXNzaW9uLnNldEl0ZW1SZXdhcmRzKGNvbGxlY3RlZEl0ZW1zKTsNCiAgICAgICAgaWYgKGhhZE5vSXRlbXNCZWZvcmUgJiYgIWNvbGxlY3RlZEl0ZW1zLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBBZGRJdGVtc0dVSV0gU3RhcnRlZCBib3VudHkgY3JlYXRpb24gc2Vzc2lvbiBmb3IgIiArIHBsYXllci5nZXROYW1lKCkgKyAiIGR1ZSB0byBpdGVtIGFkZGl0aW9uIik7DQogICAgICAgIH0NCg0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBtZXNzYWdlc0NvbmZpZyA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldE1lc3NhZ2VzQ29uZmlnKCk7DQogICAgICAgIFN0cmluZyBtZXNzYWdlID0gdG90YWxWYWx1ZSA+IDAgPw0KICAgICAgICAgICAgICAgIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiaXRlbXMtYWRkZWQiLCAiJmFJdGVtcyBhZGRlZCB0byBib3VudHkhIFRvdGFsIHZhbHVlOiAmZSQlYm91bnRpZXNwbHVzX2l0ZW1fdmFsdWUlIikgOg0KICAgICAgICAgICAgICAgIG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiaXRlbXMtdXBkYXRlZCIsICImYUl0ZW1zIHVwZGF0ZWQgZm9yIGJvdW50eSEiKTsNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcikuaXRlbVZhbHVlKHRvdGFsVmFsdWUpOw0KICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KG1lc3NhZ2UsIGNvbnRleHQpKTsNCg0KICAgICAgICAvLyBDbGVhbiB1cCBhbmQgcmV0dXJuIHRvIENyZWF0ZUdVSQ0KICAgICAgICBjbGVhbnVwKHBsYXllcik7DQogICAgICAgIHBsYXllci5jbG9zZUludmVudG9yeSgpOw0KICAgICAgICBzZXNzaW9uLnJldHVyblRvQ3JlYXRlR1VJKCk7DQogICAgICAgIGRlYnVnTWFuYWdlci5idWZmZXJEZWJ1ZygiW0RFQlVHIC0gQWRkSXRlbXNHVUldIENvbmZpcm1lZCBpdGVtcyBmb3IgIiArIHBsYXllci5nZXROYW1lKCkgKyAiLCByZXR1cm5pbmcgdG8gQ3JlYXRlR1VJIik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB0aGUgYWN0aXZlIEdVSSBpbnN0YW5jZSBmb3IgYSBwbGF5ZXIgLy8gbm90ZTogUmV0cmlldmVzIHRoZSBBZGRJdGVtc0dVSSBpbnN0YW5jZSBhc3NvY2lhdGVkIHdpdGggdGhlIHBsYXllcidzIFVVSUQNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIEFkZEl0ZW1zR1VJIGdldEFjdGl2ZUluc3RhbmNlKFVVSUQgcGxheWVyVVVJRCkgew0KICAgICAgICByZXR1cm4gYWN0aXZlSW5zdGFuY2VzLmdldChwbGF5ZXJVVUlEKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIEdVSSdzIGNvbnRlbnQgc2xvdHMgLy8gbm90ZTogQ291bnRzIG5vbi1udWxsLCBub24tQUlSIGl0ZW1zIGluIG5vbi1wcm90ZWN0ZWQgc2xvdHMNCiAgICAgKi8NCiAgICBwdWJsaWMgaW50IGdldEl0ZW1Db3VudCgpIHsNCiAgICAgICAgaW50IGNvdW50ID0gMDsNCiAgICAgICAgZm9yIChpbnQgc2xvdCA9IDA7IHNsb3QgPCBpbnZlbnRvcnkuZ2V0U2l6ZSgpOyBzbG90KyspIHsNCiAgICAgICAgICAgIGlmICghcHJvdGVjdGVkU2xvdHMuY29udGFpbnMoc2xvdCkpIHsNCiAgICAgICAgICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IGludmVudG9yeS5nZXRJdGVtKHNsb3QpOw0KICAgICAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgaXRlbS5nZXRUeXBlKCkgIT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICAgICAgICAgIGNvdW50Kys7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBjb3VudDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSB0b3RhbCB2YWx1ZSBvZiBpdGVtcyBpbiB0aGUgR1VJJ3MgY29udGVudCBzbG90cyAvLyBub3RlOiBDYWxjdWxhdGVzIHZhbHVlIG9mIG5vbi1udWxsLCBub24tQUlSIGl0ZW1zIHVzaW5nIEl0ZW1WYWx1ZUNhbGN1bGF0b3INCiAgICAgKi8NCiAgICBwdWJsaWMgZG91YmxlIGdldEl0ZW1WYWx1ZSgpIHsNCiAgICAgICAgZG91YmxlIHZhbHVlID0gMC4wOw0KICAgICAgICBJdGVtVmFsdWVDYWxjdWxhdG9yIGNhbGN1bGF0b3IgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRJdGVtVmFsdWVDYWxjdWxhdG9yKCk7DQogICAgICAgIGZvciAoaW50IHNsb3QgPSAwOyBzbG90IDwgaW52ZW50b3J5LmdldFNpemUoKTsgc2xvdCsrKSB7DQogICAgICAgICAgICBpZiAoIXByb3RlY3RlZFNsb3RzLmNvbnRhaW5zKHNsb3QpKSB7DQogICAgICAgICAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBpbnZlbnRvcnkuZ2V0SXRlbShzbG90KTsNCiAgICAgICAgICAgICAgICBpZiAoaXRlbSAhPSBudWxsICYmIGl0ZW0uZ2V0VHlwZSgpICE9IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBjYWxjdWxhdG9yLmNhbGN1bGF0ZUl0ZW1WYWx1ZShpdGVtKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHZhbHVlOw0KICAgIH0NCnvbnkyNi9ib3VudGllc1BsdXMvR1VJcy9Cb3VudHlDYW5jZWwuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDA2Mzc3NiAxNTAyNjcwMzc0NSAwMTcxNjEAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQpwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMuR1VJczsNCg0KaW1wb3J0IG9yZy5idWtraXQuQnVra2l0Ow0KaW1wb3J0IG9yZy5idWtraXQuQ2hhdENvbG9yOw0KaW1wb3J0IG9yZy5idWtraXQuTWF0ZXJpYWw7DQppbXBvcnQgb3JnLmJ1a2tpdC5PZmZsaW5lUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLkZpbGVDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5maWxlLllhbWxDb25maWd1cmF0aW9uOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LkV2ZW50SGFuZGxlcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50Lkxpc3RlbmVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuaW52ZW50b3J5LkludmVudG9yeUNsaWNrRXZlbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSW52ZW50b3J5Ow0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1TdGFjazsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5tZXRhLkl0ZW1NZXRhOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuKjsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLio7DQoNCmltcG9ydCBqYXZhLmlvLkZpbGU7DQppbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQ7DQppbXBvcnQgamF2YS51dGlsLio7DQppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuQ29uY3VycmVudEhhc2hNYXA7DQoNCnB1YmxpYyBjbGFzcyBCb3VudHlDYW5jZWwgaW1wbGVtZW50cyBMaXN0ZW5lciB7DQoNCiAgICBwcml2YXRlIGZpbmFsIEJvdW50aWVzUGx1cyBwbHVnaW47DQogICAgcHJpdmF0ZSBGaWxlQ29uZmlndXJhdGlvbiBjb25maWc7DQogICAgcHJpdmF0ZSBTdHJpbmcgZ3VpVGl0bGU7DQogICAgcHJpdmF0ZSBpbnQgZ3VpU2l6ZTsNCiAgICBwcml2YXRlIGludCBpdGVtc1BlclBhZ2U7DQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgTWFwPFN0cmluZywgU3RyaW5nPiBpdGVtRmFpbHVyZXMgPSBuZXcgQ29uY3VycmVudEhhc2hNYXA8PigpOw0KDQogICAgLyoqDQogICAgICogQ29uc3RydWN0cyB0aGUgQm91bnR5Q2FuY2VsIEdVSQ0KICAgICAqIC8vIG5vdGU6IEluaXRpYWxpemVzIGJvdW50eSBjYW5jZWxsYXRpb24gR1VJIGFuZCByZWdpc3RlcnMgbGlzdGVuZXJzDQogICAgICovDQogICAgcHVibGljIEJvdW50eUNhbmNlbChCb3VudGllc1BsdXMgcGx1Z2luLCBFdmVudE1hbmFnZXIgZXZlbnRNYW5hZ2VyKSB7DQogICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luOw0KICAgICAgICB0aGlzLmNvbmZpZyA9IHBsdWdpbi5nZXRDb25maWcoKTsgLy8gVXNlIG1haW4gY29uZmlnIGluc3RlYWQNCiAgICAgICAgbG9hZENvbmZpZ3VyYXRpb24oKTsNCiAgICAgICAgZXZlbnRNYW5hZ2VyLnJlZ2lzdGVyKHRoaXMpOyAvLyBVc2UgRXZlbnRNYW5hZ2VyDQogICAgfQ0KDQogICAgLyoqDQogICAgICogTG9hZHMgb3IgY3JlYXRlcyBCb3VudHlDYW5jZWxHVUkueW1sIGNvbmZpZ3VyYXRpb24NCiAgICAgKiAvLyBub3RlOiBJbml0aWFsaXplcyBHVUkgc2V0dGluZ3MgZm9yIHRoZSBib3VudHkgY2FuY2VsbGF0aW9uIGRpc3BsYXkNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgbG9hZENvbmZpZ3VyYXRpb24oKSB7DQogICAgICAgIEZpbGUgY29uZmlnRmlsZSA9IG5ldyBGaWxlKHBsdWdpbi5nZXREYXRhRm9sZGVyKCksICJHVUlzL0JvdW50eUNhbmNlbEdVSS55bWwiKTsNCiAgICAgICAgaWYgKCFjb25maWdGaWxlLmV4aXN0cygpKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5zYXZlUmVzb3VyY2UoIkdVSXMvQm91bnR5Q2FuY2VsR1VJLnltbCIsIGZhbHNlKTsgLy8gQ29weSBkZWZhdWx0IGNvbmZpZw0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiW0RFQlVHIC0gQm91bnR5Q2FuY2VsR1VJXSBDcmVhdGVkIGRlZmF1bHQgQm91bnR5Q2FuY2VsR1VJLnltbCIpOw0KICAgICAgICAgICAgfSBjYXRjaCAoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCkubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5Q2FuY2VsR1VJXSBGYWlsZWQgdG8gc2F2ZSBkZWZhdWx0IEJvdW50eUNhbmNlbEdVSS55bWw6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgY29uZmlnID0gWWFtbENvbmZpZ3VyYXRpb24ubG9hZENvbmZpZ3VyYXRpb24oY29uZmlnRmlsZSk7DQogICAgICAgIC8vIFZlcmlmeSBjb25maWd1cmF0aW9uIGludGVncml0eQ0KICAgICAgICBpZiAoY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJib3VudHktaXRlbSIpID09IG51bGwpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlDYW5jZWxHVUldIEJvdW50eUNhbmNlbEdVSS55bWwgaXMgZW1wdHkgb3IgaW52YWxpZCwgcmVsb2FkaW5nIGRlZmF1bHQiKTsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgY29uZmlnRmlsZS5kZWxldGUoKTsgLy8gUmVtb3ZlIGludmFsaWQgZmlsZQ0KICAgICAgICAgICAgICAgIHBsdWdpbi5zYXZlUmVzb3VyY2UoIkdVSXMvQm91bnR5Q2FuY2VsR1VJLnltbCIsIGZhbHNlKTsgLy8gUmVjb3B5IGRlZmF1bHQNCiAgICAgICAgICAgICAgICBjb25maWcgPSBZYW1sQ29uZmlndXJhdGlvbi5sb2FkQ29uZmlndXJhdGlvbihjb25maWdGaWxlKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldERlYnVnTWFuYWdlcigpLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUNhbmNlbEdVSV0gRmFpbGVkIHRvIHJlbG9hZCBkZWZhdWx0IEJvdW50eUNhbmNlbEdVSS55bWw6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5ndWlUaXRsZSA9IGNvbmZpZy5nZXRTdHJpbmcoImd1aS50aXRsZSIsICImNENhbmNlbCBCb3VudHkiKTsNCiAgICAgICAgdGhpcy5ndWlTaXplID0gY29uZmlnLmdldEludCgiZ3VpLnNpemUiLCA1NCk7DQogICAgICAgIHRoaXMuaXRlbXNQZXJQYWdlID0gY29uZmlnLmdldEludCgiZ3VpLml0ZW1zLXBlci1wYWdlIiwgMzYpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEhhbmRsZXMgdGhlIC9ib3VudHkgY2FuY2VsIGNvbW1hbmQNCiAgICAgKiAvLyBub3RlOiBPcGVucyB0aGUgY2FuY2VsIEdVSSBpZiB0aGUgcGxheWVyIGhhcyBhY3RpdmUgYm91bnRpZXMNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgaGFuZGxlQ2FuY2VsQ29tbWFuZChQbGF5ZXIgcGxheWVyLCBCb3VudGllc1BsdXMgcGx1Z2luKSB7DQogICAgICAgIFVVSUQgcGxheWVyVVVJRCA9IHBsYXllci5nZXRVbmlxdWVJZCgpOw0KICAgICAgICBNYXA8VVVJRCwgTWFwPFVVSUQsIEludGVnZXI+PiBhbGxCb3VudGllcyA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkubGlzdEFsbEJvdW50aWVzKCk7DQogICAgICAgIExpc3Q8TWFwLkVudHJ5PFVVSUQsIEludGVnZXI+PiBwbGF5ZXJCb3VudGllcyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICBmb3IgKE1hcC5FbnRyeTxVVUlELCBNYXA8VVVJRCwgSW50ZWdlcj4+IHRhcmdldEVudHJ5IDogYWxsQm91bnRpZXMuZW50cnlTZXQoKSkgew0KICAgICAgICAgICAgVVVJRCB0YXJnZXRVVUlEID0gdGFyZ2V0RW50cnkuZ2V0S2V5KCk7DQogICAgICAgICAgICBNYXA8VVVJRCwgSW50ZWdlcj4gc2V0dGVycyA9IHRhcmdldEVudHJ5LmdldFZhbHVlKCk7DQogICAgICAgICAgICBpZiAoc2V0dGVycy5jb250YWluc0tleShwbGF5ZXJVVUlEKSkgew0KICAgICAgICAgICAgICAgIHBsYXllckJvdW50aWVzLmFkZChuZXcgQWJzdHJhY3RNYXAuU2ltcGxlRW50cnk8Pih0YXJnZXRVVUlELCBzZXR0ZXJzLmdldChwbGF5ZXJVVUlEKSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHBsYXllckJvdW50aWVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgIm5vLWJvdW50aWVzLXRvLWNhbmNlbCIpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgQm91bnR5Q2FuY2VsIGJvdW50eUNhbmNlbCA9IG5ldyBCb3VudHlDYW5jZWwocGx1Z2luLCBwbHVnaW4uZ2V0RXZlbnRNYW5hZ2VyKCkpOw0KICAgICAgICBib3VudHlDYW5jZWwub3BlbkNhbmNlbEdVSShwbGF5ZXIsIDApOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIE9wZW5zIHRoZSBjYW5jZWwgR1VJIGZvciBhIHBsYXllcg0KICAgICAqIC8vIG5vdGU6IERpc3BsYXlzIHBsYXllcuKAmXMgYWN0aXZlIGJvdW50aWVzIHdpdGggcGFnaW5hdGlvbg0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBvcGVuQ2FuY2VsR1VJKFBsYXllciBwbGF5ZXIsIGludCBwYWdlKSB7DQogICAgICAgIFVVSUQgcGxheWVyVVVJRCA9IHBsYXllci5nZXRVbmlxdWVJZCgpOw0KICAgICAgICBNYXA8VVVJRCwgTWFwPFVVSUQsIEludGVnZXI+PiBhbGxCb3VudGllcyA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkubGlzdEFsbEJvdW50aWVzKCk7DQogICAgICAgIExpc3Q8TWFwLkVudHJ5PFVVSUQsIEludGVnZXI+PiBwbGF5ZXJCb3VudGllcyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICBmb3IgKE1hcC5FbnRyeTxVVUlELCBNYXA8VVVJRCwgSW50ZWdlcj4+IHRhcmdldEVudHJ5IDogYWxsQm91bnRpZXMuZW50cnlTZXQoKSkgew0KICAgICAgICAgICAgVVVJRCB0YXJnZXRVVUlEID0gdGFyZ2V0RW50cnkuZ2V0S2V5KCk7DQogICAgICAgICAgICBNYXA8VVVJRCwgSW50ZWdlcj4gc2V0dGVycyA9IHRhcmdldEVudHJ5LmdldFZhbHVlKCk7DQogICAgICAgICAgICBpZiAoc2V0dGVycy5jb250YWluc0tleShwbGF5ZXJVVUlEKSkgew0KICAgICAgICAgICAgICAgIHBsYXllckJvdW50aWVzLmFkZChuZXcgQWJzdHJhY3RNYXAuU2ltcGxlRW50cnk8Pih0YXJnZXRVVUlELCBzZXR0ZXJzLmdldChwbGF5ZXJVVUlEKSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaW50IHRvdGFsUGFnZXMgPSAoaW50KSBNYXRoLmNlaWwoKGRvdWJsZSkgcGxheWVyQm91bnRpZXMuc2l6ZSgpIC8gaXRlbXNQZXJQYWdlKTsNCiAgICAgICAgaWYgKHRvdGFsUGFnZXMgPT0gMCkgdG90YWxQYWdlcyA9IDE7DQogICAgICAgIGlmIChwYWdlID49IHRvdGFsUGFnZXMpIHBhZ2UgPSB0b3RhbFBhZ2VzIC0gMTsNCiAgICAgICAgaWYgKHBhZ2UgPCAwKSBwYWdlID0gMDsNCiAgICAgICAgU3RyaW5nIHRpdGxlID0gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBndWlUaXRsZSArICIgKFBhZ2UgIiArIChwYWdlICsgMSkgKyAiLyIgKyB0b3RhbFBhZ2VzICsgIikiKTsNCiAgICAgICAgSW52ZW50b3J5IGd1aSA9IEJ1a2tpdC5jcmVhdGVJbnZlbnRvcnkocGxheWVyLCBndWlTaXplLCB0aXRsZSk7IC8vIFNldCBwbGF5ZXIgYXMgaG9sZGVyDQogICAgICAgIGFkZEJvcmRlcihndWkpOw0KICAgICAgICBhZGRCb3VudHlJdGVtcyhndWksIHBsYXllckJvdW50aWVzLCBwYWdlLCBwbGF5ZXIpOw0KICAgICAgICBhZGROYXZpZ2F0aW9uQnV0dG9ucyhndWksIHBhZ2UsIHRvdGFsUGFnZXMsIHBsYXllckJvdW50aWVzLnNpemUoKSk7DQogICAgICAgIGFkZEluZm9CdXR0b24oZ3VpLCBwbGF5ZXJCb3VudGllcywgcGFnZSwgdG90YWxQYWdlcywgcGxheWVyKTsNCiAgICAgICAgcGxheWVyLm9wZW5JbnZlbnRvcnkoZ3VpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIGJvcmRlciBpdGVtcyB0byB0aGUgR1VJDQogICAgICogLy8gbm90ZTogUG9wdWxhdGVzIGJvcmRlciBzbG90cyB3aXRoIGdyYXkgc3RhaW5lZCBnbGFzcyBwYW5lcw0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBhZGRCb3JkZXIoSW52ZW50b3J5IGd1aSkgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Qm91bnR5Q2FuY2VsR1VJQ29uZmlnKCk7DQogICAgICAgIFN0cmluZyBtYXRlcmlhbE5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKCJib3JkZXIubWF0ZXJpYWwiLCAiR1JBWV9TVEFJTkVEX0dMQVNTX1BBTkUiKTsNCiAgICAgICAgSXRlbVN0YWNrIGJvcmRlckl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgIFN0cmluZyBmYWlsdXJlUmVhc29uID0gbnVsbDsNCiAgICAgICAgaWYgKGJvcmRlckl0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLlNUT05FICYmICFtYXRlcmlhbE5hbWUuZXF1YWxzSWdub3JlQ2FzZSgiR1JBWV9TVEFJTkVEX0dMQVNTX1BBTkUiKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUNhbmNlbEdVSV0gSW52YWxpZCBib3JkZXIgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyBpbiBCb3VudHlDYW5jZWxHVUkueW1sLCB1c2luZyBHUkFZX1NUQUlORURfR0xBU1NfUEFORSIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIiciOw0KICAgICAgICAgICAgYm9yZGVySXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIkdSQVlfU1RBSU5FRF9HTEFTU19QQU5FIik7DQogICAgICAgIH0NCg0KICAgICAgICBJdGVtTWV0YSBtZXRhID0gYm9yZGVySXRlbS5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAobWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKCIgIik7DQogICAgICAgICAgICBib3JkZXJJdGVtLnNldEl0ZW1NZXRhKG1ldGEpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUNhbmNlbEdVSV0gRmFpbGVkIHRvIGdldCBJdGVtTWV0YSBmb3IgYm9yZGVyIGl0ZW0iKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgIH0NCg0KICAgICAgICBpbnRbXSBib3JkZXJTbG90cyA9IHswLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxNywgMTgsIDI2LCAyNywgMzUsIDM2LCA0NCwgNDUsIDQ2LCA0NywgNDgsIDQ5LCA1MCwgNTEsIDUyLCA1M307DQogICAgICAgIGludCB0b3RhbEl0ZW1zID0gYm9yZGVyU2xvdHMubGVuZ3RoOw0KICAgICAgICBpbnQgc3VjY2Vzc2Z1bEl0ZW1zID0gMDsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGZhaWx1cmVzID0gbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgZm9yIChpbnQgc2xvdCA6IGJvcmRlclNsb3RzKSB7DQogICAgICAgICAgICBpZiAoc2xvdCA8IGd1aS5nZXRTaXplKCkpIHsNCiAgICAgICAgICAgICAgICBpZiAoZmFpbHVyZVJlYXNvbiA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIGd1aS5zZXRJdGVtKHNsb3QsIGJvcmRlckl0ZW0uY2xvbmUoKSk7DQogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxJdGVtcysrOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZCgiYm9yZGVyLXNsb3QtIiArIHNsb3QgKyAiIFJlYXNvbjogIiArIGZhaWx1cmVSZWFzb24pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUNhbmNlbEdVSV0gSW52YWxpZCBzbG90ICIgKyBzbG90ICsgIiBmb3IgYm9yZGVyIGluIEJvdW50eUNhbmNlbCBHVUkiKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoImJvcmRlci1zbG90LSIgKyBzbG90ICsgIiBSZWFzb246IEludmFsaWQgc2xvdCAiICsgc2xvdCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoc3VjY2Vzc2Z1bEl0ZW1zID09IHRvdGFsSXRlbXMpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQm91bnR5Q2FuY2VsR1VJXSBBbGwgYm9yZGVyIGl0ZW1zIGNyZWF0ZWQiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFN0cmluZyBmYWlsdXJlTWVzc2FnZSA9ICJbREVCVUcgLSBCb3VudHlDYW5jZWxHVUldICIgKyBzdWNjZXNzZnVsSXRlbXMgKyAiLyIgKyB0b3RhbEl0ZW1zICsgIiBib3JkZXIgaXRlbXMgY3JlYXRlZCI7DQogICAgICAgICAgICBpZiAoIWZhaWx1cmVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGZhaWx1cmVNZXNzYWdlICs9ICIsIGZhaWxlZCB0byBjcmVhdGU6ICIgKyBTdHJpbmcuam9pbigiLCAiLCBmYWlsdXJlcyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRmFpbHVyZSgiQm91bnR5Q2FuY2VsX2JvcmRlcl8iICsgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCksIGZhaWx1cmVNZXNzYWdlKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEFkZHMgYm91bnR5IGl0ZW1zIHRvIHRoZSBHVUkNCiAgICAgKiAvLyBub3RlOiBQb3B1bGF0ZXMgYm91bnR5IHNrdWxscyBmb3IgY2FuY2VsbGF0aW9uDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGFkZEJvdW50eUl0ZW1zKEludmVudG9yeSBndWksIExpc3Q8TWFwLkVudHJ5PFVVSUQsIEludGVnZXI+PiBwbGF5ZXJCb3VudGllcywgaW50IHBhZ2UsIFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgaXRlbUZhaWx1cmVzLmNsZWFyKCk7IC8vIENsZWFyIHByZXZpb3VzIGZhaWx1cmVzDQoNCiAgICAgICAgaW50IHN0YXJ0SW5kZXggPSBwYWdlICogaXRlbXNQZXJQYWdlOw0KICAgICAgICBpbnQgZW5kSW5kZXggPSBNYXRoLm1pbihzdGFydEluZGV4ICsgaXRlbXNQZXJQYWdlLCBwbGF5ZXJCb3VudGllcy5zaXplKCkpOw0KICAgICAgICBpbnQgdG90YWxJdGVtcyA9IGVuZEluZGV4IC0gc3RhcnRJbmRleDsNCiAgICAgICAgaW50IHN1Y2Nlc3NmdWxJdGVtcyA9IDA7DQogICAgICAgIExpc3Q8U3RyaW5nPiBmYWlsdXJlcyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KDQogICAgICAgIGludCBzbG90ID0gMTA7DQogICAgICAgIGZvciAoaW50IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykgew0KICAgICAgICAgICAgTWFwLkVudHJ5PFVVSUQsIEludGVnZXI+IGJvdW50eUVudHJ5ID0gcGxheWVyQm91bnRpZXMuZ2V0KGkpOw0KICAgICAgICAgICAgVVVJRCB0YXJnZXRVVUlEID0gYm91bnR5RW50cnkuZ2V0S2V5KCk7DQogICAgICAgICAgICBpbnQgYW1vdW50ID0gYm91bnR5RW50cnkuZ2V0VmFsdWUoKTsNCiAgICAgICAgICAgIEl0ZW1TdGFjayBib3VudHlJdGVtID0gY3JlYXRlQm91bnR5SXRlbShwbGF5ZXIsIHRhcmdldFVVSUQsIGFtb3VudCk7DQogICAgICAgICAgICBpZiAoYm91bnR5SXRlbSAhPSBudWxsICYmIGJvdW50eUl0ZW0uZ2V0VHlwZSgpICE9IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgICAgIGd1aS5zZXRJdGVtKHNsb3QsIGJvdW50eUl0ZW0pOw0KICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxJdGVtcysrOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBTdHJpbmcgZmFpbHVyZSA9IGl0ZW1GYWlsdXJlcy5nZXQoImJvdW50eS1pdGVtLSIgKyB0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoImJvdW50eS1pdGVtLSIgKyB0YXJnZXRVVUlEICsgIiBSZWFzb246ICIgKyAoZmFpbHVyZSAhPSBudWxsID8gZmFpbHVyZSA6ICJGYWlsZWQgdG8gY3JlYXRlIGl0ZW0iKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBzbG90Kys7DQogICAgICAgICAgICBpZiAoc2xvdCAlIDkgPT0gOCkgc2xvdCArPSAyOw0KICAgICAgICAgICAgaWYgKHNsb3QgPj0gNDUpIGJyZWFrOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gTG9nIGNvbnNvbGlkYXRlZCBkZWJ1ZyBtZXNzYWdlDQogICAgICAgIGlmIChzdWNjZXNzZnVsSXRlbXMgPT0gdG90YWxJdGVtcykgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBCb3VudHlDYW5jZWxHVUldIEFsbCBib3VudHkgaXRlbXMgY3JlYXRlZCIpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVNZXNzYWdlID0gIltERUJVRyAtIEJvdW50eUNhbmNlbEdVSV0gIiArIHN1Y2Nlc3NmdWxJdGVtcyArICIvIiArIHRvdGFsSXRlbXMgKyAiIGJvdW50eSBpdGVtcyBjcmVhdGVkIjsNCiAgICAgICAgICAgIGlmICghZmFpbHVyZXMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgZmFpbHVyZU1lc3NhZ2UgKz0gIiwgZmFpbGVkIHRvIGNyZWF0ZTogIiArIFN0cmluZy5qb2luKCIsICIsIGZhaWx1cmVzKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5idWZmZXJGYWlsdXJlKCJCb3VudHlDYW5jZWxfYm91bnR5X2l0ZW1zXyIgKyBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSwgZmFpbHVyZU1lc3NhZ2UpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQWRkcyBuYXZpZ2F0aW9uIGJ1dHRvbnMgdG8gdGhlIEdVSQ0KICAgICAqIC8vIG5vdGU6IFBsYWNlcyBQcmV2aW91cyBhbmQgTmV4dCBidXR0b25zIGZvciBwYWdpbmF0aW9uDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGFkZE5hdmlnYXRpb25CdXR0b25zKEludmVudG9yeSBndWksIGludCBwYWdlLCBpbnQgdG90YWxQYWdlcywgaW50IHRvdGFsQm91bnRpZXMpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldEJvdW50eUNhbmNlbEdVSUNvbmZpZygpOw0KICAgICAgICBpbnQgdG90YWxCdXR0b25zID0gKHBhZ2UgPiAwID8gMSA6IDApICsgKHBhZ2UgPCB0b3RhbFBhZ2VzIC0gMSA/IDEgOiAwKTsNCiAgICAgICAgaW50IHN1Y2Nlc3NmdWxCdXR0b25zID0gMDsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGZhaWx1cmVzID0gbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgaWYgKHBhZ2UgPiAwKSB7DQogICAgICAgICAgICBJdGVtU3RhY2sgcHJldkJ1dHRvbiA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIkFSUk9XIik7DQogICAgICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQogICAgICAgICAgICBJdGVtTWV0YSBtZXRhID0gcHJldkJ1dHRvbi5nZXRJdGVtTWV0YSgpOw0KICAgICAgICAgICAgaWYgKG1ldGEgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIG1ldGEuc2V0RGlzcGxheU5hbWUoIsKnYVByZXZpb3VzIFBhZ2UiKTsNCiAgICAgICAgICAgICAgICBtZXRhLnNldExvcmUoQXJyYXlzLmFzTGlzdCgiwqc3R28gdG8gcGFnZSDCp2UiICsgcGFnZSwgIiIsICLCp2FDbGljayB0byBuYXZpZ2F0ZSIpKTsNCiAgICAgICAgICAgICAgICBwcmV2QnV0dG9uLnNldEl0ZW1NZXRhKG1ldGEpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5Q2FuY2VsR1VJXSBGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIGZvciBwcmV2aW91cyBidXR0b24iKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEiOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKGZhaWx1cmVSZWFzb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGd1aS5zZXRJdGVtKDQ4LCBwcmV2QnV0dG9uKTsNCiAgICAgICAgICAgICAgICBzdWNjZXNzZnVsQnV0dG9ucysrOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoInByZXZpb3VzIFJlYXNvbjogIiArIGZhaWx1cmVSZWFzb24pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHBhZ2UgPCB0b3RhbFBhZ2VzIC0gMSkgew0KICAgICAgICAgICAgSXRlbVN0YWNrIG5leHRCdXR0b24gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJBUlJPVyIpOw0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVSZWFzb24gPSBudWxsOw0KICAgICAgICAgICAgSXRlbU1ldGEgbWV0YSA9IG5leHRCdXR0b24uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgICAgIGlmIChtZXRhICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKCLCp2FOZXh0IFBhZ2UiKTsNCiAgICAgICAgICAgICAgICBtZXRhLnNldExvcmUoQXJyYXlzLmFzTGlzdCgiwqc3R28gdG8gcGFnZSDCp2UiICsgKHBhZ2UgKyAyKSwgIiIsICLCp2FDbGljayB0byBuYXZpZ2F0ZSIpKTsNCiAgICAgICAgICAgICAgICBuZXh0QnV0dG9uLnNldEl0ZW1NZXRhKG1ldGEpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5Q2FuY2VsR1VJXSBGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIGZvciBuZXh0IGJ1dHRvbiIpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoZmFpbHVyZVJlYXNvbiA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgZ3VpLnNldEl0ZW0oNTAsIG5leHRCdXR0b24pOw0KICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxCdXR0b25zKys7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZCgibmV4dCBSZWFzb246ICIgKyBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmICh0b3RhbEJ1dHRvbnMgPT0gMCkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBCb3VudHlDYW5jZWxHVUldIE5vIG5hdmlnYXRpb24gYnV0dG9ucyB0byBjcmVhdGUiKTsNCiAgICAgICAgfSBlbHNlIGlmIChzdWNjZXNzZnVsQnV0dG9ucyA9PSB0b3RhbEJ1dHRvbnMpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQm91bnR5Q2FuY2VsR1VJXSBBbGwgbmF2aWdhdGlvbiBidXR0b25zIGNyZWF0ZWQiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFN0cmluZyBmYWlsdXJlTWVzc2FnZSA9ICJbREVCVUcgLSBCb3VudHlDYW5jZWxHVUldICIgKyBzdWNjZXNzZnVsQnV0dG9ucyArICIvIiArIHRvdGFsQnV0dG9ucyArICIgbmF2aWdhdGlvbiBidXR0b25zIGNyZWF0ZWQiOw0KICAgICAgICAgICAgaWYgKCFmYWlsdXJlcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBmYWlsdXJlTWVzc2FnZSArPSAiLCBmYWlsZWQgdG8gY3JlYXRlOiAiICsgU3RyaW5nLmpvaW4oIiwgIiwgZmFpbHVyZXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckZhaWx1cmUoIkJvdW50eUNhbmNlbF9uYXZpZ2F0aW9uXyIgKyBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSwgZmFpbHVyZU1lc3NhZ2UpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQWRkcyB0aGUgaW5mbyBidXR0b24gdG8gdGhlIEdVSQ0KICAgICAqIC8vIG5vdGU6IERpc3BsYXlzIGNhbmNlbGxhdGlvbiBpbmZvcm1hdGlvbiBpbmNsdWRpbmcgdG90YWwgYm91bnRpZXMgYW5kIHJlZnVuZCBkZXRhaWxzDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGFkZEluZm9CdXR0b24oSW52ZW50b3J5IGd1aSwgTGlzdDxNYXAuRW50cnk8VVVJRCwgSW50ZWdlcj4+IHBsYXllckJvdW50aWVzLCBpbnQgcGFnZSwgaW50IHRvdGFsUGFnZXMsIFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldEJvdW50eUNhbmNlbEdVSUNvbmZpZygpOw0KICAgICAgICBpbnQgdG90YWxCdXR0b25zID0gMTsNCiAgICAgICAgaW50IHN1Y2Nlc3NmdWxCdXR0b25zID0gMDsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGZhaWx1cmVzID0gbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgU3RyaW5nIG1hdGVyaWFsTmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoIm5hdmlnYXRpb24uaW5mby1idXR0b24ubWF0ZXJpYWwiLCAiQk9PSyIpOw0KICAgICAgICBJdGVtU3RhY2sgaW5mb0J1dHRvbiA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2sobWF0ZXJpYWxOYW1lKTsNCiAgICAgICAgU3RyaW5nIGZhaWx1cmVSZWFzb24gPSBudWxsOw0KICAgICAgICBpZiAoaW5mb0J1dHRvbi5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJCT09LIikpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlDYW5jZWxHVUldIEludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyBmb3IgaW5mbyBidXR0b24sIHVzaW5nIEJPT0siKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIjsNCiAgICAgICAgICAgIGluZm9CdXR0b24gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJCT09LIik7DQogICAgICAgIH0NCg0KICAgICAgICBJdGVtTWV0YSBtZXRhID0gaW5mb0J1dHRvbi5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAobWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKCLCpzZCb3VudHkgQ2FuY2VsbGF0aW9uIEluZm8iKTsNCiAgICAgICAgICAgIGRvdWJsZSB0b3RhbEFtb3VudCA9IHBsYXllckJvdW50aWVzLnN0cmVhbSgpLm1hcFRvRG91YmxlKE1hcC5FbnRyeTo6Z2V0VmFsdWUpLnN1bSgpOw0KICAgICAgICAgICAgYm9vbGVhbiB0YXhFbmFibGVkID0gcGx1Z2luLmdldENvbmZpZygpLmdldEJvb2xlYW4oImJvdW50eS1jYW5jZWwtdGF4LWVuYWJsZWQiLCB0cnVlKTsNCiAgICAgICAgICAgIGRvdWJsZSB0YXhSYXRlID0gcGx1Z2luLmdldENvbmZpZygpLmdldERvdWJsZSgiYm91bnR5LWNhbmNlbC10YXgtcmF0ZSIsIDEwLjApOw0KICAgICAgICAgICAgZG91YmxlIHRvdGFsUmVmdW5kID0gdGF4RW5hYmxlZCA/IHRvdGFsQW1vdW50ICogKDEgLSB0YXhSYXRlIC8gMTAwLjApIDogdG90YWxBbW91bnQ7DQogICAgICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IEFycmF5cy5hc0xpc3QoDQogICAgICAgICAgICAgICAgICAgICLCpzdUb3RhbCBCb3VudGllczogwqdlIiArIHBsYXllckJvdW50aWVzLnNpemUoKSwNCiAgICAgICAgICAgICAgICAgICAgIsKnN1BhZ2U6IMKnZSIgKyAocGFnZSArIDEpICsgIsKnNy/Cp2UiICsgdG90YWxQYWdlcywNCiAgICAgICAgICAgICAgICAgICAgIiIsDQogICAgICAgICAgICAgICAgICAgICLCp2VUYXggUmF0ZTogwqdjIiArIFN0cmluZy5mb3JtYXQoIiUuMWYiLCB0YXhSYXRlKSArICIlIiwNCiAgICAgICAgICAgICAgICAgICAgIsKnZVRvdGFsIFJlZnVuZDogwqdhJCIgKyBTdHJpbmcuZm9ybWF0KCIlLjJmIiwgdG90YWxSZWZ1bmQpDQogICAgICAgICAgICApOw0KICAgICAgICAgICAgbWV0YS5zZXRMb3JlKGxvcmUpOw0KICAgICAgICAgICAgaW5mb0J1dHRvbi5zZXRJdGVtTWV0YShtZXRhKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlDYW5jZWxHVUldIEZhaWxlZCB0byBnZXQgSXRlbU1ldGEgZm9yIGluZm8gYnV0dG9uIik7DQogICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEiOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGZhaWx1cmVSZWFzb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgZ3VpLnNldEl0ZW0oNDksIGluZm9CdXR0b24pOw0KICAgICAgICAgICAgc3VjY2Vzc2Z1bEJ1dHRvbnMrKzsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGZhaWx1cmVzLmFkZCgiaW5mby1idXR0b24gUmVhc29uOiAiICsgZmFpbHVyZVJlYXNvbik7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoc3VjY2Vzc2Z1bEJ1dHRvbnMgPT0gdG90YWxCdXR0b25zKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIEJvdW50eUNhbmNlbEdVSV0gQWxsIGJ1dHRvbnMgY3JlYXRlZCIpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVNZXNzYWdlID0gIltERUJVRyAtIEJvdW50eUNhbmNlbEdVSV0gIiArIHN1Y2Nlc3NmdWxCdXR0b25zICsgIi8iICsgdG90YWxCdXR0b25zICsgIiBidXR0b25zIGNyZWF0ZWQiOw0KICAgICAgICAgICAgaWYgKCFmYWlsdXJlcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBmYWlsdXJlTWVzc2FnZSArPSAiLCBmYWlsZWQgdG8gY3JlYXRlOiAiICsgU3RyaW5nLmpvaW4oIiwgIiwgZmFpbHVyZXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckZhaWx1cmUoIkJvdW50eUNhbmNlbF9pbmZvX2J1dHRvbl8iICsgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCksIGZhaWx1cmVNZXNzYWdlKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgSXRlbVN0YWNrIGNyZWF0ZU5hdmlnYXRpb25CdXR0b24oU3RyaW5nIGJ1dHRvblR5cGUsIGludCBwYWdlLCBpbnQgdG90YWxQYWdlcykgew0KICAgICAgICBJdGVtU3RhY2sgYnV0dG9uID0gbmV3IEl0ZW1TdGFjayhNYXRlcmlhbC5BUlJPVyk7DQogICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBidXR0b24uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgaWYgKG1ldGEgIT0gbnVsbCkgew0KICAgICAgICAgICAgaWYgKGJ1dHRvblR5cGUuZXF1YWxzKCJwcmV2aW91cyIpKSB7DQogICAgICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZSgiwqdhUHJldmlvdXMgUGFnZSIpOw0KICAgICAgICAgICAgICAgIG1ldGEuc2V0TG9yZShBcnJheXMuYXNMaXN0KCLCpzdHbyB0byBwYWdlIMKnZSIgKyBwYWdlLCAiIiwgIsKnYUNsaWNrIHRvIG5hdmlnYXRlIikpOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlLmVxdWFscygibmV4dCIpKSB7DQogICAgICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZSgiwqdhTmV4dCBQYWdlIik7DQogICAgICAgICAgICAgICAgbWV0YS5zZXRMb3JlKEFycmF5cy5hc0xpc3QoIsKnN0dvIHRvIHBhZ2UgwqdlIiArIChwYWdlICsgMiksICIiLCAiwqdhQ2xpY2sgdG8gbmF2aWdhdGUiKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBidXR0b24uc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gYnV0dG9uOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgYSBib3VudHkgaXRlbSBmb3IgdGhlIGNhbmNlbCBHVUkNCiAgICAgKiAvLyBub3RlOiBHZW5lcmF0ZXMgYSBwbGF5ZXIgc2t1bGwgcmVwcmVzZW50aW5nIGEgYm91bnR5IHRvIGNhbmNlbA0KICAgICAqLw0KICAgIHByaXZhdGUgSXRlbVN0YWNrIGNyZWF0ZUJvdW50eUl0ZW0oUGxheWVyIHBsYXllciwgVVVJRCB0YXJnZXRVVUlELCBpbnQgYW1vdW50KSB7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIFN0cmluZyBmYWlsdXJlUmVhc29uID0gbnVsbDsNCg0KICAgICAgICBPZmZsaW5lUGxheWVyIHRhcmdldFBsYXllciA9IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVyKHRhcmdldFVVSUQpOw0KICAgICAgICBTdHJpbmcgdGFyZ2V0TmFtZSA9IHRhcmdldFBsYXllci5nZXROYW1lKCkgIT0gbnVsbCA/IHRhcmdldFBsYXllci5nZXROYW1lKCkgOiAiVW5rbm93biI7DQogICAgICAgIGJvb2xlYW4gdGF4RW5hYmxlZCA9IHBsdWdpbi5nZXRDb25maWcoKS5nZXRCb29sZWFuKCJib3VudHktY2FuY2VsLXRheC1lbmFibGVkIiwgdHJ1ZSk7DQogICAgICAgIGRvdWJsZSB0YXhSYXRlID0gcGx1Z2luLmdldENvbmZpZygpLmdldERvdWJsZSgiYm91bnR5LWNhbmNlbC10YXgtcmF0ZSIsIDEwLjApOw0KICAgICAgICBkb3VibGUgcmVmdW5kID0gYW1vdW50Ow0KICAgICAgICBkb3VibGUgdGF4QW1vdW50ID0gMDsNCiAgICAgICAgaWYgKHRheEVuYWJsZWQpIHsNCiAgICAgICAgICAgIHRheEFtb3VudCA9IHBsdWdpbi5nZXRUYXhNYW5hZ2VyKCkuY2FsY3VsYXRlVGF4KGFtb3VudCwgbnVsbCk7DQogICAgICAgICAgICByZWZ1bmQgPSBhbW91bnQgLSB0YXhBbW91bnQ7DQogICAgICAgIH0NCiAgICAgICAgU3RyaW5nIHNldFRpbWUgPSBnZXRGb3JtYXR0ZWRTZXRUaW1lKCk7DQoNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBTa3VsbFV0aWxzLmNyZWF0ZVZlcnNpb25Bd2FyZVBsYXllckhlYWQodGFyZ2V0UGxheWVyKTsNCiAgICAgICAgaWYgKCFWZXJzaW9uVXRpbHMuaXNQbGF5ZXJIZWFkKGl0ZW0pKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5Q2FuY2VsR1VJXSBGYWlsZWQgdG8gY3JlYXRlIFBMQVlFUl9IRUFEIGZvciAiICsgdGFyZ2V0TmFtZSk7DQogICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkZhaWxlZCB0byBjcmVhdGUgUExBWUVSX0hFQUQiOw0KICAgICAgICAgICAgaXRlbSA9IG5ldyBJdGVtU3RhY2soTWF0ZXJpYWwuU1RPTkUpOw0KICAgICAgICB9DQoNCiAgICAgICAgSXRlbU1ldGEgbWV0YSA9IGl0ZW0uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgaWYgKG1ldGEgPT0gbnVsbCkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUNhbmNlbEdVSV0gRmFpbGVkIHRvIGdldCBJdGVtTWV0YSBmb3IgYm91bnR5IGl0ZW0gZm9yICIgKyB0YXJnZXROYW1lKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgICAgICByZXR1cm4gaXRlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRDb25maWcoKTsNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAudGFyZ2V0KHRhcmdldFVVSUQpDQogICAgICAgICAgICAgICAgLmJvdW50eUFtb3VudCgoZG91YmxlKSBhbW91bnQpDQogICAgICAgICAgICAgICAgLnJlZnVuZEFtb3VudChyZWZ1bmQpDQogICAgICAgICAgICAgICAgLnRheFJhdGUodGF4UmF0ZSkNCiAgICAgICAgICAgICAgICAudGF4QW1vdW50KHRheEFtb3VudCkNCiAgICAgICAgICAgICAgICAuc2V0VGltZShzZXRUaW1lKTsNCg0KICAgICAgICBTdHJpbmcgZGlzcGxheU5hbWUgPSBQbGFjZWhvbGRlcnMuYXBwbHkoY29uZmlnLmdldFN0cmluZygiYm91bnR5LWNhbmNlbC5uYW1lIiwgIiZjQ2FuY2VsIEJvdW50eSBvbiAmZSV0YXJnZXQlIiksIGNvbnRleHQpOw0KICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgZGlzcGxheU5hbWUpKTsNCg0KICAgICAgICBMaXN0PFN0cmluZz4gbG9yZUxpbmVzID0gY29uZmlnLmdldFN0cmluZ0xpc3QoImJvdW50eS1jYW5jZWwubG9yZSIpOw0KICAgICAgICBpZiAobG9yZUxpbmVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgbG9yZUxpbmVzID0gQXJyYXlzLmFzTGlzdCgNCiAgICAgICAgICAgICAgICAgICAgIiY3VGFyZ2V0OiAmZiV0YXJnZXQlIiwNCiAgICAgICAgICAgICAgICAgICAgIiY3QW1vdW50OiAmYSQlYm91bnR5X2Ftb3VudCUiLA0KICAgICAgICAgICAgICAgICAgICAiJjdTZXQgVGltZTogJmUlc2V0X3RpbWUlIiwNCiAgICAgICAgICAgICAgICAgICAgIiIsDQogICAgICAgICAgICAgICAgICAgICImZUNsaWNrIHRvIGNhbmNlbCB0aGlzIGJvdW50eSIsDQogICAgICAgICAgICAgICAgICAgICImY1JlZnVuZDogJmEkJXJlZnVuZF9hbW91bnQlIiwNCiAgICAgICAgICAgICAgICAgICAgIiY3VGF4OiAmYyQldGF4X2Ftb3VudCUiDQogICAgICAgICAgICApOw0KICAgICAgICB9DQogICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gUGxhY2Vob2xkZXJzLmFwcGx5KGxvcmVMaW5lcywgY29udGV4dCk7DQogICAgICAgIG1ldGEuc2V0TG9yZShsb3JlKTsNCg0KICAgICAgICBpdGVtLnNldEl0ZW1NZXRhKG1ldGEpOw0KDQogICAgICAgIGlmIChmYWlsdXJlUmVhc29uICE9IG51bGwpIHsNCiAgICAgICAgICAgIGl0ZW1GYWlsdXJlcy5wdXQoImJvdW50eS1pdGVtLSIgKyB0YXJnZXRVVUlELCBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBpdGVtOw0KICAgIH0NCg0KICAgIHByaXZhdGUgU3RyaW5nIGdldEZvcm1hdHRlZFNldFRpbWUoKSB7DQogICAgICAgIFNpbXBsZURhdGVGb3JtYXQgc2RmID0gbmV3IFNpbXBsZURhdGVGb3JtYXQoIk1NL2RkL3l5eXkgSEg6bW0iKTsNCiAgICAgICAgcmV0dXJuIHNkZi5mb3JtYXQobmV3IERhdGUoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBpbnZlbnRvcnkgY2xpY2sgZXZlbnRzIGZvciB0aGUgY2FuY2VsIEdVSQ0KICAgICAqIC8vIG5vdGU6IFByb2Nlc3NlcyBjbGlja3Mgb24gYm91bnR5IHNrdWxscyBhbmQgbmF2aWdhdGlvbiBidXR0b25zDQogICAgICovDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uSW52ZW50b3J5Q2xpY2soSW52ZW50b3J5Q2xpY2tFdmVudCBldmVudCkgew0KICAgICAgICBpZiAoIShldmVudC5nZXRXaG9DbGlja2VkKCkgaW5zdGFuY2VvZiBQbGF5ZXIpKSByZXR1cm47DQoNCiAgICAgICAgUGxheWVyIHBsYXllciA9IChQbGF5ZXIpIGV2ZW50LmdldFdob0NsaWNrZWQoKTsNCiAgICAgICAgSW52ZW50b3J5IGludmVudG9yeSA9IGV2ZW50LmdldEludmVudG9yeSgpOw0KICAgICAgICBpZiAoIShpbnZlbnRvcnkuZ2V0SG9sZGVyKCkgaW5zdGFuY2VvZiBQbGF5ZXIpIHx8ICFpbnZlbnRvcnkuZ2V0SG9sZGVyKCkuZXF1YWxzKHBsYXllcikpIHJldHVybjsNCiAgICAgICAgU3RyaW5nIHRpdGxlID0gZXZlbnQuZ2V0VmlldygpLmdldFRpdGxlKCk7DQogICAgICAgIGlmICghdGl0bGUuc3RhcnRzV2l0aChDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGd1aVRpdGxlKSkpIHJldHVybjsNCg0KICAgICAgICBldmVudC5zZXRDYW5jZWxsZWQodHJ1ZSk7DQogICAgICAgIEl0ZW1TdGFjayBjbGlja2VkSXRlbSA9IGV2ZW50LmdldEN1cnJlbnRJdGVtKCk7DQogICAgICAgIGludCBzbG90ID0gZXZlbnQuZ2V0U2xvdCgpOw0KDQogICAgICAgIGlmIChjbGlja2VkSXRlbSA9PSBudWxsKSByZXR1cm47DQoNCiAgICAgICAgaWYgKHNsb3QgPT0gNDggJiYgY2xpY2tlZEl0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLkFSUk9XKSB7DQogICAgICAgICAgICBoYW5kbGVOYXZpZ2F0aW9uQ2xpY2socGxheWVyLCAtMSwgaW52ZW50b3J5KTsNCiAgICAgICAgfSBlbHNlIGlmIChzbG90ID09IDUwICYmIGNsaWNrZWRJdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5BUlJPVykgew0KICAgICAgICAgICAgaGFuZGxlTmF2aWdhdGlvbkNsaWNrKHBsYXllciwgMSwgaW52ZW50b3J5KTsNCiAgICAgICAgfSBlbHNlIGlmIChWZXJzaW9uVXRpbHMuaXNQbGF5ZXJIZWFkKGNsaWNrZWRJdGVtKSkgew0KICAgICAgICAgICAgaGFuZGxlQm91bnR5Q2FuY2VsQ2xpY2socGxheWVyLCBjbGlja2VkSXRlbSwgaW52ZW50b3J5KTsNCiAgICAgICAgfQ0KICAgICAgICBwbGF5ZXIudXBkYXRlSW52ZW50b3J5KCk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIGhhbmRsZUJvdW50eUNhbmNlbENsaWNrKFBsYXllciBwbGF5ZXIsIEl0ZW1TdGFjayBpdGVtLCBJbnZlbnRvcnkgaW52ZW50b3J5KSB7DQogICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBpdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmIChtZXRhID09IG51bGwgfHwgIW1ldGEuaGFzTG9yZSgpKSB7DQogICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiY2FuY2VsLWVycm9yIik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IG1ldGEuZ2V0TG9yZSgpOw0KICAgICAgICBTdHJpbmcgdGFyZ2V0TmFtZSA9IG51bGw7DQogICAgICAgIGludCBhbW91bnQgPSAwOw0KDQogICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiBsb3JlKSB7DQogICAgICAgICAgICBTdHJpbmcgc3RyaXBwZWQgPSBsaW5lLnJlcGxhY2VBbGwoIsKnWzAtOWEtZmstb3JdIiwgIiIpOw0KICAgICAgICAgICAgaWYgKHN0cmlwcGVkLnN0YXJ0c1dpdGgoIlRhcmdldDogIikpIHsNCiAgICAgICAgICAgICAgICB0YXJnZXROYW1lID0gc3RyaXBwZWQuc3Vic3RyaW5nKDgpOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpcHBlZC5zdGFydHNXaXRoKCJBbW91bnQ6ICQiKSkgew0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIGFtb3VudCA9IEludGVnZXIucGFyc2VJbnQoc3RyaXBwZWQuc3Vic3RyaW5nKDkpKTsNCiAgICAgICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgICAgICAvLyBDb250aW51ZSB0byBuZXh0IGxpbmUNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAodGFyZ2V0TmFtZSA9PSBudWxsIHx8IGFtb3VudCA9PSAwKSB7DQogICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiY2FuY2VsLWVycm9yIik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBPZmZsaW5lUGxheWVyIHRhcmdldFBsYXllciA9IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVyKHRhcmdldE5hbWUpOw0KICAgICAgICBjYW5jZWxCb3VudHkocGxheWVyLCBwbGF5ZXIuZ2V0VW5pcXVlSWQoKSwgdGFyZ2V0UGxheWVyLmdldFVuaXF1ZUlkKCksIGFtb3VudCk7DQogICAgICAgIHBsYXllci5jbG9zZUludmVudG9yeSgpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBoYW5kbGVOYXZpZ2F0aW9uQ2xpY2soUGxheWVyIHBsYXllciwgaW50IGRpcmVjdGlvbiwgSW52ZW50b3J5IGludmVudG9yeSkgew0KICAgICAgICBpbnQgY3VycmVudFBhZ2UgPSBnZXRDdXJyZW50UGFnZShpbnZlbnRvcnkpOw0KICAgICAgICBvcGVuQ2FuY2VsR1VJKHBsYXllciwgY3VycmVudFBhZ2UgKyBkaXJlY3Rpb24pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENhbmNlbHMgYSBib3VudHkgYW5kIHByb2Nlc3NlcyB0aGUgcmVmdW5kDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGNhbmNlbEJvdW50eShQbGF5ZXIgcGxheWVyLCBVVUlEIHNldHRlclVVSUQsIFVVSUQgdGFyZ2V0VVVJRCwgaW50IGFtb3VudCkgew0KICAgICAgICBwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLnJlbW92ZUJvdW50eShzZXR0ZXJVVUlELCB0YXJnZXRVVUlEKTsNCg0KICAgICAgICBib29sZWFuIHRheEVuYWJsZWQgPSBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigiYm91bnR5LWNhbmNlbC10YXgtZW5hYmxlZCIsIHRydWUpOw0KICAgICAgICBkb3VibGUgdGF4UmF0ZSA9IHBsdWdpbi5nZXRDb25maWcoKS5nZXREb3VibGUoImJvdW50eS1jYW5jZWwtdGF4LXJhdGUiLCAxMC4wKTsNCiAgICAgICAgZG91YmxlIHJlZnVuZCA9IGFtb3VudDsNCiAgICAgICAgZG91YmxlIHRheEFtb3VudCA9IDA7DQoNCiAgICAgICAgaWYgKHRheEVuYWJsZWQpIHsNCiAgICAgICAgICAgIHRheEFtb3VudCA9IHBsdWdpbi5nZXRUYXhNYW5hZ2VyKCkuY2FsY3VsYXRlVGF4KGFtb3VudCwgbnVsbCk7DQogICAgICAgICAgICByZWZ1bmQgPSBhbW91bnQgLSB0YXhBbW91bnQ7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAocGx1Z2luLmdldEVjb25vbXkoKSAhPSBudWxsKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0RWNvbm9teSgpLmRlcG9zaXRQbGF5ZXIocGxheWVyLCByZWZ1bmQpOw0KICAgICAgICB9DQoNCiAgICAgICAgTWFwPFN0cmluZywgU3RyaW5nPiBwbGFjZWhvbGRlcnMgPSBuZXcgSGFzaE1hcDw+KCk7DQogICAgICAgIHBsYWNlaG9sZGVycy5wdXQoInJlZnVuZCIsIFN0cmluZy5mb3JtYXQoIiUuMmYiLCByZWZ1bmQpKTsNCiAgICAgICAgcGxhY2Vob2xkZXJzLnB1dCgidGF4X3JhdGUiLCBTdHJpbmcuZm9ybWF0KCIlLjFmIiwgdGF4UmF0ZSkpOw0KICAgICAgICBwbGFjZWhvbGRlcnMucHV0KCJ0YXhfYW1vdW50IiwgU3RyaW5nLmZvcm1hdCgiJS4yZiIsIHRheEFtb3VudCkpOw0KDQoNCiAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgImJvdW50eS1jYW5jZWxsZWQiKTsNCg0KICAgICAgICBpZiAodGF4RW5hYmxlZCAmJiB0YXhBbW91bnQgPiAwKSB7DQogICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiYm91bnR5LWNhbmNlbC10YXgiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdGhlIGN1cnJlbnQgcGFnZSBmcm9tIHRoZSBpbnZlbnRvcnkNCiAgICAgKiAvLyBub3RlOiBFeHRyYWN0cyB0aGUgY3VycmVudCBwYWdlIG51bWJlciBmcm9tIHRoZSBpbnZlbnRvcnkgdGl0bGUNCiAgICAgKi8NCiAgICBwcml2YXRlIGludCBnZXRDdXJyZW50UGFnZShJbnZlbnRvcnkgaW52ZW50b3J5KSB7DQogICAgICAgIFN0cmluZyB0aXRsZSA9IGludmVudG9yeS5nZXRIb2xkZXIoKSBpbnN0YW5jZW9mIFBsYXllciA/IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgZ3VpVGl0bGUpICsgIiAoUGFnZSAiICsgKGdldEN1cnJlbnRQYWdlKGludmVudG9yeSkgKyAxKSArICIvIiArIGdldFRvdGFsUGFnZXMoaW52ZW50b3J5KSArICIpIiA6ICIiOw0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgU3RyaW5nIHBhZ2VJbmZvID0gdGl0bGUuc3Vic3RyaW5nKHRpdGxlLmluZGV4T2YoIihQYWdlICIpICsgNik7DQogICAgICAgICAgICBTdHJpbmcgY3VycmVudFBhZ2VTdHIgPSBwYWdlSW5mby5zdWJzdHJpbmcoMCwgcGFnZUluZm8uaW5kZXhPZigiLyIpKTsNCiAgICAgICAgICAgIHJldHVybiBJbnRlZ2VyLnBhcnNlSW50KGN1cnJlbnRQYWdlU3RyLnRyaW0oKSkgLSAxOw0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSB0b3RhbCBwYWdlcyBmb3IgdGhlIGludmVudG9yeQ0KICAgICAqIC8vIG5vdGU6IENhbGN1bGF0ZXMgdG90YWwgcGFnZXMgYmFzZWQgb24gcGxheWVyIGJvdW50aWVzDQogICAgICovDQogICAgcHJpdmF0ZSBpbnQgZ2V0VG90YWxQYWdlcyhJbnZlbnRvcnkgaW52ZW50b3J5KSB7DQogICAgICAgIFBsYXllciBwbGF5ZXIgPSBpbnZlbnRvcnkuZ2V0SG9sZGVyKCkgaW5zdGFuY2VvZiBQbGF5ZXIgPyAoUGxheWVyKSBpbnZlbnRvcnkuZ2V0SG9sZGVyKCkgOiBudWxsOw0KICAgICAgICBpZiAocGxheWVyID09IG51bGwpIHJldHVybiAxOw0KICAgICAgICBVVUlEIHBsYXllclVVSUQgPSBwbGF5ZXIuZ2V0VW5pcXVlSWQoKTsNCiAgICAgICAgTWFwPFVVSUQsIE1hcDxVVUlELCBJbnRlZ2VyPj4gYWxsQm91bnRpZXMgPSBwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLmxpc3RBbGxCb3VudGllcygpOw0KICAgICAgICBMaXN0PE1hcC5FbnRyeTxVVUlELCBJbnRlZ2VyPj4gcGxheWVyQm91bnRpZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgZm9yIChNYXAuRW50cnk8VVVJRCwgTWFwPFVVSUQsIEludGVnZXI+PiB0YXJnZXRFbnRyeSA6IGFsbEJvdW50aWVzLmVudHJ5U2V0KCkpIHsNCiAgICAgICAgICAgIGlmICh0YXJnZXRFbnRyeS5nZXRWYWx1ZSgpLmNvbnRhaW5zS2V5KHBsYXllclVVSUQpKSB7DQogICAgICAgICAgICAgICAgcGxheWVyQm91bnRpZXMuYWRkKG5ldyBBYnN0cmFjdE1hcC5TaW1wbGVFbnRyeTw+KHRhcmdldEVudHJ5LmdldEtleSgpLCB0YXJnZXRFbnRyeS5nZXRWYWx1ZSgpLmdldChwbGF5ZXJVVUlEKSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiAoaW50KSBNYXRoLmNlaWwoKGRvdWJsZSkgcGxheWVyQm91bnRpZXMuc2l6ZSgpIC8gaXRlbXNQZXJQYWdlKTsNCiAgICB9DQp9AAB0b255MjYvYm91bnRpZXNQbHVzL0dVSXMvQm91bnR5R1VJLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAyNDAzNDAgMTUwMjY3MDM1NTIgMDE2Mzc0ACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy5HVUlzOw0KDQppbXBvcnQgbmV0Lm1pbGtib3dsLnZhdWx0LmVjb25vbXkuRWNvbm9teTsNCmltcG9ydCBvcmcuYnVra2l0Lio7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuWWFtbENvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5pbnZlbnRvcnkuSW52ZW50b3J5Q2xvc2VFdmVudDsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLio7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy4qOw0KaW1wb3J0IG9yZy5idWtraXQuZW5jaGFudG1lbnRzLkVuY2hhbnRtZW50Ow0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1GbGFnOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lm1ldGEuSXRlbU1ldGE7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy5QbGFjZWhvbGRlcnM7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuRmlsZUNvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuRXZlbnRIYW5kbGVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuTGlzdGVuZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5pbnZlbnRvcnkuQ2xpY2tUeXBlOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuaW52ZW50b3J5LkludmVudG9yeUNsaWNrRXZlbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSW52ZW50b3J5Ow0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1TdGFjazsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5tZXRhLkZpcmV3b3JrRWZmZWN0TWV0YTsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5tZXRhLlNrdWxsTWV0YTsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlNrdWxsVXRpbHM7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy53cmFwcGVycy5WZXJzaW9uV3JhcHBlckZhY3Rvcnk7DQoNCmltcG9ydCBqYXZhLmlvLkZpbGU7DQppbXBvcnQgamF2YS51dGlsLio7DQppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuQ29uY3VycmVudEhhc2hNYXA7DQppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuQ29uY3VycmVudE1hcDsNCmltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7DQoNCnB1YmxpYyBjbGFzcyBCb3VudHlHVUkgaW1wbGVtZW50cyBMaXN0ZW5lciB7DQoNCiAgICBwcml2YXRlIGZpbmFsIEJvdW50aWVzUGx1cyBwbHVnaW47DQogICAgcHJpdmF0ZSBzdGF0aWMgU3RyaW5nIEdVSV9USVRMRTsNCiAgICBwcml2YXRlIHN0YXRpYyBpbnQgY3VycmVudFBhZ2UgPSAwOw0KICAgIHByaXZhdGUgc3RhdGljIGJvb2xlYW4gc2hvd09ubHlPbmxpbmUgPSBmYWxzZTsNCiAgICBwcml2YXRlIHN0YXRpYyBib29sZWFuIGZpbHRlckhpZ2hUb0xvdyA9IGZhbHNlOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIGludCBJVEVNU19QRVJfUEFHRSA9IDIxOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIENvbmN1cnJlbnRNYXA8VVVJRCwgTG9uZz4gYXdhaXRpbmdTZWFyY2hJbnB1dCA9IG5ldyBDb25jdXJyZW50SGFzaE1hcDw+KCk7DQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgQ29uY3VycmVudE1hcDxVVUlELCBMb25nPiByZWNlbnRDbGlja3MgPSBuZXcgQ29uY3VycmVudEhhc2hNYXA8PigpOw0KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgbG9uZyBTRUFSQ0hfVElNRU9VVCA9IDMwMDAwTDsNCiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgRklMVEVSX0JVVFRPTl9JRCA9ICJGSUxURVJfQlVUVE9OIjsNCiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ1JFQVRFX0JPVU5UWV9JRCA9ICJDUkVBVEVfQk9VTlRZIjsNCiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgSFVOVEVSU19ERU5fSUQgPSAiSFVOVEVSU19ERU4iOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBCT1VOVFlfSFVOVEVSX0lEID0gIkJPVU5UWV9IVU5URVIiOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBCT09TVF9DTE9DS19JRCA9ICJCT09TVF9DTE9DSyI7DQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFBSRVZJT1VTX1BBR0VfSUQgPSAiUFJFVklPVVNfUEFHRSI7DQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIE5FWFRfUEFHRV9JRCA9ICJORVhUX1BBR0UiOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBUVVJOX0lOX1NLVUxMU19JRCA9ICJUVVJOX0lOX1NLVUxMUyI7DQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEJBQ0tfVE9fTUFJTl9JRCA9ICJCQUNLX1RPX01BSU4iOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIE1hcDxTdHJpbmcsIFN0cmluZz4gYnV0dG9uRmFpbHVyZXMgPSBuZXcgQ29uY3VycmVudEhhc2hNYXA8PigpOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIE1hcDxVVUlELCBCb29sZWFuPiBwbGF5ZXJTaG93T25seU9ubGluZSA9IG5ldyBDb25jdXJyZW50SGFzaE1hcDw+KCk7DQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgTWFwPFVVSUQsIEJvb2xlYW4+IHBsYXllckZpbHRlckhpZ2hUb0xvdyA9IG5ldyBDb25jdXJyZW50SGFzaE1hcDw+KCk7DQogICAgcHJpdmF0ZSBzdGF0aWMgaW50W10gYm91bnR5U2t1bGxTbG90czsgLy8gU3RvcmVzIGNvbmZpZ3VyYWJsZSBzbG90cyBmb3IgYm91bnR5IHNrdWxscw0KICAgIHByaXZhdGUgZmluYWwgUGxheWVyIHBsYXllcjsNCg0KICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgQm91bnR5RGF0YSB7DQogICAgICAgIHByaXZhdGUgZmluYWwgVVVJRCB0YXJnZXRVVUlEOw0KICAgICAgICBwcml2YXRlIGZpbmFsIFVVSUQgc2V0dGVyVVVJRDsNCiAgICAgICAgcHJpdmF0ZSBmaW5hbCBpbnQgYW1vdW50Ow0KICAgICAgICBwcml2YXRlIGZpbmFsIFN0cmluZyBzZXRUaW1lOw0KICAgICAgICBwcml2YXRlIGZpbmFsIFN0cmluZyBleHBpcmVUaW1lOw0KICAgICAgICBwcml2YXRlIGZpbmFsIGRvdWJsZSBtdWx0aXBsaWVyOw0KDQogICAgICAgIHB1YmxpYyBCb3VudHlEYXRhKFVVSUQgdGFyZ2V0VVVJRCwgVVVJRCBzZXR0ZXJVVUlELCBpbnQgYW1vdW50LCBTdHJpbmcgc2V0VGltZSwgU3RyaW5nIGV4cGlyZVRpbWUsIGRvdWJsZSBtdWx0aXBsaWVyKSB7DQogICAgICAgICAgICB0aGlzLnRhcmdldFVVSUQgPSB0YXJnZXRVVUlEOw0KICAgICAgICAgICAgdGhpcy5zZXR0ZXJVVUlEID0gc2V0dGVyVVVJRDsNCiAgICAgICAgICAgIHRoaXMuYW1vdW50ID0gYW1vdW50Ow0KICAgICAgICAgICAgdGhpcy5zZXRUaW1lID0gc2V0VGltZTsNCiAgICAgICAgICAgIHRoaXMuZXhwaXJlVGltZSA9IGV4cGlyZVRpbWU7DQogICAgICAgICAgICB0aGlzLm11bHRpcGxpZXIgPSBtdWx0aXBsaWVyOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIFVVSUQgZ2V0VGFyZ2V0VVVJRCgpIHsNCiAgICAgICAgICAgIHJldHVybiB0YXJnZXRVVUlEOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIFVVSUQgZ2V0U2V0dGVyVVVJRCgpIHsNCiAgICAgICAgICAgIHJldHVybiBzZXR0ZXJVVUlEOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGludCBnZXRBbW91bnQoKSB7DQogICAgICAgICAgICByZXR1cm4gYW1vdW50Ow0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIFN0cmluZyBnZXRTZXRUaW1lKCkgew0KICAgICAgICAgICAgcmV0dXJuIHNldFRpbWU7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgU3RyaW5nIGdldEV4cGlyZVRpbWUoKSB7DQogICAgICAgICAgICByZXR1cm4gZXhwaXJlVGltZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBkb3VibGUgZ2V0TXVsdGlwbGllcigpIHsNCiAgICAgICAgICAgIHJldHVybiBtdWx0aXBsaWVyOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGRvdWJsZSBnZXRUb3RhbEJvdW50eUFtb3VudCgpIHsNCiAgICAgICAgICAgIEJvdW50eU1hbmFnZXIgbWFuYWdlciA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldEJvdW50eU1hbmFnZXIoKTsNCiAgICAgICAgICAgIE1hcDxVVUlELCBJbnRlZ2VyPiBib3VudGllcyA9IG1hbmFnZXIuZ2V0Qm91bnRpZXNPblRhcmdldCh0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgIHJldHVybiBib3VudGllcy52YWx1ZXMoKS5zdHJlYW0oKS5tYXBUb0ludChJbnRlZ2VyOjppbnRWYWx1ZSkuc3VtKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDb25zdHJ1Y3RzIHRoZSBCb3VudHlHVUkNCiAgICAgKiAvLyBub3RlOiBJbml0aWFsaXplcyBtYWluIGJvdW50eSBHVUkgYW5kIHJlZ2lzdGVycyBsaXN0ZW5lcnMNCiAgICAgKi8NCiAgICBwdWJsaWMgQm91bnR5R1VJKEJvdW50aWVzUGx1cyBwbHVnaW4sIEV2ZW50TWFuYWdlciBldmVudE1hbmFnZXIsIFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgICAgIHRoaXMucGxheWVyID0gcGxheWVyOw0KICAgICAgICBldmVudE1hbmFnZXIucmVnaXN0ZXIodGhpcyk7DQogICAgICAgIGV2ZW50TWFuYWdlci5yZWdpc3RlcihuZXcgQm91bnR5U2VhcmNoTGlzdGVuZXIocGx1Z2luKSk7DQogICAgICAgIHN0YXJ0Qm9vc3RDbG9ja1VwZGF0ZVRhc2soKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBMb2FkcyBjb25maWd1cmFibGUgYm91bnR5IHNrdWxsIHNsb3RzIGZyb20gY29uZmlnDQogICAgICogLy8gbm90ZTogSW5pdGlhbGl6ZXMgYm91bnR5U2t1bGxTbG90cyB3aXRoIHZhbGlkYXRlZCBzbG90cyBmcm9tIEJvdW50eUdVSS55bWwNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyB2b2lkIGxvYWRCb3VudHlTa3VsbFNsb3RzKEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZywgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlcikgew0KICAgICAgICBMaXN0PEludGVnZXI+IHNsb3RzID0gY29uZmlnLmdldEludGVnZXJMaXN0KCJib3VudHktc2t1bGwtc2xvdHMuc2xvdHMiKTsNCiAgICAgICAgaWYgKHNsb3RzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUdVSV0gTm8gYm91bnR5LXNrdWxsLXNsb3RzIGRlZmluZWQgaW4gQm91bnR5R1VJLnltbCwgdXNpbmcgZGVmYXVsdCBzbG90cyIpOw0KICAgICAgICAgICAgc2xvdHMgPSBBcnJheXMuYXNMaXN0KDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxOSwgMjAsIDIxLCAyMiwgMjMsIDI0LCAyNSwgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQpOw0KICAgICAgICB9DQogICAgICAgIFNldDxJbnRlZ2VyPiB1bmlxdWVTbG90cyA9IG5ldyBIYXNoU2V0PD4oKTsNCiAgICAgICAgTGlzdDxJbnRlZ2VyPiB2YWxpZFNsb3RzID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgIFNldDxJbnRlZ2VyPiByZXNlcnZlZFNsb3RzID0gbmV3IEhhc2hTZXQ8PihBcnJheXMuYXNMaXN0KA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy5maWx0ZXItYnV0dG9uLnNsb3QiLCA0NyksDQogICAgICAgICAgICAgICAgY29uZmlnLmdldEludCgiUGx1Z2luLUl0ZW1zLnNlYXJjaC1idXR0b24uc2xvdCIsIDQpLA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy5jcmVhdGUtYm91bnR5LWJ1dHRvbi5zbG90IiwgNTApLA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy5odW50ZXJzLWRlbi1idXR0b24uc2xvdCIsIDQ4KSwNCiAgICAgICAgICAgICAgICBjb25maWcuZ2V0SW50KCJQbHVnaW4tSXRlbXMuYm91bnR5LWh1bnRlci1idXR0b24uc2xvdCIsIDUxKSwNCiAgICAgICAgICAgICAgICBjb25maWcuZ2V0SW50KCJQbHVnaW4tSXRlbXMucHJldmlvdXMtcGFnZS1idXR0b24uc2xvdCIsIDQ1KSwNCiAgICAgICAgICAgICAgICBjb25maWcuZ2V0SW50KCJQbHVnaW4tSXRlbXMubmV4dC1wYWdlLWJ1dHRvbi5zbG90IiwgNTMpLA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy5ib29zdC1jbG9jay5zbG90IiwgNDkpLA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoInNlYXJjaC1yZXN1bHRzLnNpbmdsZS1zbG90IiwgMjIpDQogICAgICAgICkpOw0KICAgICAgICByZXNlcnZlZFNsb3RzLmFkZEFsbChjb25maWcuZ2V0SW50ZWdlckxpc3QoImJvcmRlci5zbG90cyIpKTsNCiAgICAgICAgaWYgKGNvbmZpZy5jb250YWlucygiQ3VzdG9tLUl0ZW1zIikpIHsNCiAgICAgICAgICAgIGZvciAoU3RyaW5nIGtleSA6IGNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiQ3VzdG9tLUl0ZW1zIikuZ2V0S2V5cyhmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICBTdHJpbmcgcGF0aCA9ICJDdXN0b20tSXRlbXMuIiArIGtleTsNCiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmNvbnRhaW5zKHBhdGggKyAiLnNsb3QiKSkgew0KICAgICAgICAgICAgICAgICAgICByZXNlcnZlZFNsb3RzLmFkZChjb25maWcuZ2V0SW50KHBhdGggKyAiLnNsb3QiKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChjb25maWcuY29udGFpbnMocGF0aCArICIuc2xvdHMiKSkgew0KICAgICAgICAgICAgICAgICAgICByZXNlcnZlZFNsb3RzLmFkZEFsbChjb25maWcuZ2V0SW50ZWdlckxpc3QocGF0aCArICIuc2xvdHMiKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGZvciAoaW50IHNsb3QgOiBzbG90cykgew0KICAgICAgICAgICAgaWYgKHNsb3QgPj0gMCAmJiBzbG90IDwgNTQgJiYgIXJlc2VydmVkU2xvdHMuY29udGFpbnMoc2xvdCkgJiYgdW5pcXVlU2xvdHMuYWRkKHNsb3QpKSB7DQogICAgICAgICAgICAgICAgdmFsaWRTbG90cy5hZGQoc2xvdCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEludmFsaWQgb3IgcmVzZXJ2ZWQgYm91bnR5LXNrdWxsLXNsb3QgIiArIHNsb3QgKyAiIGluIEJvdW50eUdVSS55bWwgKG11c3QgYmUgMC01MywgdW5pcXVlLCBub3QgaW4gYm9yZGVyIG9yIFBsdWdpbi1JdGVtcykiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZiAodmFsaWRTbG90cy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIE5vIHZhbGlkIGJvdW50eS1za3VsbC1zbG90cywgdXNpbmcgZGVmYXVsdCBzbG90cyIpOw0KICAgICAgICAgICAgdmFsaWRTbG90cyA9IEFycmF5cy5hc0xpc3QoMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyOCwgMjksIDMwLCAzMSwgMzIsIDMzLCAzNCk7DQogICAgICAgIH0NCiAgICAgICAgYm91bnR5U2t1bGxTbG90cyA9IHZhbGlkU2xvdHMuc3RyZWFtKCkubWFwVG9JbnQoSW50ZWdlcjo6aW50VmFsdWUpLnRvQXJyYXkoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBPcGVucyB0aGUgQm91bnR5IEdVSSBmb3IgYSBwbGF5ZXINCiAgICAgKiAvLyBub3RlOiBEaXNwbGF5cyBib3VudHkgc2t1bGxzIHdpdGggc2VsZWN0ZWQgZmlsdGVyIGFuZCBzb3J0IG9yZGVyLCBpbmNsdWRpbmcgbmF2aWdhdGlvbiBhbmQgYWN0aW9uIGJ1dHRvbnMNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgb3BlbkJvdW50eUdVSShQbGF5ZXIgcGxheWVyLCBib29sZWFuIGZpbHRlckhpZ2hUb0xvdywgYm9vbGVhbiBzaG93T25seU9ubGluZSwgaW50IHBhZ2UpIHsNCiAgICAgICAgQm91bnRpZXNQbHVzIHBsdWdpbkluc3RhbmNlID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCk7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbkluc3RhbmNlLmdldEJvdW50eUdVSUNvbmZpZygpOw0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luSW5zdGFuY2UuZ2V0RGVidWdNYW5hZ2VyKCk7DQoNCiAgICAgICAgLy8gVmVyaWZ5IGNvbmZpZ3VyYXRpb24gaW50ZWdyaXR5DQogICAgICAgIEZpbGUgY29uZmlnRmlsZSA9IG5ldyBGaWxlKHBsdWdpbkluc3RhbmNlLmdldERhdGFGb2xkZXIoKSwgIkdVSXMvQm91bnR5R1VJLnltbCIpOw0KICAgICAgICBpZiAoIWNvbmZpZ0ZpbGUuZXhpc3RzKCkgfHwgY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJQbHVnaW4tSXRlbXMiKSA9PSBudWxsKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5R1VJXSBCb3VudHlHVUkueW1sIGlzIG1pc3Npbmcgb3IgaW52YWxpZCwgcmVsb2FkaW5nIGRlZmF1bHQiKTsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgaWYgKGNvbmZpZ0ZpbGUuZXhpc3RzKCkpIGNvbmZpZ0ZpbGUuZGVsZXRlKCk7IC8vIFJlbW92ZSBpbnZhbGlkIGZpbGUNCiAgICAgICAgICAgICAgICBwbHVnaW5JbnN0YW5jZS5zYXZlUmVzb3VyY2UoIkdVSXMvQm91bnR5R1VJLnltbCIsIGZhbHNlKTsgLy8gQ29weSBkZWZhdWx0DQogICAgICAgICAgICAgICAgY29uZmlnID0gWWFtbENvbmZpZ3VyYXRpb24ubG9hZENvbmZpZ3VyYXRpb24oY29uZmlnRmlsZSk7DQogICAgICAgICAgICAgICAgcGx1Z2luSW5zdGFuY2UuZ2V0RGVidWdNYW5hZ2VyKCkubG9nRGVidWcoIltERUJVRyAtIEJvdW50eUdVSV0gUmVsb2FkZWQgZGVmYXVsdCBCb3VudHlHVUkueW1sIik7DQogICAgICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEZhaWxlZCB0byByZWxvYWQgZGVmYXVsdCBCb3VudHlHVUkueW1sOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgbG9hZEJvdW50eVNrdWxsU2xvdHMoY29uZmlnLCBkZWJ1Z01hbmFnZXIpOw0KICAgICAgICBVVUlEIHBsYXllclVVSUQgPSBwbGF5ZXIuZ2V0VW5pcXVlSWQoKTsNCiAgICAgICAgcGxheWVyU2hvd09ubHlPbmxpbmUucHV0SWZBYnNlbnQocGxheWVyVVVJRCwgZmFsc2UpOw0KICAgICAgICBwbGF5ZXJGaWx0ZXJIaWdoVG9Mb3cucHV0SWZBYnNlbnQocGxheWVyVVVJRCwgdHJ1ZSk7DQogICAgICAgIHBsYXllclNob3dPbmx5T25saW5lLnB1dChwbGF5ZXJVVUlELCBzaG93T25seU9ubGluZSk7DQogICAgICAgIHBsYXllckZpbHRlckhpZ2hUb0xvdy5wdXQocGxheWVyVVVJRCwgZmlsdGVySGlnaFRvTG93KTsNCiAgICAgICAgYm9vbGVhbiBjdXJyZW50U2hvd09ubHlPbmxpbmUgPSBwbGF5ZXJTaG93T25seU9ubGluZS5nZXQocGxheWVyVVVJRCk7DQogICAgICAgIGJvb2xlYW4gY3VycmVudEZpbHRlckhpZ2hUb0xvdyA9IHBsYXllckZpbHRlckhpZ2hUb0xvdy5nZXQocGxheWVyVVVJRCk7DQogICAgICAgIEdVSV9USVRMRSA9IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgY29uZmlnLmdldFN0cmluZygiZ3VpLXRpdGxlIiwgIiZkQm91bnR5IEh1bnRlciIpKTsNCiAgICAgICAgaW50IGd1aVNpemUgPSBjb25maWcuZ2V0SW50KCJndWktc2l6ZSIsIDU0KTsNCiAgICAgICAgSW52ZW50b3J5IGJvdW50eUd1aSA9IEJ1a2tpdC5jcmVhdGVJbnZlbnRvcnkobnVsbCwgZ3VpU2l6ZSwgR1VJX1RJVExFKTsNCiAgICAgICAgY3VycmVudFBhZ2UgPSBwYWdlOw0KICAgICAgICBMaXN0PEJvdW50eT4gZmlsdGVyZWRCb3VudGllcyA9IGdldEZpbHRlcmVkQm91bnRpZXMocGx1Z2luSW5zdGFuY2UuZ2V0Qm91bnR5TWFuYWdlcigpLCBjdXJyZW50U2hvd09ubHlPbmxpbmUsIGN1cnJlbnRGaWx0ZXJIaWdoVG9Mb3cpOw0KICAgICAgICBpbnQgdG90YWxQYWdlcyA9IE1hdGgubWF4KDEsIChpbnQpIE1hdGguY2VpbCgoZG91YmxlKSBmaWx0ZXJlZEJvdW50aWVzLnNpemUoKSAvIGJvdW50eVNrdWxsU2xvdHMubGVuZ3RoKSk7DQogICAgICAgIGN1cnJlbnRQYWdlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMgLSAxKSk7DQogICAgICAgIEl0ZW1TdGFjayBib3JkZXJQYW5lID0gY3JlYXRlQm9yZGVySXRlbShjb25maWcpOw0KICAgICAgICBmaWxsQm9yZGVyKGJvdW50eUd1aSwgYm9yZGVyUGFuZSwgY29uZmlnKTsNCiAgICAgICAgYm9vbGVhbiBlbmFibGVTaG9wID0gcGx1Z2luSW5zdGFuY2UuZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigiZW5hYmxlLXNob3AiLCB0cnVlKTsNCiAgICAgICAgcGxhY2VDdXN0b21JdGVtcyhib3VudHlHdWksIGNvbmZpZyk7DQogICAgICAgIHBsYWNlQ29uZmlndXJlZEJ1dHRvbnMoYm91bnR5R3VpLCBjb25maWcsIGVuYWJsZVNob3AsIGN1cnJlbnRGaWx0ZXJIaWdoVG9Mb3csIGN1cnJlbnRTaG93T25seU9ubGluZSwgY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMsIHBsdWdpbkluc3RhbmNlLCBwbGF5ZXIpOw0KICAgICAgICBwbGFjZUJvdW50eUl0ZW1zKGJvdW50eUd1aSwgcGx1Z2luSW5zdGFuY2UsIGNvbmZpZyk7DQogICAgICAgIHBsYXllci5vcGVuSW52ZW50b3J5KGJvdW50eUd1aSk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBzdGF0aWMgTWFwPFN0cmluZywgU3RyaW5nPiBnZXRCb29zdFBsYWNlaG9sZGVycyhCb3VudGllc1BsdXMgcGx1Z2luKSB7DQogICAgICAgIE1hcDxTdHJpbmcsIFN0cmluZz4gcGxhY2Vob2xkZXJzID0gbmV3IEhhc2hNYXA8PigpOw0KDQogICAgICAgIGlmIChwbHVnaW4uZ2V0Qm9vc3RlZEJvdW50eSgpICE9IG51bGwpIHsNCiAgICAgICAgICAgIEJvb3N0ZWRCb3VudHkgYm9vc3RlZEJvdW50eSA9IHBsdWdpbi5nZXRCb29zdGVkQm91bnR5KCk7DQogICAgICAgICAgICBwbGFjZWhvbGRlcnMucHV0KCIlY3VycmVudF9ib29zdF9pbmZvJSIsIGdldEN1cnJlbnRCb29zdFRleHQoYm9vc3RlZEJvdW50eSkpOw0KICAgICAgICAgICAgcGxhY2Vob2xkZXJzLnB1dCgiJWxhc3RfYm9vc3RfaW5mbyUiLCBnZXRMYXN0Qm9vc3RUZXh0KGJvb3N0ZWRCb3VudHkpKTsNCiAgICAgICAgICAgIHBsYWNlaG9sZGVycy5wdXQoIiVuZXh0X2Jvb3N0X2luZm8lIiwgZ2V0TmV4dEJvb3N0VGV4dChib29zdGVkQm91bnR5LCBwbHVnaW4pKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHBsYWNlaG9sZGVycy5wdXQoIiVjdXJyZW50X2Jvb3N0X2luZm8lIiwgIuKGkiBObyBhY3RpdmUgYm9vc3QiKTsNCiAgICAgICAgICAgIHBsYWNlaG9sZGVycy5wdXQoIiVsYXN0X2Jvb3N0X2luZm8lIiwgIuKGkiBObyBwcmV2aW91cyBib29zdCIpOw0KICAgICAgICAgICAgcGxhY2Vob2xkZXJzLnB1dCgiJW5leHRfYm9vc3RfaW5mbyUiLCAi4oaSIFNvb24uLi4iKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChwbHVnaW4uZ2V0RnJlbnp5KCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgRnJlbnp5IGZyZW56eSA9IHBsdWdpbi5nZXRGcmVuenkoKTsNCiAgICAgICAgICAgIHBsYWNlaG9sZGVycy5wdXQoIiVjdXJyZW50X2ZyZW56eV9pbmZvJSIsIGdldEN1cnJlbnRGcmVuenlUZXh0KGZyZW56eSkpOw0KICAgICAgICAgICAgcGxhY2Vob2xkZXJzLnB1dCgiJWxhc3RfZnJlbnp5X2luZm8lIiwgZ2V0TGFzdEZyZW56eVRleHQoZnJlbnp5KSk7DQogICAgICAgICAgICBwbGFjZWhvbGRlcnMucHV0KCIlbmV4dF9mcmVuenlfaW5mbyUiLCBnZXROZXh0RnJlbnp5VGV4dChmcmVuenkpKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHBsYWNlaG9sZGVycy5wdXQoIiVjdXJyZW50X2ZyZW56eV9pbmZvJSIsICLihpIgRnJlbnp5IGRpc2FibGVkIik7DQogICAgICAgICAgICBwbGFjZWhvbGRlcnMucHV0KCIlbGFzdF9mcmVuenlfaW5mbyUiLCAi4oaSIEZyZW56eSBkaXNhYmxlZCIpOw0KICAgICAgICAgICAgcGxhY2Vob2xkZXJzLnB1dCgiJW5leHRfZnJlbnp5X2luZm8lIiwgIuKGkiBGcmVuenkgZGlzYWJsZWQiKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBwbGFjZWhvbGRlcnM7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBzdGF0aWMgU3RyaW5nIGdldEN1cnJlbnRGcmVuenlUZXh0KEZyZW56eSBmcmVuenkpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGlmIChmcmVuenkuaXNGcmVuenlBY3RpdmUoKSkgew0KICAgICAgICAgICAgICAgIGxvbmcgdGltZVJlbWFpbmluZyA9IGZyZW56eS5nZXRGcmVuenlUaW1lUmVtYWluaW5nKCk7DQogICAgICAgICAgICAgICAgZG91YmxlIG11bHRpcGxpZXIgPSBmcmVuenkuZ2V0RnJlbnp5TXVsdGlwbGllcigpOw0KICAgICAgICAgICAgICAgIHJldHVybiAiJmPihpIgJmYmbEFDVElWRSAmNygmYyIgKyBTdHJpbmcuZm9ybWF0KCIlLjFmIiwgbXVsdGlwbGllcikgKyAieCY3KVxuJjcgIEVuZHMgaW46ICZjIiArIGZvcm1hdFRpbWUodGltZVJlbWFpbmluZyk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiAiJjfihpIgJjhObyBhY3RpdmUgZnJlbnp5IjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIHJldHVybiAiJjfihpIgJjhVbmFibGUgdG8gY2FsY3VsYXRlIjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgc3RhdGljIFN0cmluZyBnZXRMYXN0RnJlbnp5VGV4dChGcmVuenkgZnJlbnp5KSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBTdHJpbmcgbGFzdFRpbWUgPSBmcmVuenkuZ2V0TGFzdEZyZW56eVRpbWUoKTsNCiAgICAgICAgICAgIGlmIChsYXN0VGltZSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgZG91YmxlIG11bHRpcGxpZXIgPSBmcmVuenkuZ2V0TGFzdEZyZW56eU11bHRpcGxpZXIoKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gIiZj4oaSICZmIiArIFN0cmluZy5mb3JtYXQoIiUuMWYiLCBtdWx0aXBsaWVyKSArICJ4ICY3bXVsdGlwbGllclxuJjcgIEVuZGVkOiAmNiIgKyBsYXN0VGltZTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICImN+KGkiAmOE5vIHByZXZpb3VzIGZyZW56eSI7DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICByZXR1cm4gIiY34oaSICY4VW5hYmxlIHRvIGNhbGN1bGF0ZSI7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcml2YXRlIHN0YXRpYyBTdHJpbmcgZ2V0TmV4dEZyZW56eVRleHQoRnJlbnp5IGZyZW56eSkgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgbG9uZyB0aW1lVW50aWxOZXh0ID0gZnJlbnp5LmdldFRpbWVVbnRpbE5leHRGcmVuenkoKTsNCiAgICAgICAgICAgIGlmICh0aW1lVW50aWxOZXh0ID4gMCkgew0KICAgICAgICAgICAgICAgIHJldHVybiAiJmPihpIgJmZJbiAiICsgZm9ybWF0VGltZSh0aW1lVW50aWxOZXh0KTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAodGltZVVudGlsTmV4dCA9PSAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICImY+KGkiAmY0ZyZW56eSBpbmNvbWluZyEiOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgcmV0dXJuICImN+KGkiAmOFVuYWJsZSB0byBjYWxjdWxhdGUiOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiAiJjfihpIgJjhVbmFibGUgdG8gY2FsY3VsYXRlIjsNCiAgICB9DQoNCiAgICBwcml2YXRlIHN0YXRpYyBTdHJpbmcgZ2V0Q3VycmVudEJvb3N0VGV4dChCb29zdGVkQm91bnR5IGJvb3N0ZWRCb3VudHkpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIFVVSUQgY3VycmVudEJvb3N0ZWRUYXJnZXQgPSBib29zdGVkQm91bnR5LmdldEN1cnJlbnRCb29zdGVkVGFyZ2V0KCk7DQogICAgICAgICAgICBpZiAoY3VycmVudEJvb3N0ZWRUYXJnZXQgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIE9mZmxpbmVQbGF5ZXIgdGFyZ2V0ID0gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIoY3VycmVudEJvb3N0ZWRUYXJnZXQpOw0KICAgICAgICAgICAgICAgIGRvdWJsZSBtdWx0aXBsaWVyID0gYm9vc3RlZEJvdW50eS5nZXRDdXJyZW50Qm9vc3RNdWx0aXBsaWVyKGN1cnJlbnRCb29zdGVkVGFyZ2V0KTsNCiAgICAgICAgICAgICAgICBTdHJpbmcgdGFyZ2V0TmFtZSA9IHRhcmdldC5nZXROYW1lKCkgIT0gbnVsbCA/IHRhcmdldC5nZXROYW1lKCkgOiAiVW5rbm93biI7DQogICAgICAgICAgICAgICAgcmV0dXJuICImN+KGkiAmZiIgKyB0YXJnZXROYW1lICsgIiAmNygmYSIgKyBTdHJpbmcuZm9ybWF0KCIlLjFmIiwgbXVsdGlwbGllcikgKyAieCY3KSI7DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICByZXR1cm4gIiY34oaSICY4Tm8gYWN0aXZlIGJvb3N0IjsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gIiY34oaSICY4Tm8gYWN0aXZlIGJvb3N0IjsNCiAgICB9DQoNCiAgICBwcml2YXRlIHN0YXRpYyBTdHJpbmcgZ2V0TGFzdEJvb3N0VGV4dChCb29zdGVkQm91bnR5IGJvb3N0ZWRCb3VudHkpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIFN0cmluZyBsYXN0Qm9vc3RlZFBsYXllciA9IGJvb3N0ZWRCb3VudHkuZ2V0TGFzdEJvb3N0ZWRQbGF5ZXIoKTsNCiAgICAgICAgICAgIFN0cmluZyBsYXN0Qm9vc3RUaW1lID0gYm9vc3RlZEJvdW50eS5nZXRMYXN0Qm9vc3RUaW1lKCk7DQogICAgICAgICAgICBpZiAobGFzdEJvb3N0ZWRQbGF5ZXIgIT0gbnVsbCAmJiBsYXN0Qm9vc3RUaW1lICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gIiY34oaSICZmIiArIGxhc3RCb29zdGVkUGxheWVyICsgIiAmN2Jvb3N0ZWQgIiArIGxhc3RCb29zdFRpbWUgKyAiIGFnbyI7DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICByZXR1cm4gIiY34oaSICY4Tm8gcHJldmlvdXMgYm9vc3QiOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiAiJjfihpIgJjhObyBwcmV2aW91cyBib29zdCI7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBzdGF0aWMgU3RyaW5nIGdldE5leHRCb29zdFRleHQoQm9vc3RlZEJvdW50eSBib29zdGVkQm91bnR5LCBCb3VudGllc1BsdXMgcGx1Z2luKSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBsb25nIHRpbWVVbnRpbE5leHQgPSBib29zdGVkQm91bnR5LmdldFRpbWVVbnRpbE5leHRCb29zdCgpOw0KICAgICAgICAgICAgaWYgKHRpbWVVbnRpbE5leHQgPiAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICImN+KGkiAmZkluICIgKyBmb3JtYXRUaW1lKHRpbWVVbnRpbE5leHQpOw0KICAgICAgICAgICAgfSBlbHNlIGlmICh0aW1lVW50aWxOZXh0ID09IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gIiY34oaSICZhQm9vc3QgaW5jb21pbmchIjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIHJldHVybiAiJjfihpIgJjhVbmFibGUgdG8gY2FsY3VsYXRlIjsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gIiY34oaSICY4VW5hYmxlIHRvIGNhbGN1bGF0ZSI7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBzdGF0aWMgU3RyaW5nIGZvcm1hdFRpbWUobG9uZyBzZWNvbmRzKSB7DQogICAgICAgIHJldHVybiBUaW1lRm9ybWF0dGVyLmZvcm1hdFRpbWVSZW1haW5pbmcoc2Vjb25kcyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUGxhY2VzIGNvbmZpZ3VyZWQgYnV0dG9ucyBpbiB0aGUgQm91bnR5IEdVSQ0KICAgICAqIC8vIG5vdGU6IEFkZHMgZmlsdGVyLCBzZWFyY2gsIG5hdmlnYXRpb24sIGFuZCBhY3Rpb24gYnV0dG9ucyB0byB0aGUgaW52ZW50b3J5DQogICAgICovDQogICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBwbGFjZUNvbmZpZ3VyZWRCdXR0b25zKEludmVudG9yeSBpbnZlbnRvcnksIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZywgYm9vbGVhbiBlbmFibGVTaG9wLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29sZWFuIGZpbHRlckhpZ2hUb0xvdywgYm9vbGVhbiBzaG93T25seU9ubGluZSwgaW50IGN1cnJlbnRQYWdlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnQgdG90YWxQYWdlcywgQm91bnRpZXNQbHVzIHBsdWdpbiwgUGxheWVyIHBsYXllcikgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBidXR0b25GYWlsdXJlcy5jbGVhcigpOyAvLyBDbGVhciBwcmV2aW91cyBmYWlsdXJlcw0KDQogICAgICAgIE1hcDxTdHJpbmcsIEludGVnZXI+IGJ1dHRvbnMgPSBuZXcgSGFzaE1hcDw+KCk7DQogICAgICAgIGJ1dHRvbnMucHV0KCJmaWx0ZXItYnV0dG9uIiwgY29uZmlnLmdldEludCgiUGx1Z2luLUl0ZW1zLmZpbHRlci1idXR0b24uc2xvdCIsIDQ3KSk7DQogICAgICAgIGJ1dHRvbnMucHV0KCJzZWFyY2gtYnV0dG9uIiwgY29uZmlnLmdldEludCgiUGx1Z2luLUl0ZW1zLnNlYXJjaC1idXR0b24uc2xvdCIsIDQpKTsNCiAgICAgICAgYnV0dG9ucy5wdXQoImNyZWF0ZS1ib3VudHktYnV0dG9uIiwgY29uZmlnLmdldEludCgiUGx1Z2luLUl0ZW1zLmNyZWF0ZS1ib3VudHktYnV0dG9uLnNsb3QiLCA1MCkpOw0KICAgICAgICBpZiAoZW5hYmxlU2hvcCkgew0KICAgICAgICAgICAgYnV0dG9ucy5wdXQoImh1bnRlcnMtZGVuLWJ1dHRvbiIsIGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy5odW50ZXJzLWRlbi1idXR0b24uc2xvdCIsIDQ4KSk7DQogICAgICAgIH0NCiAgICAgICAgYnV0dG9ucy5wdXQoImJvdW50eS1odW50ZXItYnV0dG9uIiwgY29uZmlnLmdldEludCgiUGx1Z2luLUl0ZW1zLmJvdW50eS1odW50ZXItYnV0dG9uLnNsb3QiLCA1MSkpOw0KICAgICAgICBpZiAoY3VycmVudFBhZ2UgPiAwKSB7DQogICAgICAgICAgICBidXR0b25zLnB1dCgicHJldmlvdXMtcGFnZS1idXR0b24iLCBjb25maWcuZ2V0SW50KCJQbHVnaW4tSXRlbXMucHJldmlvdXMtcGFnZS1idXR0b24uc2xvdCIsIDQ1KSk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGN1cnJlbnRQYWdlIDwgdG90YWxQYWdlcyAtIDEpIHsNCiAgICAgICAgICAgIGJ1dHRvbnMucHV0KCJuZXh0LXBhZ2UtYnV0dG9uIiwgY29uZmlnLmdldEludCgiUGx1Z2luLUl0ZW1zLm5leHQtcGFnZS1idXR0b24uc2xvdCIsIDUzKSk7DQogICAgICAgIH0NCiAgICAgICAgYm9vbGVhbiBoYXNCb29zdENsb2NrQ29uZmlnID0gY29uZmlnLmNvbnRhaW5zKCJQbHVnaW4tSXRlbXMuYm9vc3QtY2xvY2siKTsNCiAgICAgICAgaWYgKHBsdWdpbi5nZXRCb29zdGVkQm91bnR5KCkgIT0gbnVsbCAmJiBoYXNCb29zdENsb2NrQ29uZmlnKSB7DQogICAgICAgICAgICBidXR0b25zLnB1dCgiYm9vc3QtY2xvY2siLCBjb25maWcuZ2V0SW50KCJQbHVnaW4tSXRlbXMuYm9vc3QtY2xvY2suc2xvdCIsIDQ5KSk7DQogICAgICAgIH0NCg0KICAgICAgICBpbnQgdG90YWxCdXR0b25zID0gYnV0dG9ucy5zaXplKCk7DQogICAgICAgIGludCBzdWNjZXNzZnVsQnV0dG9ucyA9IDA7DQoNCiAgICAgICAgLy8gUGxhY2UgYnV0dG9ucw0KICAgICAgICBmb3IgKE1hcC5FbnRyeTxTdHJpbmcsIEludGVnZXI+IGVudHJ5IDogYnV0dG9ucy5lbnRyeVNldCgpKSB7DQogICAgICAgICAgICBTdHJpbmcgYnV0dG9uTmFtZSA9IGVudHJ5LmdldEtleSgpOw0KICAgICAgICAgICAgaW50IHNsb3QgPSBlbnRyeS5nZXRWYWx1ZSgpOw0KDQogICAgICAgICAgICBJdGVtU3RhY2sgYnV0dG9uID0gbnVsbDsNCiAgICAgICAgICAgIHN3aXRjaCAoYnV0dG9uTmFtZSkgew0KICAgICAgICAgICAgICAgIGNhc2UgImZpbHRlci1idXR0b24iOg0KICAgICAgICAgICAgICAgICAgICBidXR0b24gPSBjcmVhdGVGaWx0ZXJJdGVtKGNvbmZpZywgc2hvd09ubHlPbmxpbmUsIGZpbHRlckhpZ2hUb0xvdywgcGxheWVyKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAic2VhcmNoLWJ1dHRvbiI6DQogICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IGNyZWF0ZVNlYXJjaEl0ZW0oY29uZmlnLCBwbGF5ZXIpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICJjcmVhdGUtYm91bnR5LWJ1dHRvbiI6DQogICAgICAgICAgICAgICAgY2FzZSAiaHVudGVycy1kZW4tYnV0dG9uIjoNCiAgICAgICAgICAgICAgICBjYXNlICJib3VudHktaHVudGVyLWJ1dHRvbiI6DQogICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IGNyZWF0ZUd1aUl0ZW0oYnV0dG9uTmFtZSwgY29uZmlnLCBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcikpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICJwcmV2aW91cy1wYWdlLWJ1dHRvbiI6DQogICAgICAgICAgICAgICAgY2FzZSAibmV4dC1wYWdlLWJ1dHRvbiI6DQogICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IGNyZWF0ZU5hdmlnYXRpb25CdXR0b24oYnV0dG9uTmFtZSwgY29uZmlnLCBjdXJyZW50UGFnZSArIDEsIHRvdGFsUGFnZXMpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICJib29zdC1jbG9jayI6DQogICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IGNyZWF0ZUJvb3N0Q2xvY2tJdGVtKGNvbmZpZywgcGx1Z2luKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChidXR0b24gIT0gbnVsbCAmJiBidXR0b24uZ2V0VHlwZSgpICE9IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKHNsb3QsIGJ1dHRvbik7DQogICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bEJ1dHRvbnMrKzsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUdVSV0gRmFpbGVkIHRvIHBsYWNlIGJ1dHRvbiAiICsgYnV0dG9uTmFtZSArICIgaW4gc2xvdCAiICsgc2xvdCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyBMb2cgY29uc29saWRhdGVkIGRlYnVnIG1lc3NhZ2UNCiAgICAgICAgaWYgKHN1Y2Nlc3NmdWxCdXR0b25zID09IHRvdGFsQnV0dG9ucykgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBCb3VudHlHVUldIEFsbCBidXR0b25zIGNyZWF0ZWQiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgZmFpbHVyZU1lc3NhZ2UgPSBuZXcgU3RyaW5nQnVpbGRlcigiW0RFQlVHIC0gQm91bnR5R1VJXSAiICsgc3VjY2Vzc2Z1bEJ1dHRvbnMgKyAiLyIgKyB0b3RhbEJ1dHRvbnMgKyAiIGJ1dHRvbnMgY3JlYXRlZCIpOw0KICAgICAgICAgICAgaWYgKCFidXR0b25GYWlsdXJlcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gZmFpbHVyZXMgPSBidXR0b25GYWlsdXJlcy5lbnRyeVNldCgpLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgICAgICAgICAubWFwKGUgLT4gZS5nZXRLZXkoKSArICIgUmVhc29uOiAiICsgZS5nZXRWYWx1ZSgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSk7DQogICAgICAgICAgICAgICAgZmFpbHVyZU1lc3NhZ2UuYXBwZW5kKCIsIGZhaWxlZCB0byBjcmVhdGU6ICIpLmFwcGVuZChTdHJpbmcuam9pbigiLCAiLCBmYWlsdXJlcykpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckZhaWx1cmUoIkJvdW50eUdVSV9idXR0b25zXyIgKyBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSwgZmFpbHVyZU1lc3NhZ2UudG9TdHJpbmcoKSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGEgbmF2aWdhdGlvbiBidXR0b24gZm9yIHRoZSBCb3VudHkgR1VJDQogICAgICogLy8gbm90ZTogR2VuZXJhdGVzIGEgbmF2aWdhdGlvbiBidXR0b24gd2l0aCBtYXRlcmlhbCwgbmFtZSwgbG9yZSwgYW5kIGdsb3cgZm9yIHBhZ2luYXRpb24NCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyBJdGVtU3RhY2sgY3JlYXRlTmF2aWdhdGlvbkJ1dHRvbihTdHJpbmcgc2VjdGlvbk5hbWUsIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZywgaW50IGN1cnJlbnRQYWdlLCBpbnQgdG90YWxQYWdlcykgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIFN0cmluZyBjb25maWdQYXRoID0gIlBsdWdpbi1JdGVtcy4iICsgc2VjdGlvbk5hbWU7DQogICAgICAgIFN0cmluZyBmYWlsdXJlUmVhc29uID0gbnVsbDsNCg0KICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gY29uZmlnLmdldFN0cmluZyhjb25maWdQYXRoICsgIi5tYXRlcmlhbCIsICJBUlJPVyIpOw0KICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2sobWF0ZXJpYWxOYW1lKTsNCiAgICAgICAgaWYgKGl0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLlNUT05FICYmICFtYXRlcmlhbE5hbWUuZXF1YWxzSWdub3JlQ2FzZSgiQVJST1ciKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUdVSV0gSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIGZvciAiICsgc2VjdGlvbk5hbWUgKyAiLCB1c2luZyBBUlJPVyIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIiciOw0KICAgICAgICAgICAgaXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIkFSUk9XIik7DQogICAgICAgIH0NCg0KICAgICAgICBJdGVtTWV0YSBtZXRhID0gaXRlbS5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAobWV0YSA9PSBudWxsKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5R1VJXSBGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIGZvciAiICsgc2VjdGlvbk5hbWUpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIjsNCiAgICAgICAgICAgIHJldHVybiBpdGVtOw0KICAgICAgICB9DQoNCiAgICAgICAgU3RyaW5nIG5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKGNvbmZpZ1BhdGggKyAiLm5hbWUiLCAiTmF2aWdhdGlvbiIpOw0KICAgICAgICBuYW1lID0gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBuYW1lKTsNCiAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShuYW1lKTsNCg0KICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KGNvbmZpZ1BhdGggKyAiLmxvcmUiKTsNCiAgICAgICAgTGlzdDxTdHJpbmc+IHByb2Nlc3NlZExvcmUgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAuY3VycmVudFBhZ2UoY3VycmVudFBhZ2UpDQogICAgICAgICAgICAgICAgLnRvdGFsUGFnZXModG90YWxQYWdlcyk7DQogICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiBsb3JlKSB7DQogICAgICAgICAgICBTdHJpbmcgcHJvY2Vzc2VkTGluZSA9IFBsYWNlaG9sZGVycy5hcHBseShsaW5lLCBjb250ZXh0KTsNCiAgICAgICAgICAgIHByb2Nlc3NlZExvcmUuYWRkKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgcHJvY2Vzc2VkTGluZSkpOw0KICAgICAgICB9DQogICAgICAgIG1ldGEuc2V0TG9yZShwcm9jZXNzZWRMb3JlKTsNCg0KICAgICAgICBpZiAoY29uZmlnLmdldEJvb2xlYW4oY29uZmlnUGF0aCArICIuZW5jaGFudG1lbnQtZ2xvdyIsIGZhbHNlKSkgew0KICAgICAgICAgICAgbWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgIH0NCg0KICAgICAgICBpdGVtLnNldEl0ZW1NZXRhKG1ldGEpOw0KDQogICAgICAgIGlmIChmYWlsdXJlUmVhc29uICE9IG51bGwpIHsNCiAgICAgICAgICAgIGJ1dHRvbkZhaWx1cmVzLnB1dChzZWN0aW9uTmFtZSwgZmFpbHVyZVJlYXNvbik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gaXRlbTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIHRoZSBib29zdCBjbG9jayBpdGVtIGZvciB0aGUgQm91bnR5IEdVSQ0KICAgICAqIC8vIG5vdGU6IEdlbmVyYXRlcyBhIGNsb2NrIGl0ZW0gd2l0aCBib29zdCBhbmQgZnJlbnp5IGluZm9ybWF0aW9uDQogICAgICovDQogICAgcHJpdmF0ZSBzdGF0aWMgSXRlbVN0YWNrIGNyZWF0ZUJvb3N0Q2xvY2tJdGVtKEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZywgQm91bnRpZXNQbHVzIHBsdWdpbikgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBTdHJpbmcgc2VjdGlvbk5hbWUgPSAiYm9vc3QtY2xvY2siOw0KICAgICAgICBTdHJpbmcgY29uZmlnUGF0aCA9ICJQbHVnaW4tSXRlbXMuIiArIHNlY3Rpb25OYW1lOw0KICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQoNCiAgICAgICAgU3RyaW5nIG1hdGVyaWFsTmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoY29uZmlnUGF0aCArICIubWF0ZXJpYWwiLCAiQ0xPQ0siKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgIGlmIChpdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5TVE9ORSAmJiAhbWF0ZXJpYWxOYW1lLmVxdWFsc0lnbm9yZUNhc2UoIkNMT0NLIikpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyBmb3IgYm9vc3QtY2xvY2ssIHVzaW5nIENMT0NLIik7DQogICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyI7DQogICAgICAgICAgICBpdGVtID0gVmVyc2lvblV0aWxzLmdldFhNYXRlcmlhbEl0ZW1TdGFjaygiQ0xPQ0siKTsNCiAgICAgICAgfQ0KDQogICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBpdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmIChtZXRhID09IG51bGwpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEZhaWxlZCB0byBnZXQgSXRlbU1ldGEgZm9yIGJvb3N0LWNsb2NrIik7DQogICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEiOw0KICAgICAgICAgICAgcmV0dXJuIGl0ZW07DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgbmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoY29uZmlnUGF0aCArICIubmFtZSIsICImNuKPsCBCb29zdCBDbG9jayIpOw0KICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbmFtZSkpOw0KDQogICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gY29uZmlnLmdldFN0cmluZ0xpc3QoY29uZmlnUGF0aCArICIubG9yZSIpOw0KICAgICAgICBMaXN0PFN0cmluZz4gcHJvY2Vzc2VkTG9yZSA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICBNYXA8U3RyaW5nLCBTdHJpbmc+IHBsYWNlaG9sZGVycyA9IGdldEJvb3N0UGxhY2Vob2xkZXJzKHBsdWdpbik7DQogICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiBsb3JlKSB7DQogICAgICAgICAgICBTdHJpbmcgcHJvY2Vzc2VkTGluZSA9IGxpbmU7DQogICAgICAgICAgICBmb3IgKE1hcC5FbnRyeTxTdHJpbmcsIFN0cmluZz4gcGxhY2Vob2xkZXIgOiBwbGFjZWhvbGRlcnMuZW50cnlTZXQoKSkgew0KICAgICAgICAgICAgICAgIHByb2Nlc3NlZExpbmUgPSBwcm9jZXNzZWRMaW5lLnJlcGxhY2UocGxhY2Vob2xkZXIuZ2V0S2V5KCksIHBsYWNlaG9sZGVyLmdldFZhbHVlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcHJvY2Vzc2VkTG9yZS5hZGQoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBwcm9jZXNzZWRMaW5lKSk7DQogICAgICAgIH0NCiAgICAgICAgbWV0YS5zZXRMb3JlKHByb2Nlc3NlZExvcmUpOw0KDQogICAgICAgIGlmIChjb25maWcuZ2V0Qm9vbGVhbihjb25maWdQYXRoICsgIi5lbmNoYW50bWVudC1nbG93IiwgZmFsc2UpKSB7DQogICAgICAgICAgICBtZXRhLmFkZEVuY2hhbnQoRW5jaGFudG1lbnQuRFVSQUJJTElUWSwgMSwgdHJ1ZSk7DQogICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0VOQ0hBTlRTKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGl0ZW0uc2V0SXRlbU1ldGEobWV0YSk7DQoNCiAgICAgICAgaWYgKGZhaWx1cmVSZWFzb24gIT0gbnVsbCkgew0KICAgICAgICAgICAgYnV0dG9uRmFpbHVyZXMucHV0KHNlY3Rpb25OYW1lLCBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBpdGVtOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgYSBHVUkgaXRlbSBiYXNlZCBvbiBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogR2VuZXJhdGVzIGFuIGl0ZW0gd2l0aCBzcGVjaWZpZWQgbWF0ZXJpYWwsIG5hbWUsIGxvcmUsIGFuZCBnbG93IGZvciB0aGUgQm91bnR5IEdVSQ0KICAgICAqLw0KICAgIHByaXZhdGUgc3RhdGljIEl0ZW1TdGFjayBjcmVhdGVHdWlJdGVtKFN0cmluZyBzZWN0aW9uTmFtZSwgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnLCBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCkgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIFN0cmluZyBjb25maWdQYXRoID0gIlBsdWdpbi1JdGVtcy4iICsgc2VjdGlvbk5hbWU7DQogICAgICAgIFN0cmluZyBmYWlsdXJlUmVhc29uID0gbnVsbDsNCg0KICAgICAgICBpZiAoIWNvbmZpZy5jb250YWlucyhjb25maWdQYXRoKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUdVSV0gQ29uZmlndXJhdGlvbiBwYXRoICIgKyBjb25maWdQYXRoICsgIiBub3QgZm91bmQgaW4gQm91bnR5R1VJLnltbCIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJNaXNzaW5nIGNvbmZpZ3VyYXRpb24gcGF0aCI7DQogICAgICAgICAgICByZXR1cm4gbmV3IEl0ZW1TdGFjayhNYXRlcmlhbC5TVE9ORSk7DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gY29uZmlnLmdldFN0cmluZyhjb25maWdQYXRoICsgIi5tYXRlcmlhbCIsICJTVE9ORSIpOw0KICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2sobWF0ZXJpYWxOYW1lKTsNCiAgICAgICAgaWYgKGl0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLlNUT05FICYmICFtYXRlcmlhbE5hbWUuZXF1YWxzSWdub3JlQ2FzZSgiU1RPTkUiKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUdVSV0gSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIGZvciAiICsgc2VjdGlvbk5hbWUgKyAiLCBmYWxsaW5nIGJhY2sgdG8gU1RPTkUiKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIjsNCiAgICAgICAgfQ0KDQogICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBpdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmIChtZXRhID09IG51bGwpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEZhaWxlZCB0byBnZXQgSXRlbU1ldGEgZm9yICIgKyBzZWN0aW9uTmFtZSArICIgd2l0aCBtYXRlcmlhbCAiICsgaXRlbS5nZXRUeXBlKCkubmFtZSgpKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgICAgICByZXR1cm4gaXRlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIFN0cmluZyBuYW1lID0gY29uZmlnLmdldFN0cmluZyhjb25maWdQYXRoICsgIi5uYW1lIiwgIkl0ZW0iKTsNCiAgICAgICAgbmFtZSA9IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgUGxhY2Vob2xkZXJzLmFwcGx5KG5hbWUsIGNvbnRleHQpKTsNCiAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShuYW1lKTsNCg0KICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KGNvbmZpZ1BhdGggKyAiLmxvcmUiKTsNCiAgICAgICAgTGlzdDxTdHJpbmc+IHByb2Nlc3NlZExvcmUgPSBQbGFjZWhvbGRlcnMuYXBwbHkobG9yZSwgY29udGV4dCk7DQogICAgICAgIG1ldGEuc2V0TG9yZShwcm9jZXNzZWRMb3JlKTsNCg0KICAgICAgICBpZiAoY29uZmlnLmdldEJvb2xlYW4oY29uZmlnUGF0aCArICIuZW5jaGFudG1lbnQtZ2xvdyIsIGZhbHNlKSkgew0KICAgICAgICAgICAgbWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgIH0NCg0KICAgICAgICBpdGVtLnNldEl0ZW1NZXRhKG1ldGEpOw0KDQogICAgICAgIGlmIChmYWlsdXJlUmVhc29uICE9IG51bGwpIHsNCiAgICAgICAgICAgIGJ1dHRvbkZhaWx1cmVzLnB1dChzZWN0aW9uTmFtZSwgZmFpbHVyZVJlYXNvbik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gaXRlbTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIHRoZSBmaWx0ZXIgYnV0dG9uIGl0ZW0gZm9yIHRoZSBCb3VudHkgR1VJDQogICAgICogLy8gbm90ZTogR2VuZXJhdGVzIGEgZmlyZXdvcmsgc3RhciB3aXRoIGZpbHRlciBzdGF0dXMgYW5kIGRldGFpbHMgaW4gbG9yZQ0KICAgICAqLw0KICAgIHByaXZhdGUgc3RhdGljIEl0ZW1TdGFjayBjcmVhdGVGaWx0ZXJJdGVtKEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZywgYm9vbGVhbiBzaG93T25seU9ubGluZSwgYm9vbGVhbiBmaWx0ZXJIaWdoVG9Mb3csIFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBTdHJpbmcgc2VjdGlvbk5hbWUgPSAiZmlsdGVyLWJ1dHRvbiI7DQogICAgICAgIFN0cmluZyBjb25maWdQYXRoID0gIlBsdWdpbi1JdGVtcy4iICsgc2VjdGlvbk5hbWU7DQogICAgICAgIFN0cmluZyBmYWlsdXJlUmVhc29uID0gbnVsbDsNCg0KICAgICAgICBpZiAoIWNvbmZpZy5jb250YWlucyhjb25maWdQYXRoKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUdVSV0gQ29uZmlndXJhdGlvbiBwYXRoICIgKyBjb25maWdQYXRoICsgIiBub3QgZm91bmQgaW4gQm91bnR5R1VJLnltbCIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJNaXNzaW5nIGNvbmZpZ3VyYXRpb24gcGF0aCI7DQogICAgICAgICAgICByZXR1cm4gbmV3IEl0ZW1TdGFjayhWZXJzaW9uVXRpbHMuZ2V0RmlyZXdvcmtTdGFyTWF0ZXJpYWwoKSk7DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gY29uZmlnLmdldFN0cmluZyhjb25maWdQYXRoICsgIi5tYXRlcmlhbCIsICJGSVJFV09SS19TVEFSIik7DQogICAgICAgIEl0ZW1TdGFjayBpdGVtID0gVmVyc2lvblV0aWxzLmdldFhNYXRlcmlhbEl0ZW1TdGFjayhtYXRlcmlhbE5hbWUpOw0KICAgICAgICBpZiAoaXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJGSVJFV09SS19TVEFSIikpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyBmb3IgZmlsdGVyLWJ1dHRvbiwgdXNpbmcgRklSRVdPUktfU1RBUiIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIiciOw0KICAgICAgICAgICAgaXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIkZJUkVXT1JLX1NUQVIiKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGJvb2xlYW4gc2hvdWxkR2xvdyA9IHNob3dPbmx5T25saW5lICYmIGZpbHRlckhpZ2hUb0xvdzsNCiAgICAgICAgU3RyaW5nIGZpbHRlclN0YXR1czsNCiAgICAgICAgU3RyaW5nIGZpbHRlckRldGFpbHM7DQogICAgICAgIFN0cmluZyBjb2xvckNvbmZpZ1BhdGg7DQogICAgICAgIGlmIChzaG93T25seU9ubGluZSAmJiBmaWx0ZXJIaWdoVG9Mb3cpIHsNCiAgICAgICAgICAgIGZpbHRlclN0YXR1cyA9ICImY09ubGluZSAmOHwgJmVIaWdo4oaSTG93IjsNCiAgICAgICAgICAgIGZpbHRlckRldGFpbHMgPSAiJmFPbmxpbmUgT25seSAmOCsgJmVIaWdoIHRvIExvdyBTb3J0aW5nIjsNCiAgICAgICAgICAgIGNvbG9yQ29uZmlnUGF0aCA9IGNvbmZpZ1BhdGggKyAiLmZpcmV3b3JrLWVmZmVjdC5vbmxpbmUtc29ydGVkLWNvbG9yIjsNCiAgICAgICAgfSBlbHNlIGlmIChzaG93T25seU9ubGluZSAmJiAhZmlsdGVySGlnaFRvTG93KSB7DQogICAgICAgICAgICBmaWx0ZXJTdGF0dXMgPSAiJmNPbmxpbmUgJjh8ICZlTG934oaSSGlnaCI7DQogICAgICAgICAgICBmaWx0ZXJEZXRhaWxzID0gIiZhT25saW5lIE9ubHkgJjgrICZlTG93IHRvIEhpZ2ggU29ydGluZyI7DQogICAgICAgICAgICBjb2xvckNvbmZpZ1BhdGggPSBjb25maWdQYXRoICsgIi5maXJld29yay1lZmZlY3Qub25saW5lLW5vLXNvcnQtY29sb3IiOw0KICAgICAgICB9IGVsc2UgaWYgKCFzaG93T25seU9ubGluZSAmJiBmaWx0ZXJIaWdoVG9Mb3cpIHsNCiAgICAgICAgICAgIGZpbHRlclN0YXR1cyA9ICImZkFsbCAmOHwgJmVIaWdo4oaSTG93IjsNCiAgICAgICAgICAgIGZpbHRlckRldGFpbHMgPSAiJmZBbGwgQm91bnRpZXMgJjgrICZlSGlnaCB0byBMb3cgU29ydGluZyI7DQogICAgICAgICAgICBjb2xvckNvbmZpZ1BhdGggPSBjb25maWdQYXRoICsgIi5maXJld29yay1lZmZlY3QuYWxsLXNvcnRlZC1jb2xvciI7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBmaWx0ZXJTdGF0dXMgPSAiJmZBbGwgJjh8ICZlTG934oaSSGlnaCI7DQogICAgICAgICAgICBmaWx0ZXJEZXRhaWxzID0gIiZmQWxsIEJvdW50aWVzICY4KyAmZUxvdyB0byBIaWdoIFNvcnRpbmciOw0KICAgICAgICAgICAgY29sb3JDb25maWdQYXRoID0gY29uZmlnUGF0aCArICIuZmlyZXdvcmstZWZmZWN0LmFsbC1uby1zb3J0LWNvbG9yIjsNCiAgICAgICAgfQ0KDQogICAgICAgIGFwcGx5RmlyZXdvcmtTdGFyQ29sb3IoaXRlbSwgY29uZmlnLCBjb2xvckNvbmZpZ1BhdGgpOw0KDQogICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgLnBsYXllcihwbGF5ZXIpDQogICAgICAgICAgICAgICAgLmZpbHRlclN0YXR1cyhmaWx0ZXJTdGF0dXMpDQogICAgICAgICAgICAgICAgLmZpbHRlckRldGFpbHMoZmlsdGVyRGV0YWlscyk7DQoNCiAgICAgICAgU3RyaW5nIG5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKGNvbmZpZ1BhdGggKyAiLm5hbWUiLCAiJmVGaWx0ZXI6ICVib3VudGllc3BsdXNfZmlsdGVyX3N0YXR1cyUiKTsNCiAgICAgICAgU3RyaW5nIHByb2Nlc3NlZE5hbWUgPSBQbGFjZWhvbGRlcnMuYXBwbHkobmFtZSwgY29udGV4dCk7DQogICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gY29uZmlnLmdldFN0cmluZ0xpc3QoY29uZmlnUGF0aCArICIubG9yZSIpOw0KICAgICAgICBpZiAobG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGxvcmUgPSBBcnJheXMuYXNMaXN0KA0KICAgICAgICAgICAgICAgICAgICAiJjdMZWZ0IENsaWNrOiBUb2dnbGUgT25saW5lL0FsbCBmaWx0ZXIiLA0KICAgICAgICAgICAgICAgICAgICAiJjdSaWdodCBDbGljazogVG9nZ2xlIEhpZ2gtdG8tTG93IHNvcnRpbmciLA0KICAgICAgICAgICAgICAgICAgICAiJjdDdXJyZW50OiAlYm91bnRpZXNwbHVzX2ZpbHRlcl9kZXRhaWxzJSINCiAgICAgICAgICAgICk7DQogICAgICAgIH0NCiAgICAgICAgTGlzdDxTdHJpbmc+IHByb2Nlc3NlZExvcmUgPSBQbGFjZWhvbGRlcnMuYXBwbHkobG9yZSwgY29udGV4dCk7DQoNCiAgICAgICAgSXRlbU1ldGEgbWV0YSA9IGl0ZW0uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgaWYgKG1ldGEgIT0gbnVsbCkgew0KICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShwcm9jZXNzZWROYW1lKTsNCiAgICAgICAgICAgIG1ldGEuc2V0TG9yZShwcm9jZXNzZWRMb3JlKTsNCiAgICAgICAgICAgIGlmIChzaG91bGRHbG93IHx8IGNvbmZpZy5nZXRCb29sZWFuKGNvbmZpZ1BhdGggKyAiLmVuY2hhbnRtZW50LWdsb3ciLCBmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICBtZXRhLmFkZEVuY2hhbnQoRW5jaGFudG1lbnQuRFVSQUJJTElUWSwgMSwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpdGVtLnNldEl0ZW1NZXRhKG1ldGEpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIjsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChmYWlsdXJlUmVhc29uICE9IG51bGwpIHsNCiAgICAgICAgICAgIGJ1dHRvbkZhaWx1cmVzLnB1dChzZWN0aW9uTmFtZSwgZmFpbHVyZVJlYXNvbik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gaXRlbTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGEgYm91bnR5IGl0ZW0gZm9yIHRoZSBHVUkNCiAgICAgKiAvLyBub3RlOiBHZW5lcmF0ZXMgYSBwbGF5ZXIgc2t1bGwgd2l0aCBjdXN0b21pemFibGUgYXBwZWFyYW5jZSBiYXNlZCBvbiBib3VudHkgc3RhdHVzDQogICAgICovDQogICAgcHJpdmF0ZSBzdGF0aWMgSXRlbVN0YWNrIGNyZWF0ZUJvdW50eUl0ZW0oQm91bnR5IGJvdW50eSwgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnLCBCb3VudGllc1BsdXMgcGx1Z2luKSB7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBVVUlEIHRhcmdldFVVSUQgPSBib3VudHkuZ2V0VGFyZ2V0VVVJRCgpOw0KICAgICAgICAgICAgT2ZmbGluZVBsYXllciBvZmZsaW5lVGFyZ2V0ID0gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIodGFyZ2V0VVVJRCk7DQogICAgICAgICAgICBTdHJpbmcgdGFyZ2V0TmFtZSA9IG9mZmxpbmVUYXJnZXQuZ2V0TmFtZSgpICE9IG51bGwgPyBvZmZsaW5lVGFyZ2V0LmdldE5hbWUoKSA6ICJVbmtub3duIjsNCiAgICAgICAgICAgIEl0ZW1TdGFjayBza3VsbCA9IFNrdWxsVXRpbHMuY3JlYXRlVmVyc2lvbkF3YXJlUGxheWVySGVhZChvZmZsaW5lVGFyZ2V0KTsNCiAgICAgICAgICAgIGlmICghVmVyc2lvblV0aWxzLmlzUGxheWVySGVhZChza3VsbCkpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5R1VJXSBGYWlsZWQgdG8gY3JlYXRlIFBMQVlFUl9IRUFEIGZvciBib3VudHkgIiArIHRhcmdldE5hbWUpOw0KICAgICAgICAgICAgICAgIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnID0gcGx1Z2luLmdldE1lc3NhZ2VzQ29uZmlnKCk7DQogICAgICAgICAgICAgICAgU3RyaW5nIGVycm9yTWVzc2FnZSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiaW52YWxpZC1tYXRlcmlhbCIsICImY0ludmFsaWQgbWF0ZXJpYWwgJW1hdGVyaWFsJSBmb3IgJWJ1dHRvbiUhIik7DQogICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3JNZXNzYWdlLnJlcGxhY2UoIiVtYXRlcmlhbCUiLCAiUExBWUVSX0hFQUQiKS5yZXBsYWNlKCIlYnV0dG9uJSIsICJib3VudHktaXRlbSIpOw0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQm91bnR5R1VJXSAiICsgQ2hhdENvbG9yLnN0cmlwQ29sb3IoZXJyb3JNZXNzYWdlKSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVtU3RhY2soTWF0ZXJpYWwuU1RPTkUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgU2t1bGxNZXRhIG1ldGEgPSAoU2t1bGxNZXRhKSBza3VsbC5nZXRJdGVtTWV0YSgpOw0KICAgICAgICAgICAgaWYgKG1ldGEgPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEZhaWxlZCB0byBnZXQgc2t1bGwgbWV0YSBmb3IgYm91bnR5ICIgKyB0YXJnZXROYW1lKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gc2t1bGw7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBCb29zdGVkQm91bnR5IGJvb3N0ZWRCb3VudHkgPSBwbHVnaW4uZ2V0Qm9vc3RlZEJvdW50eSgpOw0KICAgICAgICAgICAgRnJlbnp5IGZyZW56eSA9IHBsdWdpbi5nZXRGcmVuenkoKTsNCiAgICAgICAgICAgIGJvb2xlYW4gaXNCb29zdGVkID0gYm9vc3RlZEJvdW50eSAhPSBudWxsICYmIGJvb3N0ZWRCb3VudHkuZ2V0Q3VycmVudEJvb3N0ZWRUYXJnZXQoKSAhPSBudWxsICYmDQogICAgICAgICAgICAgICAgICAgIGJvb3N0ZWRCb3VudHkuZ2V0Q3VycmVudEJvb3N0ZWRUYXJnZXQoKS5lcXVhbHModGFyZ2V0VVVJRCk7DQogICAgICAgICAgICBib29sZWFuIGlzRnJlbnp5QWN0aXZlID0gZnJlbnp5ICE9IG51bGwgJiYgZnJlbnp5LmlzRnJlbnp5QWN0aXZlKCk7DQogICAgICAgICAgICBTdHJpbmcgY29uZmlnUGF0aCA9IGlzRnJlbnp5QWN0aXZlID8gImZyZW56eS1za3VsbCIgOiAoaXNCb29zdGVkID8gImJvb3N0ZWQtc2t1bGwiIDogImJvdW50eS1pdGVtIik7DQogICAgICAgICAgICBpZiAoIWNvbmZpZy5jb250YWlucyhjb25maWdQYXRoKSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIENvbmZpZ3VyYXRpb24gcGF0aCAiICsgY29uZmlnUGF0aCArICIgbm90IGZvdW5kIGluIEJvdW50eUdVSS55bWwsIHVzaW5nIGRlZmF1bHRzIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkb3VibGUgdG90YWxCb3VudHlBbW91bnQgPSBib3VudHkuZ2V0Q3VycmVudFBvb2woKTsNCiAgICAgICAgICAgIGRvdWJsZSBtb25leVZhbHVlID0gYm91bnR5LmdldEN1cnJlbnRNb25leSgpOw0KICAgICAgICAgICAgaW50IGV4cFZhbHVlID0gYm91bnR5LmdldEN1cnJlbnRYUCgpOw0KICAgICAgICAgICAgaW50IGl0ZW1Db3VudCA9IGJvdW50eS5nZXRDdXJyZW50SXRlbXMoKS5zaXplKCk7DQogICAgICAgICAgICBkb3VibGUgaXRlbVZhbHVlID0gYm91bnR5LmdldEN1cnJlbnRJdGVtVmFsdWUoKTsNCiAgICAgICAgICAgIGRvdWJsZSBwb29sSW5jcmVhc2VQZXJjZW50ID0gYm91bnR5LmdldFBvb2xJbmNyZWFzZVBlcmNlbnQoKTsNCiAgICAgICAgICAgIFN0cmluZyBleHBpcmVUaW1lID0gaXNGcmVuenlBY3RpdmUgfHwgaXNCb29zdGVkID8gVGltZUZvcm1hdHRlci5mb3JtYXRNaW51dGVzVG9SZWFkYWJsZShib3VudHkuZ2V0Q3VycmVudER1cmF0aW9uTWludXRlcygpLCBib3VudHkuaXNQZXJtYW5lbnQoKSkgOiAiJjQma3x8fCY0ICY0Jm1EZWF0aCBDb250cmFjdCY0ICY0Jmt8fHwiOw0KICAgICAgICAgICAgTGlzdDxTdHJpbmc+IHRvcDNTcG9uc29ycyA9IGJvdW50eS5nZXRUb3BTcG9uc29ycygzKS5zdHJlYW0oKQ0KICAgICAgICAgICAgICAgICAgICAubWFwKHNwb25zb3IgLT4gc3BvbnNvci5pc0Fub255bW91cygpID8gIiZrfHx8fHx8fCIgOiAoQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIoc3BvbnNvci5nZXRQbGF5ZXJVVUlEKCkpLmdldE5hbWUoKSAhPSBudWxsID8gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIoc3BvbnNvci5nZXRQbGF5ZXJVVUlEKCkpLmdldE5hbWUoKSA6ICJVbmtub3duIikpDQogICAgICAgICAgICAgICAgICAgIC5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpOw0KICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAgICAgLnRhcmdldCh0YXJnZXRVVUlEKQ0KICAgICAgICAgICAgICAgICAgICAub25saW5lU3RhdHVzKEJ1a2tpdC5nZXRQbGF5ZXIodGFyZ2V0VVVJRCkgIT0gbnVsbCA/ICImYU9ubGluZSIgOiAiJmNPZmZsaW5lIikNCiAgICAgICAgICAgICAgICAgICAgLm1vbmV5VmFsdWUobW9uZXlWYWx1ZSkNCiAgICAgICAgICAgICAgICAgICAgLmV4cFZhbHVlKGV4cFZhbHVlKQ0KICAgICAgICAgICAgICAgICAgICAuaXRlbUNvdW50KGl0ZW1Db3VudCkNCiAgICAgICAgICAgICAgICAgICAgLml0ZW1WYWx1ZShpdGVtVmFsdWUpDQogICAgICAgICAgICAgICAgICAgIC5wb29sKHRvdGFsQm91bnR5QW1vdW50KQ0KICAgICAgICAgICAgICAgICAgICAucG9vbEluY3JlYXNlUGVyY2VudChwb29sSW5jcmVhc2VQZXJjZW50KQ0KICAgICAgICAgICAgICAgICAgICAuZXhwaXJlVGltZShleHBpcmVUaW1lKQ0KICAgICAgICAgICAgICAgICAgICAuc3BvbnNvcnMoU3RyaW5nLmpvaW4oIiwgIiwgdG9wM1Nwb25zb3JzKSk7DQogICAgICAgICAgICBpZiAoaXNGcmVuenlBY3RpdmUpIHsNCiAgICAgICAgICAgICAgICBjb250ZXh0ID0gY29udGV4dC5mcmVuenkoZnJlbnp5LmdldEZyZW56eU11bHRpcGxpZXIoKSk7DQogICAgICAgICAgICB9IGVsc2UgaWYgKGlzQm9vc3RlZCkgew0KICAgICAgICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0LmJvb3N0KGJvb3N0ZWRCb3VudHkuZ2V0Q3VycmVudEJvb3N0TXVsdGlwbGllcih0YXJnZXRVVUlEKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBTdHJpbmcgbmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoY29uZmlnUGF0aCArICIubmFtZSIsICImNCZsJWJvdW50aWVzcGx1c190YXJnZXQlICY3JmwmbygmNCZsJm8lYm91bnRpZXNwbHVzX29ubGluZV9zdGF0dXMlJjcmbCZvKSIpOw0KICAgICAgICAgICAgU3RyaW5nIGRpc3BsYXlOYW1lID0gUGxhY2Vob2xkZXJzLmFwcGx5KG5hbWUsIGNvbnRleHQpOw0KICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGRpc3BsYXlOYW1lKSk7DQogICAgICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KGNvbmZpZ1BhdGggKyAiLmxvcmUiKTsNCiAgICAgICAgICAgIGlmIChsb3JlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGxvcmUgPSBBcnJheXMuYXNMaXN0KA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3JmzinKYgJmVTdGF0dXM6ICZiTm8gYWN0aXZlIGJvdW50eSIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjcmbOKcpiAmZU9ubGluZTogJWJvdW50aWVzcGx1c19vbmxpbmVfc3RhdHVzJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjcmbOKcpiAmZVRvdGFsIFJld2FyZDogJmElYm91bnRpZXNwbHVzX3Bvb2wlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImNyZs4pymICZlTW9uZXk6ICZhJWJvdW50aWVzcGx1c19tb25leV92YWx1ZSUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3JmzinKYgJmVYUDogJmIlYm91bnRpZXNwbHVzX2V4cF92YWx1ZSUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3JmzinKYgJmVJdGVtczogJmQlYm91bnRpZXNwbHVzX2l0ZW1fY291bnQlICY3KCZkJWJvdW50aWVzcGx1c19pdGVtX3ZhbHVlJSY3KSIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjcmbOKcpiAmZVZhbHVlIEluY3JlYXNlOiAmNiVib3VudGllc3BsdXNfcG9vbF9pbmNyZWFzZV9wZXJjZW50JSUlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImNyZs4pymICZlRXhwaXJlczogJmYlYm91bnRpZXNwbHVzX2V4cGlyZV90aW1lJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAiIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImNyZs4pymICZlU3BvbnNvcnM6ICZjJWJvdW50aWVzcGx1c19zcG9uc29ycyUiDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBwcm9jZXNzZWRMb3JlID0gUGxhY2Vob2xkZXJzLmFwcGx5KGxvcmUsIGNvbnRleHQpOw0KICAgICAgICAgICAgbWV0YS5zZXRMb3JlKHByb2Nlc3NlZExvcmUpOw0KICAgICAgICAgICAgaWYgKGNvbmZpZy5nZXRCb29sZWFuKGNvbmZpZ1BhdGggKyAiLmVuY2hhbnRtZW50LWdsb3ciLCBmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICBtZXRhLmFkZEVuY2hhbnQoRW5jaGFudG1lbnQuRFVSQUJJTElUWSwgMSwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBza3VsbC5zZXRJdGVtTWV0YShtZXRhKTsNCiAgICAgICAgICAgIHJldHVybiBza3VsbDsNCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEVycm9yIGNyZWF0aW5nIGJvdW50eSBpdGVtOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVtU3RhY2soTWF0ZXJpYWwuU1RPTkUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogT3BlbnMgYSBHVUkgc2hvd2luZyBhIHNwZWNpZmljIHBsYXllcidzIGJvdW50eQ0KICAgICAqIC8vIG5vdGU6IERpc3BsYXlzIGEgc2luZ2xlIGJvdW50eSBmb3IgdGhlIHNlYXJjaGVkIHBsYXllciwgaWYgZm91bmQNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgb3BlblNlYXJjaEJvdW50eUdVSShQbGF5ZXIgdmlld2VyLCBPZmZsaW5lUGxheWVyIHRhcmdldCwgQm91bnRpZXNQbHVzIHBsdWdpbikgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Qm91bnR5R1VJQ29uZmlnKCk7DQogICAgICAgIFN0cmluZyBndWlUaXRsZSA9IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgY29uZmlnLmdldFN0cmluZygiZ3VpLXRpdGxlIiwgIiZkQm91bnR5IEh1bnRlciIpKTsNCiAgICAgICAgSW52ZW50b3J5IHNlYXJjaEd1aSA9IEJ1a2tpdC5jcmVhdGVJbnZlbnRvcnkobnVsbCwgNTQsIGd1aVRpdGxlKTsNCiAgICAgICAgSXRlbVN0YWNrIGJvcmRlclBhbmUgPSBjcmVhdGVCb3JkZXJJdGVtKGNvbmZpZyk7DQogICAgICAgIGZpbGxCb3JkZXIoc2VhcmNoR3VpLCBib3JkZXJQYW5lLCBjb25maWcpOw0KICAgICAgICBib29sZWFuIGVuYWJsZVNob3AgPSBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigiZW5hYmxlLXNob3AiLCB0cnVlKTsNCiAgICAgICAgcGxhY2VDb25maWd1cmVkQnV0dG9ucyhzZWFyY2hHdWksIGNvbmZpZywgZW5hYmxlU2hvcCwgZmlsdGVySGlnaFRvTG93LCBzaG93T25seU9ubGluZSwgMCwgMSwgcGx1Z2luLCB2aWV3ZXIpOw0KICAgICAgICBCb3VudHlNYW5hZ2VyIGJvdW50eU1hbmFnZXIgPSBwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpOw0KICAgICAgICBCb3VudHkgYm91bnR5ID0gYm91bnR5TWFuYWdlci5nZXRCb3VudHkodGFyZ2V0LmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICBpZiAoYm91bnR5ICE9IG51bGwpIHsNCiAgICAgICAgICAgIEl0ZW1TdGFjayBib3VudHlJdGVtID0gY3JlYXRlQm91bnR5SXRlbShib3VudHksIGNvbmZpZywgcGx1Z2luKTsNCiAgICAgICAgICAgIHNlYXJjaEd1aS5zZXRJdGVtKGNvbmZpZy5nZXRJbnQoInNlYXJjaC1yZXN1bHRzLnNpbmdsZS1zbG90IiwgMjIpLCBib3VudHlJdGVtKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIEl0ZW1TdGFjayBzZWFyY2hJdGVtID0gY3JlYXRlU2VhcmNoUmVzdWx0SXRlbSh0YXJnZXQuZ2V0VW5pcXVlSWQoKSwgY29uZmlnLCBwbHVnaW4pOw0KICAgICAgICAgICAgc2VhcmNoR3VpLnNldEl0ZW0oY29uZmlnLmdldEludCgic2VhcmNoLXJlc3VsdHMuc2luZ2xlLXNsb3QiLCAyMiksIHNlYXJjaEl0ZW0pOw0KICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHZpZXdlciwgImJvdW50eS1wbGF5ZXItbm90LWZvdW5kIik7DQogICAgICAgIH0NCiAgICAgICAgdmlld2VyLm9wZW5JbnZlbnRvcnkoc2VhcmNoR3VpKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHN0YXRpYyB2b2lkIGFwcGx5RmlyZXdvcmtTdGFyQ29sb3IoSXRlbVN0YWNrIGl0ZW0sIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZywgU3RyaW5nIGNvbG9yQ29uZmlnUGF0aCkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0uZ2V0VHlwZSgpICE9IFZlcnNpb25VdGlscy5nZXRGaXJld29ya1N0YXJNYXRlcmlhbCgpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgRmlyZXdvcmtFZmZlY3RNZXRhIG1ldGEgPSAoRmlyZXdvcmtFZmZlY3RNZXRhKSBpdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmIChtZXRhID09IG51bGwpIHJldHVybjsNCiAgICAgICAgQ29sb3IgY29sb3IgPSBnZXRDb2xvckZyb21Db25maWcoY29uZmlnLCBjb2xvckNvbmZpZ1BhdGgpOw0KICAgICAgICBTdHJpbmcgZWZmZWN0VHlwZVN0cmluZyA9IGNvbmZpZy5nZXRTdHJpbmcoImZpbHRlci1idXR0b24uZmlyZXdvcmstZWZmZWN0LmVmZmVjdC10eXBlIiwgIlNUQVIiKTsNCiAgICAgICAgRmlyZXdvcmtFZmZlY3QuVHlwZSBlZmZlY3RUeXBlOw0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgZWZmZWN0VHlwZSA9IEZpcmV3b3JrRWZmZWN0LlR5cGUudmFsdWVPZihlZmZlY3RUeXBlU3RyaW5nLnRvVXBwZXJDYXNlKCkpOw0KICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgZWZmZWN0VHlwZSA9IEZpcmV3b3JrRWZmZWN0LlR5cGUuU1RBUjsNCiAgICAgICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLndhcm5pbmcoIkludmFsaWQgZmlyZXdvcmsgZWZmZWN0IHR5cGU6ICIgKyBlZmZlY3RUeXBlU3RyaW5nICsgIiwgdXNpbmcgU1RBUiIpOw0KICAgICAgICB9DQogICAgICAgIEZpcmV3b3JrRWZmZWN0IGVmZmVjdCA9IEZpcmV3b3JrRWZmZWN0LmJ1aWxkZXIoKQ0KICAgICAgICAgICAgICAgIC53aXRoQ29sb3IoY29sb3IpDQogICAgICAgICAgICAgICAgLndpdGgoZWZmZWN0VHlwZSkNCiAgICAgICAgICAgICAgICAuYnVpbGQoKTsNCiAgICAgICAgbWV0YS5zZXRFZmZlY3QoZWZmZWN0KTsNCiAgICAgICAgaXRlbS5zZXRJdGVtTWV0YShtZXRhKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHN0YXRpYyBDb2xvciBnZXRDb2xvckZyb21Db25maWcoRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnLCBTdHJpbmcgY29sb3JDb25maWdQYXRoKSB7DQogICAgICAgIGlmIChjb25maWcuY29udGFpbnMoY29sb3JDb25maWdQYXRoICsgIi5yZWQiKSAmJg0KICAgICAgICAgICAgICAgIGNvbmZpZy5jb250YWlucyhjb2xvckNvbmZpZ1BhdGggKyAiLmdyZWVuIikgJiYNCiAgICAgICAgICAgICAgICBjb25maWcuY29udGFpbnMoY29sb3JDb25maWdQYXRoICsgIi5ibHVlIikpIHsNCiAgICAgICAgICAgIGludCByZWQgPSBjb25maWcuZ2V0SW50KGNvbG9yQ29uZmlnUGF0aCArICIucmVkIiwgMjU1KTsNCiAgICAgICAgICAgIGludCBncmVlbiA9IGNvbmZpZy5nZXRJbnQoY29sb3JDb25maWdQYXRoICsgIi5ncmVlbiIsIDI1NSk7DQogICAgICAgICAgICBpbnQgYmx1ZSA9IGNvbmZpZy5nZXRJbnQoY29sb3JDb25maWdQYXRoICsgIi5ibHVlIiwgMjU1KTsNCiAgICAgICAgICAgIHJlZCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgcmVkKSk7DQogICAgICAgICAgICBncmVlbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgZ3JlZW4pKTsNCiAgICAgICAgICAgIGJsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIGJsdWUpKTsNCiAgICAgICAgICAgIHJldHVybiBDb2xvci5mcm9tUkdCKHJlZCwgZ3JlZW4sIGJsdWUpOw0KICAgICAgICB9DQogICAgICAgIGlmIChjb25maWcuY29udGFpbnMoY29sb3JDb25maWdQYXRoICsgIi5oZXgiKSkgew0KICAgICAgICAgICAgU3RyaW5nIGhleCA9IGNvbmZpZy5nZXRTdHJpbmcoY29sb3JDb25maWdQYXRoICsgIi5oZXgiLCAiI0ZGRkZGRiIpOw0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBpZiAoaGV4LnN0YXJ0c1dpdGgoIiMiKSkgew0KICAgICAgICAgICAgICAgICAgICBoZXggPSBoZXguc3Vic3RyaW5nKDEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpbnQgcmdiID0gSW50ZWdlci5wYXJzZUludChoZXgsIDE2KTsNCiAgICAgICAgICAgICAgICByZXR1cm4gQ29sb3IuZnJvbVJHQihyZ2IpOw0KICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXRMb2dnZXIoKS53YXJuaW5nKCJJbnZhbGlkIGhleCBjb2xvcjogIiArIGhleCArICIsIHVzaW5nIHdoaXRlIik7DQogICAgICAgICAgICAgICAgcmV0dXJuIENvbG9yLldISVRFOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldExvZ2dlcigpLndhcm5pbmcoIk5vIGNvbG9yIGNvbmZpZ3VyYXRpb24gZm91bmQgZm9yIHBhdGg6ICIgKyBjb2xvckNvbmZpZ1BhdGggKyAiLCB1c2luZyB3aGl0ZSIpOw0KICAgICAgICByZXR1cm4gQ29sb3IuV0hJVEU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ3JlYXRlcyB0aGUgc2VhcmNoIGJ1dHRvbiBpdGVtIGZvciB0aGUgQm91bnR5IEdVSQ0KICAgICAqIC8vIG5vdGU6IEdlbmVyYXRlcyBhIHNpZ24gaXRlbSB0byBwcm9tcHQgYSBib3VudHkgc2VhcmNoDQogICAgICovDQogICAgcHJpdmF0ZSBzdGF0aWMgSXRlbVN0YWNrIGNyZWF0ZVNlYXJjaEl0ZW0oRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnLCBQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgU3RyaW5nIHNlY3Rpb25OYW1lID0gInNlYXJjaC1idXR0b24iOw0KICAgICAgICBTdHJpbmcgY29uZmlnUGF0aCA9ICJQbHVnaW4tSXRlbXMuIiArIHNlY3Rpb25OYW1lOw0KICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQoNCiAgICAgICAgaWYgKCFjb25maWcuY29udGFpbnMoY29uZmlnUGF0aCkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIENvbmZpZ3VyYXRpb24gcGF0aCAiICsgY29uZmlnUGF0aCArICIgbm90IGZvdW5kIGluIEJvdW50eUdVSS55bWwiKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiTWlzc2luZyBjb25maWd1cmF0aW9uIHBhdGgiOw0KICAgICAgICAgICAgcmV0dXJuIFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIk9BS19TSUdOIik7DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gY29uZmlnLmdldFN0cmluZyhjb25maWdQYXRoICsgIi5tYXRlcmlhbCIsICJPQUtfU0lHTiIpOw0KICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2sobWF0ZXJpYWxOYW1lKTsNCiAgICAgICAgaWYgKGl0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLlNUT05FICYmICFtYXRlcmlhbE5hbWUuZXF1YWxzSWdub3JlQ2FzZSgiT0FLX1NJR04iKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUdVSV0gSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIGZvciBzZWFyY2gtYnV0dG9uLCB1c2luZyBPQUtfU0lHTiIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIiciOw0KICAgICAgICAgICAgaXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIk9BS19TSUdOIik7DQogICAgICAgIH0NCg0KICAgICAgICBJdGVtTWV0YSBtZXRhID0gaXRlbS5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAobWV0YSA9PSBudWxsKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5R1VJXSBGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIGZvciBzZWFyY2gtYnV0dG9uIHdpdGggbWF0ZXJpYWwgIiArIGl0ZW0uZ2V0VHlwZSgpLm5hbWUoKSk7DQogICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEiOw0KICAgICAgICAgICAgcmV0dXJuIGl0ZW07DQogICAgICAgIH0NCg0KICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKS5wbGF5ZXIocGxheWVyKTsNCiAgICAgICAgU3RyaW5nIG5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKGNvbmZpZ1BhdGggKyAiLm5hbWUiLCAiJmVTZWFyY2ggQm91bnRpZXMiKTsNCiAgICAgICAgU3RyaW5nIHByb2Nlc3NlZE5hbWUgPSBQbGFjZWhvbGRlcnMuYXBwbHkobmFtZSwgY29udGV4dCk7DQogICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gY29uZmlnLmdldFN0cmluZ0xpc3QoY29uZmlnUGF0aCArICIubG9yZSIpOw0KICAgICAgICBMaXN0PFN0cmluZz4gcHJvY2Vzc2VkTG9yZSA9IFBsYWNlaG9sZGVycy5hcHBseShsb3JlLCBjb250ZXh0KTsNCg0KICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKHByb2Nlc3NlZE5hbWUpOw0KICAgICAgICBtZXRhLnNldExvcmUocHJvY2Vzc2VkTG9yZSk7DQogICAgICAgIGlmIChjb25maWcuZ2V0Qm9vbGVhbihjb25maWdQYXRoICsgIi5lbmNoYW50bWVudC1nbG93IiwgZmFsc2UpKSB7DQogICAgICAgICAgICBtZXRhLmFkZEVuY2hhbnQoRW5jaGFudG1lbnQuRFVSQUJJTElUWSwgMSwgdHJ1ZSk7DQogICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0VOQ0hBTlRTKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGl0ZW0uc2V0SXRlbU1ldGEobWV0YSk7DQoNCiAgICAgICAgaWYgKGZhaWx1cmVSZWFzb24gIT0gbnVsbCkgew0KICAgICAgICAgICAgYnV0dG9uRmFpbHVyZXMucHV0KHNlY3Rpb25OYW1lLCBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBpdGVtOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgYSBzZWFyY2ggcmVzdWx0IGl0ZW0gZm9yIGEgcGxheWVyIHdpdGhvdXQgYSBib3VudHkNCiAgICAgKiAvLyBub3RlOiBHZW5lcmF0ZXMgYSBwbGF5ZXIgc2t1bGwgd2l0aCBjdXN0b21pemFibGUgYXBwZWFyYW5jZSBmb3Igc2VhcmNoIHJlc3VsdHMNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyBJdGVtU3RhY2sgY3JlYXRlU2VhcmNoUmVzdWx0SXRlbShVVUlEIHRhcmdldFVVSUQsIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZywgQm91bnRpZXNQbHVzIHBsdWdpbikgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgT2ZmbGluZVBsYXllciBvZmZsaW5lVGFyZ2V0ID0gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIodGFyZ2V0VVVJRCk7DQogICAgICAgICAgICBTdHJpbmcgdGFyZ2V0TmFtZSA9IG9mZmxpbmVUYXJnZXQuZ2V0TmFtZSgpICE9IG51bGwgPyBvZmZsaW5lVGFyZ2V0LmdldE5hbWUoKSA6ICJVbmtub3duIjsNCiAgICAgICAgICAgIEl0ZW1TdGFjayBza3VsbCA9IFNrdWxsVXRpbHMuY3JlYXRlVmVyc2lvbkF3YXJlUGxheWVySGVhZChvZmZsaW5lVGFyZ2V0KTsNCiAgICAgICAgICAgIGlmICghVmVyc2lvblV0aWxzLmlzUGxheWVySGVhZChza3VsbCkpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5R1VJXSBGYWlsZWQgdG8gY3JlYXRlIFBMQVlFUl9IRUFEIGZvciBzZWFyY2ggcmVzdWx0ICIgKyB0YXJnZXROYW1lKTsNCiAgICAgICAgICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBtZXNzYWdlc0NvbmZpZyA9IHBsdWdpbi5nZXRNZXNzYWdlc0NvbmZpZygpOw0KICAgICAgICAgICAgICAgIFN0cmluZyBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImludmFsaWQtbWF0ZXJpYWwiLCAiJmNJbnZhbGlkIG1hdGVyaWFsICVtYXRlcmlhbCUgZm9yICVidXR0b24lISIpOw0KICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGVycm9yTWVzc2FnZS5yZXBsYWNlKCIlbWF0ZXJpYWwlIiwgIlBMQVlFUl9IRUFEIikucmVwbGFjZSgiJWJ1dHRvbiUiLCAic2VhcmNoLXJlc3VsdHMtc2t1bGwiKTsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIEJvdW50eUdVSV0gIiArIENoYXRDb2xvci5zdHJpcENvbG9yKGVycm9yTWVzc2FnZSkpOw0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSXRlbVN0YWNrKE1hdGVyaWFsLlNUT05FKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFNrdWxsTWV0YSBtZXRhID0gKFNrdWxsTWV0YSkgc2t1bGwuZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgICAgIGlmIChtZXRhID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5R1VJXSBGYWlsZWQgdG8gZ2V0IHNrdWxsIG1ldGEgZm9yIHNlYXJjaCByZXN1bHQgIiArIHRhcmdldE5hbWUpOw0KICAgICAgICAgICAgICAgIHJldHVybiBza3VsbDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgU3RyaW5nIGNvbmZpZ1BhdGggPSAic2VhcmNoLXJlc3VsdHMtc2t1bGwiOw0KICAgICAgICAgICAgaWYgKCFjb25maWcuY29udGFpbnMoY29uZmlnUGF0aCkpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5R1VJXSBDb25maWd1cmF0aW9uIHBhdGggIiArIGNvbmZpZ1BhdGggKyAiIG5vdCBmb3VuZCBpbiBCb3VudHlHVUkueW1sLCB1c2luZyBkZWZhdWx0cyIpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgICAgICAudGFyZ2V0KHRhcmdldFVVSUQpDQogICAgICAgICAgICAgICAgICAgIC5vbmxpbmVTdGF0dXMoQnVra2l0LmdldFBsYXllcih0YXJnZXRVVUlEKSAhPSBudWxsID8gIiZhT25saW5lIiA6ICImY09mZmxpbmUiKTsNCg0KICAgICAgICAgICAgU3RyaW5nIG5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKGNvbmZpZ1BhdGggKyAiLm5hbWUiLCAiJjcmbCVib3VudGllc3BsdXNfdGFyZ2V0JSAmNygmYk5vIEJvdW50eSY3KSIpOw0KICAgICAgICAgICAgU3RyaW5nIGRpc3BsYXlOYW1lID0gUGxhY2Vob2xkZXJzLmFwcGx5KG5hbWUsIGNvbnRleHQpOw0KICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGRpc3BsYXlOYW1lKSk7DQoNCiAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gY29uZmlnLmdldFN0cmluZ0xpc3QoY29uZmlnUGF0aCArICIubG9yZSIpOw0KICAgICAgICAgICAgaWYgKGxvcmUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgbG9yZSA9IEFycmF5cy5hc0xpc3QoDQogICAgICAgICAgICAgICAgICAgICAgICAiJjcmbOKcpiAmZVN0YXR1czogJmJObyBhY3RpdmUgYm91bnR5IiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImNyZs4pymICZlT25saW5lOiAlYm91bnRpZXNwbHVzX29ubGluZV9zdGF0dXMlIg0KICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBMaXN0PFN0cmluZz4gcHJvY2Vzc2VkTG9yZSA9IFBsYWNlaG9sZGVycy5hcHBseShsb3JlLCBjb250ZXh0KTsNCiAgICAgICAgICAgIG1ldGEuc2V0TG9yZShwcm9jZXNzZWRMb3JlKTsNCg0KICAgICAgICAgICAgaWYgKGNvbmZpZy5nZXRCb29sZWFuKGNvbmZpZ1BhdGggKyAiLmVuY2hhbnRtZW50LWdsb3ciLCBmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICBtZXRhLmFkZEVuY2hhbnQoRW5jaGFudG1lbnQuRFVSQUJJTElUWSwgMSwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHNrdWxsLnNldEl0ZW1NZXRhKG1ldGEpOw0KICAgICAgICAgICAgcmV0dXJuIHNrdWxsOw0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUdVSV0gRXJyb3IgY3JlYXRpbmcgc2VhcmNoIHJlc3VsdCBpdGVtOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVtU3RhY2soTWF0ZXJpYWwuU1RPTkUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogT3BlbnMgdGhlIEJvdW50eSBHVUkgd2l0aCBzZWFyY2ggcmVzdWx0cyBmb3IgbXVsdGlwbGUgcGxheWVycw0KICAgICAqIC8vIG5vdGU6IFBvcHVsYXRlcyBHVUkgd2l0aCBza3VsbHMgb2YgYWxsIHBsYXllcnMgbWF0Y2hpbmcgdGhlIHNlYXJjaCBxdWVyeQ0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBvcGVuU2VhcmNoUmVzdWx0c0dVSShQbGF5ZXIgcGxheWVyLCBMaXN0PFVVSUQ+IHRhcmdldFVVSURzLCBCb3VudGllc1BsdXMgcGx1Z2luKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRCb3VudHlHVUlDb25maWcoKTsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgbG9hZEJvdW50eVNrdWxsU2xvdHMoY29uZmlnLCBkZWJ1Z01hbmFnZXIpOw0KICAgICAgICBTdHJpbmcgZ3VpVGl0bGUgPSBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGNvbmZpZy5nZXRTdHJpbmcoImd1aS10aXRsZSIsICImZEJvdW50eSBIdW50ZXIiKSk7DQogICAgICAgIGludCBndWlTaXplID0gY29uZmlnLmdldEludCgiZ3VpLXNpemUiLCA1NCk7DQogICAgICAgIEludmVudG9yeSBzZWFyY2hHdWkgPSBCdWtraXQuY3JlYXRlSW52ZW50b3J5KG51bGwsIGd1aVNpemUsIGd1aVRpdGxlKTsNCiAgICAgICAgVVVJRCBwbGF5ZXJVVUlEID0gcGxheWVyLmdldFVuaXF1ZUlkKCk7DQogICAgICAgIGJvb2xlYW4gY3VycmVudFNob3dPbmx5T25saW5lID0gcGxheWVyU2hvd09ubHlPbmxpbmUuZ2V0T3JEZWZhdWx0KHBsYXllclVVSUQsIGZhbHNlKTsNCiAgICAgICAgYm9vbGVhbiBjdXJyZW50RmlsdGVySGlnaFRvTG93ID0gcGxheWVyRmlsdGVySGlnaFRvTG93LmdldE9yRGVmYXVsdChwbGF5ZXJVVUlELCB0cnVlKTsNCiAgICAgICAgaW50IHRvdGFsUGFnZXMgPSBNYXRoLm1heCgxLCAoaW50KSBNYXRoLmNlaWwoKGRvdWJsZSkgdGFyZ2V0VVVJRHMuc2l6ZSgpIC8gYm91bnR5U2t1bGxTbG90cy5sZW5ndGgpKTsNCiAgICAgICAgY3VycmVudFBhZ2UgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihjdXJyZW50UGFnZSwgdG90YWxQYWdlcyAtIDEpKTsNCiAgICAgICAgSXRlbVN0YWNrIGJvcmRlclBhbmUgPSBjcmVhdGVCb3JkZXJJdGVtKGNvbmZpZyk7DQogICAgICAgIGZpbGxCb3JkZXIoc2VhcmNoR3VpLCBib3JkZXJQYW5lLCBjb25maWcpOw0KICAgICAgICBib29sZWFuIGVuYWJsZVNob3AgPSBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigiZW5hYmxlLXNob3AiLCB0cnVlKTsNCiAgICAgICAgcGxhY2VDdXN0b21JdGVtcyhzZWFyY2hHdWksIGNvbmZpZyk7DQogICAgICAgIHBsYWNlQ29uZmlndXJlZEJ1dHRvbnMoc2VhcmNoR3VpLCBjb25maWcsIGVuYWJsZVNob3AsIGN1cnJlbnRGaWx0ZXJIaWdoVG9Mb3csIGN1cnJlbnRTaG93T25seU9ubGluZSwgY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMsIHBsdWdpbiwgcGxheWVyKTsNCiAgICAgICAgcGxhY2VTZWFyY2hSZXN1bHRJdGVtcyhzZWFyY2hHdWksIHBsdWdpbiwgY29uZmlnLCB0YXJnZXRVVUlEcyk7DQogICAgICAgIHBsYXllci5vcGVuSW52ZW50b3J5KHNlYXJjaEd1aSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUGxhY2VzIHNlYXJjaCByZXN1bHQgaXRlbXMgaW4gdGhlIEdVSQ0KICAgICAqIC8vIG5vdGU6IFBvcHVsYXRlcyB0aGUgaW52ZW50b3J5IHdpdGggc2t1bGxzIGZvciBwbGF5ZXJzIG1hdGNoaW5nIHRoZSBzZWFyY2ggcXVlcnkNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyB2b2lkIHBsYWNlU2VhcmNoUmVzdWx0SXRlbXMoSW52ZW50b3J5IGludmVudG9yeSwgQm91bnRpZXNQbHVzIHBsdWdpbiwgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnLCBMaXN0PFVVSUQ+IHRhcmdldFVVSURzKSB7DQogICAgICAgIEJvdW50eU1hbmFnZXIgYm91bnR5TWFuYWdlciA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCk7DQogICAgICAgIGludCBzdGFydEluZGV4ID0gY3VycmVudFBhZ2UgKiBib3VudHlTa3VsbFNsb3RzLmxlbmd0aDsNCiAgICAgICAgaW50IGVuZEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCArIGJvdW50eVNrdWxsU2xvdHMubGVuZ3RoLCB0YXJnZXRVVUlEcy5zaXplKCkpOw0KICAgICAgICBmb3IgKGludCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpKyspIHsNCiAgICAgICAgICAgIGludCBzbG90SW5kZXggPSBpIC0gc3RhcnRJbmRleDsNCiAgICAgICAgICAgIFVVSUQgdGFyZ2V0VVVJRCA9IHRhcmdldFVVSURzLmdldChpKTsNCiAgICAgICAgICAgIEJvdW50eSBib3VudHkgPSBib3VudHlNYW5hZ2VyLmdldEJvdW50eSh0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgIGlmIChib3VudHkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIEl0ZW1TdGFjayBib3VudHlJdGVtID0gY3JlYXRlQm91bnR5SXRlbShib3VudHksIGNvbmZpZywgcGx1Z2luKTsNCiAgICAgICAgICAgICAgICBpbnZlbnRvcnkuc2V0SXRlbShib3VudHlTa3VsbFNsb3RzW3Nsb3RJbmRleF0sIGJvdW50eUl0ZW0pOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBJdGVtU3RhY2sgc2VhcmNoSXRlbSA9IGNyZWF0ZVNlYXJjaFJlc3VsdEl0ZW0odGFyZ2V0VVVJRCwgY29uZmlnLCBwbHVnaW4pOw0KICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKGJvdW50eVNrdWxsU2xvdHNbc2xvdEluZGV4XSwgc2VhcmNoSXRlbSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGEgYm9yZGVyIGl0ZW0gZm9yIHRoZSBHVUkgYmFzZWQgb24gY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IEdlbmVyYXRlcyBib3JkZXIgaXRlbSB3aXRoIHNwZWNpZmllZCBtYXRlcmlhbCBhbmQgZ2xvdw0KICAgICAqLw0KICAgIHByaXZhdGUgc3RhdGljIEl0ZW1TdGFjayBjcmVhdGVCb3JkZXJJdGVtKEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZykgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIFN0cmluZyBtYXRlcmlhbE5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKCJib3JkZXIubWF0ZXJpYWwiLCAiV0hJVEVfU1RBSU5FRF9HTEFTU19QQU5FIik7DQogICAgICAgIEl0ZW1TdGFjayBib3JkZXJQYW5lID0gVmVyc2lvblV0aWxzLmdldFhNYXRlcmlhbEl0ZW1TdGFjayhtYXRlcmlhbE5hbWUpOw0KICAgICAgICBpZiAoYm9yZGVyUGFuZS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJXSElURV9TVEFJTkVEX0dMQVNTX1BBTkUiKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUdVSV0gSW52YWxpZCBib3JkZXIgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyBpbiBCb3VudHlHVUkueW1sLCB1c2luZyBXSElURV9TVEFJTkVEX0dMQVNTX1BBTkUiKTsNCiAgICAgICAgICAgIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0TWVzc2FnZXNDb25maWcoKTsNCiAgICAgICAgICAgIFN0cmluZyBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImludmFsaWQtbWF0ZXJpYWwiLCAiJmNJbnZhbGlkIG1hdGVyaWFsICVtYXRlcmlhbCUgZm9yICVidXR0b24lISIpOw0KICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3JNZXNzYWdlLnJlcGxhY2UoIiVtYXRlcmlhbCUiLCBtYXRlcmlhbE5hbWUpLnJlcGxhY2UoIiVidXR0b24lIiwgImJvcmRlciIpOw0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBCb3VudHlHVUldICIgKyBDaGF0Q29sb3Iuc3RyaXBDb2xvcihlcnJvck1lc3NhZ2UpKTsNCiAgICAgICAgICAgIGJvcmRlclBhbmUgPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJXSElURV9TVEFJTkVEX0dMQVNTX1BBTkUiKTsNCiAgICAgICAgfQ0KICAgICAgICBJdGVtTWV0YSBib3JkZXJNZXRhID0gYm9yZGVyUGFuZS5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAoYm9yZGVyTWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICBib3JkZXJNZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgIiAiKSk7DQogICAgICAgICAgICBpZiAoY29uZmlnLmdldEJvb2xlYW4oImJvcmRlci5lbmNoYW50bWVudC1nbG93IiwgZmFsc2UpKSB7DQogICAgICAgICAgICAgICAgYm9yZGVyTWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgICAgIGJvcmRlck1ldGEuYWRkSXRlbUZsYWdzKEl0ZW1GbGFnLkhJREVfRU5DSEFOVFMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgYm9yZGVyUGFuZS5zZXRJdGVtTWV0YShib3JkZXJNZXRhKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEZhaWxlZCB0byBnZXQgSXRlbU1ldGEgZm9yIGJvcmRlciBpdGVtIik7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGJvcmRlclBhbmU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRmlsbHMgdGhlIEdVSSBib3JkZXIgd2l0aCBjb25maWd1cmVkIGl0ZW1zDQogICAgICogLy8gbm90ZTogUGxhY2VzIGJvcmRlciBpdGVtcyBpbiBzcGVjaWZpZWQgc2xvdHMgZnJvbSBjb25maWcsIGV4Y2x1ZGluZyBwbHVnaW4gYnV0dG9uIHNsb3RzIGFuZCBib3VudHkgc2t1bGwgc2xvdHMNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyB2b2lkIGZpbGxCb3JkZXIoSW52ZW50b3J5IGludmVudG9yeSwgSXRlbVN0YWNrIGJvcmRlckl0ZW0sIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZykgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIExpc3Q8SW50ZWdlcj4gYm9yZGVyU2xvdHMgPSBjb25maWcuZ2V0SW50ZWdlckxpc3QoImJvcmRlci5zbG90cyIpOw0KICAgICAgICBpZiAoYm9yZGVyU2xvdHMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5R1VJXSBObyBib3JkZXIgc2xvdHMgZGVmaW5lZCBpbiBCb3VudHlHVUkueW1sLCB1c2luZyBkZWZhdWx0IHNsb3RzIik7DQogICAgICAgICAgICBib3JkZXJTbG90cyA9IEFycmF5cy5hc0xpc3QoMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTcsIDE4LCAyNiwgMjcsIDM1LCAzNiwgNDQsIDQ2LCA1Mik7DQogICAgICAgIH0NCiAgICAgICAgLy8gRXhjbHVkZSBwbHVnaW4gYnV0dG9uIHNsb3RzLCBjdXN0b20gaXRlbSBzbG90cywgYW5kIGJvdW50eSBza3VsbCBzbG90cyB0byBwcmV2ZW50IG92ZXJ3cml0ZXMNCiAgICAgICAgU2V0PEludGVnZXI+IGV4Y2x1ZGVkU2xvdHMgPSBuZXcgSGFzaFNldDw+KCk7DQogICAgICAgIGV4Y2x1ZGVkU2xvdHMuYWRkQWxsKEFycmF5cy5hc0xpc3QoDQogICAgICAgICAgICAgICAgY29uZmlnLmdldEludCgiUGx1Z2luLUl0ZW1zLmZpbHRlci1idXR0b24uc2xvdCIsIDQ3KSwNCiAgICAgICAgICAgICAgICBjb25maWcuZ2V0SW50KCJQbHVnaW4tSXRlbXMuc2VhcmNoLWJ1dHRvbi5zbG90IiwgNCksDQogICAgICAgICAgICAgICAgY29uZmlnLmdldEludCgiUGx1Z2luLUl0ZW1zLmNyZWF0ZS1ib3VudHktYnV0dG9uLnNsb3QiLCA1MCksDQogICAgICAgICAgICAgICAgY29uZmlnLmdldEludCgiUGx1Z2luLUl0ZW1zLmh1bnRlcnMtZGVuLWJ1dHRvbi5zbG90IiwgNDgpLA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy5ib3VudHktaHVudGVyLWJ1dHRvbi5zbG90IiwgNTEpLA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy5wcmV2aW91cy1wYWdlLWJ1dHRvbi5zbG90IiwgNDUpLA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy5uZXh0LXBhZ2UtYnV0dG9uLnNsb3QiLCA1MyksDQogICAgICAgICAgICAgICAgY29uZmlnLmdldEludCgiUGx1Z2luLUl0ZW1zLmJvb3N0LWNsb2NrLnNsb3QiLCA0OSksDQogICAgICAgICAgICAgICAgY29uZmlnLmdldEludCgic2VhcmNoLXJlc3VsdHMuc2luZ2xlLXNsb3QiLCAyMikNCiAgICAgICAgKSk7DQogICAgICAgIC8vIEFkZCBjdXN0b20gaXRlbSBzbG90cyB0byBleGNsdXNpb25zDQogICAgICAgIGlmIChjb25maWcuY29udGFpbnMoIkN1c3RvbS1JdGVtcyIpKSB7DQogICAgICAgICAgICBmb3IgKFN0cmluZyBrZXkgOiBjb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oIkN1c3RvbS1JdGVtcyIpLmdldEtleXMoZmFsc2UpKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIHBhdGggPSAiQ3VzdG9tLUl0ZW1zLiIgKyBrZXk7DQogICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5jb250YWlucyhwYXRoICsgIi5zbG90IikpIHsNCiAgICAgICAgICAgICAgICAgICAgZXhjbHVkZWRTbG90cy5hZGQoY29uZmlnLmdldEludChwYXRoICsgIi5zbG90IikpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmNvbnRhaW5zKHBhdGggKyAiLnNsb3RzIikpIHsNCiAgICAgICAgICAgICAgICAgICAgZXhjbHVkZWRTbG90cy5hZGRBbGwoY29uZmlnLmdldEludGVnZXJMaXN0KHBhdGggKyAiLnNsb3RzIikpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAvLyBBZGQgYm91bnR5IHNrdWxsIHNsb3RzIHRvIGV4Y2x1c2lvbnMNCiAgICAgICAgZm9yIChpbnQgc2xvdCA6IGJvdW50eVNrdWxsU2xvdHMpIHsNCiAgICAgICAgICAgIGV4Y2x1ZGVkU2xvdHMuYWRkKHNsb3QpOw0KICAgICAgICB9DQogICAgICAgIGZvciAoaW50IHNsb3QgOiBib3JkZXJTbG90cykgew0KICAgICAgICAgICAgaWYgKHNsb3QgPj0gMCAmJiBzbG90IDwgaW52ZW50b3J5LmdldFNpemUoKSAmJiAhZXhjbHVkZWRTbG90cy5jb250YWlucyhzbG90KSkgew0KICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKHNsb3QsIGJvcmRlckl0ZW0uY2xvbmUoKSk7DQogICAgICAgICAgICB9IGVsc2UgaWYgKHNsb3QgPCAwIHx8IHNsb3QgPj0gaW52ZW50b3J5LmdldFNpemUoKSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEludmFsaWQgYm9yZGVyIHNsb3QgIiArIHNsb3QgKyAiIGluIEJvdW50eUdVSS55bWwgKG11c3QgYmUgMC0iICsgKGludmVudG9yeS5nZXRTaXplKCkgLSAxKSArICIpIik7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBQbGFjZXMgYm91bnR5IGl0ZW1zIGluIHRoZSBHVUkgLy8gbm90ZTogUG9wdWxhdGVzIHRoZSBpbnZlbnRvcnkgd2l0aCBib3VudHkgc2t1bGxzIGluIGNvbmZpZ3VyZWQgc2xvdHMNCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyB2b2lkIHBsYWNlQm91bnR5SXRlbXMoSW52ZW50b3J5IGludmVudG9yeSwgQm91bnRpZXNQbHVzIHBsdWdpbiwgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnKSB7DQogICAgICAgIEJvdW50eU1hbmFnZXIgYm91bnR5TWFuYWdlciA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCk7DQogICAgICAgIExpc3Q8Qm91bnR5PiBmaWx0ZXJlZEJvdW50aWVzID0gZ2V0RmlsdGVyZWRCb3VudGllcyhib3VudHlNYW5hZ2VyLCBzaG93T25seU9ubGluZSwgZmlsdGVySGlnaFRvTG93KTsNCiAgICAgICAgaW50IHN0YXJ0SW5kZXggPSBjdXJyZW50UGFnZSAqIGJvdW50eVNrdWxsU2xvdHMubGVuZ3RoOw0KICAgICAgICBpbnQgZW5kSW5kZXggPSBNYXRoLm1pbihzdGFydEluZGV4ICsgYm91bnR5U2t1bGxTbG90cy5sZW5ndGgsIGZpbHRlcmVkQm91bnRpZXMuc2l6ZSgpKTsNCiAgICAgICAgZm9yIChpbnQgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7DQogICAgICAgICAgICBpbnQgc2xvdEluZGV4ID0gaSAtIHN0YXJ0SW5kZXg7DQogICAgICAgICAgICBCb3VudHkgYm91bnR5ID0gZmlsdGVyZWRCb3VudGllcy5nZXQoaSk7DQogICAgICAgICAgICBJdGVtU3RhY2sgYm91bnR5SXRlbSA9IGNyZWF0ZUJvdW50eUl0ZW0oYm91bnR5LCBjb25maWcsIHBsdWdpbik7DQogICAgICAgICAgICBpbnZlbnRvcnkuc2V0SXRlbShib3VudHlTa3VsbFNsb3RzW3Nsb3RJbmRleF0sIGJvdW50eUl0ZW0pOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUGxhY2VzIGN1c3RvbSBpdGVtcyBpbiB0aGUgQm91bnR5IEdVSQ0KICAgICAqIC8vIG5vdGU6IFBvcHVsYXRlcyB0aGUgaW52ZW50b3J5IHdpdGggY3VzdG9tIGl0ZW1zIGRlZmluZWQgaW4gQm91bnR5R1VJLnltbA0KICAgICAqLw0KICAgIHByaXZhdGUgc3RhdGljIHZvaWQgcGxhY2VDdXN0b21JdGVtcyhJbnZlbnRvcnkgaW52ZW50b3J5LCBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBpZiAoIWNvbmZpZy5jb250YWlucygiQ3VzdG9tLUl0ZW1zIikpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQm91bnR5R1VJXSBObyBDdXN0b20tSXRlbXMgc2VjdGlvbiBmb3VuZCBpbiBCb3VudHlHVUkueW1sIik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpbnQgdG90YWxJdGVtcyA9IGNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiQ3VzdG9tLUl0ZW1zIikuZ2V0S2V5cyhmYWxzZSkuc2l6ZSgpOw0KICAgICAgICBpbnQgc3VjY2Vzc2Z1bEl0ZW1zID0gMDsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGZhaWx1cmVzID0gbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgZm9yIChTdHJpbmcga2V5IDogY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJDdXN0b20tSXRlbXMiKS5nZXRLZXlzKGZhbHNlKSkgew0KICAgICAgICAgICAgU3RyaW5nIGNvbmZpZ1BhdGggPSAiQ3VzdG9tLUl0ZW1zLiIgKyBrZXk7DQogICAgICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gY29uZmlnLmdldFN0cmluZyhjb25maWdQYXRoICsgIi5tYXRlcmlhbCIsICJTVE9ORSIpOw0KICAgICAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQoNCiAgICAgICAgICAgIGlmIChpdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5TVE9ORSAmJiAhbWF0ZXJpYWxOYW1lLmVxdWFsc0lnbm9yZUNhc2UoIlNUT05FIikpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5R1VJXSBJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIicgZm9yIGN1c3RvbSBpdGVtICIgKyBrZXkgKyAiLCB1c2luZyBTVE9ORSIpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSXRlbU1ldGEgbWV0YSA9IGl0ZW0uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgICAgIGlmIChtZXRhID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5R1VJXSBGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIGZvciBjdXN0b20gaXRlbSAiICsga2V5KTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEiOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBTdHJpbmcgbmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoY29uZmlnUGF0aCArICIubmFtZSIsICJJdGVtIik7DQogICAgICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIG5hbWUpKTsNCiAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KGNvbmZpZ1BhdGggKyAiLmxvcmUiKTsNCiAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gcHJvY2Vzc2VkTG9yZSA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiBsb3JlKSB7DQogICAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZExvcmUuYWRkKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbGluZSkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBtZXRhLnNldExvcmUocHJvY2Vzc2VkTG9yZSk7DQogICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5nZXRCb29sZWFuKGNvbmZpZ1BhdGggKyAiLmVuY2hhbnRtZW50LWdsb3ciLCBmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgbWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0VOQ0hBTlRTKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaXRlbS5zZXRJdGVtTWV0YShtZXRhKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGNvbmZpZy5jb250YWlucyhjb25maWdQYXRoICsgIi5zbG90IikpIHsNCiAgICAgICAgICAgICAgICBpbnQgc2xvdCA9IGNvbmZpZy5nZXRJbnQoY29uZmlnUGF0aCArICIuc2xvdCIpOw0KICAgICAgICAgICAgICAgIGlmIChzbG90ID49IDAgJiYgc2xvdCA8IGludmVudG9yeS5nZXRTaXplKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGZhaWx1cmVSZWFzb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW52ZW50b3J5LnNldEl0ZW0oc2xvdCwgaXRlbSk7DQogICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsSXRlbXMrKzsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZChrZXkgKyAiIFJlYXNvbjogIiArIGZhaWx1cmVSZWFzb24pOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIEJvdW50eUdVSV0gSW52YWxpZCBzbG90ICIgKyBzbG90ICsgIiBmb3IgY3VzdG9tIGl0ZW0gIiArIGtleSArICIgaW4gQm91bnR5R1VJLnltbCIpOw0KICAgICAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoa2V5ICsgIiBSZWFzb246IEludmFsaWQgc2xvdCAiICsgc2xvdCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoY29uZmlnLmNvbnRhaW5zKGNvbmZpZ1BhdGggKyAiLnNsb3RzIikpIHsNCiAgICAgICAgICAgICAgICBMaXN0PEludGVnZXI+IHNsb3RzID0gY29uZmlnLmdldEludGVnZXJMaXN0KGNvbmZpZ1BhdGggKyAiLnNsb3RzIik7DQogICAgICAgICAgICAgICAgZm9yIChpbnQgc2xvdCA6IHNsb3RzKSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChzbG90ID49IDAgJiYgc2xvdCA8IGludmVudG9yeS5nZXRTaXplKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlUmVhc29uID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlbnRvcnkuc2V0SXRlbShzbG90LCBpdGVtLmNsb25lKCkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxJdGVtcysrOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoa2V5ICsgIiBSZWFzb246ICIgKyBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBCb3VudHlHVUldIEludmFsaWQgc2xvdCAiICsgc2xvdCArICIgZm9yIGN1c3RvbSBpdGVtICIgKyBrZXkgKyAiIGluIEJvdW50eUdVSS55bWwiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZChrZXkgKyAiIFJlYXNvbjogSW52YWxpZCBzbG90ICIgKyBzbG90KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIExvZyBjb25zb2xpZGF0ZWQgZGVidWcgbWVzc2FnZQ0KICAgICAgICBpZiAoc3VjY2Vzc2Z1bEl0ZW1zID09IHRvdGFsSXRlbXMpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQm91bnR5R1VJXSBBbGwgY3VzdG9tIGl0ZW1zIGNyZWF0ZWQiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFN0cmluZyBmYWlsdXJlTWVzc2FnZSA9ICJbREVCVUcgLSBCb3VudHlHVUldICIgKyBzdWNjZXNzZnVsSXRlbXMgKyAiLyIgKyB0b3RhbEl0ZW1zICsgIiBjdXN0b20gaXRlbXMgY3JlYXRlZCI7DQogICAgICAgICAgICBpZiAoIWZhaWx1cmVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGZhaWx1cmVNZXNzYWdlICs9ICIsIGZhaWxlZCB0byBjcmVhdGU6ICIgKyBTdHJpbmcuam9pbigiLCAiLCBmYWlsdXJlcyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRmFpbHVyZSgiQm91bnR5R1VJX2N1c3RvbV9pdGVtc18iICsgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCksIGZhaWx1cmVNZXNzYWdlKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHJpZXZlcyBmaWx0ZXJlZCBib3VudHkgZGF0YSBmb3IgZGlzcGxheQ0KICAgICAqIC8vIG5vdGU6IEZpbHRlcnMgYW5kIHNvcnRzIGJvdW50aWVzIGJhc2VkIG9uIG9ubGluZSBzdGF0dXMgYW5kIHNvcnRpbmcgb3B0aW9ucw0KICAgICAqLw0KICAgIHByaXZhdGUgc3RhdGljIExpc3Q8Qm91bnR5PiBnZXRGaWx0ZXJlZEJvdW50aWVzKEJvdW50eU1hbmFnZXIgYm91bnR5TWFuYWdlciwgYm9vbGVhbiBzaG93T25seU9ubGluZSwgYm9vbGVhbiBmaWx0ZXJIaWdoVG9Mb3cpIHsNCiAgICAgICAgU2V0PFVVSUQ+IHRhcmdldHMgPSBib3VudHlNYW5hZ2VyLmdldFRhcmdldHNXaXRoQm91bnRpZXMoKTsNCiAgICAgICAgTGlzdDxCb3VudHk+IGJvdW50eUxpc3QgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgQm9vc3RlZEJvdW50eSBib29zdGVkQm91bnR5ID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0Qm9vc3RlZEJvdW50eSgpOw0KICAgICAgICBGcmVuenkgZnJlbnp5ID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0RnJlbnp5KCk7DQogICAgICAgIGJvb2xlYW4gaXNGcmVuenlBY3RpdmUgPSBmcmVuenkgIT0gbnVsbCAmJiBmcmVuenkuaXNGcmVuenlBY3RpdmUoKTsNCg0KICAgICAgICBpZiAoaXNGcmVuenlBY3RpdmUpIHsNCiAgICAgICAgICAgIGZvciAoVVVJRCB0YXJnZXRVVUlEIDogdGFyZ2V0cykgew0KICAgICAgICAgICAgICAgIEJvdW50eSBib3VudHkgPSBib3VudHlNYW5hZ2VyLmdldEJvdW50eSh0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgICAgICBpZiAoYm91bnR5ICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgYm91bnR5TGlzdC5hZGQoYm91bnR5KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBMaXN0PEJvdW50eT4gYm9vc3RlZEJvdW50aWVzID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICBMaXN0PEJvdW50eT4gbm9ybWFsQm91bnRpZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgICAgIGZvciAoVVVJRCB0YXJnZXRVVUlEIDogdGFyZ2V0cykgew0KICAgICAgICAgICAgICAgIEJvdW50eSBib3VudHkgPSBib3VudHlNYW5hZ2VyLmdldEJvdW50eSh0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgICAgICBpZiAoYm91bnR5ID09IG51bGwpIGNvbnRpbnVlOw0KICAgICAgICAgICAgICAgIGJvb2xlYW4gaXNCb29zdGVkID0gYm9vc3RlZEJvdW50eSAhPSBudWxsICYmIGJvb3N0ZWRCb3VudHkuZ2V0Q3VycmVudEJvb3N0ZWRUYXJnZXQoKSAhPSBudWxsICYmDQogICAgICAgICAgICAgICAgICAgICAgICBib29zdGVkQm91bnR5LmdldEN1cnJlbnRCb29zdGVkVGFyZ2V0KCkuZXF1YWxzKHRhcmdldFVVSUQpOw0KICAgICAgICAgICAgICAgIGlmIChpc0Jvb3N0ZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgYm9vc3RlZEJvdW50aWVzLmFkZChib3VudHkpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIG5vcm1hbEJvdW50aWVzLmFkZChib3VudHkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gU29ydCBieSB0YXJnZXQgbmFtZQ0KICAgICAgICAgICAgQ29tcGFyYXRvcjxCb3VudHk+IG5hbWVDb21wYXJhdG9yID0gKGIxLCBiMikgLT4gew0KICAgICAgICAgICAgICAgIE9mZmxpbmVQbGF5ZXIgcDEgPSBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcihiMS5nZXRUYXJnZXRVVUlEKCkpOw0KICAgICAgICAgICAgICAgIE9mZmxpbmVQbGF5ZXIgcDIgPSBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcihiMi5nZXRUYXJnZXRVVUlEKCkpOw0KICAgICAgICAgICAgICAgIFN0cmluZyBuYW1lMSA9IHAxLmdldE5hbWUoKSAhPSBudWxsID8gcDEuZ2V0TmFtZSgpIDogYjEuZ2V0VGFyZ2V0VVVJRCgpLnRvU3RyaW5nKCk7DQogICAgICAgICAgICAgICAgU3RyaW5nIG5hbWUyID0gcDIuZ2V0TmFtZSgpICE9IG51bGwgPyBwMi5nZXROYW1lKCkgOiBiMi5nZXRUYXJnZXRVVUlEKCkudG9TdHJpbmcoKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTEuY29tcGFyZVRvSWdub3JlQ2FzZShuYW1lMik7DQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgYm9vc3RlZEJvdW50aWVzLnNvcnQobmFtZUNvbXBhcmF0b3IpOw0KICAgICAgICAgICAgbm9ybWFsQm91bnRpZXMuc29ydChuYW1lQ29tcGFyYXRvcik7DQoNCiAgICAgICAgICAgIGJvdW50eUxpc3QuYWRkQWxsKGJvb3N0ZWRCb3VudGllcyk7DQogICAgICAgICAgICBib3VudHlMaXN0LmFkZEFsbChub3JtYWxCb3VudGllcyk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBBcHBseSBmaWx0ZXJzDQogICAgICAgIExpc3Q8Qm91bnR5PiBmaWx0ZXJlZEJvdW50aWVzID0gYm91bnR5TGlzdDsNCiAgICAgICAgaWYgKHNob3dPbmx5T25saW5lKSB7DQogICAgICAgICAgICBmaWx0ZXJlZEJvdW50aWVzID0gZmlsdGVyZWRCb3VudGllcy5zdHJlYW0oKQ0KICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGJvdW50eSAtPiBCdWtraXQuZ2V0UGxheWVyKGJvdW50eS5nZXRUYXJnZXRVVUlEKCkpICE9IG51bGwgJiYgQnVra2l0LmdldFBsYXllcihib3VudHkuZ2V0VGFyZ2V0VVVJRCgpKS5pc09ubGluZSgpKQ0KICAgICAgICAgICAgICAgICAgICAuY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghaXNGcmVuenlBY3RpdmUpIHsNCiAgICAgICAgICAgIGZpbHRlcmVkQm91bnRpZXMgPSBmaWx0ZXJlZEJvdW50aWVzLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgICAgIC5zb3J0ZWQoKGIxLCBiMikgLT4gZmlsdGVySGlnaFRvTG93ID8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3VibGUuY29tcGFyZShiMi5nZXRDdXJyZW50UG9vbCgpLCBiMS5nZXRDdXJyZW50UG9vbCgpKSA6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRG91YmxlLmNvbXBhcmUoYjEuZ2V0Q3VycmVudFBvb2woKSwgYjIuZ2V0Q3VycmVudFBvb2woKSkpDQogICAgICAgICAgICAgICAgICAgIC5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIGZpbHRlcmVkQm91bnRpZXM7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBpbnZlbnRvcnkgY2xpY2sgZXZlbnRzIGZvciB0aGUgQm91bnR5R1VJDQogICAgICogLy8gbm90ZTogUHJvY2Vzc2VzIGNsaWNrcyBvbiBwbGF5ZXIgaGVhZHMsIGJ1dHRvbnMsIGFuZCBuYXZpZ2F0aW9uIGNvbnRyb2xzIHRvIG1hbmFnZSBib3VudHkgc2VsZWN0aW9uIGFuZCBjcmVhdGlvbg0KICAgICAqLw0KICAgIEBFdmVudEhhbmRsZXINCiAgICBwdWJsaWMgdm9pZCBvbkludmVudG9yeUNsaWNrKEludmVudG9yeUNsaWNrRXZlbnQgZXZlbnQpIHsNCiAgICAgICAgaWYgKCEoZXZlbnQuZ2V0V2hvQ2xpY2tlZCgpIGluc3RhbmNlb2YgUGxheWVyKSkgcmV0dXJuOw0KICAgICAgICBpZiAoIWV2ZW50LmdldFZpZXcoKS5nZXRUaXRsZSgpLmVxdWFscyhHVUlfVElUTEUpKSByZXR1cm47DQoNCiAgICAgICAgUGxheWVyIGNsaWNraW5nUGxheWVyID0gKFBsYXllcikgZXZlbnQuZ2V0V2hvQ2xpY2tlZCgpOw0KICAgICAgICBJdGVtU3RhY2sgY2xpY2tlZEl0ZW0gPSBldmVudC5nZXRDdXJyZW50SXRlbSgpOw0KICAgICAgICBpbnQgc2xvdCA9IGV2ZW50LmdldFNsb3QoKTsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldEJvdW50eUdVSUNvbmZpZygpOw0KDQogICAgICAgIGV2ZW50LnNldENhbmNlbGxlZCh0cnVlKTsgLy8gUHJldmVudCBpdGVtIG1vdmVtZW50DQogICAgICAgIGlmIChjbGlja2VkSXRlbSA9PSBudWxsIHx8ICFjbGlja2VkSXRlbS5oYXNJdGVtTWV0YSgpKSByZXR1cm47DQoNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBCb3VudHlHVUldIENsaWNrZWQgc2xvdCAiICsgc2xvdCArICIgYnkgIiArIGNsaWNraW5nUGxheWVyLmdldE5hbWUoKSk7DQoNCiAgICAgICAgLy8gRGVib3VuY2UgY2xpY2tzIHRvIHByZXZlbnQgbXVsdGlwbGUgR1VJIGluaXRpYWxpemF0aW9ucw0KICAgICAgICBsb25nIGN1cnJlbnRUaW1lID0gU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCk7DQogICAgICAgIExvbmcgbGFzdENsaWNrID0gcmVjZW50Q2xpY2tzLmdldChjbGlja2luZ1BsYXllci5nZXRVbmlxdWVJZCgpKTsNCiAgICAgICAgaWYgKGxhc3RDbGljayAhPSBudWxsICYmIChjdXJyZW50VGltZSAtIGxhc3RDbGljaykgPCAzMDApIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQm91bnR5R1VJXSBJZ25vcmVkIHJhcGlkIGNsaWNrIGJ5ICIgKyBjbGlja2luZ1BsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIHJlY2VudENsaWNrcy5wdXQoY2xpY2tpbmdQbGF5ZXIuZ2V0VW5pcXVlSWQoKSwgY3VycmVudFRpbWUpOw0KDQogICAgICAgIC8vIEhhbmRsZSBuYXZpZ2F0aW9uIGJ1dHRvbnMNCiAgICAgICAgU3RyaW5nIHByZXZpb3VzUGFnZVBhdGggPSAiUGx1Z2luLUl0ZW1zLnByZXZpb3VzLXBhZ2UtYnV0dG9uLnNsb3QiOw0KICAgICAgICBTdHJpbmcgbmV4dFBhZ2VQYXRoID0gIlBsdWdpbi1JdGVtcy5uZXh0LXBhZ2UtYnV0dG9uLnNsb3QiOw0KICAgICAgICBTdHJpbmcgY3JlYXRlQm91bnR5UGF0aCA9ICJQbHVnaW4tSXRlbXMuY3JlYXRlLWJvdW50eS1idXR0b24uc2xvdCI7DQoNCiAgICAgICAgVVVJRCBwbGF5ZXJVVUlEID0gY2xpY2tpbmdQbGF5ZXIuZ2V0VW5pcXVlSWQoKTsNCiAgICAgICAgYm9vbGVhbiBjdXJyZW50U2hvd09ubHlPbmxpbmUgPSBwbGF5ZXJTaG93T25seU9ubGluZS5nZXRPckRlZmF1bHQocGxheWVyVVVJRCwgZmFsc2UpOw0KICAgICAgICBib29sZWFuIGN1cnJlbnRGaWx0ZXJIaWdoVG9Mb3cgPSBwbGF5ZXJGaWx0ZXJIaWdoVG9Mb3cuZ2V0T3JEZWZhdWx0KHBsYXllclVVSUQsIHRydWUpOw0KDQogICAgICAgIGlmIChzbG90ID09IGNvbmZpZy5nZXRJbnQocHJldmlvdXNQYWdlUGF0aCwgNDUpICYmIGNsaWNrZWRJdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5BUlJPVykgew0KICAgICAgICAgICAgaWYgKGN1cnJlbnRQYWdlID4gMCkgew0KICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlLS07DQogICAgICAgICAgICAgICAgb3BlbkJvdW50eUdVSShjbGlja2luZ1BsYXllciwgY3VycmVudEZpbHRlckhpZ2hUb0xvdywgY3VycmVudFNob3dPbmx5T25saW5lLCBjdXJyZW50UGFnZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSBpZiAoc2xvdCA9PSBjb25maWcuZ2V0SW50KG5leHRQYWdlUGF0aCwgNTMpICYmIGNsaWNrZWRJdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5BUlJPVykgew0KICAgICAgICAgICAgTGlzdDxCb3VudHk+IGZpbHRlcmVkQm91bnRpZXMgPSBnZXRGaWx0ZXJlZEJvdW50aWVzKHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCksIGN1cnJlbnRTaG93T25seU9ubGluZSwgY3VycmVudEZpbHRlckhpZ2hUb0xvdyk7DQogICAgICAgICAgICBpbnQgdG90YWxQYWdlcyA9IE1hdGgubWF4KDEsIChpbnQpIE1hdGguY2VpbCgoZG91YmxlKSBmaWx0ZXJlZEJvdW50aWVzLnNpemUoKSAvIElURU1TX1BFUl9QQUdFKSk7DQogICAgICAgICAgICBpZiAoY3VycmVudFBhZ2UgPCB0b3RhbFBhZ2VzIC0gMSkgew0KICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlKys7DQogICAgICAgICAgICAgICAgb3BlbkJvdW50eUdVSShjbGlja2luZ1BsYXllciwgY3VycmVudEZpbHRlckhpZ2hUb0xvdywgY3VycmVudFNob3dPbmx5T25saW5lLCBjdXJyZW50UGFnZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSBpZiAoc2xvdCA9PSBjb25maWcuZ2V0SW50KGNyZWF0ZUJvdW50eVBhdGgsIDUwKSkgew0KICAgICAgICAgICAgaWYgKCFjbGlja2luZ1BsYXllci5oYXNQZXJtaXNzaW9uKCJib3VudGllc3BsdXMuY3JlYXRlIikpIHsNCiAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UoY2xpY2tpbmdQbGF5ZXIsICJuby1wZXJtaXNzaW9uIik7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBCb3VudHlHVUldIE5vIHBlcm1pc3Npb24gZm9yIGNyZWF0ZS1ib3VudHktYnV0dG9uIGJ5ICIgKyBjbGlja2luZ1BsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNsaWNraW5nUGxheWVyLmNsb3NlSW52ZW50b3J5KCk7DQogICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFza0xhdGVyKHBsdWdpbiwgKCkgLT4gew0KICAgICAgICAgICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5yZW1vdmVTZXNzaW9uKGNsaWNraW5nUGxheWVyKTsgLy8gRW5zdXJlIGNsZWFuIHNlc3Npb24NCiAgICAgICAgICAgICAgICBDcmVhdGVHVUkgY3JlYXRlR1VJID0gbmV3IENyZWF0ZUdVSShjbGlja2luZ1BsYXllciwgcGx1Z2luLmdldEV2ZW50TWFuYWdlcigpKTsNCiAgICAgICAgICAgICAgICBjcmVhdGVHVUkub3BlbkludmVudG9yeShjbGlja2luZ1BsYXllcik7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBCb3VudHlHVUldIENyZWF0ZSBCb3VudHkgYnV0dG9uIGNsaWNrZWQgYnkgIiArIGNsaWNraW5nUGxheWVyLmdldE5hbWUoKSArICIsIG9wZW5lZCBDcmVhdGVHVUkiKTsNCiAgICAgICAgICAgIH0sIDNMKTsNCiAgICAgICAgfSBlbHNlIGlmIChWZXJzaW9uVXRpbHMuaXNQbGF5ZXJIZWFkKGNsaWNrZWRJdGVtKSkgew0KICAgICAgICAgICAgLy8gSGFuZGxlIHBsYXllciBoZWFkIGNsaWNrIGJ5IG9wZW5pbmcgUHJldmlld0dVSQ0KICAgICAgICAgICAgU2t1bGxNZXRhIHNrdWxsTWV0YSA9IChTa3VsbE1ldGEpIGNsaWNrZWRJdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgICAgICBpZiAoc2t1bGxNZXRhICE9IG51bGwgJiYgc2t1bGxNZXRhLmdldE93bmluZ1BsYXllcigpICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICBPZmZsaW5lUGxheWVyIHRhcmdldCA9IHNrdWxsTWV0YS5nZXRPd25pbmdQbGF5ZXIoKTsNCiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmdldE5hbWUoKSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIGNsaWNraW5nUGxheWVyLmNsb3NlSW52ZW50b3J5KCk7DQogICAgICAgICAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrTGF0ZXIocGx1Z2luLCAoKSAtPiB7DQogICAgICAgICAgICAgICAgICAgICAgICBQcmV2aWV3R1VJIHByZXZpZXdHVUkgPSBuZXcgUHJldmlld0dVSShjbGlja2luZ1BsYXllciwgdGFyZ2V0LmdldFVuaXF1ZUlkKCksIHBsdWdpbi5nZXRFdmVudE1hbmFnZXIoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBwcmV2aWV3R1VJLm9wZW5JbnZlbnRvcnkoY2xpY2tpbmdQbGF5ZXIpOw0KICAgICAgICAgICAgICAgICAgICB9LCAxTCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy8gSGFuZGxlIG90aGVyIGJ1dHRvbnMgKGZpbHRlciwgc2VhcmNoLCBldGMuKSB2aWEgaGFuZGxlQnV0dG9uQ2xpY2sNCiAgICAgICAgICAgIFN0cmluZyBidXR0b25JZCA9IGRldGVybWluZUJ1dHRvbklkKHNsb3QsIGNvbmZpZyk7DQogICAgICAgICAgICBpZiAoYnV0dG9uSWQgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGhhbmRsZUJ1dHRvbkNsaWNrKGNsaWNraW5nUGxheWVyLCBidXR0b25JZCwgZXZlbnQuZ2V0Q2xpY2soKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgY2xpY2tpbmdQbGF5ZXIudXBkYXRlSW52ZW50b3J5KCk7IC8vIEVuc3VyZSBpbnZlbnRvcnkgc3luYw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIERldGVybWluZXMgdGhlIGJ1dHRvbiBJRCBiYXNlZCBvbiB0aGUgY2xpY2tlZCBzbG90DQogICAgICogLy8gbm90ZTogTWFwcyBzbG90IG51bWJlcnMgdG8gYnV0dG9uIGlkZW50aWZpZXJzIGZvciBoYW5kbGluZyBjbGlja3MNCiAgICAgKi8NCiAgICBwcml2YXRlIFN0cmluZyBkZXRlcm1pbmVCdXR0b25JZChpbnQgc2xvdCwgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnKSB7DQogICAgICAgIGlmIChzbG90ID09IGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy5maWx0ZXItYnV0dG9uLnNsb3QiLCA0NykpIHJldHVybiBGSUxURVJfQlVUVE9OX0lEOw0KICAgICAgICBpZiAoc2xvdCA9PSBjb25maWcuZ2V0SW50KCJQbHVnaW4tSXRlbXMuc2VhcmNoLWJ1dHRvbi5zbG90IiwgNCkpIHJldHVybiAiU0VBUkNIX0JVVFRPTiI7DQogICAgICAgIGlmIChzbG90ID09IGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy5odW50ZXJzLWRlbi1idXR0b24uc2xvdCIsIDQ4KSkgcmV0dXJuIEhVTlRFUlNfREVOX0lEOw0KICAgICAgICBpZiAoc2xvdCA9PSBjb25maWcuZ2V0SW50KCJQbHVnaW4tSXRlbXMuYm91bnR5LWh1bnRlci1idXR0b24uc2xvdCIsIDUxKSkgcmV0dXJuIEJPVU5UWV9IVU5URVJfSUQ7DQogICAgICAgIGlmIChzbG90ID09IGNvbmZpZy5nZXRJbnQoIlBsdWdpbi1JdGVtcy5ib29zdC1jbG9jay5zbG90IiwgNDkpKSByZXR1cm4gQk9PU1RfQ0xPQ0tfSUQ7DQogICAgICAgIHJldHVybiBudWxsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFN0YXJ0cyBhIHRhc2sgdG8gdXBkYXRlIHRoZSBib29zdC1jbG9jayBpdGVtJ3MgY291bnRkb3duDQogICAgICogLy8gbm90ZTogUGVyaW9kaWNhbGx5IHJlZnJlc2hlcyBib29zdC1jbG9jayBsb3JlIGluIG9wZW4gQm91bnR5IEdVSXMNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgc3RhcnRCb29zdENsb2NrVXBkYXRlVGFzaygpIHsNCiAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2tUaW1lcihwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgIGZvciAoUGxheWVyIHBsYXllciA6IEJ1a2tpdC5nZXRPbmxpbmVQbGF5ZXJzKCkpIHsNCiAgICAgICAgICAgICAgICBpZiAocGxheWVyLmdldE9wZW5JbnZlbnRvcnkoKS5nZXRUaXRsZSgpLmVxdWFscyhHVUlfVElUTEUpKSB7DQogICAgICAgICAgICAgICAgICAgIEludmVudG9yeSBndWkgPSBwbGF5ZXIuZ2V0T3BlbkludmVudG9yeSgpLmdldFRvcEludmVudG9yeSgpOw0KICAgICAgICAgICAgICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Qm91bnR5R1VJQ29uZmlnKCk7DQogICAgICAgICAgICAgICAgICAgIGludCBib29zdENsb2NrU2xvdCA9IGNvbmZpZy5nZXRJbnQoImJvb3N0LWNsb2NrLnNsb3QiLCA0OSk7DQogICAgICAgICAgICAgICAgICAgIEl0ZW1TdGFjayBjdXJyZW50SXRlbSA9IGd1aS5nZXRJdGVtKGJvb3N0Q2xvY2tTbG90KTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJdGVtICE9IG51bGwgJiYgY3VycmVudEl0ZW0uZ2V0VHlwZSgpID09IFZlcnNpb25VdGlscy5nZXRDbG9ja01hdGVyaWFsKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIEl0ZW1TdGFjayB1cGRhdGVkSXRlbSA9IGNyZWF0ZUJvb3N0Q2xvY2tJdGVtKGNvbmZpZywgcGx1Z2luKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGd1aS5zZXRJdGVtKGJvb3N0Q2xvY2tTbG90LCB1cGRhdGVkSXRlbSk7DQogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIudXBkYXRlSW52ZW50b3J5KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0sIDIwTCwgMjBMKTsgLy8gVXBkYXRlIGV2ZXJ5IHNlY29uZCAoMjAgdGlja3MpDQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIGhhbmRsZVNrdWxsVHVybkluKFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgRWNvbm9teSBlY29ub215ID0gcGx1Z2luLmdldEVjb25vbXkoKTsNCiAgICAgICAgQm91bnR5TWFuYWdlciBib3VudHlNYW5hZ2VyID0gcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKTsNCiAgICAgICAgZG91YmxlIHRvdGFsUmV3YXJkID0gMC4wOw0KICAgICAgICBpbnQgc2t1bGxzUHJvY2Vzc2VkID0gMDsNCiAgICAgICAgTGlzdDxJdGVtU3RhY2s+IHNrdWxsc1RvUmVtb3ZlID0gbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgZm9yIChJdGVtU3RhY2sgaXRlbSA6IHBsYXllci5nZXRJbnZlbnRvcnkoKS5nZXRDb250ZW50cygpKSB7DQogICAgICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8ICFWZXJzaW9uVXRpbHMuaXNQbGF5ZXJIZWFkKGl0ZW0pKSBjb250aW51ZTsNCiAgICAgICAgICAgIGlmICghSHVudGVyRGVuR1VJLmlzQm91bnR5U2t1bGwoaXRlbSkpIGNvbnRpbnVlOw0KICAgICAgICAgICAgZG91YmxlIGJvdW50eUFtb3VudCA9IEh1bnRlckRlbkdVSS5leHRyYWN0Qm91bnR5VmFsdWVGcm9tU2t1bGwoaXRlbSk7DQogICAgICAgICAgICBpZiAoYm91bnR5QW1vdW50IDw9IDApIGNvbnRpbnVlOw0KICAgICAgICAgICAgdG90YWxSZXdhcmQgKz0gYm91bnR5QW1vdW50Ow0KICAgICAgICAgICAgc2t1bGxzUHJvY2Vzc2VkKys7DQogICAgICAgICAgICBza3VsbHNUb1JlbW92ZS5hZGQoaXRlbSk7DQogICAgICAgICAgICBTa3VsbE1ldGEgc2t1bGxNZXRhID0gKFNrdWxsTWV0YSkgaXRlbS5nZXRJdGVtTWV0YSgpOw0KICAgICAgICAgICAgaWYgKHNrdWxsTWV0YSAhPSBudWxsICYmIHNrdWxsTWV0YS5nZXRMb3JlKCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGZvciAoU3RyaW5nIGxvcmVMaW5lIDogc2t1bGxNZXRhLmdldExvcmUoKSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAobG9yZUxpbmUuY29udGFpbnMoIlRhcmdldDoiKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHRhcmdldE5hbWUgPSBDaGF0Q29sb3Iuc3RyaXBDb2xvcihsb3JlTGluZSkucmVwbGFjZSgiVGFyZ2V0OiAiLCAiIikudHJpbSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgUGxheWVyIHRhcmdldFBsYXllciA9IEJ1a2tpdC5nZXRQbGF5ZXIodGFyZ2V0TmFtZSk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0UGxheWVyICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3VudHlNYW5hZ2VyLmNsZWFyQm91bnRpZXModGFyZ2V0UGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoc2t1bGxzUHJvY2Vzc2VkID09IDApIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsICImY05vIHZhbGlkIGJvdW50eSBza3VsbHMgZm91bmQgdG8gdHVybiBpbiEiKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBmb3IgKEl0ZW1TdGFjayBza3VsbCA6IHNrdWxsc1RvUmVtb3ZlKSB7DQogICAgICAgICAgICBwbGF5ZXIuZ2V0SW52ZW50b3J5KCkucmVtb3ZlKHNrdWxsKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChlY29ub215ICE9IG51bGwpIHsNCiAgICAgICAgICAgIGVjb25vbXkuZGVwb3NpdFBsYXllcihwbGF5ZXIsIHRvdGFsUmV3YXJkKTsNCiAgICAgICAgfQ0KDQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIHN0YXRzQ29uZmlnID0gcGx1Z2luLmdldFN0YXRzQ29uZmlnKCk7DQogICAgICAgIFN0cmluZyBwbGF5ZXJVVUlEID0gcGxheWVyLmdldFVuaXF1ZUlkKCkudG9TdHJpbmcoKTsNCiAgICAgICAgaW50IGN1cnJlbnRDbGFpbWVkID0gc3RhdHNDb25maWcuZ2V0SW50KCJwbGF5ZXJzLiIgKyBwbGF5ZXJVVUlEICsgIi5jbGFpbWVkIiwgMCk7DQogICAgICAgIGRvdWJsZSBjdXJyZW50RWFybmVkID0gc3RhdHNDb25maWcuZ2V0RG91YmxlKCJwbGF5ZXJzLiIgKyBwbGF5ZXJVVUlEICsgIi5tb25leV9lYXJuZWQiLCAwLjApOw0KICAgICAgICBzdGF0c0NvbmZpZy5zZXQoInBsYXllcnMuIiArIHBsYXllclVVSUQgKyAiLmNsYWltZWQiLCBjdXJyZW50Q2xhaW1lZCArIHNrdWxsc1Byb2Nlc3NlZCk7DQogICAgICAgIHN0YXRzQ29uZmlnLnNldCgicGxheWVycy4iICsgcGxheWVyVVVJRCArICIubW9uZXlfZWFybmVkIiwgY3VycmVudEVhcm5lZCArIHRvdGFsUmV3YXJkKTsNCiAgICAgICAgcGx1Z2luLnNhdmVFdmVyeXRoaW5nKCk7DQoNCiAgICAgICAgU3RyaW5nIHN1Y2Nlc3NNZXNzYWdlID0gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLA0KICAgICAgICAgICAgICAgICImYSZsQm91bnR5IFNrdWxscyBUdXJuZWQgSW4hXG4iICsNCiAgICAgICAgICAgICAgICAgICAgICAgICImN1NrdWxscyBwcm9jZXNzZWQ6ICZlIiArIHNrdWxsc1Byb2Nlc3NlZCArICJcbiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3VG90YWwgcmV3YXJkOiAmZSQiICsgU3RyaW5nLmZvcm1hdCgiJS4yZiIsIHRvdGFsUmV3YXJkKSk7DQogICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShzdWNjZXNzTWVzc2FnZSk7DQoNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIFN0cmluZyBzdWNjZXNzU291bmQgPSBWZXJzaW9uV3JhcHBlckZhY3RvcnkuZ2V0V3JhcHBlcigpLmdldFN1Y2Nlc3NTb3VuZCgpOw0KICAgICAgICAgICAgcGxheWVyLnBsYXlTb3VuZChwbGF5ZXIuZ2V0TG9jYXRpb24oKSwgU291bmQudmFsdWVPZihzdWNjZXNzU291bmQpLCAxLjBmLCAxLjBmKTsNCiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgcGxheWVyLnBsYXlTb3VuZChwbGF5ZXIuZ2V0TG9jYXRpb24oKSwgU291bmQudmFsdWVPZigiRU5USVRZX1BMQVlFUl9MRVZFTFVQIiksIDEuMGYsIDEuMGYpOw0KICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGlnbm9yZWQpIHsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KLy8gZmlsZTogamF2YS90b255MjYvYm91bnRpZXNQbHVzL0dVSXMvQm91bnR5R1VJLmphdmEgKHBhcnRpYWwpDQogICAgLyoqDQogICAgICogSGFuZGxlcyBidXR0b24gY2xpY2sgZXZlbnRzIGZvciB0aGUgQm91bnR5IEdVSQ0KICAgICAqIC8vIG5vdGU6IFByb2Nlc3NlcyBzcGVjaWZpYyBidXR0b24gaW50ZXJhY3Rpb25zIGJhc2VkIG9uIGJ1dHRvbiBJRA0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBoYW5kbGVCdXR0b25DbGljayhQbGF5ZXIgcGxheWVyLCBTdHJpbmcgYnV0dG9uSWQsIENsaWNrVHlwZSBjbGlja1R5cGUpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgVVVJRCBwbGF5ZXJVVUlEID0gcGxheWVyLmdldFVuaXF1ZUlkKCk7DQoNCiAgICAgICAgc3dpdGNoIChidXR0b25JZCkgew0KICAgICAgICAgICAgY2FzZSBGSUxURVJfQlVUVE9OX0lEOg0KICAgICAgICAgICAgICAgIC8vIEVuc3VyZSBmaWx0ZXIgc3RhdGVzIGFyZSBpbml0aWFsaXplZA0KICAgICAgICAgICAgICAgIHBsYXllclNob3dPbmx5T25saW5lLnB1dElmQWJzZW50KHBsYXllclVVSUQsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICBwbGF5ZXJGaWx0ZXJIaWdoVG9Mb3cucHV0SWZBYnNlbnQocGxheWVyVVVJRCwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgYm9vbGVhbiBjdXJyZW50U2hvd09ubHlPbmxpbmUgPSBwbGF5ZXJTaG93T25seU9ubGluZS5nZXQocGxheWVyVVVJRCk7DQogICAgICAgICAgICAgICAgYm9vbGVhbiBjdXJyZW50RmlsdGVySGlnaFRvTG93ID0gcGxheWVyRmlsdGVySGlnaFRvTG93LmdldChwbGF5ZXJVVUlEKTsNCg0KICAgICAgICAgICAgICAgIGlmIChjbGlja1R5cGUgPT0gQ2xpY2tUeXBlLkxFRlQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gVG9nZ2xlIHNob3dPbmx5T25saW5lIChBbGwgQm91bnRpZXMgPC0+IE9ubGluZSBPbmx5KSwgcHJlc2VydmUgZmlsdGVySGlnaFRvTG93DQogICAgICAgICAgICAgICAgICAgIHBsYXllclNob3dPbmx5T25saW5lLnB1dChwbGF5ZXJVVUlELCAhY3VycmVudFNob3dPbmx5T25saW5lKTsNCiAgICAgICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBCb3VudHlHVUldIExlZnQgY2xpY2tlZCBieSAiICsgcGxheWVyLmdldE5hbWUoKSArICIgLSBTdGF0dXMgdXBkYXRlZCB0bzogXCIiICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGxheWVyU2hvd09ubHlPbmxpbmUuZ2V0KHBsYXllclVVSUQpID8gIk9ubGluZSBPbmx5IiA6ICJBbGwgQm91bnRpZXMiKSArICIgLSAiICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGxheWVyRmlsdGVySGlnaFRvTG93LmdldChwbGF5ZXJVVUlEKSA/ICJIaWdoIHRvIExvdyIgOiAiTG93IHRvIEhpZ2giKSArICJcIiIpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xpY2tUeXBlID09IENsaWNrVHlwZS5SSUdIVCkgew0KICAgICAgICAgICAgICAgICAgICAvLyBUb2dnbGUgZmlsdGVySGlnaFRvTG93IChIaWdoIHRvIExvdyA8LT4gTG93IHRvIEhpZ2gpLCBwcmVzZXJ2ZSBzaG93T25seU9ubGluZQ0KICAgICAgICAgICAgICAgICAgICBwbGF5ZXJGaWx0ZXJIaWdoVG9Mb3cucHV0KHBsYXllclVVSUQsICFjdXJyZW50RmlsdGVySGlnaFRvTG93KTsNCiAgICAgICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBCb3VudHlHVUldIFJpZ2h0IGNsaWNrZWQgYnkgIiArIHBsYXllci5nZXROYW1lKCkgKyAiIC0gU3RhdHVzIHVwZGF0ZWQgdG86IFwiIiArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBsYXllclNob3dPbmx5T25saW5lLmdldChwbGF5ZXJVVUlEKSA/ICJPbmxpbmUgT25seSIgOiAiQWxsIEJvdW50aWVzIikgKyAiIC0gIiArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBsYXllckZpbHRlckhpZ2hUb0xvdy5nZXQocGxheWVyVVVJRCkgPyAiSGlnaCB0byBMb3ciIDogIkxvdyB0byBIaWdoIikgKyAiXCIiKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvLyBSZXNldCB0byBwYWdlIDAgYW5kIG9wZW4gdGhlIEdVSSB3aXRoIHVwZGF0ZWQgZmlsdGVyIHN0YXRlcw0KICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlID0gMDsNCiAgICAgICAgICAgICAgICBvcGVuQm91bnR5R1VJKHBsYXllciwgcGxheWVyRmlsdGVySGlnaFRvTG93LmdldChwbGF5ZXJVVUlEKSwgcGxheWVyU2hvd09ubHlPbmxpbmUuZ2V0KHBsYXllclVVSUQpLCBjdXJyZW50UGFnZSk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgIlNFQVJDSF9CVVRUT04iOg0KICAgICAgICAgICAgICAgIGlmIChjbGlja1R5cGUgPT0gQ2xpY2tUeXBlLkxFRlQgfHwgY2xpY2tUeXBlID09IENsaWNrVHlwZS5SSUdIVCkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoIXBsYXllci5oYXNQZXJtaXNzaW9uKCJib3VudGllc3BsdXMuYm91bnR5LnNlYXJjaCIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAibm8tcGVybWlzc2lvbiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIC8vIENsb3NlIHRoZSBHVUksIHNlbmQgc2VhcmNoIHByb21wdCwgYW5kIGFkZCBwbGF5ZXIgdG8gYXdhaXRpbmcgc2VhcmNoIGlucHV0DQogICAgICAgICAgICAgICAgICAgIHBsYXllci5jbG9zZUludmVudG9yeSgpOw0KICAgICAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAic2VhcmNoLXByb21wdCIpOw0KICAgICAgICAgICAgICAgICAgICBhZGRBd2FpdGluZ1NlYXJjaElucHV0KHBsYXllclVVSUQpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSBDUkVBVEVfQk9VTlRZX0lEOg0KICAgICAgICAgICAgICAgIENyZWF0ZUdVSSBjcmVhdGVHVUkgPSBuZXcgQ3JlYXRlR1VJKHBsYXllciwgcGx1Z2luLmdldEV2ZW50TWFuYWdlcigpKTsNCiAgICAgICAgICAgICAgICBjcmVhdGVHVUkub3BlbkludmVudG9yeShwbGF5ZXIpOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICBjYXNlIEhVTlRFUlNfREVOX0lEOg0KICAgICAgICAgICAgICAgIHBsYXllci5jbG9zZUludmVudG9yeSgpOw0KICAgICAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrTGF0ZXIocGx1Z2luLCAoKSAtPiB7DQogICAgICAgICAgICAgICAgICAgIEh1bnRlckRlbkdVSSBodW50ZXJEZW5HVUkgPSBuZXcgSHVudGVyRGVuR1VJKHBsYXllciwgcGx1Z2luLmdldEV2ZW50TWFuYWdlcigpKTsNCiAgICAgICAgICAgICAgICAgICAgaHVudGVyRGVuR1VJLm9wZW5JbnZlbnRvcnkocGxheWVyKTsNCiAgICAgICAgICAgICAgICB9LCAxTCk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgQk9VTlRZX0hVTlRFUl9JRDoNCiAgICAgICAgICAgICAgICBwbGF5ZXIuY2xvc2VJbnZlbnRvcnkoKTsNCiAgICAgICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFza0xhdGVyKHBsdWdpbiwgKCkgLT4gew0KICAgICAgICAgICAgICAgICAgICBoYW5kbGVTa3VsbFR1cm5JbihwbGF5ZXIpOw0KICAgICAgICAgICAgICAgIH0sIDFMKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSBQUkVWSU9VU19QQUdFX0lEOg0KICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2UtLTsNCiAgICAgICAgICAgICAgICAgICAgb3BlbkJvdW50eUdVSShwbGF5ZXIsIHBsYXllckZpbHRlckhpZ2hUb0xvdy5nZXRPckRlZmF1bHQocGxheWVyVVVJRCwgdHJ1ZSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyU2hvd09ubHlPbmxpbmUuZ2V0T3JEZWZhdWx0KHBsYXllclVVSUQsIGZhbHNlKSwgY3VycmVudFBhZ2UpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSBORVhUX1BBR0VfSUQ6DQogICAgICAgICAgICAgICAgTGlzdDxCb3VudHk+IGZpbHRlcmVkQm91bnRpZXMgPSBnZXRGaWx0ZXJlZEJvdW50aWVzKHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCksDQogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTaG93T25seU9ubGluZS5nZXRPckRlZmF1bHQocGxheWVyVVVJRCwgZmFsc2UpLA0KICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyRmlsdGVySGlnaFRvTG93LmdldE9yRGVmYXVsdChwbGF5ZXJVVUlELCB0cnVlKSk7DQogICAgICAgICAgICAgICAgaW50IHRvdGFsUGFnZXMgPSBNYXRoLm1heCgxLCAoaW50KSBNYXRoLmNlaWwoKGRvdWJsZSkgZmlsdGVyZWRCb3VudGllcy5zaXplKCkgLyBJVEVNU19QRVJfUEFHRSkpOw0KICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSA8IHRvdGFsUGFnZXMgLSAxKSB7DQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlKys7DQogICAgICAgICAgICAgICAgICAgIG9wZW5Cb3VudHlHVUkocGxheWVyLCBwbGF5ZXJGaWx0ZXJIaWdoVG9Mb3cuZ2V0T3JEZWZhdWx0KHBsYXllclVVSUQsIHRydWUpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclNob3dPbmx5T25saW5lLmdldE9yRGVmYXVsdChwbGF5ZXJVVUlELCBmYWxzZSksIGN1cnJlbnRQYWdlKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgVFVSTl9JTl9TS1VMTFNfSUQ6DQogICAgICAgICAgICAgICAgaGFuZGxlU2t1bGxUdXJuSW4ocGxheWVyKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSBCQUNLX1RPX01BSU5fSUQ6DQogICAgICAgICAgICAgICAgcGxheWVyLmNsb3NlSW52ZW50b3J5KCk7DQogICAgICAgICAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2tMYXRlcihwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgICAgICAgICAgb3BlbkJvdW50eUdVSShwbGF5ZXIsIHBsYXllckZpbHRlckhpZ2hUb0xvdy5nZXRPckRlZmF1bHQocGxheWVyVVVJRCwgdHJ1ZSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyU2hvd09ubHlPbmxpbmUuZ2V0T3JEZWZhdWx0KHBsYXllclVVSUQsIGZhbHNlKSwgY3VycmVudFBhZ2UpOw0KICAgICAgICAgICAgICAgIH0sIDFMKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQm91bnR5R1VJXSBVbmtub3duIGJ1dHRvbiBjbGlja2VkOiAiICsgYnV0dG9uSWQpOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB3aGV0aGVyIHRvIHNob3cgb25seSBvbmxpbmUgcGxheWVycyBpbiB0aGUgQm91bnR5IEdVSQ0KICAgICAqIC8vIG5vdGU6IFJldHVybnMgdGhlIGN1cnJlbnQgb25saW5lLW9ubHkgZmlsdGVyIHN0YXRlDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGdldFNob3dPbmx5T25saW5lKCkgew0KICAgICAgICByZXR1cm4gc2hvd09ubHlPbmxpbmU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0cyB0aGUgY3VycmVudCBzb3J0aW5nIGRpcmVjdGlvbiBmb3IgYm91bnRpZXMNCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIHdoZXRoZXIgYm91bnRpZXMgYXJlIHNvcnRlZCBmcm9tIGhpZ2ggdG8gbG93DQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGdldEZpbHRlckhpZ2hUb0xvdygpIHsNCiAgICAgICAgcmV0dXJuIGZpbHRlckhpZ2hUb0xvdzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHBhZ2Ugb2YgdGhlIEJvdW50eSBHVUkNCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIHRoZSBjdXJyZW50IHBhZ2UgbnVtYmVyIGZvciBwYWdpbmF0aW9uDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBpbnQgZ2V0Q3VycmVudFBhZ2UoKSB7DQogICAgICAgIHJldHVybiBjdXJyZW50UGFnZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXRzIHRoZSB0aW1lIGEgcGxheWVyIHdhcyBhZGRlZCB0byB0aGUgc2VhcmNoIGlucHV0IGF3YWl0aW5nIGxpc3QNCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIHRoZSB0aW1lc3RhbXAgZm9yIGEgcGxheWVy4oCZcyBzZWFyY2ggcHJvbXB0LCBvciBudWxsIGlmIG5vdCBhd2FpdGluZw0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgTG9uZyBnZXRBd2FpdGluZ1NlYXJjaFRpbWUoVVVJRCBwbGF5ZXJVVUlEKSB7DQogICAgICAgIHJldHVybiBhd2FpdGluZ1NlYXJjaElucHV0LmdldChwbGF5ZXJVVUlEKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZW1vdmVzIGEgcGxheWVyIGZyb20gdGhlIHNlYXJjaCBpbnB1dCBhd2FpdGluZyBsaXN0DQogICAgICogLy8gbm90ZTogQ2xlYXJzIGEgcGxheWVyIGZyb20gc2VhcmNoIHByb21wdCB0cmFja2luZw0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCByZW1vdmVBd2FpdGluZ1NlYXJjaElucHV0KFVVSUQgcGxheWVyVVVJRCkgew0KICAgICAgICBhd2FpdGluZ1NlYXJjaElucHV0LnJlbW92ZShwbGF5ZXJVVUlEKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIGEgcGxheWVyIHRvIHRoZSBzZWFyY2ggaW5wdXQgYXdhaXRpbmcgbGlzdA0KICAgICAqIC8vIG5vdGU6IFRyYWNrcyBhIHBsYXllciB3YWl0aW5nIGZvciBjaGF0IGlucHV0IGZvciBib3VudHkgc2VhcmNoDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyB2b2lkIGFkZEF3YWl0aW5nU2VhcmNoSW5wdXQoVVVJRCBwbGF5ZXJVVUlEKSB7DQogICAgICAgIGF3YWl0aW5nU2VhcmNoSW5wdXQucHV0KHBsYXllclVVSUQsIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDbGVhcnMgdGhlIHBsYXllclNob3dPbmx5T25saW5lIG1hcA0KICAgICAqIC8vIG5vdGU6IFJlc2V0cyB0aGUgb25saW5lLW9ubHkgZmlsdGVyIHN0YXRlcyBmb3IgYWxsIHBsYXllcnMNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgY2xlYXJQbGF5ZXJTaG93T25seU9ubGluZSgpIHsNCiAgICAgICAgcGxheWVyU2hvd09ubHlPbmxpbmUuY2xlYXIoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDbGVhcnMgdGhlIHBsYXllckZpbHRlckhpZ2hUb0xvdyBtYXANCiAgICAgKiAvLyBub3RlOiBSZXNldHMgdGhlIHNvcnRpbmcgZmlsdGVyIHN0YXRlcyBmb3IgYWxsIHBsYXllcnMNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgY2xlYXJQbGF5ZXJGaWx0ZXJIaWdoVG9Mb3coKSB7DQogICAgICAgIHBsYXllckZpbHRlckhpZ2hUb0xvdy5jbGVhcigpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbW92ZXMgYSBwbGF5ZXIncyBvbmxpbmUtb25seSBmaWx0ZXIgc3RhdGUNCiAgICAgKiAvLyBub3RlOiBDbGVhcnMgdGhlIHNwZWNpZmllZCBwbGF5ZXIncyBlbnRyeSBmcm9tIHRoZSBvbmxpbmUtb25seSBmaWx0ZXIgbWFwDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyB2b2lkIHJlbW92ZVBsYXllclNob3dPbmx5T25saW5lKFVVSUQgcGxheWVyVVVJRCkgew0KICAgICAgICBwbGF5ZXJTaG93T25seU9ubGluZS5yZW1vdmUocGxheWVyVVVJRCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmVtb3ZlcyBhIHBsYXllcidzIHNvcnRpbmcgZmlsdGVyIHN0YXRlDQogICAgICogLy8gbm90ZTogQ2xlYXJzIHRoZSBzcGVjaWZpZWQgcGxheWVyJ3MgZW50cnkgZnJvbSB0aGUgaGlnaC10by1sb3cgZmlsdGVyIG1hcA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCByZW1vdmVQbGF5ZXJGaWx0ZXJIaWdoVG9Mb3coVVVJRCBwbGF5ZXJVVUlEKSB7DQogICAgICAgIHBsYXllckZpbHRlckhpZ2hUb0xvdy5yZW1vdmUocGxheWVyVVVJRCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2xlYW5zIHVwIHdoZW4gdGhlIGludmVudG9yeSBpcyBjbG9zZWQNCiAgICAgKiAvLyBub3RlOiBSZW1vdmVzIHBsYXllciBmcm9tIHRyYWNraW5nIG1hcHMNCiAgICAgKi8NCiAgICBARXZlbnRIYW5kbGVyDQogICAgcHVibGljIHZvaWQgb25JbnZlbnRvcnlDbG9zZShJbnZlbnRvcnlDbG9zZUV2ZW50IGV2ZW50KSB7DQogICAgICAgIGlmICghKGV2ZW50LmdldFBsYXllcigpIGluc3RhbmNlb2YgUGxheWVyKSkgcmV0dXJuOw0KICAgICAgICBQbGF5ZXIgcGxheWVyID0gKFBsYXllcikgZXZlbnQuZ2V0UGxheWVyKCk7DQogICAgICAgIGlmICghZXZlbnQuZ2V0VmlldygpLmdldFRpdGxlKCkuZXF1YWxzKEdVSV9USVRMRSkpIHJldHVybjsNCg0KICAgICAgICBVVUlEIHBsYXllclVVSUQgPSBwbGF5ZXIuZ2V0VW5pcXVlSWQoKTsNCiAgICAgICAgcGxheWVyU2hvd09ubHlPbmxpbmUucmVtb3ZlKHBsYXllclVVSUQpOw0KICAgICAgICBwbGF5ZXJGaWx0ZXJIaWdoVG9Mb3cucmVtb3ZlKHBsYXllclVVSUQpOw0KICAgIH0NCn0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL0dVSXMvQm91bnR5U2VhcmNoTGlzdGVuZXIuamF2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMDc1MTcgMTUwMjYyMTc0NjAgMDIwNjcwACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy5HVUlzOw0KDQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5PZmZsaW5lUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuZW50aXR5LlBsYXllcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LkV2ZW50SGFuZGxlcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50Lkxpc3RlbmVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQucGxheWVyLkFzeW5jUGxheWVyQ2hhdEV2ZW50Ow0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuQm91bnRpZXNQbHVzOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuTWVzc2FnZVV0aWxzOw0KDQppbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDsNCmltcG9ydCBqYXZhLnV0aWwuTGlzdDsNCmltcG9ydCBqYXZhLnV0aWwuVVVJRDsNCmltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7DQoNCi8qKg0KICogSGFuZGxlcyBjaGF0IGlucHV0IGZvciBib3VudHkgc2VhcmNoIHByb21wdHMNCiAqIC8vIG5vdGU6IFByb2Nlc3NlcyBwbGF5ZXIgY2hhdCBpbnB1dCB0byBzZWFyY2ggZm9yIGJvdW50aWVzIGJ5IHBhcnRpYWwgbmFtZSBhbmQgZGlzcGxheSBhbGwgbWF0Y2hpbmcgcGxheWVycw0KICovDQpwdWJsaWMgY2xhc3MgQm91bnR5U2VhcmNoTGlzdGVuZXIgaW1wbGVtZW50cyBMaXN0ZW5lciB7DQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KDQogICAgcHVibGljIEJvdW50eVNlYXJjaExpc3RlbmVyKEJvdW50aWVzUGx1cyBwbHVnaW4pIHsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBjaGF0IGlucHV0IGZvciBib3VudHkgc2VhcmNoDQogICAgICogLy8gbm90ZTogUHJvY2Vzc2VzIHBsYXllciBpbnB1dCB0byBmaW5kIGFuZCBkaXNwbGF5IGFsbCBwbGF5ZXJzIG1hdGNoaW5nIHRoZSBwYXJ0aWFsIG5hbWUNCiAgICAgKi8NCiAgICBARXZlbnRIYW5kbGVyDQogICAgcHVibGljIHZvaWQgb25QbGF5ZXJDaGF0KEFzeW5jUGxheWVyQ2hhdEV2ZW50IGV2ZW50KSB7DQogICAgICAgIFBsYXllciBwbGF5ZXIgPSBldmVudC5nZXRQbGF5ZXIoKTsNCiAgICAgICAgVVVJRCBwbGF5ZXJVVUlEID0gcGxheWVyLmdldFVuaXF1ZUlkKCk7DQogICAgICAgIExvbmcgcHJvbXB0VGltZSA9IEJvdW50eUdVSS5nZXRBd2FpdGluZ1NlYXJjaFRpbWUocGxheWVyVVVJRCk7DQogICAgICAgIGlmIChwcm9tcHRUaW1lID09IG51bGwpIHJldHVybjsNCg0KICAgICAgICBldmVudC5zZXRDYW5jZWxsZWQodHJ1ZSk7IC8vIFByZXZlbnQgY2hhdCBtZXNzYWdlIGZyb20gYnJvYWRjYXN0aW5nDQogICAgICAgIFN0cmluZyBpbnB1dCA9IGV2ZW50LmdldE1lc3NhZ2UoKS50cmltKCk7DQoNCiAgICAgICAgLy8gQ2hlY2sgZm9yIHRpbWVvdXQNCiAgICAgICAgaWYgKFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpIC0gcHJvbXB0VGltZSA+IEJvdW50eUdVSS5TRUFSQ0hfVElNRU9VVCkgew0KICAgICAgICAgICAgQm91bnR5R1VJLnJlbW92ZUF3YWl0aW5nU2VhcmNoSW5wdXQocGxheWVyVVVJRCk7DQogICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAic2VhcmNoLXRpbWVvdXQiKTsNCiAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrKHBsdWdpbiwgKCkgLT4gQm91bnR5R1VJLm9wZW5Cb3VudHlHVUkocGxheWVyLCBCb3VudHlHVUkuZ2V0RmlsdGVySGlnaFRvTG93KCksIEJvdW50eUdVSS5nZXRTaG93T25seU9ubGluZSgpLCBCb3VudHlHVUkuZ2V0Q3VycmVudFBhZ2UoKSkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvbg0KICAgICAgICBpZiAoaW5wdXQuZXF1YWxzSWdub3JlQ2FzZSgiY2FuY2VsIikpIHsNCiAgICAgICAgICAgIEJvdW50eUdVSS5yZW1vdmVBd2FpdGluZ1NlYXJjaElucHV0KHBsYXllclVVSUQpOw0KICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgInNlYXJjaC1jYW5jZWxsZWQiKTsNCiAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrKHBsdWdpbiwgKCkgLT4gQm91bnR5R1VJLm9wZW5Cb3VudHlHVUkocGxheWVyLCBCb3VudHlHVUkuZ2V0RmlsdGVySGlnaFRvTG93KCksIEJvdW50eUdVSS5nZXRTaG93T25seU9ubGluZSgpLCBCb3VudHlHVUkuZ2V0Q3VycmVudFBhZ2UoKSkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gUHJvY2VzcyBwYXJ0aWFsIHBsYXllciBuYW1lIGlucHV0DQogICAgICAgIExpc3Q8T2ZmbGluZVBsYXllcj4gbWF0Y2hlcyA9IGZpbmRNYXRjaGluZ1BsYXllcnMoaW5wdXQpOw0KICAgICAgICBpZiAobWF0Y2hlcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJib3VudHktcGxheWVyLW5vdC1mb3VuZCIpOw0KICAgICAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2socGx1Z2luLCAoKSAtPiBCb3VudHlHVUkub3BlbkJvdW50eUdVSShwbGF5ZXIsIEJvdW50eUdVSS5nZXRGaWx0ZXJIaWdoVG9Mb3coKSwgQm91bnR5R1VJLmdldFNob3dPbmx5T25saW5lKCksIEJvdW50eUdVSS5nZXRDdXJyZW50UGFnZSgpKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBSZW1vdmUgcGxheWVyIGZyb20gYXdhaXRpbmcgaW5wdXQgYW5kIG9wZW4gR1VJIHdpdGggc2VhcmNoIHJlc3VsdHMNCiAgICAgICAgQm91bnR5R1VJLnJlbW92ZUF3YWl0aW5nU2VhcmNoSW5wdXQocGxheWVyVVVJRCk7DQogICAgICAgIExpc3Q8VVVJRD4gbWF0Y2hVVUlEcyA9IG1hdGNoZXMuc3RyZWFtKCkubWFwKE9mZmxpbmVQbGF5ZXI6OmdldFVuaXF1ZUlkKS5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpOw0KICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFzayhwbHVnaW4sICgpIC0+IEJvdW50eUdVSS5vcGVuU2VhcmNoUmVzdWx0c0dVSShwbGF5ZXIsIG1hdGNoVVVJRHMsIHBsdWdpbikpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZpbmRzIGFsbCBwbGF5ZXJzIHdob3NlIG5hbWVzIHBhcnRpYWxseSBtYXRjaCB0aGUgaW5wdXQNCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIGEgbGlzdCBvZiBvZmZsaW5lIHBsYXllcnMgd2hvIGhhdmUgcGxheWVkIGJlZm9yZSBhbmQgd2hvc2UgbmFtZXMgY29udGFpbiB0aGUgaW5wdXQgc3RyaW5nIChjYXNlLWluc2Vuc2l0aXZlKQ0KICAgICAqLw0KICAgIHByaXZhdGUgTGlzdDxPZmZsaW5lUGxheWVyPiBmaW5kTWF0Y2hpbmdQbGF5ZXJzKFN0cmluZyBpbnB1dCkgew0KICAgICAgICBTdHJpbmcgbG93ZXJJbnB1dCA9IGlucHV0LnRvTG93ZXJDYXNlKCk7DQogICAgICAgIExpc3Q8T2ZmbGluZVBsYXllcj4gbWF0Y2hlcyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KDQogICAgICAgIC8vIENvbGxlY3QgYWxsIG1hdGNoaW5nIHBsYXllcnMgd2hvIGhhdmUgcGxheWVkIGJlZm9yZQ0KICAgICAgICBmb3IgKE9mZmxpbmVQbGF5ZXIgb2ZmbGluZVBsYXllciA6IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVycygpKSB7DQogICAgICAgICAgICBpZiAob2ZmbGluZVBsYXllci5nZXROYW1lKCkgIT0gbnVsbCAmJiBvZmZsaW5lUGxheWVyLmdldE5hbWUoKS50b0xvd2VyQ2FzZSgpLmNvbnRhaW5zKGxvd2VySW5wdXQpICYmIG9mZmxpbmVQbGF5ZXIuaGFzUGxheWVkQmVmb3JlKCkpIHsNCiAgICAgICAgICAgICAgICBtYXRjaGVzLmFkZChvZmZsaW5lUGxheWVyKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgIH0NCn0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL0dVSXMvQ3JlYXRlR1VJLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAyNTM2NTcgMTUwMjY3MDM1NzMgMDE2MzQxACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy5HVUlzOw0KDQppbXBvcnQgbmV0Lm1kXzUuYnVuZ2VlLmFwaS5jaGF0LkJhc2VDb21wb25lbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5DaGF0Q29sb3I7DQppbXBvcnQgb3JnLmJ1a2tpdC5NYXRlcmlhbDsNCmltcG9ydCBvcmcuYnVra2l0Lk9mZmxpbmVQbGF5ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuRmlsZUNvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuWWFtbENvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5lbmNoYW50bWVudHMuRW5jaGFudG1lbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuRXZlbnRIYW5kbGVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuSGFuZGxlckxpc3Q7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5MaXN0ZW5lcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LmludmVudG9yeS5JbnZlbnRvcnlDbGlja0V2ZW50Ow0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuaW52ZW50b3J5LkludmVudG9yeUNsb3NlRXZlbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5pbnZlbnRvcnkuSW52ZW50b3J5RHJhZ0V2ZW50Ow0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5LkludmVudG9yeTsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JbnZlbnRvcnlIb2xkZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbUZsYWc7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSXRlbVN0YWNrOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lm1ldGEuSXRlbU1ldGE7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkubWV0YS5Ta3VsbE1ldGE7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy4qOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuKjsNCmltcG9ydCBuZXQubWlsa2Jvd2wudmF1bHQuZWNvbm9teS5FY29ub215Ow0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuTWVzc2FnZVV0aWxzOw0KaW1wb3J0IG5ldC5tZF81LmJ1bmdlZS5hcGkuY2hhdC5UZXh0Q29tcG9uZW50Ow0KaW1wb3J0IG1lLmNsaXAucGxhY2Vob2xkZXJhcGkuUGxhY2Vob2xkZXJBUEk7DQoNCmltcG9ydCBqYXZhLmlvLkZpbGU7DQppbXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuRmllbGQ7DQppbXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kOw0KaW1wb3J0IGphdmEudXRpbC4qOw0KDQoNCmltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7DQoNCnB1YmxpYyBjbGFzcyBDcmVhdGVHVUkgaW1wbGVtZW50cyBJbnZlbnRvcnlIb2xkZXIsIExpc3RlbmVyIHsNCg0KICAgIHByaXZhdGUgU3RyaW5nIEdVSV9USVRMRTsgLy8gUmVtb3ZlIHN0YXRpYyBhbmQgZmluYWwga2V5d29yZHMNCiAgICBwcml2YXRlIGZpbmFsIEludmVudG9yeSBpbnZlbnRvcnk7DQogICAgcHJpdmF0ZSBmaW5hbCBQbGF5ZXIgcGxheWVyOw0KICAgIHByaXZhdGUgZmluYWwgQm91bnRpZXNQbHVzIHBsdWdpbjsNCiAgICBwcml2YXRlIGludCBjdXJyZW50UGFnZSA9IDA7DQogICAgcHJpdmF0ZSBMaXN0PE9mZmxpbmVQbGF5ZXI+IGF2YWlsYWJsZVBsYXllcnMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBNYXA8VVVJRCwgQ3JlYXRlR1VJPiBhY3RpdmVJbnN0YW5jZXMgPSBuZXcgSGFzaE1hcDw+KCk7DQogICAgcHJpdmF0ZSBTZXQ8SW50ZWdlcj4gcHJvdGVjdGVkU2xvdHMgPSBuZXcgSGFzaFNldDw+KCk7DQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbjsNCiAgICBwcml2YXRlIGxvbmcgb3BlblRpbWU7DQogICAgcHJpdmF0ZSBzdGF0aWMgaW50W10gcGxheWVySGVhZFNsb3RzOw0KICAgIC8qKg0KICAgICAqIENsZWFucyB1cCB0aGUgQ3JlYXRlR1VJIGluc3RhbmNlDQogICAgICogLy8gbm90ZTogVW5yZWdpc3RlcnMgbGlzdGVuZXJzIGFuZCByZW1vdmVzIGZyb20gYWN0aXZlIGluc3RhbmNlcw0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGNsZWFudXAoKSB7DQogICAgICAgIEhhbmRsZXJMaXN0LnVucmVnaXN0ZXJBbGwodGhpcyk7DQogICAgICAgIGFjdGl2ZUluc3RhbmNlcy5yZW1vdmUocGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdGhlIGludmVudG9yeSBhc3NvY2lhdGVkIHdpdGggdGhpcyBHVUkNCiAgICAgKiAvLyBub3RlOiBSZXR1cm5zIHRoZSBDcmVhdGVHVUkgaW52ZW50b3J5IGZvciBJbnZlbnRvcnlIb2xkZXIgaW50ZXJmYWNlDQogICAgICovDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIEludmVudG9yeSBnZXRJbnZlbnRvcnkoKSB7DQogICAgICAgIHJldHVybiBpbnZlbnRvcnk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIGxvYWRQcm90ZWN0ZWRTbG90cyhGaWxlQ29uZmlndXJhdGlvbiBjb25maWcpIHsNCiAgICAgICAgcHJvdGVjdGVkU2xvdHMuY2xlYXIoKTsNCiAgICAgICAgaWYgKGludmVudG9yeSA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgTGlzdDxJbnRlZ2VyPiBjb25maWdTbG90cyA9IGNvbmZpZy5nZXRJbnRlZ2VyTGlzdCgiYm9yZGVyLnNsb3RzIik7DQogICAgICAgIGlmICghY29uZmlnU2xvdHMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBwcm90ZWN0ZWRTbG90cy5hZGRBbGwoY29uZmlnU2xvdHMpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgTGlzdDxJbnRlZ2VyPiBkZWZhdWx0U2xvdHMgPSBBcnJheXMuYXNMaXN0KDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDE3LCAxOCwgMjYsIDI3LCAzNSwgMzYsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksIDUwLCA1MSwgNTIsIDUzKTsNCiAgICAgICAgICAgIHByb3RlY3RlZFNsb3RzLmFkZEFsbChkZWZhdWx0U2xvdHMpOw0KICAgICAgICB9DQoNCiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBpbnZlbnRvcnkuZ2V0U2l6ZSgpOyBpKyspIHsNCiAgICAgICAgICAgIEl0ZW1TdGFjayBpdGVtID0gaW52ZW50b3J5LmdldEl0ZW0oaSk7DQogICAgICAgICAgICBpZiAoaXRlbSAhPSBudWxsICYmIGl0ZW0uZ2V0VHlwZSgpICE9IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgICAgIHByb3RlY3RlZFNsb3RzLmFkZChpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEluaXRpYWxpemVzIHRoZSBDcmVhdGVHVUkgaW52ZW50b3J5DQogICAgICogLy8gbm90ZTogU2V0cyB1cCBHVUkgY29udGVudCB3aXRoIGJvcmRlcnMsIHBsYXllciBoZWFkcywgYW5kIGJ1dHRvbnMNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgaW5pdGlhbGl6ZUludmVudG9yeSgpIHsNCiAgICAgICAgaW5pdGlhbGl6ZUdVSSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENvbnN0cnVjdHMgdGhlIENyZWF0ZUdVSSBmb3IgYSBwbGF5ZXINCiAgICAgKiAvLyBub3RlOiBJbml0aWFsaXplcyB0aGUgYm91bnR5IGNyZWF0aW9uIEdVSSBhbmQgcmVnaXN0ZXJzIGxpc3RlbmVycw0KICAgICAqLw0KICAgIHB1YmxpYyBDcmVhdGVHVUkoUGxheWVyIHBsYXllciwgRXZlbnRNYW5hZ2VyIGV2ZW50TWFuYWdlcikgew0KICAgICAgICB0aGlzLnBsYXllciA9IHBsYXllcjsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKTsNCiAgICAgICAgdGhpcy5zZXNzaW9uID0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLmdldE9yQ3JlYXRlU2Vzc2lvbihwbGF5ZXIpOw0KICAgICAgICB0aGlzLnNlc3Npb24uc2V0R3VpQWN0aXZlKHRydWUpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Q3JlYXRlR1VJQ29uZmlnKCk7DQogICAgICAgIEZpbGUgY29uZmlnRmlsZSA9IG5ldyBGaWxlKHBsdWdpbi5nZXREYXRhRm9sZGVyKCksICJHVUlzL0NyZWF0ZUdVSS55bWwiKTsNCg0KICAgICAgICAvLyBWZXJpZnkgY29uZmlndXJhdGlvbiBpbnRlZ3JpdHkNCiAgICAgICAgaWYgKCFjb25maWdGaWxlLmV4aXN0cygpIHx8IGNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiUGx1Z2luLUl0ZW1zIikgPT0gbnVsbCkgew0KICAgICAgICAgICAgcGx1Z2luLmdldERlYnVnTWFuYWdlcigpLmxvZ1dhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gQ3JlYXRlR1VJLnltbCBpcyBtaXNzaW5nIG9yIGludmFsaWQsIHJlbG9hZGluZyBkZWZhdWx0Iik7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGlmIChjb25maWdGaWxlLmV4aXN0cygpKSBjb25maWdGaWxlLmRlbGV0ZSgpOyAvLyBSZW1vdmUgaW52YWxpZCBmaWxlDQogICAgICAgICAgICAgICAgcGx1Z2luLnNhdmVSZXNvdXJjZSgiR1VJcy9DcmVhdGVHVUkueW1sIiwgZmFsc2UpOyAvLyBDb3B5IGRlZmF1bHQNCiAgICAgICAgICAgICAgICBjb25maWcgPSBZYW1sQ29uZmlndXJhdGlvbi5sb2FkQ29uZmlndXJhdGlvbihjb25maWdGaWxlKTsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCkubG9nRGVidWcoIltERUJVRyAtIENyZWF0ZUdVSV0gUmVsb2FkZWQgZGVmYXVsdCBDcmVhdGVHVUkueW1sIik7DQogICAgICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5sb2dXYXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIEZhaWxlZCB0byByZWxvYWQgZGVmYXVsdCBDcmVhdGVHVUkueW1sOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgR1VJX1RJVExFID0gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBjb25maWcuZ2V0U3RyaW5nKCJndWktdGl0bGUiLCAiJjQmbENyZWF0ZSBhIEJvdW50eSIpKTsNCiAgICAgICAgbG9hZFBsYXllckhlYWRTbG90cygpOw0KICAgICAgICBsb2FkUHJvdGVjdGVkU2xvdHMoY29uZmlnKTsNCiAgICAgICAgdGhpcy5pbnZlbnRvcnkgPSBCdWtraXQuY3JlYXRlSW52ZW50b3J5KG51bGwsIDU0LCBHVUlfVElUTEUpOw0KICAgICAgICB0aGlzLm9wZW5UaW1lID0gU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCk7DQogICAgICAgIGV2ZW50TWFuYWdlci5yZWdpc3Rlcih0aGlzKTsNCiAgICAgICAgaW5pdGlhbGl6ZUdVSSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIExvYWRzIGNvbmZpZ3VyYWJsZSBwbGF5ZXIgaGVhZCBzbG90cyBmcm9tIGNvbmZpZw0KICAgICAqIC8vIG5vdGU6IEluaXRpYWxpemVzIHBsYXllckhlYWRTbG90cyB3aXRoIHZhbGlkYXRlZCBzbG90cyBmcm9tIENyZWF0ZUdVSS55bWwNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgbG9hZFBsYXllckhlYWRTbG90cygpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldENyZWF0ZUdVSUNvbmZpZygpOw0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBMaXN0PEludGVnZXI+IHNsb3RzID0gY29uZmlnLmdldEludGVnZXJMaXN0KCJib3VudHktc2t1bGwtc2xvdHMuc2xvdHMiKTsNCiAgICAgICAgaWYgKHNsb3RzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gTm8gYm91bnR5LXNrdWxsLXNsb3RzIGRlZmluZWQgaW4gQ3JlYXRlR1VJLnltbCwgdXNpbmcgZGVmYXVsdCBzbG90cyIpOw0KICAgICAgICAgICAgc2xvdHMgPSBBcnJheXMuYXNMaXN0KDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxOSwgMjAsIDIxLCAyMiwgMjMsIDI0LCAyNSwgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM3LCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzKTsNCiAgICAgICAgfQ0KICAgICAgICBTZXQ8SW50ZWdlcj4gdW5pcXVlU2xvdHMgPSBuZXcgSGFzaFNldDw+KCk7DQogICAgICAgIExpc3Q8SW50ZWdlcj4gdmFsaWRTbG90cyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICBTZXQ8SW50ZWdlcj4gcmVzZXJ2ZWRTbG90cyA9IG5ldyBIYXNoU2V0PD4oQXJyYXlzLmFzTGlzdCgNCiAgICAgICAgICAgICAgICBjb25maWcuZ2V0SW50KCJjb25maXJtLWJ1dHRvbi5zbG90IiwgNTIpLA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoImFkZC1pdGVtcy1idXR0b24uc2xvdCIsIDUwKSwNCiAgICAgICAgICAgICAgICBjb25maWcuZ2V0SW50KCJhZGQtbW9uZXktYnV0dG9uLnNsb3QiLCA0OCksDQogICAgICAgICAgICAgICAgY29uZmlnLmdldEludCgidG90YWwtYm91bnR5LXZhbHVlLWJ1dHRvbi5zbG90IiwgNDkpLA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoImFkZC1leHBlcmllbmNlLWJ1dHRvbi5zbG90IiwgNDcpLA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoImFkZC10aW1lLWJ1dHRvbi5zbG90IiwgNTEpLA0KICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnQoImNhbmNlbC1idXR0b24uc2xvdCIsIDQ2KQ0KICAgICAgICApKTsNCiAgICAgICAgcmVzZXJ2ZWRTbG90cy5hZGRBbGwoY29uZmlnLmdldEludGVnZXJMaXN0KCJib3JkZXIuc2xvdHMiKSk7DQogICAgICAgIGlmIChjb25maWcuY29udGFpbnMoIkN1c3RvbS1JdGVtcyIpKSB7DQogICAgICAgICAgICBmb3IgKFN0cmluZyBrZXkgOiBjb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oIkN1c3RvbS1JdGVtcyIpLmdldEtleXMoZmFsc2UpKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIHBhdGggPSAiQ3VzdG9tLUl0ZW1zLiIgKyBrZXk7DQogICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5jb250YWlucyhwYXRoICsgIi5zbG90IikpIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzZXJ2ZWRTbG90cy5hZGQoY29uZmlnLmdldEludChwYXRoICsgIi5zbG90IikpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmNvbnRhaW5zKHBhdGggKyAiLnNsb3RzIikpIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzZXJ2ZWRTbG90cy5hZGRBbGwoY29uZmlnLmdldEludGVnZXJMaXN0KHBhdGggKyAiLnNsb3RzIikpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBmb3IgKGludCBzbG90IDogc2xvdHMpIHsNCiAgICAgICAgICAgIGlmIChzbG90ID49IDAgJiYgc2xvdCA8IDU0ICYmICFyZXNlcnZlZFNsb3RzLmNvbnRhaW5zKHNsb3QpICYmIHVuaXF1ZVNsb3RzLmFkZChzbG90KSkgew0KICAgICAgICAgICAgICAgIHZhbGlkU2xvdHMuYWRkKHNsb3QpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBJbnZhbGlkIG9yIHJlc2VydmVkIGJvdW50eS1za3VsbC1zbG90ICIgKyBzbG90ICsgIiBpbiBDcmVhdGVHVUkueW1sIChtdXN0IGJlIDAtNTMsIHVuaXF1ZSwgbm90IGluIGJvcmRlciBvciBQbHVnaW4tSXRlbXMpIik7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKHZhbGlkU2xvdHMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBObyB2YWxpZCBib3VudHktc2t1bGwtc2xvdHMsIHVzaW5nIGRlZmF1bHQgc2xvdHMiKTsNCiAgICAgICAgICAgIHZhbGlkU2xvdHMgPSBBcnJheXMuYXNMaXN0KDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxOSwgMjAsIDIxLCAyMiwgMjMsIDI0LCAyNSwgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM3LCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzKTsNCiAgICAgICAgfQ0KICAgICAgICBwbGF5ZXJIZWFkU2xvdHMgPSB2YWxpZFNsb3RzLnN0cmVhbSgpLm1hcFRvSW50KEludGVnZXI6OmludFZhbHVlKS50b0FycmF5KCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogT3BlbnMgdGhlIENyZWF0ZUdVSSBpbnZlbnRvcnkgZm9yIHRoZSBwbGF5ZXINCiAgICAgKiAvLyBub3RlOiBSZWZyZXNoZXMgR1VJIGNvbnRlbnQgYW5kIGRpc3BsYXlzIGl0IHRvIHRoZSBwbGF5ZXINCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBvcGVuSW52ZW50b3J5KFBsYXllciBwbGF5ZXIpIHsNCiAgICAgICAgdXBkYXRlUHJvdGVjdGVkU2xvdHMoKTsNCiAgICAgICAgaWYgKCFwbGF5ZXIuZXF1YWxzKHRoaXMucGxheWVyKSkgew0KICAgICAgICAgICAgcGx1Z2luLmdldERlYnVnTWFuYWdlcigpLmxvZ0RlYnVnKCJbREVCVUcgLSBDcmVhdGVHVUldIElnbm9yaW5nIG9wZW5JbnZlbnRvcnkgY2FsbCBmb3IgIiArIHBsYXllci5nZXROYW1lKCkgKyAiOiBwbGF5ZXIgbWlzbWF0Y2giKTsNCiAgICAgICAgICAgIHJldHVybjsgLy8gU2FmZXR5IGNoZWNrDQogICAgICAgIH0NCiAgICAgICAgcmVmcmVzaEdVSSgpOw0KICAgICAgICBwbGF5ZXIub3BlbkludmVudG9yeShpbnZlbnRvcnkpOw0KICAgICAgICBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCkubG9nRGVidWcoIltERUJVRyAtIENyZWF0ZUdVSV0gT3BlbmVkIENyZWF0ZUdVSSBmb3IgcGxheWVyICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgaW5pdGlhbGl6ZUdVSSgpIHsNCg0KICAgICAgICAvLyBMb2FkIGF2YWlsYWJsZSBwbGF5ZXJzDQogICAgICAgIGxvYWRBdmFpbGFibGVQbGF5ZXJzKCk7DQoNCiAgICAgICAgLy8gU2V0IHVwIHRoZSBHVUkNCiAgICAgICAgcmVmcmVzaEdVSSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgdGhlIGFjdGl2ZSBDcmVhdGVHVUkgaW5zdGFuY2UgZm9yIGEgcGxheWVyDQogICAgICogLy8gbm90ZTogUmV0dXJucyB0aGUgY3VycmVudCBDcmVhdGVHVUkgaW5zdGFuY2UgZm9yIHRoZSBzcGVjaWZpZWQgcGxheWVyLCBvciBudWxsIGlmIG5vbmUgZXhpc3RzDQogICAgICovDQogICAgcHVibGljIHN0YXRpYyBDcmVhdGVHVUkgZ2V0QWN0aXZlSW5zdGFuY2UoVVVJRCBwbGF5ZXJVVUlEKSB7DQogICAgICAgIHJldHVybiBhY3RpdmVJbnN0YW5jZXMuZ2V0KHBsYXllclVVSUQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIExvYWRzIHRoZSBsaXN0IG9mIHBsYXllcnMgYXZhaWxhYmxlIGZvciBib3VudHkgY3JlYXRpb24NCiAgICAgKiAvLyBub3RlOiBGaWx0ZXJzIGFuZCBzb3J0cyBwbGF5ZXJzIGZvciBHVUkgZGlzcGxheQ0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBsb2FkQXZhaWxhYmxlUGxheWVycygpIHsNCiAgICAgICAgYm9vbGVhbiBzaG93T2ZmbGluZVBsYXllcnMgPSBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigiYWxsb3ctb2ZmbGluZS1wbGF5ZXJzIiwgdHJ1ZSk7DQogICAgICAgIFNldDxPZmZsaW5lUGxheWVyPiB1bmlxdWVQbGF5ZXJzID0gbmV3IEhhc2hTZXQ8PigpOw0KICAgICAgICBCb29zdGVkQm91bnR5IGJvb3N0ZWRCb3VudHkgPSBwbHVnaW4uZ2V0Qm9vc3RlZEJvdW50eSgpOw0KICAgICAgICBib29sZWFuIGlzRnJlbnp5QWN0aXZlID0gcGx1Z2luLmdldEZyZW56eSgpICE9IG51bGwgJiYgcGx1Z2luLmdldEZyZW56eSgpLmlzRnJlbnp5QWN0aXZlKCk7DQoNCiAgICAgICAgLy8gU2tpcCBzb3J0aW5nIGR1cmluZyBGcmVuenkgTW9kZQ0KICAgICAgICBpZiAoIWlzRnJlbnp5QWN0aXZlICYmIHNob3dPZmZsaW5lUGxheWVycykgew0KICAgICAgICAgICAgTGlzdDxPZmZsaW5lUGxheWVyPiBib29zdGVkUGxheWVycyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgTGlzdDxPZmZsaW5lUGxheWVyPiBub3JtYWxQbGF5ZXJzID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICBPZmZsaW5lUGxheWVyW10gYWxsUGxheWVycyA9IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVycygpOw0KDQogICAgICAgICAgICBmb3IgKE9mZmxpbmVQbGF5ZXIgb2ZmbGluZVBsYXllciA6IGFsbFBsYXllcnMpIHsNCiAgICAgICAgICAgICAgICBpZiAob2ZmbGluZVBsYXllciA9PSBudWxsIHx8IG9mZmxpbmVQbGF5ZXIuZ2V0TmFtZSgpID09IG51bGwgfHwgb2ZmbGluZVBsYXllci5nZXRVbmlxdWVJZCgpLmVxdWFscyhwbGF5ZXIuZ2V0VW5pcXVlSWQoKSkpIHsNCiAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICghb2ZmbGluZVBsYXllci5oYXNQbGF5ZWRCZWZvcmUoKSAmJiAhb2ZmbGluZVBsYXllci5pc09ubGluZSgpKSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBib29sZWFuIGlzQm9vc3RlZCA9IGJvb3N0ZWRCb3VudHkgIT0gbnVsbCAmJiBib29zdGVkQm91bnR5LmdldEN1cnJlbnRCb29zdGVkVGFyZ2V0KCkgIT0gbnVsbCAmJg0KICAgICAgICAgICAgICAgICAgICAgICAgYm9vc3RlZEJvdW50eS5nZXRDdXJyZW50Qm9vc3RlZFRhcmdldCgpLmVxdWFscyhvZmZsaW5lUGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICAgICAgICAgIGlmIChpc0Jvb3N0ZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgYm9vc3RlZFBsYXllcnMuYWRkKG9mZmxpbmVQbGF5ZXIpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIG5vcm1hbFBsYXllcnMuYWRkKG9mZmxpbmVQbGF5ZXIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gU29ydCBib29zdGVkIGFuZCBub3JtYWwgcGxheWVycyBhbHBoYWJldGljYWxseQ0KICAgICAgICAgICAgYm9vc3RlZFBsYXllcnMuc29ydChDb21wYXJhdG9yLmNvbXBhcmluZyhwIC0+IHAuZ2V0TmFtZSgpICE9IG51bGwgPyBwLmdldE5hbWUoKS50b0xvd2VyQ2FzZSgpIDogcC5nZXRVbmlxdWVJZCgpLnRvU3RyaW5nKCkpKTsNCiAgICAgICAgICAgIG5vcm1hbFBsYXllcnMuc29ydChDb21wYXJhdG9yLmNvbXBhcmluZyhwIC0+IHAuZ2V0TmFtZSgpICE9IG51bGwgPyBwLmdldE5hbWUoKS50b0xvd2VyQ2FzZSgpIDogcC5nZXRVbmlxdWVJZCgpLnRvU3RyaW5nKCkpKTsNCg0KICAgICAgICAgICAgdW5pcXVlUGxheWVycy5hZGRBbGwoYm9vc3RlZFBsYXllcnMpOw0KICAgICAgICAgICAgdW5pcXVlUGxheWVycy5hZGRBbGwobm9ybWFsUGxheWVycyk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBPZmZsaW5lUGxheWVyW10gYWxsUGxheWVycyA9IHNob3dPZmZsaW5lUGxheWVycyA/IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVycygpIDogbmV3IE9mZmxpbmVQbGF5ZXJbXXt9Ow0KICAgICAgICAgICAgZm9yIChPZmZsaW5lUGxheWVyIG9mZmxpbmVQbGF5ZXIgOiBhbGxQbGF5ZXJzKSB7DQogICAgICAgICAgICAgICAgaWYgKG9mZmxpbmVQbGF5ZXIgPT0gbnVsbCB8fCBvZmZsaW5lUGxheWVyLmdldE5hbWUoKSA9PSBudWxsIHx8IG9mZmxpbmVQbGF5ZXIuZ2V0VW5pcXVlSWQoKS5lcXVhbHMocGxheWVyLmdldFVuaXF1ZUlkKCkpKSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoIW9mZmxpbmVQbGF5ZXIuaGFzUGxheWVkQmVmb3JlKCkgJiYgIW9mZmxpbmVQbGF5ZXIuaXNPbmxpbmUoKSkgew0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdW5pcXVlUGxheWVycy5hZGQob2ZmbGluZVBsYXllcik7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBmb3IgKFBsYXllciBvbmxpbmVQbGF5ZXIgOiBCdWtraXQuZ2V0T25saW5lUGxheWVycygpKSB7DQogICAgICAgICAgICBpZiAoIW9ubGluZVBsYXllci5nZXRVbmlxdWVJZCgpLmVxdWFscyhwbGF5ZXIuZ2V0VW5pcXVlSWQoKSkpIHsNCiAgICAgICAgICAgICAgICB1bmlxdWVQbGF5ZXJzLmFkZChvbmxpbmVQbGF5ZXIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgYXZhaWxhYmxlUGxheWVycyA9IG5ldyBBcnJheUxpc3Q8Pih1bmlxdWVQbGF5ZXJzKTsNCg0KICAgICAgICBpZiAoIWlzRnJlbnp5QWN0aXZlICYmIHNob3dPZmZsaW5lUGxheWVycykgew0KICAgICAgICAgICAgLy8gU29ydGluZyBhbHJlYWR5IGhhbmRsZWQgYWJvdmUNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGF2YWlsYWJsZVBsYXllcnMuc29ydCgocDEsIHAyKSAtPiB7DQogICAgICAgICAgICAgICAgaWYgKHAxLmlzT25saW5lKCkgJiYgIXAyLmlzT25saW5lKCkpIHJldHVybiAtMTsNCiAgICAgICAgICAgICAgICBpZiAoIXAxLmlzT25saW5lKCkgJiYgcDIuaXNPbmxpbmUoKSkgcmV0dXJuIDE7DQogICAgICAgICAgICAgICAgcmV0dXJuIHAxLmdldE5hbWUoKS5jb21wYXJlVG9JZ25vcmVDYXNlKHAyLmdldE5hbWUoKSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCByZWZyZXNoR1VJKCkgew0KICAgICAgICAvLyBDbGVhciB0aGUgaW52ZW50b3J5DQogICAgICAgIGludmVudG9yeS5jbGVhcigpOw0KDQogICAgICAgIC8vIEFkZCBib3JkZXJzDQogICAgICAgIGFkZEJvcmRlcnMoKTsNCg0KICAgICAgICAvLyBBZGQgcGxheWVyIGhlYWRzIHdpdGggcGFnaW5hdGlvbg0KICAgICAgICBhZGRQbGF5ZXJIZWFkcygpOw0KDQogICAgICAgIC8vIEFkZCBib3R0b20gcm93IGJ1dHRvbnMNCiAgICAgICAgYWRkQm90dG9tUm93QnV0dG9ucygpOw0KDQogICAgICAgIC8vIFVwZGF0ZSBHVUkgSXRlbXMgYmFzZWQgb24gc2Vzc2lvbiBzdGF0ZSAoaWYgZXhpc3RzKQ0KICAgICAgICB1cGRhdGVTZXNzaW9uRGlzcGxheSgpOw0KDQogICAgICAgIC8vIEFERCBUSElTIExJTkUgLSBVcGRhdGUgcHJvdGVjdGVkIHNsb3RzIGFmdGVyIHJlZnJlc2hpbmcgY29udGVudA0KICAgICAgICB1cGRhdGVQcm90ZWN0ZWRTbG90cygpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCB1cGRhdGVQcm90ZWN0ZWRTbG90cygpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gcHJvdGVjdGlvbkNvbmZpZyA9IEJvdW50aWVzUGx1cy5nZXRJbnN0YW5jZSgpLmdldENyZWF0ZUdVSUNvbmZpZygpOw0KDQogICAgICAgIC8vIFJlbG9hZCB0aGUgYmFzaWMgcHJvdGVjdGlvbiAoYm9yZGVycywgYnV0dG9ucykNCiAgICAgICAgbG9hZFByb3RlY3RlZFNsb3RzKHByb3RlY3Rpb25Db25maWcpOw0KDQogICAgICAgIC8vIE5PVEU6IFRoaXMgd2lsbCBhdXRvbWF0aWNhbGx5IHByb3RlY3QgYWxsIGNvbnRlbnQgc2xvdHMgdG9vDQogICAgfQ0KDQogICAgLyoqDQogICAgICogVXBkYXRlcyB0aGUgR1VJIHRvIHJlZmxlY3QgdGhlIGN1cnJlbnQgc2Vzc2lvbiBzdGF0ZSAvLyBub3RlOiBSZWZyZXNoZXMgZHluYW1pYyBidXR0b25zIGFuZCBwbGF5ZXIgaGVhZHMgYmFzZWQgb24gYm91bnR5IHNlc3Npb24NCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgdXBkYXRlU2Vzc2lvbkRpc3BsYXkoKSB7DQogICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBzZXNzaW9uID0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLmdldE9yQ3JlYXRlU2Vzc2lvbihwbGF5ZXIpOw0KICAgICAgICBhZGRCb3R0b21Sb3dCdXR0b25zKCk7IC8vIFJlZnJlc2ggYWxsIGJvdHRvbSByb3cgYnV0dG9ucywgaW5jbHVkaW5nIHRvdGFsLWJvdW50eS12YWx1ZS1idXR0b24NCiAgICAgICAgYWRkUGxheWVySGVhZHMoKTsgLy8gUmVmcmVzaCBwbGF5ZXIgaGVhZHMgdG8gcmVmbGVjdCB0YXJnZXQgc2VsZWN0aW9uDQogICAgfQ0KDQogICAgLyoqDQogICAgICogQWRkcyBib3JkZXIgaXRlbXMgdG8gdGhlIEdVSSBiYXNlZCBvbiBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogUG9wdWxhdGVzIGJvcmRlciBzbG90cyB3aXRoIGNvbmZpZ3VyZWQgbWF0ZXJpYWwNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgYWRkQm9yZGVycygpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldENyZWF0ZUdVSUNvbmZpZygpOw0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBpZiAoIWNvbmZpZy5nZXRCb29sZWFuKCJib3JkZXIuZW5hYmxlZCIsIHRydWUpKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIENyZWF0ZUdVSV0gQm9yZGVycyBkaXNhYmxlZCBpbiBDcmVhdGVHVUkueW1sIik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgU3RyaW5nIG1hdGVyaWFsTmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoImJvcmRlci5tYXRlcmlhbCIsICJXSElURV9TVEFJTkVEX0dMQVNTX1BBTkUiKTsNCiAgICAgICAgSXRlbVN0YWNrIGJvcmRlckl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgIGlmIChib3JkZXJJdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5TVE9ORSAmJiAhbWF0ZXJpYWxOYW1lLmVxdWFsc0lnbm9yZUNhc2UoIldISVRFX1NUQUlORURfR0xBU1NfUEFORSIpKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBJbnZhbGlkIGJvcmRlciBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIGluIENyZWF0ZUdVSS55bWwsIHVzaW5nIFdISVRFX1NUQUlORURfR0xBU1NfUEFORSIpOw0KICAgICAgICAgICAgYm9yZGVySXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIldISVRFX1NUQUlORURfR0xBU1NfUEFORSIpOw0KICAgICAgICB9DQogICAgICAgIEl0ZW1NZXRhIGJvcmRlck1ldGEgPSBib3JkZXJJdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmIChib3JkZXJNZXRhICE9IG51bGwpIHsNCiAgICAgICAgICAgIGJvcmRlck1ldGEuc2V0RGlzcGxheU5hbWUoIiAiKTsNCiAgICAgICAgICAgIGlmIChjb25maWcuZ2V0Qm9vbGVhbigiYm9yZGVyLmVuY2hhbnRtZW50LWdsb3ciLCBmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICBib3JkZXJNZXRhLmFkZEVuY2hhbnQoRW5jaGFudG1lbnQuRFVSQUJJTElUWSwgMSwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgYm9yZGVyTWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBib3JkZXJJdGVtLnNldEl0ZW1NZXRhKGJvcmRlck1ldGEpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gRmFpbGVkIHRvIGdldCBJdGVtTWV0YSBmb3IgYm9yZGVyIGl0ZW0iKTsNCiAgICAgICAgfQ0KICAgICAgICBMaXN0PEludGVnZXI+IGJvcmRlclNsb3RzID0gY29uZmlnLmdldEludGVnZXJMaXN0KCJib3JkZXIuc2xvdHMiKTsNCiAgICAgICAgaWYgKGJvcmRlclNsb3RzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgYm9yZGVyU2xvdHMgPSBBcnJheXMuYXNMaXN0KDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDE3LCAxOCwgMjYsIDI3LCAzNSwgMzYsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksIDUwLCA1MSwgNTIsIDUzKTsNCiAgICAgICAgfQ0KICAgICAgICBmb3IgKGludCBzbG90IDogYm9yZGVyU2xvdHMpIHsNCiAgICAgICAgICAgIGlmIChzbG90ID49IDAgJiYgc2xvdCA8IDU0KSB7DQogICAgICAgICAgICAgICAgaW52ZW50b3J5LnNldEl0ZW0oc2xvdCwgYm9yZGVySXRlbS5jbG9uZSgpKTsNCiAgICAgICAgICAgICAgICBwcm90ZWN0ZWRTbG90cy5hZGQoc2xvdCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIEludmFsaWQgc2xvdCAiICsgc2xvdCArICIgaW4gQ3JlYXRlR1VJLnltbCBib3JkZXIgY29uZmlndXJhdGlvbiAobXVzdCBiZSAwLTUzKSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGFkZEN1c3RvbUZpbGxlckl0ZW1zKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQWRkcyBjdXN0b20gZmlsbGVyIGl0ZW1zIHRvIGVtcHR5IHNsb3RzIGJhc2VkIG9uIGNvbmZpZ3VyYXRpb24NCiAgICAgKiAvLyBub3RlOiBQb3B1bGF0ZXMgbm9uLXByb3RlY3RlZCBzbG90cyB3aXRoIGNvbmZpZ3VyYWJsZSBpdGVtcw0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBhZGRDdXN0b21GaWxsZXJJdGVtcygpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldENyZWF0ZUdVSUNvbmZpZygpOw0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBpZiAoIWNvbmZpZy5jb250YWlucygiQ3VzdG9tLUl0ZW1zIikpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBObyBDdXN0b20tSXRlbXMgc2VjdGlvbiBmb3VuZCBpbiBDcmVhdGVHVUkueW1sIik7DQogICAgICAgICAgICBhZGREZWZhdWx0RmlsbGVySXRlbSgpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGludCB0b3RhbEl0ZW1zID0gY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJDdXN0b20tSXRlbXMiKS5nZXRLZXlzKGZhbHNlKS5zaXplKCk7DQogICAgICAgIGludCBzdWNjZXNzZnVsSXRlbXMgPSAwOw0KICAgICAgICBMaXN0PFN0cmluZz4gZmFpbHVyZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCiAgICAgICAgZm9yIChTdHJpbmcgaXRlbUtleSA6IGNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiQ3VzdG9tLUl0ZW1zIikuZ2V0S2V5cyhmYWxzZSkpIHsNCiAgICAgICAgICAgIFN0cmluZyBwYXRoID0gIkN1c3RvbS1JdGVtcy4iICsgaXRlbUtleTsNCiAgICAgICAgICAgIFN0cmluZyBtYXRlcmlhbE5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKHBhdGggKyAiLk1hdGVyaWFsIiwgIldISVRFX1NUQUlORURfR0xBU1NfUEFORSIpOw0KICAgICAgICAgICAgSXRlbVN0YWNrIGZpbGxlckl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQogICAgICAgICAgICBpZiAoZmlsbGVySXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJXSElURV9TVEFJTkVEX0dMQVNTX1BBTkUiKSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIEludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyBmb3IgY3VzdG9tIGl0ZW0gJyIgKyBpdGVtS2V5ICsgIicgaW4gQ3JlYXRlR1VJLnltbCwgdXNpbmcgV0hJVEVfU1RBSU5FRF9HTEFTU19QQU5FIik7DQogICAgICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIiciOw0KICAgICAgICAgICAgICAgIGZpbGxlckl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJXSElURV9TVEFJTkVEX0dMQVNTX1BBTkUiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBmaWxsZXJJdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgICAgICBpZiAobWV0YSA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gRmFpbGVkIHRvIGdldCBJdGVtTWV0YSBmb3IgY3VzdG9tIGl0ZW0gIiArIGl0ZW1LZXkpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpLnBsYXllcihwbGF5ZXIpOw0KICAgICAgICAgICAgICAgIFN0cmluZyBuYW1lID0gY29uZmlnLmdldFN0cmluZyhwYXRoICsgIi5OYW1lIiwgIiAiKTsNCiAgICAgICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgUGxhY2Vob2xkZXJzLmFwcGx5KG5hbWUsIGNvbnRleHQpKSk7DQogICAgICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdChwYXRoICsgIi5Mb3JlIik7DQogICAgICAgICAgICAgICAgaWYgKCFsb3JlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgICAgICBtZXRhLnNldExvcmUoUGxhY2Vob2xkZXJzLmFwcGx5KGxvcmUsIGNvbnRleHQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5nZXRCb29sZWFuKHBhdGggKyAiLkVuY2hhbnRtZW50LUdsb3ciLCBmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgbWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0VOQ0hBTlRTKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZmlsbGVySXRlbS5zZXRJdGVtTWV0YShtZXRhKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIExpc3Q8SW50ZWdlcj4gc2xvdHMgPSBjb25maWcuZ2V0SW50ZWdlckxpc3QocGF0aCArICIuU2xvdHMiKTsNCiAgICAgICAgICAgIGlmIChzbG90cy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBObyBzbG90cyBkZWZpbmVkIGZvciBjdXN0b20gaXRlbSAnIiArIGl0ZW1LZXkgKyAiJyBpbiBDcmVhdGVHVUkueW1sLCBza2lwcGluZyIpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZChpdGVtS2V5ICsgIiBSZWFzb246IE5vIHNsb3RzIGRlZmluZWQiKTsNCiAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZvciAoaW50IHNsb3QgOiBzbG90cykgew0KICAgICAgICAgICAgICAgIGlmIChzbG90ID49IDAgJiYgc2xvdCA8IDU0KSB7DQogICAgICAgICAgICAgICAgICAgIEl0ZW1TdGFjayBleGlzdGluZ0l0ZW0gPSBpbnZlbnRvcnkuZ2V0SXRlbShzbG90KTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nSXRlbSA9PSBudWxsIHx8IGV4aXN0aW5nSXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmFpbHVyZVJlYXNvbiA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZW50b3J5LnNldEl0ZW0oc2xvdCwgZmlsbGVySXRlbS5jbG9uZSgpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWRTbG90cy5hZGQoc2xvdCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bEl0ZW1zKys7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZChpdGVtS2V5ICsgIiBSZWFzb246ICIgKyBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIFNsb3QgIiArIHNsb3QgKyAiIGZvciBjdXN0b20gaXRlbSAiICsgaXRlbUtleSArICIgaXMgYWxyZWFkeSBvY2N1cGllZCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZmFpbHVyZXMuYWRkKGl0ZW1LZXkgKyAiIFJlYXNvbjogU2xvdCAiICsgc2xvdCArICIgb2NjdXBpZWQiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIEludmFsaWQgc2xvdCAiICsgc2xvdCArICIgZm9yIGN1c3RvbSBpdGVtICciICsgaXRlbUtleSArICInIGluIENyZWF0ZUdVSS55bWwiKTsNCiAgICAgICAgICAgICAgICAgICAgZmFpbHVyZXMuYWRkKGl0ZW1LZXkgKyAiIFJlYXNvbjogSW52YWxpZCBzbG90ICIgKyBzbG90KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKHN1Y2Nlc3NmdWxJdGVtcyA9PSB0b3RhbEl0ZW1zKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIENyZWF0ZUdVSV0gQWxsIGN1c3RvbSBpdGVtcyBjcmVhdGVkIik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBTdHJpbmcgZmFpbHVyZU1lc3NhZ2UgPSAiW0RFQlVHIC0gQ3JlYXRlR1VJXSAiICsgc3VjY2Vzc2Z1bEl0ZW1zICsgIi8iICsgdG90YWxJdGVtcyArICIgY3VzdG9tIGl0ZW1zIGNyZWF0ZWQiOw0KICAgICAgICAgICAgaWYgKCFmYWlsdXJlcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBmYWlsdXJlTWVzc2FnZSArPSAiLCBmYWlsZWQgdG8gY3JlYXRlOiAiICsgU3RyaW5nLmpvaW4oIiwgIiwgZmFpbHVyZXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckZhaWx1cmUoIkNyZWF0ZUdVSV9jdXN0b21faXRlbXNfIiArIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpLCBmYWlsdXJlTWVzc2FnZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIGRlZmF1bHQgc3RhaW5lZCBnbGFzcyBwYW5lIGZpbGxlciB0byBlbXB0eSBzbG90cyAvLyBub3RlOiBGaWxscyBub24tcHJvdGVjdGVkIHNsb3RzIHdoZW4gY3VzdG9tIGl0ZW1zIGFyZSBtaXNzaW5nDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGFkZERlZmF1bHRGaWxsZXJJdGVtKCkgew0KICAgICAgICBJdGVtU3RhY2sgZmlsbGVySXRlbSA9IG5ldyBJdGVtU3RhY2soVmVyc2lvblV0aWxzLmdldFdoaXRlR2xhc3NQYW5lTWF0ZXJpYWwoKSk7DQogICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBmaWxsZXJJdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmIChtZXRhICE9IG51bGwpIHsNCiAgICAgICAgICAgIG1ldGEuc2V0RGlzcGxheU5hbWUoIiAiKTsNCiAgICAgICAgICAgIGZpbGxlckl0ZW0uc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgIH0NCiAgICAgICAgZm9yIChpbnQgc2xvdCA9IDA7IHNsb3QgPCA1NDsgc2xvdCsrKSB7DQogICAgICAgICAgICBpZiAoIXByb3RlY3RlZFNsb3RzLmNvbnRhaW5zKHNsb3QpKSB7DQogICAgICAgICAgICAgICAgSXRlbVN0YWNrIGV4aXN0aW5nSXRlbSA9IGludmVudG9yeS5nZXRJdGVtKHNsb3QpOw0KICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0l0ZW0gPT0gbnVsbCB8fCBleGlzdGluZ0l0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgICAgICAgICBpbnZlbnRvcnkuc2V0SXRlbShzbG90LCBmaWxsZXJJdGVtKTsNCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkU2xvdHMuYWRkKHNsb3QpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEFkZHMgcGxheWVyIGhlYWRzIHRvIHRoZSBHVUkNCiAgICAgKiAvLyBub3RlOiBQb3B1bGF0ZXMgdGhlIGludmVudG9yeSB3aXRoIHBsYXllciBoZWFkcyBmb3IgYm91bnR5IHRhcmdldCBzZWxlY3Rpb24NCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgYWRkUGxheWVySGVhZHMoKSB7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIGludCBzdGFydEluZGV4ID0gY3VycmVudFBhZ2UgKiBwbGF5ZXJIZWFkU2xvdHMubGVuZ3RoOw0KICAgICAgICBpbnQgZW5kSW5kZXggPSBNYXRoLm1pbihzdGFydEluZGV4ICsgcGxheWVySGVhZFNsb3RzLmxlbmd0aCwgYXZhaWxhYmxlUGxheWVycy5zaXplKCkpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Q3JlYXRlR1VJQ29uZmlnKCk7DQogICAgICAgIFN0cmluZyBjb25maWdQYXRoID0gInBsYXllci1oZWFkIjsNCiAgICAgICAgU3RyaW5nIG9ubGluZVN0YXR1c1BhdGggPSBjb25maWdQYXRoICsgIi5vbmxpbmUtc3RhdHVzIjsNCiAgICAgICAgU3RyaW5nIHNlbGVjdGVkTmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoY29uZmlnUGF0aCArICIubmFtZS5zZWxlY3RlZCIsICImNsK7ICZhJWJvdW50aWVzcGx1c190YXJnZXQlICY2wqsiKTsNCiAgICAgICAgU3RyaW5nIG9ubGluZU5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKGNvbmZpZ1BhdGggKyAiLm5hbWUub25saW5lIiwgIiZhJWJvdW50aWVzcGx1c190YXJnZXQlIik7DQogICAgICAgIFN0cmluZyBvZmZsaW5lTmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoY29uZmlnUGF0aCArICIubmFtZS5vZmZsaW5lIiwgIiY3JWJvdW50aWVzcGx1c190YXJnZXQlIik7DQogICAgICAgIExpc3Q8U3RyaW5nPiBzZWxlY3RlZExvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdChjb25maWdQYXRoICsgIi5sb3JlLnNlbGVjdGVkIik7DQogICAgICAgIExpc3Q8U3RyaW5nPiBub3RTZWxlY3RlZExvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdChjb25maWdQYXRoICsgIi5sb3JlLm5vdC1zZWxlY3RlZCIpOw0KICAgICAgICBib29sZWFuIHNlbGVjdGVkR2xvdyA9IGNvbmZpZy5nZXRCb29sZWFuKGNvbmZpZ1BhdGggKyAiLmVuY2hhbnRtZW50LWdsb3cuc2VsZWN0ZWQiLCB0cnVlKTsNCiAgICAgICAgYm9vbGVhbiBub3RTZWxlY3RlZEdsb3cgPSBjb25maWcuZ2V0Qm9vbGVhbihjb25maWdQYXRoICsgIi5lbmNoYW50bWVudC1nbG93Lm5vdC1zZWxlY3RlZCIsIGZhbHNlKTsNCiAgICAgICAgU3RyaW5nIG9ubGluZVN0YXR1cyA9IGNvbmZpZy5nZXRTdHJpbmcob25saW5lU3RhdHVzUGF0aCArICIub25saW5lIiwgIiY3U3RhdHVzOiAmYU9ubGluZSIpOw0KICAgICAgICBTdHJpbmcgb2ZmbGluZVN0YXR1cyA9IGNvbmZpZy5nZXRTdHJpbmcob25saW5lU3RhdHVzUGF0aCArICIub2ZmbGluZSIsICImN1N0YXR1czogJmNPZmZsaW5lIik7DQogICAgICAgIFN0cmluZyBsYXN0U2VlblN0YXR1cyA9IGNvbmZpZy5nZXRTdHJpbmcob25saW5lU3RhdHVzUGF0aCArICIubGFzdC1zZWVuIiwgIiY3TGFzdCBTZWVuOiAmZSVsYXN0X3NlZW4lIGFnbyIpOw0KDQogICAgICAgIGZvciAoaW50IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykgew0KICAgICAgICAgICAgaW50IHNsb3RJbmRleCA9IGkgLSBzdGFydEluZGV4Ow0KICAgICAgICAgICAgT2ZmbGluZVBsYXllciB0YXJnZXRQbGF5ZXIgPSBhdmFpbGFibGVQbGF5ZXJzLmdldChpKTsNCiAgICAgICAgICAgIEl0ZW1TdGFjayBoZWFkID0gU2t1bGxVdGlscy5jcmVhdGVWZXJzaW9uQXdhcmVQbGF5ZXJIZWFkKHRhcmdldFBsYXllcik7DQogICAgICAgICAgICBpZiAoIVZlcnNpb25VdGlscy5pc1BsYXllckhlYWQoaGVhZCkpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBGYWlsZWQgdG8gY3JlYXRlIFBMQVlFUl9IRUFEIGZvciBwbGF5ZXIgIiArIHRhcmdldFBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgU2t1bGxNZXRhIG1ldGEgPSAoU2t1bGxNZXRhKSBoZWFkLmdldEl0ZW1NZXRhKCk7DQogICAgICAgICAgICBpZiAobWV0YSA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gRmFpbGVkIHRvIGdldCBTa3VsbE1ldGEgZm9yIHBsYXllciAiICsgdGFyZ2V0UGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBib29sZWFuIGlzU2VsZWN0ZWQgPSBzZXNzaW9uLmhhc1RhcmdldCgpICYmIHNlc3Npb24uZ2V0VGFyZ2V0VVVJRCgpICE9IG51bGwgJiYNCiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5nZXRUYXJnZXRVVUlEKCkuZXF1YWxzKHRhcmdldFBsYXllci5nZXRVbmlxdWVJZCgpKTsNCiAgICAgICAgICAgIGludCBib3VudHlDb3VudCA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuZ2V0Qm91bnRpZXNPblRhcmdldCh0YXJnZXRQbGF5ZXIuZ2V0VW5pcXVlSWQoKSkuc2l6ZSgpOw0KICAgICAgICAgICAgU3RyaW5nIHN0YXR1czsNCiAgICAgICAgICAgIGlmICh0YXJnZXRQbGF5ZXIuaXNPbmxpbmUoKSkgew0KICAgICAgICAgICAgICAgIHN0YXR1cyA9IG9ubGluZVN0YXR1czsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgbG9uZyBsYXN0UGxheWVkID0gdGFyZ2V0UGxheWVyLmdldExhc3RQbGF5ZWQoKTsNCiAgICAgICAgICAgICAgICBzdGF0dXMgPSBsYXN0UGxheWVkID4gMCA/IGxhc3RTZWVuU3RhdHVzLnJlcGxhY2UoIiVsYXN0X3NlZW4lIiwgVGltZUZvcm1hdHRlci5mb3JtYXRUaW1lc3RhbXBUb0FnbyhsYXN0UGxheWVkKSkgOiBvZmZsaW5lU3RhdHVzOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAgICAgLnBsYXllcihwbGF5ZXIpIC8vIEVuc3VyZSBwbGF5ZXIgY29udGV4dCBmb3IgUGxhY2Vob2xkZXJBUEkNCiAgICAgICAgICAgICAgICAgICAgLnRhcmdldCh0YXJnZXRQbGF5ZXIuZ2V0VW5pcXVlSWQoKSkNCiAgICAgICAgICAgICAgICAgICAgLmJvdW50eUNvdW50KGJvdW50eUNvdW50KQ0KICAgICAgICAgICAgICAgICAgICAub25saW5lU3RhdHVzKHN0YXR1cyk7DQogICAgICAgICAgICBTdHJpbmcgbmFtZSA9IGlzU2VsZWN0ZWQgPyBzZWxlY3RlZE5hbWUgOiAodGFyZ2V0UGxheWVyLmlzT25saW5lKCkgPyBvbmxpbmVOYW1lIDogb2ZmbGluZU5hbWUpOw0KICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIFBsYWNlaG9sZGVycy5hcHBseShuYW1lLCBjb250ZXh0KSkpOw0KICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBpc1NlbGVjdGVkID8gc2VsZWN0ZWRMb3JlIDogbm90U2VsZWN0ZWRMb3JlOw0KICAgICAgICAgICAgbWV0YS5zZXRMb3JlKFBsYWNlaG9sZGVycy5hcHBseShsb3JlLCBjb250ZXh0KSk7DQogICAgICAgICAgICBpZiAoKGlzU2VsZWN0ZWQgJiYgc2VsZWN0ZWRHbG93KSB8fCAoIWlzU2VsZWN0ZWQgJiYgbm90U2VsZWN0ZWRHbG93KSkgew0KICAgICAgICAgICAgICAgIG1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0VOQ0hBTlRTKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGhlYWQuc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgICAgICBpbnZlbnRvcnkuc2V0SXRlbShwbGF5ZXJIZWFkU2xvdHNbc2xvdEluZGV4XSwgaGVhZCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBGb3JtYXRzIHRoZSB0aW1lIGRpZmZlcmVuY2UgaW50byBhIGh1bWFuLXJlYWRhYmxlIHN0cmluZw0KICAgICAqLw0KICAgIHByaXZhdGUgU3RyaW5nIGdldE9ubGluZVN0YXR1c1RleHQoT2ZmbGluZVBsYXllciB0YXJnZXRQbGF5ZXIsIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZykgew0KICAgICAgICBpZiAodGFyZ2V0UGxheWVyLmlzT25saW5lKCkpIHsNCiAgICAgICAgICAgIHJldHVybiBjb25maWcuZ2V0U3RyaW5nKCJwbGF5ZXItaGVhZC5vbmxpbmUtc3RhdHVzLm9ubGluZSIsICImN1N0YXR1czogJmFPbmxpbmUiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGxvbmcgbGFzdFBsYXllZCA9IHRhcmdldFBsYXllci5nZXRMYXN0UGxheWVkKCk7DQogICAgICAgICAgICBpZiAobGFzdFBsYXllZCA+IDApIHsNCiAgICAgICAgICAgICAgICBTdHJpbmcgbGFzdFNlZW5UaW1lID0gZm9ybWF0VGltZURpZmZlcmVuY2UoU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkgLSBsYXN0UGxheWVkKTsNCiAgICAgICAgICAgICAgICBTdHJpbmcgbGFzdFNlZW5Gb3JtYXQgPSBjb25maWcuZ2V0U3RyaW5nKCJwbGF5ZXItaGVhZC5vbmxpbmUtc3RhdHVzLmxhc3Qtc2VlbiIsICImN0xhc3QgU2VlbjogJmUlbGFzdF9zZWVuJSBhZ28iKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFNlZW5Gb3JtYXQucmVwbGFjZSgiJWxhc3Rfc2VlbiUiLCBsYXN0U2VlblRpbWUpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnLmdldFN0cmluZygicGxheWVyLWhlYWQub25saW5lLXN0YXR1cy5vZmZsaW5lIiwgIiY3U3RhdHVzOiAmY09mZmxpbmUiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiB0aGUgc2t1bGwgaGFzIGEgdmFsaWQgb3duZXIgKGZvciBza2luIHZlcmlmaWNhdGlvbikNCiAgICAgKi8NCiAgICBAU3VwcHJlc3NXYXJuaW5ncygiZGVwcmVjYXRpb24iKQ0KICAgIHByaXZhdGUgc3RhdGljIGJvb2xlYW4gaGFzVmFsaWRPd25lcihTa3VsbE1ldGEgc2t1bGxNZXRhLCBTdHJpbmcgZXhwZWN0ZWRPd25lcikgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgU3RyaW5nIG93bmVyID0gc2t1bGxNZXRhLmdldE93bmVyKCk7IC8vIExlZ2FjeSBBUEksIGF2YWlsYWJsZSBpbiAxLjguOA0KICAgICAgICAgICAgcmV0dXJuIG93bmVyICE9IG51bGwgJiYgb3duZXIuZXF1YWxzSWdub3JlQ2FzZShleHBlY3RlZE93bmVyKTsgLy8gVmFsaWRhdGVzIG93bmVyDQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEZhbGxiYWNrIG9uIGVycm9yDQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgc2VydmVyIHZlcnNpb24gaXMgYXQgbGVhc3QgdGhlIGdpdmVuIChtYWpvci5taW5vcikuDQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIGlzU2VydmVyVmVyc2lvbkF0TGVhc3QoaW50IHJlcXVpcmVkTWFqb3IsIGludCByZXF1aXJlZE1pbm9yKSB7DQogICAgICAgIFN0cmluZyB2ZXJzaW9uID0gQnVra2l0LmdldEJ1a2tpdFZlcnNpb24oKTsgLy8gZS5nLiAiMS4yMS40LVIwLjEtU05BUFNIT1QiDQogICAgICAgIFN0cmluZ1tdIHBhcnRzID0gdmVyc2lvbi5zcGxpdCgiXFwuIik7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBpbnQgc2VydmVyTWFqb3IgPSBJbnRlZ2VyLnBhcnNlSW50KHBhcnRzWzBdKTsNCiAgICAgICAgICAgIGludCBzZXJ2ZXJNaW5vciA9IEludGVnZXIucGFyc2VJbnQocGFydHNbMV0pOw0KICAgICAgICAgICAgaWYgKHNlcnZlck1ham9yID4gcmVxdWlyZWRNYWpvcikgcmV0dXJuIHRydWU7DQogICAgICAgICAgICBpZiAoc2VydmVyTWFqb3IgPCByZXF1aXJlZE1ham9yKSByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICByZXR1cm4gKHNlcnZlck1pbm9yID49IHJlcXVpcmVkTWlub3IpOw0KICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgLy8gSWYgYW55dGhpbmcgdW5leHBlY3RlZCBoYXBwZW5zLCBhc3N1bWUgbW9kZXJuIChzbyB3ZSBnbyBkb3duIHRoZSAxLjEzKyBwYXRoKS4NCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSW5qZWN0cyB0aGUgT2ZmbGluZVBsYXllcidzIGludGVybmFsIEdhbWVQcm9maWxlICh3aXRoIHNraW4pIGludG8gc2t1bGxNZXRhIHZpYSByZWZsZWN0aW9uLg0KICAgICAqIFRoaXMgaXMgb25seSB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgc2V0T3duaW5nUGxheWVyIG9yIHNldE93bmVyIGRpZG4ndCBleGlzdCBvciBmYWlsZWQuDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGluamVjdEdhbWVQcm9maWxlVmlhUmVmbGVjdGlvbihTa3VsbE1ldGEgc2t1bGxNZXRhLCBPZmZsaW5lUGxheWVyIHRhcmdldCkgew0KICAgICAgICBCb3VudGllc1BsdXMgcGx1Z2luID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCk7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICAvLyBUcnkgdG8gZ2V0IHRoZSBHYW1lUHJvZmlsZSBmcm9tIHRoZSBPZmZsaW5lUGxheWVyDQogICAgICAgICAgICBPYmplY3QgcHJvZmlsZSA9IG51bGw7DQoNCiAgICAgICAgICAgIC8vIFRyeSB0byBhY2Nlc3MgdGhlICdwcm9maWxlJyBmaWVsZCBvbiBDcmFmdE9mZmxpbmVQbGF5ZXINCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgRmllbGQgcHJvZmlsZUZpZWxkID0gdGFyZ2V0LmdldENsYXNzKCkuZ2V0RGVjbGFyZWRGaWVsZCgicHJvZmlsZSIpOw0KICAgICAgICAgICAgICAgIHByb2ZpbGVGaWVsZC5zZXRBY2Nlc3NpYmxlKHRydWUpOw0KICAgICAgICAgICAgICAgIHByb2ZpbGUgPSBwcm9maWxlRmllbGQuZ2V0KHRhcmdldCk7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIltERUJVRyAtIENyZWF0ZUdVSV0gR290IEdhbWVQcm9maWxlIGZyb20gT2ZmbGluZVBsYXllciBmb3IgIiArIHRhcmdldC5nZXROYW1lKCkpOw0KICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBDb3VsZCBub3QgZ2V0IEdhbWVQcm9maWxlIGZyb20gT2ZmbGluZVBsYXllciBmb3IgIiArIHRhcmdldC5nZXROYW1lKCkgKyAiOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAocHJvZmlsZSA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gTm8gR2FtZVByb2ZpbGUgYXZhaWxhYmxlIGZvciAiICsgdGFyZ2V0LmdldE5hbWUoKSArICIsIHNraXBwaW5nIHJlZmxlY3Rpb24gaW5qZWN0aW9uIik7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBOb3cgaW5qZWN0IHRoYXQgR2FtZVByb2ZpbGUgaW50byB0aGUgU2t1bGxNZXRhDQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIC8vIFRyeSBzZXRQcm9maWxlIG1ldGhvZCBmaXJzdCAobmV3ZXIgdmVyc2lvbnMpDQogICAgICAgICAgICAgICAgTWV0aG9kIHNldHRlciA9IHNrdWxsTWV0YS5nZXRDbGFzcygpLmdldERlY2xhcmVkTWV0aG9kKCJzZXRQcm9maWxlIiwgcHJvZmlsZS5nZXRDbGFzcygpKTsNCiAgICAgICAgICAgICAgICBzZXR0ZXIuc2V0QWNjZXNzaWJsZSh0cnVlKTsNCiAgICAgICAgICAgICAgICBzZXR0ZXIuaW52b2tlKHNrdWxsTWV0YSwgcHJvZmlsZSk7DQogICAgICAgICAgICB9IGNhdGNoIChOb1N1Y2hNZXRob2RFeGNlcHRpb24gbnNtZSkgew0KICAgICAgICAgICAgICAgIC8vIEZhbGxiYWNrOiBzZXQgdGhlIHByaXZhdGUgInByb2ZpbGUiIGZpZWxkIGRpcmVjdGx5DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgRmllbGQgcHJvZmlsZUZpZWxkID0gc2t1bGxNZXRhLmdldENsYXNzKCkuZ2V0RGVjbGFyZWRGaWVsZCgicHJvZmlsZSIpOw0KICAgICAgICAgICAgICAgICAgICBwcm9maWxlRmllbGQuc2V0QWNjZXNzaWJsZSh0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgcHJvZmlsZUZpZWxkLnNldChza3VsbE1ldGEsIHByb2ZpbGUpOw0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIEZhaWxlZCB0byBpbmplY3QgR2FtZVByb2ZpbGUgZm9yICIgKyB0YXJnZXQuZ2V0TmFtZSgpICsgIjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKFRocm93YWJsZSB0KSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBSZWZsZWN0aW9uIGluamVjdGlvbiBmYWlsZWQgZm9yICIgKyB0YXJnZXQuZ2V0TmFtZSgpICsgIjogIiArIHQuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgU3RyaW5nIGZvcm1hdFRpbWVEaWZmZXJlbmNlKGxvbmcgdGltZURpZmYpIHsNCiAgICAgICAgcmV0dXJuIFRpbWVGb3JtYXR0ZXIuZm9ybWF0VGltZUFnbyh0aW1lRGlmZik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQWRkcyBib3R0b20gcm93IGJ1dHRvbnMgdG8gdGhlIEdVSQ0KICAgICAqIC8vIG5vdGU6IFBsYWNlcyBjb25maWd1cmFibGUgYnV0dG9ucyBsaWtlIGNvbmZpcm0sIGNhbmNlbCwgYW5kIGFkZC1pdGVtcw0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBhZGRCb3R0b21Sb3dCdXR0b25zKCkgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Q3JlYXRlR1VJQ29uZmlnKCk7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBzZXNzaW9uID0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLmdldFNlc3Npb24ocGxheWVyKTsNCiAgICAgICAgYm9vbGVhbiBoYXNTZXNzaW9uID0gc2Vzc2lvbiAhPSBudWxsICYmIHNlc3Npb24uaGFzQ2hhbmdlcygpOw0KDQogICAgICAgIC8vIENsZWFyIGFueSBwcmV2aW91cyBidXR0b24gZmFpbHVyZXMNCiAgICAgICAgaWYgKHNlc3Npb24gIT0gbnVsbCkgew0KICAgICAgICAgICAgc2Vzc2lvbi5jbGVhckJ1dHRvbkZhaWx1cmVzKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDYWxjdWxhdGUgc2Vzc2lvbiB2YWx1ZXMgZm9yIHBsYWNlaG9sZGVycw0KICAgICAgICBkb3VibGUgbW9uZXlWYWx1ZSA9IHNlc3Npb24gIT0gbnVsbCA/IHNlc3Npb24uZ2V0TW9uZXkoKSA6IDAuMDsNCiAgICAgICAgaW50IGV4cFZhbHVlID0gc2Vzc2lvbiAhPSBudWxsID8gc2Vzc2lvbi5nZXRFeHBlcmllbmNlKCkgOiAwOw0KICAgICAgICBTdHJpbmcgdGltZVZhbHVlID0gc2Vzc2lvbiAhPSBudWxsID8gc2Vzc2lvbi5nZXRGb3JtYXR0ZWRUaW1lKCkgOiAiRGVmYXVsdCI7DQogICAgICAgIExpc3Q8SXRlbVN0YWNrPiBpdGVtcyA9IHNlc3Npb24gIT0gbnVsbCA/IHNlc3Npb24uZ2V0SXRlbVJld2FyZHMoKSA6IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICBpbnQgaXRlbUNvdW50ID0gaXRlbXMuc2l6ZSgpOw0KICAgICAgICBkb3VibGUgaXRlbVZhbHVlID0gaXRlbXMuc3RyZWFtKCkubWFwVG9Eb3VibGUoaXRlbSAtPiBwbHVnaW4uZ2V0SXRlbVZhbHVlQ2FsY3VsYXRvcigpLmNhbGN1bGF0ZUl0ZW1WYWx1ZShpdGVtKSkuc3VtKCk7DQogICAgICAgIGRvdWJsZSB0b3RhbFZhbHVlID0gbW9uZXlWYWx1ZSArIGl0ZW1WYWx1ZTsNCiAgICAgICAgU3RyaW5nIGR1cmF0aW9uID0gdGltZVZhbHVlICE9IG51bGwgJiYgIXRpbWVWYWx1ZS5lcXVhbHMoIk5vdCBzZXQiKSAmJiAhdGltZVZhbHVlLmlzRW1wdHkoKSA/IHRpbWVWYWx1ZSA6ICJEZWZhdWx0IjsNCg0KICAgICAgICAvLyBMaXN0IG9mIGFsbCBjb25maWd1cmFibGUgYnV0dG9ucyB3aXRoIHRoZWlyIGRlZmF1bHQgc2xvdHMNCiAgICAgICAgTWFwPFN0cmluZywgSW50ZWdlcj4gYnV0dG9uRGVmYXVsdHMgPSBuZXcgSGFzaE1hcDw+KCk7DQogICAgICAgIGJ1dHRvbkRlZmF1bHRzLnB1dChoYXNTZXNzaW9uID8gImNvbmZpcm0tYnV0dG9uIiA6ICJjb25maXJtLWJ1dHRvbi1maWxsZXIiLCA1Mik7DQogICAgICAgIGJ1dHRvbkRlZmF1bHRzLnB1dCgiY2FuY2VsLWJ1dHRvbiIsIDQ2KTsNCiAgICAgICAgYnV0dG9uRGVmYXVsdHMucHV0KCJhZGQtaXRlbXMtYnV0dG9uIiwgNTApOw0KICAgICAgICBidXR0b25EZWZhdWx0cy5wdXQoImFkZC1tb25leS1idXR0b24iLCA0OCk7DQogICAgICAgIGJ1dHRvbkRlZmF1bHRzLnB1dCgidG90YWwtYm91bnR5LXZhbHVlLWJ1dHRvbiIsIDQ5KTsNCiAgICAgICAgYnV0dG9uRGVmYXVsdHMucHV0KCJhZGQtZXhwZXJpZW5jZS1idXR0b24iLCA0Nyk7DQogICAgICAgIGJ1dHRvbkRlZmF1bHRzLnB1dCgiYWRkLXRpbWUtYnV0dG9uIiwgNTEpOw0KDQogICAgICAgIGludCB0b3RhbEJ1dHRvbnMgPSBidXR0b25EZWZhdWx0cy5zaXplKCk7DQogICAgICAgIGludCBzdWNjZXNzZnVsQnV0dG9ucyA9IDA7DQoNCiAgICAgICAgLy8gQ3JlYXRlIGVhY2ggY29uZmlndXJhYmxlIGJ1dHRvbg0KICAgICAgICBmb3IgKE1hcC5FbnRyeTxTdHJpbmcsIEludGVnZXI+IGVudHJ5IDogYnV0dG9uRGVmYXVsdHMuZW50cnlTZXQoKSkgew0KICAgICAgICAgICAgU3RyaW5nIGJ1dHRvbk5hbWUgPSBlbnRyeS5nZXRLZXkoKTsNCiAgICAgICAgICAgIGludCBkZWZhdWx0U2xvdCA9IGVudHJ5LmdldFZhbHVlKCk7DQogICAgICAgICAgICBpbnQgc2xvdCA9IGNvbmZpZy5nZXRJbnQoYnV0dG9uTmFtZS5lcXVhbHMoImNvbmZpcm0tYnV0dG9uLWZpbGxlciIpID8gImNvbmZpcm0tYnV0dG9uLnNsb3QiIDogYnV0dG9uTmFtZSArICIuc2xvdCIsIGRlZmF1bHRTbG90KTsNCg0KICAgICAgICAgICAgaWYgKHNsb3QgPCAwIHx8IHNsb3QgPj0gaW52ZW50b3J5LmdldFNpemUoKSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIEludmFsaWQgc2xvdCAiICsgc2xvdCArICIgZm9yIGJ1dHRvbiAiICsgYnV0dG9uTmFtZSArICIgaW4gQ3JlYXRlR1VJLnltbCIpOw0KICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5hZGRCdXR0b25GYWlsdXJlKGJ1dHRvbk5hbWUsICJJbnZhbGlkIHNsb3QgIiArIHNsb3QpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSXRlbVN0YWNrIGJ1dHRvbjsNCiAgICAgICAgICAgIC8vIEhhbmRsZSBjYW5jZWwgYnV0dG9uOiB1c2Ugbm8tc2Vzc2lvbiBjb25maWcgaWYgbm8gYWN0aXZlIHNlc3Npb24NCiAgICAgICAgICAgIGlmIChidXR0b25OYW1lLmVxdWFscygiY2FuY2VsLWJ1dHRvbiIpICYmICFoYXNTZXNzaW9uKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIGNvbmZpZ1BhdGggPSAiY2FuY2VsLWJ1dHRvbi5uby1zZXNzaW9uIjsNCiAgICAgICAgICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gY29uZmlnLmdldFN0cmluZyhjb25maWdQYXRoICsgIi5tYXRlcmlhbCIsICJSRURfRFlFIik7DQogICAgICAgICAgICAgICAgYnV0dG9uID0gVmVyc2lvblV0aWxzLmdldFhNYXRlcmlhbEl0ZW1TdGFjayhtYXRlcmlhbE5hbWUpOw0KICAgICAgICAgICAgICAgIGlmIChidXR0b24uZ2V0VHlwZSgpID09IE1hdGVyaWFsLlNUT05FICYmICFtYXRlcmlhbE5hbWUuZXF1YWxzSWdub3JlQ2FzZSgiU1RPTkUiKSkgew0KICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIicgZm9yIGNhbmNlbC1idXR0b24ubm8tc2Vzc2lvbiwgdXNpbmcgUkVEX0RZRSIpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbiAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLmFkZEJ1dHRvbkZhaWx1cmUoYnV0dG9uTmFtZSwgIkludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIlJFRF9EWUUiKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBJdGVtTWV0YSBtZXRhID0gYnV0dG9uLmdldEl0ZW1NZXRhKCk7DQogICAgICAgICAgICAgICAgaWYgKG1ldGEgPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIGZvciBjYW5jZWwtYnV0dG9uLm5vLXNlc3Npb24iKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb24gIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5hZGRCdXR0b25GYWlsdXJlKGJ1dHRvbk5hbWUsICJGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaW52ZW50b3J5LnNldEl0ZW0oc2xvdCwgYnV0dG9uKTsNCiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bEJ1dHRvbnMrKzsNCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkU2xvdHMuYWRkKHNsb3QpOw0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnBsYXllcihwbGF5ZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAuYm91bnR5Q291bnQoMCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5tb25leVZhbHVlKG1vbmV5VmFsdWUpDQogICAgICAgICAgICAgICAgICAgICAgICAuZXhwVmFsdWUoZXhwVmFsdWUpDQogICAgICAgICAgICAgICAgICAgICAgICAudGltZVZhbHVlKGR1cmF0aW9uKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLml0ZW1Db3VudChpdGVtQ291bnQpDQogICAgICAgICAgICAgICAgICAgICAgICAuaXRlbVZhbHVlKGl0ZW1WYWx1ZSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC50YXhSYXRlKHBsdWdpbi5nZXRDb25maWcoKS5nZXREb3VibGUoImJvdW50eS1wbGFjZS10YXgtcmF0ZSIsIDAuMCkpDQogICAgICAgICAgICAgICAgICAgICAgICAudGF4QW1vdW50KG1vbmV5VmFsdWUgKiBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0RG91YmxlKCJib3VudHktcGxhY2UtdGF4LXJhdGUiLCAwLjApKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLm1vbmV5TGluZSgiJjdNb25leTogJmEiICsgQ3VycmVuY3lVdGlsLmZvcm1hdE1vbmV5KG1vbmV5VmFsdWUpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmV4cGVyaWVuY2VMaW5lKCImN0V4cGVyaWVuY2U6ICZlIiArIChleHBWYWx1ZSA9PSAwID8gIjAgWFAgTGV2ZWxzIiA6IGV4cFZhbHVlICsgIiBYUCBMZXZlbCIgKyAoZXhwVmFsdWUgPiAxID8gInMiIDogIiIpKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC50b3RhbEJvdW50eUFtb3VudCh0b3RhbFZhbHVlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmN1cnJlbnRQYWdlKDApDQogICAgICAgICAgICAgICAgICAgICAgICAudG90YWxQYWdlcygxKTsNCg0KICAgICAgICAgICAgICAgIFN0cmluZyBuYW1lID0gY29uZmlnLmdldFN0cmluZyhjb25maWdQYXRoICsgIi5uYW1lIiwgIiZjJmxCYWNrIik7DQogICAgICAgICAgICAgICAgaWYgKG5hbWUgPT0gbnVsbCB8fCBuYW1lLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBJbnZhbGlkIG9yIGVtcHR5IG5hbWUgYXQgIiArIGNvbmZpZ1BhdGggKyAiLm5hbWUsIHVzaW5nIGRlZmF1bHQiKTsNCiAgICAgICAgICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBwbHVnaW4uZ2V0TWVzc2FnZXNDb25maWcoKTsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHdhcm5pbmdNZXNzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJtaXNzaW5nLWNvbmZpZyIsICJNZXNzYWdlIG5vdCBmb3VuZDogJXBhdGglIik7DQogICAgICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHdhcm5pbmdNZXNzYWdlLnJlcGxhY2UoIiVwYXRoJSIsIGNvbmZpZ1BhdGggKyAiLm5hbWUiKSkpOw0KICAgICAgICAgICAgICAgICAgICBuYW1lID0gIiZjJmxCYWNrIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIFBsYWNlaG9sZGVycy5hcHBseShuYW1lLCBjb250ZXh0KSkpOw0KDQogICAgICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdChjb25maWdQYXRoICsgIi5sb3JlIik7DQogICAgICAgICAgICAgICAgaWYgKGxvcmUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIEVtcHR5IGxvcmUgYXQgIiArIGNvbmZpZ1BhdGggKyAiLmxvcmUsIHVzaW5nIGRlZmF1bHQiKTsNCiAgICAgICAgICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBwbHVnaW4uZ2V0TWVzc2FnZXNDb25maWcoKTsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHdhcm5pbmdNZXNzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJtaXNzaW5nLWNvbmZpZyIsICJNZXNzYWdlIG5vdCBmb3VuZDogJXBhdGglIik7DQogICAgICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHdhcm5pbmdNZXNzYWdlLnJlcGxhY2UoIiVwYXRoJSIsIGNvbmZpZ1BhdGggKyAiLmxvcmUiKSkpOw0KICAgICAgICAgICAgICAgICAgICBsb3JlID0gQXJyYXlzLmFzTGlzdCgiJjdDbGljayB0byByZXR1cm4gdG8gQm91bnR5IEdVSSIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBtZXRhLnNldExvcmUoUGxhY2Vob2xkZXJzLmFwcGx5KGxvcmUsIGNvbnRleHQpKTsNCg0KICAgICAgICAgICAgICAgIGJvb2xlYW4gZW5jaGFudG1lbnRHbG93ID0gY29uZmlnLmdldEJvb2xlYW4oY29uZmlnUGF0aCArICIuZW5jaGFudG1lbnQtZ2xvdyIsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICBpZiAoZW5jaGFudG1lbnRHbG93KSB7DQogICAgICAgICAgICAgICAgICAgIG1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChWZXJzaW9uVXRpbHMuaXNQb3N0MTkoKSkgew0KICAgICAgICAgICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0FUVFJJQlVURVMpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBidXR0b24uc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAvLyBIYW5kbGUgY29uZmlybSBidXR0b24gZmlsbGVyOiB1c2UgY29uZmlybS1idXR0b24tZmlsbGVyIGlmIG5vIHNlc3Npb24NCiAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbk5hbWUuZXF1YWxzKCJjb25maXJtLWJ1dHRvbi1maWxsZXIiKSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBjb25maWdQYXRoID0gImNvbmZpcm0tYnV0dG9uLmNvbmZpcm0tYnV0dG9uLWZpbGxlciI7DQogICAgICAgICAgICAgICAgU3RyaW5nIG1hdGVyaWFsTmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoY29uZmlnUGF0aCArICIubWF0ZXJpYWwiLCAiV0hJVEVfU1RBSU5FRF9HTEFTU19QQU5FIik7DQogICAgICAgICAgICAgICAgYnV0dG9uID0gVmVyc2lvblV0aWxzLmdldFhNYXRlcmlhbEl0ZW1TdGFjayhtYXRlcmlhbE5hbWUpOw0KICAgICAgICAgICAgICAgIGlmIChidXR0b24uZ2V0VHlwZSgpID09IE1hdGVyaWFsLlNUT05FICYmICFtYXRlcmlhbE5hbWUuZXF1YWxzSWdub3JlQ2FzZSgiU1RPTkUiKSkgew0KICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIicgZm9yIGNvbmZpcm0tYnV0dG9uLWZpbGxlciwgdXNpbmcgV0hJVEVfU1RBSU5FRF9HTEFTU19QQU5FIik7DQogICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uYWRkQnV0dG9uRmFpbHVyZShidXR0b25OYW1lLCAiSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gVmVyc2lvblV0aWxzLmdldFhNYXRlcmlhbEl0ZW1TdGFjaygiV0hJVEVfU1RBSU5FRF9HTEFTU19QQU5FIik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgSXRlbU1ldGEgbWV0YSA9IGJ1dHRvbi5nZXRJdGVtTWV0YSgpOw0KICAgICAgICAgICAgICAgIGlmIChtZXRhID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gRmFpbGVkIHRvIGdldCBJdGVtTWV0YSBmb3IgY29uZmlybS1idXR0b24tZmlsbGVyIik7DQogICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uYWRkQnV0dG9uRmFpbHVyZShidXR0b25OYW1lLCAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKHNsb3QsIGJ1dHRvbik7DQogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxCdXR0b25zKys7DQogICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZFNsb3RzLmFkZChzbG90KTsNCiAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgU3RyaW5nIG5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKGNvbmZpZ1BhdGggKyAiLm5hbWUiLCAiICIpOw0KICAgICAgICAgICAgICAgIGlmIChuYW1lID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gSW52YWxpZCBuYW1lIGF0ICIgKyBjb25maWdQYXRoICsgIi5uYW1lLCB1c2luZyBkZWZhdWx0Iik7DQogICAgICAgICAgICAgICAgICAgIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnID0gcGx1Z2luLmdldE1lc3NhZ2VzQ29uZmlnKCk7DQogICAgICAgICAgICAgICAgICAgIFN0cmluZyB3YXJuaW5nTWVzc2FnZSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygibWlzc2luZy1jb25maWciLCAiTWVzc2FnZSBub3QgZm91bmQ6ICVwYXRoJSIpOw0KICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCB3YXJuaW5nTWVzc2FnZS5yZXBsYWNlKCIlcGF0aCUiLCBjb25maWdQYXRoICsgIi5uYW1lIikpKTsNCiAgICAgICAgICAgICAgICAgICAgbmFtZSA9ICIgIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIG5hbWUpKTsNCg0KICAgICAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gY29uZmlnLmdldFN0cmluZ0xpc3QoY29uZmlnUGF0aCArICIubG9yZSIpOw0KICAgICAgICAgICAgICAgIGlmIChsb3JlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgICAgICBsb3JlID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIG1ldGEuc2V0TG9yZShsb3JlKTsNCg0KICAgICAgICAgICAgICAgIGJvb2xlYW4gZW5jaGFudG1lbnRHbG93ID0gY29uZmlnLmdldEJvb2xlYW4oY29uZmlnUGF0aCArICIuZW5jaGFudG1lbnQtZ2xvdyIsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICBpZiAoZW5jaGFudG1lbnRHbG93KSB7DQogICAgICAgICAgICAgICAgICAgIG1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChWZXJzaW9uVXRpbHMuaXNQb3N0MTkoKSkgew0KICAgICAgICAgICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0FUVFJJQlVURVMpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBidXR0b24uc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAvLyBIYW5kbGUgc3BlY2lhbCBidXR0b24gdHlwZXMNCiAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbk5hbWUuZXF1YWxzKCJhZGQtaXRlbXMtYnV0dG9uIikpIHsNCiAgICAgICAgICAgICAgICBidXR0b24gPSBjcmVhdGVBZGRJdGVtc0J1dHRvbihjb25maWcsIHNlc3Npb24sIG1vbmV5VmFsdWUsIGV4cFZhbHVlLCB0aW1lVmFsdWUsDQogICAgICAgICAgICAgICAgICAgICAgICBpdGVtQ291bnQsIGl0ZW1WYWx1ZSwgdG90YWxWYWx1ZSwgZHVyYXRpb24pOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBidXR0b24gPSBjcmVhdGVDb25maWd1cmFibGVCdXR0b24oYnV0dG9uTmFtZSwgY29uZmlnLCBzZXNzaW9uLCBtb25leVZhbHVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgZXhwVmFsdWUsIHRpbWVWYWx1ZSwgaXRlbUNvdW50LCBpdGVtVmFsdWUsIHRvdGFsVmFsdWUsIGR1cmF0aW9uKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGJ1dHRvbiAhPSBudWxsICYmIGJ1dHRvbi5nZXRUeXBlKCkgIT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICAgICAgaW52ZW50b3J5LnNldEl0ZW0oc2xvdCwgYnV0dG9uKTsNCiAgICAgICAgICAgICAgICBzdWNjZXNzZnVsQnV0dG9ucysrOw0KICAgICAgICAgICAgICAgIHByb3RlY3RlZFNsb3RzLmFkZChzbG90KTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gRmFpbGVkIHRvIHBsYWNlIGJ1dHRvbiAiICsgYnV0dG9uTmFtZSArICIgaW4gc2xvdCAiICsgc2xvdCk7DQogICAgICAgICAgICAgICAgaWYgKHNlc3Npb24gIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLmFkZEJ1dHRvbkZhaWx1cmUoYnV0dG9uTmFtZSwgIkZhaWxlZCB0byBjcmVhdGUgYnV0dG9uIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gTG9nIGNvbnNvbGlkYXRlZCBkZWJ1ZyBtZXNzYWdlDQogICAgICAgIGlmIChzdWNjZXNzZnVsQnV0dG9ucyA9PSB0b3RhbEJ1dHRvbnMpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBBbGwgYnV0dG9ucyBjcmVhdGVkIik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBTdHJpbmdCdWlsZGVyIGZhaWx1cmVNZXNzYWdlID0gbmV3IFN0cmluZ0J1aWxkZXIoIltERUJVRyAtIENyZWF0ZUdVSV0gIiArIHN1Y2Nlc3NmdWxCdXR0b25zICsgIi8iICsgdG90YWxCdXR0b25zICsgIiBidXR0b25zIGNyZWF0ZWQiKTsNCiAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBmYWlsdXJlcyA9IHNlc3Npb24gIT0gbnVsbCA/IHNlc3Npb24uZ2V0QnV0dG9uRmFpbHVyZXMoKSA6IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgaWYgKCFmYWlsdXJlcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBmYWlsdXJlTWVzc2FnZS5hcHBlbmQoIiwgZmFpbGVkIHRvIGNyZWF0ZTogIikuYXBwZW5kKFN0cmluZy5qb2luKCIsICIsIGZhaWx1cmVzKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRmFpbHVyZSgiQ3JlYXRlR1VJX2J1dHRvbnNfIiArIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpLCBmYWlsdXJlTWVzc2FnZS50b1N0cmluZygpKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgYSBjb25maWd1cmFibGUgYnV0dG9uIHdpdGggZnVsbCBwbGFjZWhvbGRlciBzdXBwb3J0DQogICAgICogLy8gbm90ZTogR2VuZXJhdGVzIEdVSSBidXR0b24gd2l0aCBjdXN0b21pemFibGUgYXBwZWFyYW5jZQ0KICAgICAqLw0KICAgIHByaXZhdGUgSXRlbVN0YWNrIGNyZWF0ZUNvbmZpZ3VyYWJsZUJ1dHRvbihTdHJpbmcgYnV0dG9uTmFtZSwgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnLCBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIG1vbmV5VmFsdWUsIGludCBleHBWYWx1ZSwgU3RyaW5nIHRpbWVWYWx1ZSwgaW50IGl0ZW1Db3VudCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGl0ZW1WYWx1ZSwgZG91YmxlIHRvdGFsVmFsdWUsIFN0cmluZyBkdXJhdGlvbikgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCkuZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIEl0ZW1TdGFjayBidXR0b24gPSBudWxsOw0KICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQoNCiAgICAgICAgLy8gSGFuZGxlIHRvdGFsLWJvdW50eS12YWx1ZS1idXR0b24gc3BlY2lhbGx5IHdoZW4gYSB0YXJnZXQgaXMgc2VsZWN0ZWQNCiAgICAgICAgaWYgKGJ1dHRvbk5hbWUuZXF1YWxzKCJ0b3RhbC1ib3VudHktdmFsdWUtYnV0dG9uIikgJiYgc2Vzc2lvbiAhPSBudWxsICYmIHNlc3Npb24uZ2V0VGFyZ2V0VVVJRCgpICE9IG51bGwpIHsNCiAgICAgICAgICAgIFN0cmluZyBwYXRoID0gYnV0dG9uTmFtZSArICIudGFyZ2V0LXNlbGVjdGVkIjsNCiAgICAgICAgICAgIE9mZmxpbmVQbGF5ZXIgdGFyZ2V0UGxheWVyID0gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIoc2Vzc2lvbi5nZXRUYXJnZXRVVUlEKCkpOw0KICAgICAgICAgICAgU3RyaW5nIHRhcmdldE5hbWUgPSB0YXJnZXRQbGF5ZXIuZ2V0TmFtZSgpICE9IG51bGwgPyB0YXJnZXRQbGF5ZXIuZ2V0TmFtZSgpIDogIlVua25vd24iOw0KICAgICAgICAgICAgU3RyaW5nIG1hdGVyaWFsTmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcocGF0aCArICIubWF0ZXJpYWwiLCAiUExBWUVSX0hFQUQiKTsNCiAgICAgICAgICAgIGlmICghY29uZmlnLmNvbnRhaW5zKHBhdGgpKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gTWlzc2luZyAndGFyZ2V0LXNlbGVjdGVkJyBzZWN0aW9uIGZvciAiICsgYnV0dG9uTmFtZSArICIgaW4gQ3JlYXRlR1VJLnltbCwgdXNpbmcgZGVmYXVsdCBQTEFZRVJfSEVBRCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgYnV0dG9uID0gU2t1bGxVdGlscy5jcmVhdGVWZXJzaW9uQXdhcmVQbGF5ZXJIZWFkKHRhcmdldFBsYXllcik7DQogICAgICAgICAgICBpZiAoYnV0dG9uID09IG51bGwgfHwgIVZlcnNpb25VdGlscy5pc1BsYXllckhlYWQoYnV0dG9uKSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIEZhaWxlZCB0byBjcmVhdGUgcGxheWVyIGhlYWQgZm9yICIgKyB0YXJnZXROYW1lICsgIiwgdXNpbmcgZmFsbGJhY2sgbWF0ZXJpYWwiKTsNCiAgICAgICAgICAgICAgICBidXR0b24gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJTVE9ORSIpKSB7DQogICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIicgZm9yICIgKyBidXR0b25OYW1lICsgIi50YXJnZXQtc2VsZWN0ZWQsIHVzaW5nIFBBUEVSIik7DQogICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIlBBUEVSIik7DQogICAgICAgICAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gY29uZmlnLmdldFN0cmluZyhidXR0b25OYW1lICsgIi5tYXRlcmlhbCIsICJTVE9ORSIpOw0KICAgICAgICAgICAgYnV0dG9uID0gVmVyc2lvblV0aWxzLmdldFhNYXRlcmlhbEl0ZW1TdGFjayhtYXRlcmlhbE5hbWUpOw0KICAgICAgICAgICAgaWYgKGJ1dHRvbi5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJTVE9ORSIpKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIGZvciAiICsgYnV0dG9uTmFtZSArICIsIHVzaW5nIFNUT05FIik7DQogICAgICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIiciOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGJ1dHRvbiA9PSBudWxsKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBGYWlsZWQgdG8gY3JlYXRlIGJ1dHRvbiAiICsgYnV0dG9uTmFtZSArICIsIGJ1dHRvbiBpcyBudWxsIik7DQogICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkJ1dHRvbiBjcmVhdGlvbiByZXR1cm5lZCBudWxsIjsNCiAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICB9DQoNCiAgICAgICAgSXRlbU1ldGEgbWV0YSA9IGJ1dHRvbi5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAobWV0YSA9PSBudWxsKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIGZvciBidXR0b24gIiArIGJ1dHRvbk5hbWUgKyAiLCB1c2luZyBkZWZhdWx0IGl0ZW0iKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgICAgICByZXR1cm4gYnV0dG9uOw0KICAgICAgICB9DQoNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAuYm91bnR5Q291bnQoMCkNCiAgICAgICAgICAgICAgICAubW9uZXlWYWx1ZShtb25leVZhbHVlKQ0KICAgICAgICAgICAgICAgIC5leHBWYWx1ZShleHBWYWx1ZSkNCiAgICAgICAgICAgICAgICAudGltZVZhbHVlKGR1cmF0aW9uKQ0KICAgICAgICAgICAgICAgIC5pdGVtQ291bnQoaXRlbUNvdW50KQ0KICAgICAgICAgICAgICAgIC5pdGVtVmFsdWUoaXRlbVZhbHVlKQ0KICAgICAgICAgICAgICAgIC50YXhSYXRlKHBsdWdpbi5nZXRDb25maWcoKS5nZXREb3VibGUoImJvdW50eS1wbGFjZS10YXgtcmF0ZSIsIDAuMCkpDQogICAgICAgICAgICAgICAgLnRheEFtb3VudChtb25leVZhbHVlICogcGx1Z2luLmdldENvbmZpZygpLmdldERvdWJsZSgiYm91bnR5LXBsYWNlLXRheC1yYXRlIiwgMC4wKSkNCiAgICAgICAgICAgICAgICAubW9uZXlMaW5lKCImN01vbmV5OiAmYSIgKyBDdXJyZW5jeVV0aWwuZm9ybWF0TW9uZXkobW9uZXlWYWx1ZSkpDQogICAgICAgICAgICAgICAgLmV4cGVyaWVuY2VMaW5lKCImN0V4cGVyaWVuY2U6ICZlIiArIChleHBWYWx1ZSA9PSAwID8gIjAgWFAgTGV2ZWxzIiA6IGV4cFZhbHVlICsgIiBYUCBMZXZlbCIgKyAoZXhwVmFsdWUgPiAxID8gInMiIDogIiIpKSkNCiAgICAgICAgICAgICAgICAudG90YWxCb3VudHlBbW91bnQodG90YWxWYWx1ZSkNCiAgICAgICAgICAgICAgICAuY3VycmVudFBhZ2UoMCkNCiAgICAgICAgICAgICAgICAudG90YWxQYWdlcygxKTsNCiAgICAgICAgaWYgKHNlc3Npb24gIT0gbnVsbCAmJiBzZXNzaW9uLmdldFRhcmdldFVVSUQoKSAhPSBudWxsKSB7DQogICAgICAgICAgICBjb250ZXh0ID0gY29udGV4dC50YXJnZXQoc2Vzc2lvbi5nZXRUYXJnZXRVVUlEKCkpOw0KICAgICAgICB9DQoNCiAgICAgICAgU3RyaW5nIG5hbWVQYXRoID0gYnV0dG9uTmFtZSArIChidXR0b25OYW1lLmVxdWFscygidG90YWwtYm91bnR5LXZhbHVlLWJ1dHRvbiIpICYmIHNlc3Npb24gIT0gbnVsbCAmJiBzZXNzaW9uLmdldFRhcmdldFVVSUQoKSAhPSBudWxsID8gIi50YXJnZXQtc2VsZWN0ZWQubmFtZSIgOiAiLm5hbWUiKTsNCiAgICAgICAgU3RyaW5nIGxvcmVQYXRoID0gYnV0dG9uTmFtZSArIChidXR0b25OYW1lLmVxdWFscygidG90YWwtYm91bnR5LXZhbHVlLWJ1dHRvbiIpICYmIHNlc3Npb24gIT0gbnVsbCAmJiBzZXNzaW9uLmdldFRhcmdldFVVSUQoKSAhPSBudWxsID8gIi50YXJnZXQtc2VsZWN0ZWQubG9yZSIgOiAiLmxvcmUiKTsNCiAgICAgICAgU3RyaW5nIG5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKG5hbWVQYXRoLCAiQnV0dG9uIik7DQogICAgICAgIGlmIChuYW1lID09IG51bGwgfHwgbmFtZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIEludmFsaWQgb3IgZW1wdHkgbmFtZSBhdCAiICsgbmFtZVBhdGggKyAiLCB1c2luZyBkZWZhdWx0Iik7DQogICAgICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBtZXNzYWdlc0NvbmZpZyA9IHBsdWdpbi5nZXRNZXNzYWdlc0NvbmZpZygpOw0KICAgICAgICAgICAgU3RyaW5nIHdhcm5pbmdNZXNzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJtaXNzaW5nLWNvbmZpZyIsICJNZXNzYWdlIG5vdCBmb3VuZDogJXBhdGglIik7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCB3YXJuaW5nTWVzc2FnZS5yZXBsYWNlKCIlcGF0aCUiLCBuYW1lUGF0aCkpKTsNCiAgICAgICAgICAgIG5hbWUgPSAiQnV0dG9uIjsNCiAgICAgICAgfQ0KDQogICAgICAgIFN0cmluZyBwcm9jZXNzZWROYW1lID0gUGxhY2Vob2xkZXJzLmFwcGx5KG5hbWUsIGNvbnRleHQpOw0KICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKHByb2Nlc3NlZE5hbWUpOw0KDQogICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gY29uZmlnLmdldFN0cmluZ0xpc3QobG9yZVBhdGgpOw0KICAgICAgICBpZiAobG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnID0gcGx1Z2luLmdldE1lc3NhZ2VzQ29uZmlnKCk7DQogICAgICAgICAgICBTdHJpbmcgd2FybmluZ01lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoIm1pc3NpbmctY29uZmlnIiwgIk1lc3NhZ2Ugbm90IGZvdW5kOiAlcGF0aCUiKTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHdhcm5pbmdNZXNzYWdlLnJlcGxhY2UoIiVwYXRoJSIsIGxvcmVQYXRoKSkpOw0KICAgICAgICAgICAgbG9yZSA9IEFycmF5cy5hc0xpc3QoIiY3Q2xpY2sgdG8gaW50ZXJhY3Qgd2l0aCAiICsgYnV0dG9uTmFtZSk7DQogICAgICAgIH0NCg0KICAgICAgICBMaXN0PFN0cmluZz4gcHJvY2Vzc2VkTG9yZSA9IFBsYWNlaG9sZGVycy5hcHBseShsb3JlLCBjb250ZXh0KTsNCiAgICAgICAgbWV0YS5zZXRMb3JlKHByb2Nlc3NlZExvcmUpOw0KDQogICAgICAgIFN0cmluZyBnbG93UGF0aCA9IGJ1dHRvbk5hbWUgKyAoYnV0dG9uTmFtZS5lcXVhbHMoInRvdGFsLWJvdW50eS12YWx1ZS1idXR0b24iKSAmJiBzZXNzaW9uICE9IG51bGwgJiYgc2Vzc2lvbi5nZXRUYXJnZXRVVUlEKCkgIT0gbnVsbCA/ICIudGFyZ2V0LXNlbGVjdGVkLmVuY2hhbnRtZW50LWdsb3ciIDogIi5lbmNoYW50bWVudC1nbG93Iik7DQogICAgICAgIGJvb2xlYW4gZW5jaGFudG1lbnRHbG93ID0gY29uZmlnLmdldEJvb2xlYW4oZ2xvd1BhdGgsIGZhbHNlKTsNCiAgICAgICAgaWYgKGVuY2hhbnRtZW50R2xvdykgew0KICAgICAgICAgICAgbWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoVmVyc2lvblV0aWxzLmlzUG9zdDE5KCkpIHsNCiAgICAgICAgICAgIG1ldGEuYWRkSXRlbUZsYWdzKEl0ZW1GbGFnLkhJREVfQVRUUklCVVRFUyk7DQogICAgICAgIH0NCg0KICAgICAgICBidXR0b24uc2V0SXRlbU1ldGEobWV0YSk7DQoNCiAgICAgICAgLy8gU3RvcmUgZmFpbHVyZSByZWFzb24gaW4gc2Vzc2lvbg0KICAgICAgICBpZiAoZmFpbHVyZVJlYXNvbiAhPSBudWxsICYmIHNlc3Npb24gIT0gbnVsbCkgew0KICAgICAgICAgICAgc2Vzc2lvbi5hZGRCdXR0b25GYWlsdXJlKGJ1dHRvbk5hbWUsIGZhaWx1cmVSZWFzb24pOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIGJ1dHRvbjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIHRoZSBzcGVjaWFsIGFkZC1pdGVtcyBidXR0b24gd2l0aCBkeW5hbWljIGNvbnRlbnQgYmFzZWQgb24gaXRlbSBjb3VudA0KICAgICAqIC8vIG5vdGU6IEdlbmVyYXRlcyBidXR0b24gZm9yIG1hbmFnaW5nIGl0ZW0gcmV3YXJkcw0KICAgICAqLw0KICAgIHByaXZhdGUgSXRlbVN0YWNrIGNyZWF0ZUFkZEl0ZW1zQnV0dG9uKEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZywgQm91bnR5Q3JlYXRpb25TZXNzaW9uIHNlc3Npb24sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIG1vbmV5VmFsdWUsIGludCBleHBWYWx1ZSwgU3RyaW5nIHRpbWVWYWx1ZSwgaW50IGl0ZW1Db3VudCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgaXRlbVZhbHVlLCBkb3VibGUgdG90YWxWYWx1ZSwgU3RyaW5nIGR1cmF0aW9uKSB7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKS5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgU3RyaW5nIGJ1dHRvbk5hbWUgPSAiYWRkLWl0ZW1zLWJ1dHRvbiI7DQogICAgICAgIFN0cmluZyBmYWlsdXJlUmVhc29uID0gbnVsbDsNCg0KICAgICAgICBib29sZWFuIGhhc0l0ZW1zID0gaXRlbUNvdW50ID4gMDsNCiAgICAgICAgU3RyaW5nIGNvbmZpZ1BhdGggPSBoYXNJdGVtcyA/ICJhZGQtaXRlbXMtYnV0dG9uLmhhcy1pdGVtcyIgOiAiYWRkLWl0ZW1zLWJ1dHRvbi5uby1pdGVtcyI7DQogICAgICAgIFN0cmluZyBtYXRlcmlhbE5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKCJhZGQtaXRlbXMtYnV0dG9uLm1hdGVyaWFsIiwgIkNIRVNUIik7DQogICAgICAgIEl0ZW1TdGFjayBidXR0b24gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQoNCiAgICAgICAgaWYgKGJ1dHRvbi5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJDSEVTVCIpKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIicgZm9yIGFkZC1pdGVtcy1idXR0b24sIHVzaW5nIENIRVNUIik7DQogICAgICAgICAgICBidXR0b24gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJDSEVTVCIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIiciOw0KICAgICAgICB9DQoNCiAgICAgICAgSXRlbU1ldGEgbWV0YSA9IGJ1dHRvbi5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAobWV0YSA9PSBudWxsKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIGZvciBhZGQtaXRlbXMtYnV0dG9uLCB1c2luZyBkZWZhdWx0IGl0ZW0iKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgICAgICByZXR1cm4gYnV0dG9uOw0KICAgICAgICB9DQoNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAuYm91bnR5Q291bnQoMCkNCiAgICAgICAgICAgICAgICAubW9uZXlWYWx1ZShtb25leVZhbHVlKQ0KICAgICAgICAgICAgICAgIC5leHBWYWx1ZShleHBWYWx1ZSkNCiAgICAgICAgICAgICAgICAudGltZVZhbHVlKHRpbWVWYWx1ZSkNCiAgICAgICAgICAgICAgICAuaXRlbUNvdW50KGl0ZW1Db3VudCkNCiAgICAgICAgICAgICAgICAuaXRlbVZhbHVlKGl0ZW1WYWx1ZSkNCiAgICAgICAgICAgICAgICAudGF4UmF0ZShwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0RG91YmxlKCJib3VudHktcGxhY2UtdGF4LXJhdGUiLCAwLjApKQ0KICAgICAgICAgICAgICAgIC50YXhBbW91bnQobW9uZXlWYWx1ZSAqIHBsdWdpbi5nZXRDb25maWcoKS5nZXREb3VibGUoImJvdW50eS1wbGFjZS10YXgtcmF0ZSIsIDAuMCkpDQogICAgICAgICAgICAgICAgLm1vbmV5TGluZSgiJjdNb25leTogJmEiICsgQ3VycmVuY3lVdGlsLmZvcm1hdE1vbmV5KG1vbmV5VmFsdWUpKQ0KICAgICAgICAgICAgICAgIC5leHBlcmllbmNlTGluZSgiJjdFeHBlcmllbmNlOiAmZSIgKyAoZXhwVmFsdWUgPT0gMCA/ICIwIFhQIExldmVscyIgOiBleHBWYWx1ZSArICIgWFAgTGV2ZWwiICsgKGV4cFZhbHVlID4gMSA/ICJzIiA6ICIiKSkpDQogICAgICAgICAgICAgICAgLnRvdGFsQm91bnR5QW1vdW50KHRvdGFsVmFsdWUpDQogICAgICAgICAgICAgICAgLmN1cnJlbnRQYWdlKDApDQogICAgICAgICAgICAgICAgLnRvdGFsUGFnZXMoMSk7DQoNCiAgICAgICAgU3RyaW5nIG5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKGNvbmZpZ1BhdGggKyAiLm5hbWUiLCAiQWRkIEl0ZW1zIik7DQogICAgICAgIGlmIChuYW1lID09IG51bGwgfHwgbmFtZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIEludmFsaWQgb3IgZW1wdHkgbmFtZSBmb3IgYWRkLWl0ZW1zLWJ1dHRvbiBhdCAiICsgY29uZmlnUGF0aCArICIsIHVzaW5nIGRlZmF1bHQiKTsNCiAgICAgICAgICAgIG5hbWUgPSAiQWRkIEl0ZW1zIjsNCiAgICAgICAgfQ0KDQogICAgICAgIFN0cmluZyBwcm9jZXNzZWROYW1lID0gUGxhY2Vob2xkZXJzLmFwcGx5KG5hbWUsIGNvbnRleHQpOw0KICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKHByb2Nlc3NlZE5hbWUpOw0KDQogICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gY29uZmlnLmdldFN0cmluZ0xpc3QoY29uZmlnUGF0aCArICIubG9yZSIpOw0KICAgICAgICBpZiAobG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGxvcmUgPSBBcnJheXMuYXNMaXN0KCImN0NsaWNrIHRvICIgKyAoaGFzSXRlbXMgPyAibWFuYWdlIiA6ICJhZGQiKSArICIgaXRlbSByZXdhcmRzIiwgIiY3SXRlbXM6ICZiJWJvdW50aWVzcGx1c19pdGVtX2NvdW50JSIpOw0KICAgICAgICB9DQoNCiAgICAgICAgTGlzdDxTdHJpbmc+IHByb2Nlc3NlZExvcmUgPSBQbGFjZWhvbGRlcnMuYXBwbHkobG9yZSwgY29udGV4dCk7DQogICAgICAgIG1ldGEuc2V0TG9yZShwcm9jZXNzZWRMb3JlKTsNCg0KICAgICAgICBib29sZWFuIGVuY2hhbnRtZW50R2xvdyA9IGNvbmZpZy5nZXRCb29sZWFuKGNvbmZpZ1BhdGggKyAiLmVuY2hhbnRtZW50LWdsb3ciLCBoYXNJdGVtcyk7DQogICAgICAgIGlmIChlbmNoYW50bWVudEdsb3cpIHsNCiAgICAgICAgICAgIG1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgIG1ldGEuYWRkSXRlbUZsYWdzKEl0ZW1GbGFnLkhJREVfRU5DSEFOVFMpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKFZlcnNpb25VdGlscy5pc1Bvc3QxOSgpKSB7DQogICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0FUVFJJQlVURVMpOw0KICAgICAgICB9DQoNCiAgICAgICAgYnV0dG9uLnNldEl0ZW1NZXRhKG1ldGEpOw0KDQogICAgICAgIC8vIFN0b3JlIGZhaWx1cmUgcmVhc29uIGluIHNlc3Npb24NCiAgICAgICAgaWYgKGZhaWx1cmVSZWFzb24gIT0gbnVsbCAmJiBzZXNzaW9uICE9IG51bGwpIHsNCiAgICAgICAgICAgIHNlc3Npb24uYWRkQnV0dG9uRmFpbHVyZShidXR0b25OYW1lLCBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBidXR0b247DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBpbnZlbnRvcnkgY2xpY2sgZXZlbnRzIGZvciB0aGUgQ3JlYXRlR1VJDQogICAgICogLy8gbm90ZTogTWFuYWdlcyBidXR0b24gYW5kIHBsYXllciBoZWFkIGludGVyYWN0aW9ucw0KICAgICAqLw0KICAgIEBFdmVudEhhbmRsZXINCiAgICBwdWJsaWMgdm9pZCBvbkludmVudG9yeUNsaWNrKEludmVudG9yeUNsaWNrRXZlbnQgZXZlbnQpIHsNCiAgICAgICAgaWYgKCFldmVudC5nZXRXaG9DbGlja2VkKCkuZXF1YWxzKHRoaXMucGxheWVyKSkgcmV0dXJuOw0KICAgICAgICBpZiAoIWV2ZW50LmdldFZpZXcoKS5nZXRUaXRsZSgpLmVxdWFscyhHVUlfVElUTEUpKSByZXR1cm47DQoNCiAgICAgICAgUGxheWVyIGNsaWNraW5nUGxheWVyID0gKFBsYXllcikgZXZlbnQuZ2V0V2hvQ2xpY2tlZCgpOw0KICAgICAgICBJdGVtU3RhY2sgY2xpY2tlZEl0ZW0gPSBldmVudC5nZXRDdXJyZW50SXRlbSgpOw0KICAgICAgICBpbnQgc2xvdCA9IGV2ZW50LmdldFNsb3QoKTsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCg0KICAgICAgICBldmVudC5zZXRDYW5jZWxsZWQodHJ1ZSk7IC8vIEFsd2F5cyBjYW5jZWwgdG8gcHJldmVudCBpdGVtIG1vdmVtZW50DQogICAgICAgIGlmIChjbGlja2VkSXRlbSA9PSBudWxsIHx8ICFjbGlja2VkSXRlbS5oYXNJdGVtTWV0YSgpKSByZXR1cm47DQoNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldENyZWF0ZUdVSUNvbmZpZygpOw0KICAgICAgICBpbnQgY29uZmlybVNsb3QgPSBjb25maWcuZ2V0SW50KCJjb25maXJtLWJ1dHRvbi5zbG90IiwgNTIpOw0KICAgICAgICBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbiA9IEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5nZXRTZXNzaW9uKGNsaWNraW5nUGxheWVyKTsNCg0KICAgICAgICAvLyBJZ25vcmUgY2xpY2tzIG9uIGZpbGxlci1pdGVtIHNsb3Qgd2hlbiBubyBzZXNzaW9uIGlzIGFjdGl2ZQ0KICAgICAgICBpZiAoc2xvdCA9PSBjb25maXJtU2xvdCAmJiAoc2Vzc2lvbiA9PSBudWxsIHx8ICFzZXNzaW9uLmhhc0NoYW5nZXMoKSkpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBJZ25vcmVkIGNsaWNrIG9uIGZpbGxlci1pdGVtIHNsb3QgIiArIHNsb3QgKyAiIGJ5ICIgKyBjbGlja2luZ1BsYXllci5nZXROYW1lKCkgKyAiOiBubyBhY3RpdmUgc2Vzc2lvbiIpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHNsb3QgPT0gNDUgJiYgY2xpY2tlZEl0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLkFSUk9XKSB7DQogICAgICAgICAgICBpZiAoY3VycmVudFBhZ2UgPiAwKSB7DQogICAgICAgICAgICAgICAgY3VycmVudFBhZ2UtLTsNCiAgICAgICAgICAgICAgICByZWZyZXNoR1VJKCk7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckRlYnVnKCJbREVCVUcgLSBDcmVhdGVHVUldIFByZXZpb3VzIHBhZ2UgY2xpY2tlZCBieSAiICsgY2xpY2tpbmdQbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIGlmIChzbG90ID09IDUzICYmIGNsaWNrZWRJdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5BUlJPVykgew0KICAgICAgICAgICAgaW50IHRvdGFsUGFnZXMgPSAoaW50KSBNYXRoLmNlaWwoKGRvdWJsZSkgYXZhaWxhYmxlUGxheWVycy5zaXplKCkgLyAyOC4wKTsNCiAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSA8IHRvdGFsUGFnZXMgLSAxKSB7DQogICAgICAgICAgICAgICAgY3VycmVudFBhZ2UrKzsNCiAgICAgICAgICAgICAgICByZWZyZXNoR1VJKCk7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckRlYnVnKCJbREVCVUcgLSBDcmVhdGVHVUldIE5leHQgcGFnZSBjbGlja2VkIGJ5ICIgKyBjbGlja2luZ1BsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2UgaWYgKHNsb3QgPT0gY29uZmlnLmdldEludCgiY29uZmlybS1idXR0b24uc2xvdCIsIDUyKSkgew0KICAgICAgICAgICAgaWYgKHNlc3Npb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBDcmVhdGVHVUldIE5vIHNlc3Npb24gZm91bmQgZm9yIGNvbmZpcm0gYnV0dG9uIGNsaWNrIGJ5ICIgKyBjbGlja2luZ1BsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShjbGlja2luZ1BsYXllciwgImJvdW50eS1zZXNzaW9uLW5vdC1zdGFydGVkIik7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaGFuZGxlQ29uZmlybUJ1dHRvbihjbGlja2luZ1BsYXllciwgc2Vzc2lvbik7DQogICAgICAgIH0gZWxzZSBpZiAoc2xvdCA9PSBjb25maWcuZ2V0SW50KCJhZGQtbW9uZXktYnV0dG9uLnNsb3QiLCA0OCkpIHsNCiAgICAgICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBuZXdTZXNzaW9uID0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLmdldE9yQ3JlYXRlU2Vzc2lvbihjbGlja2luZ1BsYXllcik7DQogICAgICAgICAgICBoYW5kbGVBZGRNb25leUJ1dHRvbihjbGlja2luZ1BsYXllciwgbmV3U2Vzc2lvbik7DQogICAgICAgIH0gZWxzZSBpZiAoc2xvdCA9PSBjb25maWcuZ2V0SW50KCJhZGQtZXhwZXJpZW5jZS1idXR0b24uc2xvdCIsIDQ3KSkgew0KICAgICAgICAgICAgQm91bnR5Q3JlYXRpb25TZXNzaW9uIG5ld1Nlc3Npb24gPSBCb3VudHlDcmVhdGlvblNlc3Npb24uZ2V0T3JDcmVhdGVTZXNzaW9uKGNsaWNraW5nUGxheWVyKTsNCiAgICAgICAgICAgIGhhbmRsZUFkZEV4cGVyaWVuY2VCdXR0b24oY2xpY2tpbmdQbGF5ZXIsIG5ld1Nlc3Npb24pOw0KICAgICAgICB9IGVsc2UgaWYgKHNsb3QgPT0gY29uZmlnLmdldEludCgiYWRkLXRpbWUtYnV0dG9uLnNsb3QiLCA1MSkpIHsNCiAgICAgICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBuZXdTZXNzaW9uID0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLmdldE9yQ3JlYXRlU2Vzc2lvbihjbGlja2luZ1BsYXllcik7DQogICAgICAgICAgICBoYW5kbGVBZGRUaW1lQnV0dG9uKGNsaWNraW5nUGxheWVyLCBuZXdTZXNzaW9uKTsNCiAgICAgICAgfSBlbHNlIGlmIChzbG90ID09IGNvbmZpZy5nZXRJbnQoInRvdGFsLWJvdW50eS12YWx1ZS1idXR0b24uc2xvdCIsIDQ5KSkgew0KICAgICAgICAgICAgQm91bnR5Q3JlYXRpb25TZXNzaW9uIG5ld1Nlc3Npb24gPSBCb3VudHlDcmVhdGlvblNlc3Npb24uZ2V0T3JDcmVhdGVTZXNzaW9uKGNsaWNraW5nUGxheWVyKTsNCiAgICAgICAgICAgIGhhbmRsZVRvdGFsVmFsdWVCdXR0b24oY2xpY2tpbmdQbGF5ZXIsIG5ld1Nlc3Npb24pOw0KICAgICAgICB9IGVsc2UgaWYgKHNsb3QgPT0gY29uZmlnLmdldEludCgiYWRkLWl0ZW1zLWJ1dHRvbi5zbG90IiwgNTApKSB7DQogICAgICAgICAgICBCb3VudHlDcmVhdGlvblNlc3Npb24gbmV3U2Vzc2lvbiA9IEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5nZXRPckNyZWF0ZVNlc3Npb24oY2xpY2tpbmdQbGF5ZXIpOw0KICAgICAgICAgICAgaGFuZGxlQWRkSXRlbXNCdXR0b24oY2xpY2tpbmdQbGF5ZXIsIG5ld1Nlc3Npb24pOw0KICAgICAgICB9IGVsc2UgaWYgKHNsb3QgPT0gY29uZmlnLmdldEludCgiY2FuY2VsLWJ1dHRvbi5zbG90IiwgNDYpKSB7DQogICAgICAgICAgICBoYW5kbGVDYW5jZWxCdXR0b24oY2xpY2tpbmdQbGF5ZXIpOw0KICAgICAgICB9IGVsc2UgaWYgKFZlcnNpb25VdGlscy5pc1BsYXllckhlYWQoY2xpY2tlZEl0ZW0pKSB7DQogICAgICAgICAgICBCb3VudHlDcmVhdGlvblNlc3Npb24gbmV3U2Vzc2lvbiA9IEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5nZXRPckNyZWF0ZVNlc3Npb24oY2xpY2tpbmdQbGF5ZXIpOw0KICAgICAgICAgICAgaGFuZGxlUGxheWVySGVhZENsaWNrKGNsaWNraW5nUGxheWVyLCBjbGlja2VkSXRlbSwgbmV3U2Vzc2lvbik7DQogICAgICAgIH0NCiAgICAgICAgY2xpY2tpbmdQbGF5ZXIudXBkYXRlSW52ZW50b3J5KCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyB0aGUgQWRkIEl0ZW1zIGJ1dHRvbiBjbGljaywgb3BlbmluZyB0aGUgQWRkSXRlbXNHVUkNCiAgICAgKiAvLyBub3RlOiBUcmFuc2l0aW9ucyB0byBpdGVtIG1hbmFnZW1lbnQgR1VJDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGhhbmRsZUFkZEl0ZW1zQnV0dG9uKFBsYXllciBwbGF5ZXIsIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBzZXNzaW9uKSB7DQogICAgICAgIHRoaXMuY2xlYW51cCgpOw0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgQWRkSXRlbXNHVUkgYWRkSXRlbXNHVUkgPSBuZXcgQWRkSXRlbXNHVUkocGxheWVyLCBwbHVnaW4uZ2V0RXZlbnRNYW5hZ2VyKCkpOw0KICAgICAgICAgICAgYWRkSXRlbXNHVUkub3BlbkludmVudG9yeShwbGF5ZXIpOw0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIk9wZW5lZCBBZGRJdGVtc0dVSSBmb3IgcGxheWVyOiAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuc2V2ZXJlKCJGYWlsZWQgdG8gb3BlbiBBZGRJdGVtc0dVSSBmb3IgcGxheWVyICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIjogIiArIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLlJFRCArICJGYWlsZWQgdG8gb3BlbiBpdGVtIG1hbmFnZW1lbnQgR1VJLiBQbGVhc2UgdHJ5IGFnYWluLiIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBjbGlja3Mgb24gcGxheWVyIGhlYWRzIGluIHRoZSBHVUkNCiAgICAgKiAvLyBub3RlOiBTZWxlY3RzIG9yIGRlc2VsZWN0cyBib3VudHkgdGFyZ2V0cw0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBoYW5kbGVQbGF5ZXJIZWFkQ2xpY2soUGxheWVyIHBsYXllciwgSXRlbVN0YWNrIGhlYWRJdGVtLCBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbikgew0KICAgICAgICBpZiAoIWhlYWRJdGVtLmhhc0l0ZW1NZXRhKCkgfHwgIShoZWFkSXRlbS5nZXRJdGVtTWV0YSgpIGluc3RhbmNlb2YgU2t1bGxNZXRhKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIFNrdWxsTWV0YSBza3VsbE1ldGEgPSAoU2t1bGxNZXRhKSBoZWFkSXRlbS5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBPZmZsaW5lUGxheWVyIHRhcmdldFBsYXllciA9IG51bGw7DQogICAgICAgIGlmIChza3VsbE1ldGEuZ2V0T3duZXIoKSAhPSBudWxsKSB7DQogICAgICAgICAgICB0YXJnZXRQbGF5ZXIgPSBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcihza3VsbE1ldGEuZ2V0T3duZXIoKSk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKHRhcmdldFBsYXllciAhPSBudWxsICYmIHRhcmdldFBsYXllci5nZXRVbmlxdWVJZCgpICE9IG51bGwpIHsNCiAgICAgICAgICAgIGJvb2xlYW4gaXNWYWxpZFRhcmdldCA9IGZhbHNlOw0KICAgICAgICAgICAgZm9yIChPZmZsaW5lUGxheWVyIHAgOiBhdmFpbGFibGVQbGF5ZXJzKSB7DQogICAgICAgICAgICAgICAgaWYgKHAuZ2V0VW5pcXVlSWQoKS5lcXVhbHModGFyZ2V0UGxheWVyLmdldFVuaXF1ZUlkKCkpKSB7DQogICAgICAgICAgICAgICAgICAgIGlzVmFsaWRUYXJnZXQgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoIWlzVmFsaWRUYXJnZXQpIHsNCiAgICAgICAgICAgICAgICB0YXJnZXRQbGF5ZXIgPSBudWxsOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmICh0YXJnZXRQbGF5ZXIgPT0gbnVsbCB8fCAoIXRhcmdldFBsYXllci5oYXNQbGF5ZWRCZWZvcmUoKSAmJiAhdGFyZ2V0UGxheWVyLmlzT25saW5lKCkpKSB7DQogICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAicGxheWVyLW5vdC1mb3VuZCIpOw0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIltERUJVRyAtIENyZWF0ZUdVSV0gRmFpbGVkIHRvIGlkZW50aWZ5IHRhcmdldCBwbGF5ZXIgZm9yIHNrdWxsIGNsaWNrIGJ5ICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBTdHJpbmcgdGFyZ2V0TmFtZSA9IHRhcmdldFBsYXllci5nZXROYW1lKCkgIT0gbnVsbCA/IHRhcmdldFBsYXllci5nZXROYW1lKCkgOiAiVW5rbm93biI7DQogICAgICAgIGJvb2xlYW4gaXNBbHJlYWR5U2VsZWN0ZWQgPSBzZXNzaW9uLmhhc1RhcmdldCgpICYmIHNlc3Npb24uZ2V0VGFyZ2V0VVVJRCgpICE9IG51bGwgJiYNCiAgICAgICAgICAgICAgICBzZXNzaW9uLmdldFRhcmdldFVVSUQoKS5lcXVhbHModGFyZ2V0UGxheWVyLmdldFVuaXF1ZUlkKCkpOw0KICAgICAgICBpZiAoaXNBbHJlYWR5U2VsZWN0ZWQpIHsNCiAgICAgICAgICAgIHNlc3Npb24uc2V0VGFyZ2V0UGxheWVyKG51bGwpOw0KICAgICAgICAgICAgc2Vzc2lvbi5zZXRUYXJnZXRQbGF5ZXJPZmZsaW5lKG51bGwpOw0KICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLmluZm8oIltERUJVRyAtIENyZWF0ZUdVSV0gRGVzZWxlY3RlZCB0YXJnZXQgIiArIHRhcmdldE5hbWUgKyAiIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBpZiAodGFyZ2V0UGxheWVyLmlzT25saW5lKCkpIHsNCiAgICAgICAgICAgICAgICBzZXNzaW9uLnNldFRhcmdldFBsYXllcih0YXJnZXRQbGF5ZXIuZ2V0UGxheWVyKCkpOw0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJbREVCVUcgLSBDcmVhdGVHVUldIFNlbGVjdGVkIG9ubGluZSB0YXJnZXQgIiArIHRhcmdldE5hbWUgKyAiIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHNlc3Npb24uc2V0VGFyZ2V0UGxheWVyT2ZmbGluZSh0YXJnZXRQbGF5ZXIpOw0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJbREVCVUcgLSBDcmVhdGVHVUldIFNlbGVjdGVkIG9mZmxpbmUgdGFyZ2V0ICIgKyB0YXJnZXROYW1lICsgIiBmb3IgIiArIHBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJwbGF5ZXItb2ZmbGluZSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHVwZGF0ZVNlc3Npb25EaXNwbGF5KCk7IC8vIFJlZnJlc2ggR1VJIHRvIHVwZGF0ZSBza3VsbHMNCiAgICAgICAgcGxheWVyLnVwZGF0ZUludmVudG9yeSgpOyAvLyBFbnN1cmUgaW52ZW50b3J5IHN5bmMNCiAgICB9DQoNCiAgICBARXZlbnRIYW5kbGVyDQogICAgcHVibGljIHZvaWQgb25JbnZlbnRvcnlEcmFnKEludmVudG9yeURyYWdFdmVudCBldmVudCkgew0KICAgICAgICBpZiAoIShldmVudC5nZXRXaG9DbGlja2VkKCkgaW5zdGFuY2VvZiBQbGF5ZXIpKSByZXR1cm47DQogICAgICAgIFBsYXllciBwbGF5ZXIgPSAoUGxheWVyKSBldmVudC5nZXRXaG9DbGlja2VkKCk7DQoNCiAgICAgICAgaWYgKCFwbGF5ZXIuZXF1YWxzKHRoaXMucGxheWVyKSkgcmV0dXJuOw0KICAgICAgICBpZiAoIWV2ZW50LmdldEludmVudG9yeSgpLmVxdWFscyh0aGlzLmludmVudG9yeSkpIHJldHVybjsNCg0KICAgICAgICBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbiA9IEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5nZXRPckNyZWF0ZVNlc3Npb24ocGxheWVyKTsNCg0KICAgICAgICAvLyBBbGxvdyBkcmFnZ2luZyBpbiB1bnByb3RlY3RlZCBzbG90cyBvbmx5DQogICAgICAgIGJvb2xlYW4gaGFzUHJvdGVjdGVkU2xvdHMgPSBmYWxzZTsNCiAgICAgICAgZm9yIChpbnQgc2xvdCA6IGV2ZW50LmdldFJhd1Nsb3RzKCkpIHsNCiAgICAgICAgICAgIGlmIChzbG90IDwgaW52ZW50b3J5LmdldFNpemUoKSAmJiBwcm90ZWN0ZWRTbG90cy5jb250YWlucyhzbG90KSkgew0KICAgICAgICAgICAgICAgIGhhc1Byb3RlY3RlZFNsb3RzID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChoYXNQcm90ZWN0ZWRTbG90cykgew0KICAgICAgICAgICAgZXZlbnQuc2V0Q2FuY2VsbGVkKHRydWUpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci5SRUQgKyAiWW91IGNhbm5vdCBwbGFjZSBJdGVtcyBpbiB0aGF0IHNsb3QhIik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBIYW5kbGVzIHRoZSBjb25maXJtIGJ1dHRvbiBjbGljayBpbiB0aGUgQ3JlYXRlR1VJDQogICAgICogLy8gbm90ZTogVmFsaWRhdGVzIGJvdW50eSBzZXNzaW9uIGFuZCBlaXRoZXIgcHJvbXB0cyBmb3IgYW5vbnltaXR5IG9yIHBsYWNlcyB0aGUgYm91bnR5DQogICAgICovDQogICAgcHVibGljIHZvaWQgaGFuZGxlQ29uZmlybUJ1dHRvbihQbGF5ZXIgcGxheWVyLCBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbikgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIENyZWF0ZUdVSV0gQ29uZmlybSBidXR0b24gY2xpY2tlZCBieSAiICsgcGxheWVyLmdldE5hbWUoKSk7DQoNCiAgICAgICAgLy8gUHJldmVudCBkdXBsaWNhdGUgY29uZmlybSBwcm9jZXNzaW5nIGlmIGFscmVhZHkgYXdhaXRpbmcgYW5vbnltb3VzIGNvbmZpcm1hdGlvbg0KICAgICAgICBpZiAoc2Vzc2lvbi5nZXRBd2FpdGluZ0lucHV0KCkgPT0gQm91bnR5Q3JlYXRpb25TZXNzaW9uLklucHV0VHlwZS5BTk9OWU1PVVNfQ09ORklSTUFUSU9OKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIENyZWF0ZUdVSV0gU2tpcHBpbmcgY29uZmlybSBmb3IgIiArIHBsYXllci5nZXROYW1lKCkgKyAiOiBhbHJlYWR5IGF3YWl0aW5nIEFOT05ZTU9VU19DT05GSVJNQVRJT04iKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghc2Vzc2lvbi5pc1ZhbGlkKCkpIHsNCiAgICAgICAgICAgIFN0cmluZyBlcnJvciA9IHNlc3Npb24uZ2V0VmFsaWRhdGlvbkVycm9yKCk7DQogICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCBlcnJvcik7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIENyZWF0ZUdVSV0gSW52YWxpZCBib3VudHkgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIjogIiArIGVycm9yKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghc2Vzc2lvbi5pc0NvbXBsZXRlKCkpIHsNCiAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJib3VudHktaW5jb21wbGV0ZSIpOw0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBDcmVhdGVHVUldIEluY29tcGxldGUgYm91bnR5IGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBzZXNzaW9uLnNldENvbmZpcm1QcmVzc2VkKHRydWUpOw0KDQogICAgICAgIC8vIENoZWNrIGlmIHBsYXllciBjYW4gYWZmb3JkIHRoZSBib3VudHkgYW5kIHRheA0KICAgICAgICBkb3VibGUgYm91bnR5QW1vdW50ID0gc2Vzc2lvbi5nZXRNb25leSgpOw0KICAgICAgICBkb3VibGUgdGF4QW1vdW50ID0gcGx1Z2luLmdldFRheE1hbmFnZXIoKS5jYWxjdWxhdGVUYXgoYm91bnR5QW1vdW50LCBudWxsKTsNCiAgICAgICAgZG91YmxlIHRvdGFsQ29zdCA9IGJvdW50eUFtb3VudCArIHRheEFtb3VudDsNCiAgICAgICAgRWNvbm9teSBlY29ub215ID0gQm91bnRpZXNQbHVzLmdldEVjb25vbXkoKTsNCiAgICAgICAgaWYgKGVjb25vbXkgIT0gbnVsbCAmJiAhZWNvbm9teS5oYXMocGxheWVyLCB0b3RhbENvc3QpKSB7DQogICAgICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAgICAgLm1vbmV5VmFsdWUodG90YWxDb3N0KQ0KICAgICAgICAgICAgICAgICAgICAudGF4QW1vdW50KHRheEFtb3VudCk7DQogICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiYm91bnR5LWluc3VmZmljaWVudC1mdW5kcyIsIGNvbnRleHQpOw0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBDcmVhdGVHVUldIEluc3VmZmljaWVudCBmdW5kcyBmb3IgIiArIHBsYXllci5nZXROYW1lKCkgKyAiOiBuZWVkcyAkIiArIHRvdGFsQ29zdCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDaGVjayBpZiBhbm9ueW1pdHkgaXMgZW5hYmxlZCBhbmQgcHJvbXB0IGlmIHNvDQogICAgICAgIGlmIChwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigiYW5vbnltb3VzLWJvdW50aWVzLmVuYWJsZWQiLCBmYWxzZSkpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRBbm9ueW1vdXNCb3VudHkoKS5wcm9tcHRGb3JBbm9ueW1pdHkocGxheWVyLCBzZXNzaW9uKTsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBQcm9tcHRlZCBmb3IgYW5vbnltaXR5IGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICBwbGF5ZXIuY2xvc2VJbnZlbnRvcnkoKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGhhbmRsZUNvbmZpcm1CdXR0b25EaXJlY3QocGxheWVyLCBzZXNzaW9uKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFByb2Nlc3NlcyB0aGUgY29uZmlybSBidXR0b24gZGlyZWN0bHkgd2l0aG91dCBhbm9ueW1vdXMgcHJvbXB0DQogICAgICogLy8gbm90ZTogUGxhY2VzIHRoZSBib3VudHkgYWZ0ZXIgdmFsaWRhdGlvbiBhbmQgZGVkdWN0aW9ucw0KICAgICAqLw0KICAgIHB1YmxpYyB2b2lkIGhhbmRsZUNvbmZpcm1CdXR0b25EaXJlY3QoUGxheWVyIHBsYXllciwgQm91bnR5Q3JlYXRpb25TZXNzaW9uIHNlc3Npb24pIHsNCiAgICAgICAgLy8gVmFsaWRhdGUgdGhlIGJvdW50eSBiZWZvcmUgcHJvY2Vzc2luZw0KICAgICAgICBpZiAoIXNlc3Npb24uaXNDb21wbGV0ZSgpKSB7DQogICAgICAgICAgICBTdHJpbmcgdmFsaWRhdGlvbkVycm9yID0gc2Vzc2lvbi5nZXRWYWxpZGF0aW9uRXJyb3IoKTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuUkVEICsgdmFsaWRhdGlvbkVycm9yKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEdldCB0aGUgdGFyZ2V0IHBsYXllcg0KICAgICAgICBVVUlEIHRhcmdldFVVSUQgPSBzZXNzaW9uLmdldFRhcmdldFVVSUQoKTsNCiAgICAgICAgaWYgKHRhcmdldFVVSUQgPT0gbnVsbCkgew0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKENoYXRDb2xvci5SRUQgKyAiTm8gdGFyZ2V0IHBsYXllciBzZWxlY3RlZCEiKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIENhbGN1bGF0ZSB0b3RhbCBtb25ldGFyeSB2YWx1ZSBhbmQgaXRlbSByZXdhcmRzDQogICAgICAgIGRvdWJsZSBtb25leSA9IHNlc3Npb24uZ2V0TW9uZXkoKTsNCiAgICAgICAgaW50IGV4cGVyaWVuY2VMZXZlbHMgPSBzZXNzaW9uLmdldEV4cGVyaWVuY2UoKTsNCiAgICAgICAgTGlzdDxJdGVtU3RhY2s+IGl0ZW1SZXdhcmRzID0gc2Vzc2lvbi5nZXRJdGVtUmV3YXJkcygpOw0KICAgICAgICBpbnQgZHVyYXRpb25NaW51dGVzID0gc2Vzc2lvbi5nZXRUaW1lTWludXRlcygpOw0KDQogICAgICAgIC8vIEhhbmRsZSB0YXggdmlhIFRheE1hbmFnZXINCiAgICAgICAgVGF4TWFuYWdlciB0YXhNYW5hZ2VyID0gcGx1Z2luLmdldFRheE1hbmFnZXIoKTsNCiAgICAgICAgZG91YmxlIHRheEFtb3VudCA9IHRheE1hbmFnZXIuY2FsY3VsYXRlVGF4KG1vbmV5LCBpdGVtUmV3YXJkcyk7DQogICAgICAgIGlmICghdGF4TWFuYWdlci5jYW5BZmZvcmRUYXgocGxheWVyLCBtb25leSwgdGF4QW1vdW50KSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gRGVkdWN0IG1vbmV5IGFuZCB0YXgNCiAgICAgICAgaWYgKCF0YXhNYW5hZ2VyLmRlZHVjdFRheChwbGF5ZXIsIG1vbmV5LCB0YXhBbW91bnQpKSB7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLlJFRCArICJGYWlsZWQgdG8gZGVkdWN0IGZ1bmRzISIpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gVmFsaWRhdGUgYW5kIGRlZHVjdCBleHBlcmllbmNlDQogICAgICAgIGlmIChleHBlcmllbmNlTGV2ZWxzID4gMCkgew0KICAgICAgICAgICAgaWYgKHBsYXllci5nZXRMZXZlbCgpIDwgZXhwZXJpZW5jZUxldmVscykgew0KICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShDaGF0Q29sb3IuUkVEICsgIllvdSBkb24ndCBoYXZlIGVub3VnaCBleHBlcmllbmNlIGxldmVscyEgUmVxdWlyZWQ6ICIgKyBleHBlcmllbmNlTGV2ZWxzKTsNCiAgICAgICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoQ2hhdENvbG9yLllFTExPVyArICJZb3VyIGN1cnJlbnQgbGV2ZWw6ICIgKyBwbGF5ZXIuZ2V0TGV2ZWwoKSk7DQogICAgICAgICAgICAgICAgdGF4TWFuYWdlci5yZWZ1bmRUYXgocGxheWVyLCBtb25leSwgdGF4QW1vdW50KTsgLy8gUmVmdW5kIG1vbmV5IGFuZCB0YXgNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIERlZHVjdCB0aGUgZXhwZXJpZW5jZSBsZXZlbHMNCiAgICAgICAgICAgIHBsYXllci5zZXRMZXZlbChwbGF5ZXIuZ2V0TGV2ZWwoKSAtIGV4cGVyaWVuY2VMZXZlbHMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gUmVtb3ZlIGl0ZW1zIGZyb20gcGxheWVyIGludmVudG9yeQ0KICAgICAgICBpZiAoIWl0ZW1SZXdhcmRzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgZm9yIChJdGVtU3RhY2sgaXRlbSA6IGl0ZW1SZXdhcmRzKSB7DQogICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT0gbnVsbCAmJiBpdGVtLmdldFR5cGUoKSAhPSBNYXRlcmlhbC5BSVIpIHsNCiAgICAgICAgICAgICAgICAgICAgcGxheWVyLmdldEludmVudG9yeSgpLnJlbW92ZUl0ZW0oaXRlbSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQ3JlYXRlIHRoZSBib3VudHkNCiAgICAgICAgaW50IGJvdW50eUFtb3VudCA9IChpbnQpIG1vbmV5OyAvLyBTdG9yZSBhcyBkb2xsYXJzLCBub3QgY2VudHMNCiAgICAgICAgbG9uZyBleHBpcmVUaW1lID0gZHVyYXRpb25NaW51dGVzID4gMCA/IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpICsgKGR1cmF0aW9uTWludXRlcyAqIDYwICogMTAwMEwpIDogLTE7DQogICAgICAgIHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuc2V0Qm91bnR5KHBsYXllci5nZXRVbmlxdWVJZCgpLCB0YXJnZXRVVUlELCBib3VudHlBbW91bnQsIGV4cGlyZVRpbWUpOw0KDQogICAgICAgIC8vIFN0b3JlIGFkZGl0aW9uYWwgYm91bnR5IGRhdGEgKGV4cGVyaWVuY2UsIGl0ZW1zLCB0aW1lKQ0KICAgICAgICBpZiAoZXhwZXJpZW5jZUxldmVscyA+IDAgfHwgIWl0ZW1SZXdhcmRzLmlzRW1wdHkoKSB8fCAhc2Vzc2lvbi5pc1Blcm1hbmVudCgpKSB7DQogICAgICAgICAgICBCb3VudHkgYm91bnR5ID0gcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5nZXRCb3VudHkodGFyZ2V0VVVJRCk7DQogICAgICAgICAgICBpZiAoYm91bnR5ICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICBib3VudHkuYWRkQ29udHJpYnV0aW9uKHBsYXllci5nZXRVbmlxdWVJZCgpLCAwLCBleHBlcmllbmNlTGV2ZWxzLCBkdXJhdGlvbk1pbnV0ZXMsIGl0ZW1SZXdhcmRzLCBmYWxzZSwgZmFsc2UpOw0KICAgICAgICAgICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRCb3VudGllc0NvbmZpZygpOw0KICAgICAgICAgICAgICAgIFN0cmluZyBwYXRoID0gImJvdW50aWVzLiIgKyB0YXJnZXRVVUlEICsgIi4iICsgcGxheWVyLmdldFVuaXF1ZUlkKCk7DQogICAgICAgICAgICAgICAgY29uZmlnLnNldChwYXRoICsgIi54cCIsIGV4cGVyaWVuY2VMZXZlbHMpOw0KICAgICAgICAgICAgICAgIGNvbmZpZy5zZXQocGF0aCArICIuZHVyYXRpb24iLCBkdXJhdGlvbk1pbnV0ZXMpOw0KICAgICAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBpdGVtU3RyaW5ncyA9IGl0ZW1SZXdhcmRzLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGl0ZW0gLT4gaXRlbSAhPSBudWxsICYmICFpdGVtLmdldFR5cGUoKS5lcXVhbHMoTWF0ZXJpYWwuQUlSKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoaXRlbSAtPiBpdGVtLmdldFR5cGUoKS5uYW1lKCkgKyAiOiIgKyBpdGVtLmdldEFtb3VudCgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSk7DQogICAgICAgICAgICAgICAgY29uZmlnLnNldChwYXRoICsgIi5pdGVtcyIsIGl0ZW1TdHJpbmdzKTsNCiAgICAgICAgICAgICAgICBwbHVnaW4uc2F2ZUV2ZXJ5dGhpbmcoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS5pbmZvKCJDb21wbGV4IGJvdW50eSBjcmVhdGVkIGJ5ICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBvbiAiICsgc2Vzc2lvbi5nZXRUYXJnZXROYW1lKCkgKw0KICAgICAgICAgICAgICAgICAgICAiIC0gTW9uZXk6ICQiICsgbW9uZXkgKyAiLCBYUDogIiArIGV4cGVyaWVuY2VMZXZlbHMgKyAiIGxldmVscywgSXRlbXM6ICIgKyBpdGVtUmV3YXJkcy5zaXplKCkpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gU2VuZCBzdWNjZXNzIG1lc3NhZ2UgYmFzZWQgb24gZHVyYXRpb24NCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBwbHVnaW4uZ2V0TWVzc2FnZXNDb25maWcoKTsNCiAgICAgICAgU3RyaW5nIG1lc3NhZ2VLZXkgPSBkdXJhdGlvbk1pbnV0ZXMgPiAwID8gImJvdW50eS1zZXQtc3VjY2Vzcy10aW1lZCIgOiAiYm91bnR5LXNldC1zdWNjZXNzIjsNCiAgICAgICAgU3RyaW5nIHN1Y2Nlc3NNZXNzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKG1lc3NhZ2VLZXksDQogICAgICAgICAgICAgICAgZHVyYXRpb25NaW51dGVzID4gMCA/DQogICAgICAgICAgICAgICAgICAgICAgICAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJmEmbFRpbWVkIEJvdW50eSBTZXQgU3VjY2Vzc2Z1bGx5XG4iICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiY3WW91IHBsYWNlZCBhIGJvdW50eSBvZiAmZSQlYm91bnRpZXNwbHVzX2Ftb3VudCUmNyBvbiAmZSVib3VudGllc3BsdXNfdGFyZ2V0JSY3IGZvciAmZSVib3VudGllc3BsdXNfdGltZSUgJWJvdW50aWVzcGx1c191bml0JSY3IVxuIiArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICImN1RheCBvZiAmZSQlYm91bnRpZXNwbHVzX3RheF9hbW91bnQlJjcgd2FzIGRlZHVjdGVkLlxuIiArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIgOg0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4iICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiZhJmxCb3VudHkgU2V0IFN1Y2Nlc3NmdWxseVxuIiArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICImN1lvdSBwbGFjZWQgYSBib3VudHkgb2YgJmUkJWJvdW50aWVzcGx1c19hbW91bnQlJjcgb24gJmUlYm91bnRpZXNwbHVzX3RhcmdldCUmNyFcbiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjdUYXggb2YgJmUkJWJvdW50aWVzcGx1c190YXhfYW1vdW50JSY3IHdhcyBkZWR1Y3RlZC5cbiIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iKTsNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAudGFyZ2V0KHRhcmdldFVVSUQpDQogICAgICAgICAgICAgICAgLm1vbmV5VmFsdWUobW9uZXkpDQogICAgICAgICAgICAgICAgLnRheEFtb3VudCh0YXhBbW91bnQpOw0KICAgICAgICBpZiAoZHVyYXRpb25NaW51dGVzID4gMCkgew0KICAgICAgICAgICAgbG9uZyB0aW1lVmFsdWUgPSBkdXJhdGlvbk1pbnV0ZXMgKiA2MDsNCiAgICAgICAgICAgIFN0cmluZyB1bml0Ow0KICAgICAgICAgICAgbG9uZyBkaXNwbGF5VGltZTsNCiAgICAgICAgICAgIGlmICh0aW1lVmFsdWUgPj0gMjQgKiA2MCAqIDYwKSB7DQogICAgICAgICAgICAgICAgdW5pdCA9ICJEYXlzIjsNCiAgICAgICAgICAgICAgICBkaXNwbGF5VGltZSA9IHRpbWVWYWx1ZSAvICgyNCAqIDYwICogNjApOw0KICAgICAgICAgICAgfSBlbHNlIGlmICh0aW1lVmFsdWUgPj0gNjAgKiA2MCkgew0KICAgICAgICAgICAgICAgIHVuaXQgPSAiSG91cnMiOw0KICAgICAgICAgICAgICAgIGRpc3BsYXlUaW1lID0gdGltZVZhbHVlIC8gKDYwICogNjApOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB1bml0ID0gIk1pbnV0ZXMiOw0KICAgICAgICAgICAgICAgIGRpc3BsYXlUaW1lID0gdGltZVZhbHVlIC8gNjA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjb250ZXh0ID0gY29udGV4dC50aW1lKFN0cmluZy52YWx1ZU9mKGRpc3BsYXlUaW1lKSkudW5pdCh1bml0KTsNCiAgICAgICAgfQ0KICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KHN1Y2Nlc3NNZXNzYWdlLCBjb250ZXh0KSk7DQoNCiAgICAgICAgLy8gU2VuZCB0YXggbWVzc2FnZXMNCiAgICAgICAgdGF4TWFuYWdlci5zZW5kVGF4TWVzc2FnZXMocGxheWVyLCB0YXJnZXRVVUlELCBtb25leSwgdGF4QW1vdW50KTsNCg0KICAgICAgICAvLyBDbGVhbiB1cCBzZXNzaW9uDQogICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5yZW1vdmVTZXNzaW9uKHBsYXllcik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUHJvY2Vzc2VzIGJvdW50eSBjcmVhdGlvbiB3aXRoIHRheCBoYW5kbGluZyAvLyBub3RlOiBGaW5hbGl6ZXMgYm91bnR5IHBsYWNlbWVudCB3aXRoIG1vbmV5LCBYUCwgYW5kIGl0ZW0gZGVkdWN0aW9ucw0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBwcm9jZXNzQm91bnR5Q3JlYXRpb24oUGxheWVyIHBsYXllciwgT2ZmbGluZVBsYXllciB0YXJnZXQsIGRvdWJsZSB0b3RhbE1vbmV5LCBpbnQgZXhwZXJpZW5jZUFtb3VudCwgTGlzdDxJdGVtU3RhY2s+IGl0ZW1zKSB7DQogICAgICAgIC8vIENhbGN1bGF0ZSB0YXggYmFzZWQgb24gY29uZmlnIHNldHRpbmcNCiAgICAgICAgZG91YmxlIHRheFJhdGUgPSBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0RG91YmxlKCJib3VudHktcGxhY2UtdGF4LXJhdGUiLCAwLjApIC8gMTAwLjA7DQogICAgICAgIGJvb2xlYW4gdGF4VG90YWxWYWx1ZSA9IHBsdWdpbi5nZXRDb25maWcoKS5nZXRCb29sZWFuKCJ0YXgtdG90YWwtdmFsdWUiLCBmYWxzZSk7DQogICAgICAgIGRvdWJsZSBpdGVtVmFsdWUgPSAwLjA7DQogICAgICAgIGlmIChpdGVtcyAhPSBudWxsICYmICFpdGVtcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIEl0ZW1WYWx1ZUNhbGN1bGF0b3IgY2FsY3VsYXRvciA9IHBsdWdpbi5nZXRJdGVtVmFsdWVDYWxjdWxhdG9yKCk7DQogICAgICAgICAgICBmb3IgKEl0ZW1TdGFjayBpdGVtIDogaXRlbXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoaXRlbSAhPSBudWxsICYmIGl0ZW0uZ2V0VHlwZSgpICE9IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgICAgICAgICBpdGVtVmFsdWUgKz0gY2FsY3VsYXRvci5jYWxjdWxhdGVJdGVtVmFsdWUoaXRlbSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGRvdWJsZSB0YXhhYmxlQW1vdW50ID0gdGF4VG90YWxWYWx1ZSA/ICh0b3RhbE1vbmV5ICsgaXRlbVZhbHVlKSA6IHRvdGFsTW9uZXk7DQogICAgICAgIGRvdWJsZSB0YXhBbW91bnQgPSB0YXhhYmxlQW1vdW50ICogdGF4UmF0ZTsNCiAgICAgICAgZG91YmxlIHRvdGFsQ29zdCA9IHRvdGFsTW9uZXkgKyB0YXhBbW91bnQ7DQoNCiAgICAgICAgLy8gQ2hlY2sgaWYgcGxheWVyIGhhcyBlbm91Z2ggbW9uZXkgKGluY2x1ZGluZyB0YXgpDQogICAgICAgIGlmICh0b3RhbENvc3QgPiAwICYmIHBsdWdpbi5nZXRFY29ub215KCkuZ2V0QmFsYW5jZShwbGF5ZXIpIDwgdG90YWxDb3N0KSB7DQogICAgICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBtZXNzYWdlc0NvbmZpZyA9IHBsdWdpbi5nZXRNZXNzYWdlc0NvbmZpZygpOw0KICAgICAgICAgICAgU3RyaW5nIGVycm9yTWVzc2FnZSA9IG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiYm91bnR5LWluc3VmZmljaWVudC1mdW5kcyIsICImY0luc3VmZmljaWVudCBmdW5kcyEgWW91IG5lZWQgJCVjb3N0JSAoaW5jbHVkZXMgJCV0YXglIHRheCkiKTsNCiAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgICAgIC5wbGF5ZXIocGxheWVyKQ0KICAgICAgICAgICAgICAgICAgICAud2l0aEFtb3VudCh0b3RhbENvc3QpDQogICAgICAgICAgICAgICAgICAgIC50YXhBbW91bnQodGF4QW1vdW50KTsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkoZXJyb3JNZXNzYWdlLCBjb250ZXh0KSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDaGVjayBYUCByZXF1aXJlbWVudHMNCiAgICAgICAgaWYgKGV4cGVyaWVuY2VBbW91bnQgPiAwICYmICFDdXJyZW5jeVV0aWwuaGFzRW5vdWdoWFAocGxheWVyLCBleHBlcmllbmNlQW1vdW50KSkgew0KICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBwbHVnaW4uZ2V0TWVzc2FnZXNDb25maWcoKTsNCiAgICAgICAgICAgIFN0cmluZyBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoIm5vLWV4cGVyaWVuY2UtbGV2ZWxzIiwgIiZjWW91IGRvbid0IGhhdmUgZW5vdWdoIGV4cGVyaWVuY2UgbGV2ZWxzISIpOw0KICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcik7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KGVycm9yTWVzc2FnZSwgY29udGV4dCkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gV2l0aGRyYXcgdG90YWwgY29zdCAoYm91bnR5ICsgdGF4KQ0KICAgICAgICBpZiAodG90YWxDb3N0ID4gMCkgew0KICAgICAgICAgICAgcGx1Z2luLmdldEVjb25vbXkoKS53aXRoZHJhd1BsYXllcihwbGF5ZXIsIHRvdGFsQ29zdCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBSZW1vdmUgWFANCiAgICAgICAgaWYgKGV4cGVyaWVuY2VBbW91bnQgPiAwKSB7DQogICAgICAgICAgICBDdXJyZW5jeVV0aWwucmVtb3ZlRXhwZXJpZW5jZShwbGF5ZXIsIGV4cGVyaWVuY2VBbW91bnQpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gUmVtb3ZlIGl0ZW1zIGZyb20gaW52ZW50b3J5DQogICAgICAgIGlmIChpdGVtcyAhPSBudWxsICYmICFpdGVtcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGZvciAoSXRlbVN0YWNrIGl0ZW0gOiBpdGVtcykgew0KICAgICAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgaXRlbS5nZXRUeXBlKCkgIT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICAgICAgICAgIHBsYXllci5nZXRJbnZlbnRvcnkoKS5yZW1vdmVJdGVtKGl0ZW0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIENhbGN1bGF0ZSBmaW5hbCBib3VudHkgYW1vdW50DQogICAgICAgIGludCBib3VudHlBbW91bnQgPSAoaW50KSB0b3RhbE1vbmV5OyAvLyBNb25leSBwb3J0aW9uDQogICAgICAgIGJvdW50eUFtb3VudCArPSBleHBlcmllbmNlQW1vdW50OyAvLyBBZGQgWFAgdmFsdWUNCg0KICAgICAgICAvLyBTZXQgdGhlIGJvdW50eQ0KICAgICAgICBwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLmFkZEJvdW50eSh0YXJnZXQuZ2V0VW5pcXVlSWQoKSwgcGxheWVyLmdldFVuaXF1ZUlkKCksIGJvdW50eUFtb3VudCk7DQoNCiAgICAgICAgLy8gU2VuZCBzdWNjZXNzIG1lc3NhZ2UNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gbWVzc2FnZXNDb25maWcgPSBwbHVnaW4uZ2V0TWVzc2FnZXNDb25maWcoKTsNCiAgICAgICAgU3RyaW5nIHN1Y2Nlc3NNZXNzYWdlID0gbWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJib3VudHktc2V0LXN1Y2Nlc3MiLCAiJmFZb3UgcGxhY2VkIGEgYm91bnR5IG9mICZlJWFtb3VudCUmYSBvbiAmZSV0YXJnZXQlJmEhIFRheCBvZiAmZSV0YXglJmEgd2FzIGRlZHVjdGVkLiIpOw0KICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgIC5wbGF5ZXIocGxheWVyKQ0KICAgICAgICAgICAgICAgIC50YXJnZXQodGFyZ2V0LmdldFVuaXF1ZUlkKCkpDQogICAgICAgICAgICAgICAgLndpdGhBbW91bnQodG90YWxNb25leSkNCiAgICAgICAgICAgICAgICAudGF4QW1vdW50KHRheEFtb3VudCk7DQogICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkoc3VjY2Vzc01lc3NhZ2UsIGNvbnRleHQpKTsNCg0KICAgICAgICAvLyBTZW5kIHRheCBub3RpZmljYXRpb24gaWYgYXBwbGljYWJsZQ0KICAgICAgICBpZiAodGF4QW1vdW50ID4gMCkgew0KICAgICAgICAgICAgU3RyaW5nIHRheE1lc3NhZ2UgPSBtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImJvdW50eS1jYW5jZWwtdGF4IiwgIiZlQSAmYyV0YXhfcmF0ZSUlICZldGF4IGhhcyBiZWVuIGFwcGxpZWQuICZlVGF4IGFtb3VudDogJmMkJXRheF9hbW91bnQlIik7DQogICAgICAgICAgICBjb250ZXh0ID0gY29udGV4dC50YXhSYXRlKHRheFJhdGUgKiAxMDApLnRheEFtb3VudCh0YXhBbW91bnQpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKFBsYWNlaG9sZGVycy5hcHBseSh0YXhNZXNzYWdlLCBjb250ZXh0KSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDbG9zZSBHVUkgYW5kIGNsZWFudXANCiAgICAgICAgcGxheWVyLmNsb3NlSW52ZW50b3J5KCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyB0aGUgQWRkIE1vbmV5IGJ1dHRvbiBjbGljaywgcHJvbXB0aW5nIGZvciBpbnB1dCB2YWxpZGF0aW9uDQogICAgICogLy8gbm90ZTogSW5pdGlhdGVzIG1vbmV0YXJ5IGlucHV0IGZvciBib3VudHkgb3IgZGlzcGxheXMgbm8tbW9uZXkgdGl0bGUvbWVzc2FnZQ0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBoYW5kbGVBZGRNb25leUJ1dHRvbihQbGF5ZXIgcGxheWVyLCBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbikgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBFY29ub215IGVjb25vbXkgPSBCb3VudGllc1BsdXMuZ2V0RWNvbm9teSgpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0Q3JlYXRlR1VJQ29uZmlnKCk7DQogICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiQWRkIE1vbmV5IGJ1dHRvbiBjbGlja2VkIGJ5ICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCg0KICAgICAgICBpZiAoZWNvbm9teSA9PSBudWxsKSB7DQogICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiYm91bnR5LW5vLWVjb25vbXkiKTsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiTm8gZWNvbm9teSBwbHVnaW4gZm91bmQgZm9yIGFkZC1tb25leS1idXR0b24gYWN0aW9uIGJ5ICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIENoZWNrIGlmIHBsYXllciBjYW4gYWZmb3JkIG1pbmltdW0gYm91bnR5IGFtb3VudCBwbHVzIHRheA0KICAgICAgICBkb3VibGUgbWluQm91bnR5QW1vdW50ID0gcGx1Z2luLmdldENvbmZpZygpLmdldERvdWJsZSgibWluLWJvdW50eS1hbW91bnQiLCAxMDAuMCk7DQogICAgICAgIFRheE1hbmFnZXIgdGF4TWFuYWdlciA9IHBsdWdpbi5nZXRUYXhNYW5hZ2VyKCk7DQogICAgICAgIGRvdWJsZSBtaW5UYXhBbW91bnQgPSB0YXhNYW5hZ2VyLmNhbGN1bGF0ZVRheChtaW5Cb3VudHlBbW91bnQsIHNlc3Npb24uZ2V0SXRlbVJld2FyZHMoKSk7DQogICAgICAgIGRvdWJsZSBtaW5Ub3RhbENvc3QgPSBtaW5Cb3VudHlBbW91bnQgKyBtaW5UYXhBbW91bnQ7DQogICAgICAgIGJvb2xlYW4gYWxsb3daZXJvRG9sbGFyQm91bnRpZXMgPSBwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigiYWxsb3ctemVyby1kb2xsYXItYm91bnRpZXMiLCBmYWxzZSk7DQogICAgICAgIGlmICghYWxsb3daZXJvRG9sbGFyQm91bnRpZXMgJiYgZWNvbm9teS5nZXRCYWxhbmNlKHBsYXllcikgPCBtaW5Ub3RhbENvc3QpIHsNCiAgICAgICAgICAgIFN0cmluZyB0aXRsZSA9IGNvbmZpZy5nZXRTdHJpbmcoImFkZC1tb25leS1idXR0b24ubm8tbW9uZXktdGl0bGUiLCAiJmNZb3UgZG9uJ3QgaGF2ZSBhbnkgbW9uZXkgdG8gYWRkIik7DQogICAgICAgICAgICB0aXRsZSA9IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgUGxhY2Vob2xkZXJzLmFwcGx5KHRpdGxlLCBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcikpKTsNCiAgICAgICAgICAgIGludCBmYWRlSW4gPSBjb25maWcuZ2V0SW50KCJhZGQtbW9uZXktYnV0dG9uLnRpdGxlLWR1cmF0aW9uLmZhZGUtaW4iLCAyMCk7DQogICAgICAgICAgICBpbnQgc3RheSA9IGNvbmZpZy5nZXRJbnQoImFkZC1tb25leS1idXR0b24udGl0bGUtZHVyYXRpb24uc3RheSIsIDYwKTsNCiAgICAgICAgICAgIGludCBmYWRlT3V0ID0gY29uZmlnLmdldEludCgiYWRkLW1vbmV5LWJ1dHRvbi50aXRsZS1kdXJhdGlvbi5mYWRlLW91dCIsIDIwKTsNCiAgICAgICAgICAgIGxvbmcgY29uZmlnUmVvcGVuRGVsYXkgPSBjb25maWcuZ2V0TG9uZygiYWRkLW1vbmV5LWJ1dHRvbi5yZW9wZW4tZGVsYXkiLCAxMDApOw0KICAgICAgICAgICAgZmluYWwgbG9uZyByZW9wZW5EZWxheSA9IGNvbmZpZ1Jlb3BlbkRlbGF5IDwgMCA/IDEwMCA6IGNvbmZpZ1Jlb3BlbkRlbGF5Ow0KDQogICAgICAgICAgICBpZiAoY29uZmlnUmVvcGVuRGVsYXkgPCAwKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIkludmFsaWQgYWRkLW1vbmV5LWJ1dHRvbi5yZW9wZW4tZGVsYXkgIiArIGNvbmZpZ1Jlb3BlbkRlbGF5ICsgIiwgdXNpbmcgZGVmYXVsdCAxMDAiKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAgICAgLnBsYXllcihwbGF5ZXIpDQogICAgICAgICAgICAgICAgICAgIC53aXRoQW1vdW50KG1pblRvdGFsQ29zdCkNCiAgICAgICAgICAgICAgICAgICAgLnRheEFtb3VudChtaW5UYXhBbW91bnQpOw0KICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgImJvdW50eS1pbnN1ZmZpY2llbnQtZnVuZHMiLCBjb250ZXh0KTsNCiAgICAgICAgICAgIHNlc3Npb24uc2V0QXdhaXRpbmdJbnB1dChCb3VudHlDcmVhdGlvblNlc3Npb24uSW5wdXRUeXBlLk5PX0VYUEVSSUVOQ0VfVElUTEUpOw0KICAgICAgICAgICAgcGxheWVyLmNsb3NlSW52ZW50b3J5KCk7DQogICAgICAgICAgICBWZXJzaW9uVXRpbHMuc2VuZFRpdGxlKHBsYXllciwgdGl0bGUsICIiLCBmYWRlSW4sIHN0YXksIGZhZGVPdXQpOw0KDQogICAgICAgICAgICBsb25nIHRvdGFsRHVyYXRpb24gPSBWZXJzaW9uVXRpbHMuaXNQb3N0MTExKCkgPyAoZmFkZUluICsgc3RheSArIGZhZGVPdXQpIDogcmVvcGVuRGVsYXk7DQogICAgICAgICAgICBCdWtraXQuZ2V0U2NoZWR1bGVyKCkucnVuVGFza0xhdGVyKHBsdWdpbiwgKCkgLT4gew0KICAgICAgICAgICAgICAgIENyZWF0ZUdVSSBuZXdHdWkgPSBuZXcgQ3JlYXRlR1VJKHBsYXllciwgcGx1Z2luLmdldEV2ZW50TWFuYWdlcigpKTsNCiAgICAgICAgICAgICAgICBuZXdHdWkub3BlbkludmVudG9yeShwbGF5ZXIpOw0KICAgICAgICAgICAgICAgIHNlc3Npb24uY2xlYXJBd2FpdGluZ0lucHV0KCk7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJSZW9wZW5lZCBDcmVhdGVHVUkgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBhZnRlciBuby1tb25leSB0aXRsZSB3aXRoIHJlb3Blbi1kZWxheSAiICsgdG90YWxEdXJhdGlvbiArICIgdGlja3MiKTsNCiAgICAgICAgICAgIH0sIHRvdGFsRHVyYXRpb24pOw0KDQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBzZXNzaW9uLnNldEF3YWl0aW5nSW5wdXQoQm91bnR5Q3JlYXRpb25TZXNzaW9uLklucHV0VHlwZS5NT05FWSk7DQogICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiU2V0IE1PTkVZIGlucHV0IGZvciBwbGF5ZXI6ICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiwgc2Vzc2lvbiBhd2FpdGluZzogIiArIHNlc3Npb24uZ2V0QXdhaXRpbmdJbnB1dCgpLm5hbWUoKSk7DQoNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAubW9uZXlWYWx1ZShzZXNzaW9uLmdldE1vbmV5KCkpOw0KICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiYWRkLW1vbmV5LXByb21wdCIsIGNvbnRleHQpOw0KICAgICAgICBwbGF5ZXIuY2xvc2VJbnZlbnRvcnkoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBIYW5kbGVzIHRoZSBBZGQgRXhwZXJpZW5jZSBidXR0b24gY2xpY2ssIHByb21wdGluZyBmb3IgaW5wdXQgb3Igc2hvd2luZyBlcnJvcg0KICAgICAqIC8vIG5vdGU6IEluaXRpYXRlcyBleHBlcmllbmNlIGxldmVsIGlucHV0IGZvciBib3VudHkgb3IgZGlzcGxheXMgbm8tWFAgdGl0bGUvbWVzc2FnZQ0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBoYW5kbGVBZGRFeHBlcmllbmNlQnV0dG9uKFBsYXllciBwbGF5ZXIsIEJvdW50eUNyZWF0aW9uU2Vzc2lvbiBzZXNzaW9uKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRDcmVhdGVHVUlDb25maWcoKTsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJBZGQgRXhwZXJpZW5jZSBidXR0b24gY2xpY2tlZCBieSAiICsgcGxheWVyLmdldE5hbWUoKSk7DQoNCiAgICAgICAgaWYgKHBsYXllci5nZXRMZXZlbCgpIDw9IDApIHsNCiAgICAgICAgICAgIFN0cmluZyB0aXRsZSA9IGNvbmZpZy5nZXRTdHJpbmcoImFkZC1leHBlcmllbmNlLWJ1dHRvbi5uby1leHBlcmllbmNlLXRpdGxlIiwgIiZjWW91IGRvbid0IGhhdmUgYW55IFhQIGxldmVscyB0byBhZGQiKTsNCiAgICAgICAgICAgIHRpdGxlID0gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBQbGFjZWhvbGRlcnMuYXBwbHkodGl0bGUsIFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKS5wbGF5ZXIocGxheWVyKSkpOw0KICAgICAgICAgICAgaW50IGZhZGVJbiA9IGNvbmZpZy5nZXRJbnQoImFkZC1leHBlcmllbmNlLWJ1dHRvbi50aXRsZS1kdXJhdGlvbi5mYWRlLWluIiwgMTApOw0KICAgICAgICAgICAgaW50IHN0YXkgPSBjb25maWcuZ2V0SW50KCJhZGQtZXhwZXJpZW5jZS1idXR0b24udGl0bGUtZHVyYXRpb24uc3RheSIsIDQwKTsNCiAgICAgICAgICAgIGludCBmYWRlT3V0ID0gY29uZmlnLmdldEludCgiYWRkLWV4cGVyaWVuY2UtYnV0dG9uLnRpdGxlLWR1cmF0aW9uLmZhZGUtb3V0IiwgMTApOw0KICAgICAgICAgICAgbG9uZyByZW9wZW5EZWxheSA9IGNvbmZpZy5nZXRMb25nKCJhZGQtZXhwZXJpZW5jZS1idXR0b24ucmVvcGVuLWRlbGF5IiwgNjApOw0KDQogICAgICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAgICAgLmV4cFZhbHVlKHNlc3Npb24uZ2V0RXhwZXJpZW5jZSgpKTsNCiAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJuby1leHBlcmllbmNlLWxldmVscyIsIGNvbnRleHQpOw0KICAgICAgICAgICAgc2Vzc2lvbi5zZXRBd2FpdGluZ0lucHV0KEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5JbnB1dFR5cGUuTk9fRVhQRVJJRU5DRV9USVRMRSk7DQogICAgICAgICAgICBwbGF5ZXIuY2xvc2VJbnZlbnRvcnkoKTsNCiAgICAgICAgICAgIFZlcnNpb25VdGlscy5zZW5kVGl0bGUocGxheWVyLCB0aXRsZSwgIiIsIGZhZGVJbiwgc3RheSwgZmFkZU91dCk7DQoNCiAgICAgICAgICAgIGxvbmcgdG90YWxEdXJhdGlvbiA9IFZlcnNpb25VdGlscy5pc1Bvc3QxMTEoKSA/IChmYWRlSW4gKyBzdGF5ICsgZmFkZU91dCkgOiByZW9wZW5EZWxheTsNCiAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrTGF0ZXIocGx1Z2luLCAoKSAtPiB7DQogICAgICAgICAgICAgICAgQ3JlYXRlR1VJIG5ld0d1aSA9IG5ldyBDcmVhdGVHVUkocGxheWVyLCBwbHVnaW4uZ2V0RXZlbnRNYW5hZ2VyKCkpOw0KICAgICAgICAgICAgICAgIG5ld0d1aS5vcGVuSW52ZW50b3J5KHBsYXllcik7DQogICAgICAgICAgICAgICAgc2Vzc2lvbi5jbGVhckF3YWl0aW5nSW5wdXQoKTsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIlJlb3BlbmVkIENyZWF0ZUdVSSBmb3IgIiArIHBsYXllci5nZXROYW1lKCkgKyAiIGFmdGVyIG5vLVhQIHRpdGxlL21lc3NhZ2UiKTsNCiAgICAgICAgICAgIH0sIHRvdGFsRHVyYXRpb24pOw0KDQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBzZXNzaW9uLnNldEF3YWl0aW5nSW5wdXQoQm91bnR5Q3JlYXRpb25TZXNzaW9uLklucHV0VHlwZS5FWFBFUklFTkNFKTsNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAuZXhwVmFsdWUoc2Vzc2lvbi5nZXRFeHBlcmllbmNlKCkpOw0KICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiYWRkLXhwLXByb21wdCIsIGNvbnRleHQpOw0KICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIlByb21wdGVkICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBmb3IgZXhwZXJpZW5jZSBpbnB1dCIpOw0KICAgICAgICBwbGF5ZXIuY2xvc2VJbnZlbnRvcnkoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBIYW5kbGVzIHRoZSBBZGQgVGltZSBidXR0b24gY2xpY2ssIHByb21wdGluZyBmb3IgZHVyYXRpb24gaW5wdXQNCiAgICAgKiAvLyBub3RlOiBJbml0aWF0ZXMgdGltZSBkdXJhdGlvbiBpbnB1dCBmb3IgYm91bnR5IG9yIGRpc3BsYXlzIGVycm9yDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGhhbmRsZUFkZFRpbWVCdXR0b24oUGxheWVyIHBsYXllciwgQm91bnR5Q3JlYXRpb25TZXNzaW9uIHNlc3Npb24pIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJBZGQgVGltZSBidXR0b24gY2xpY2tlZCBieSAiICsgcGxheWVyLmdldE5hbWUoKSk7DQoNCiAgICAgICAgaWYgKCFwbHVnaW4uZ2V0Q29uZmlnKCkuZ2V0Qm9vbGVhbigidGltZS5hbGxvdy10aW1lIiwgdHJ1ZSkpIHsNCiAgICAgICAgICAgIE1lc3NhZ2VVdGlscy5zZW5kRm9ybWF0dGVkTWVzc2FnZShwbGF5ZXIsICJ0aW1lLWRpc2FibGVkIik7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIlRpbWUgc2V0dGluZ3MgZGlzYWJsZWQgZm9yICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHNlc3Npb24uc2V0QXdhaXRpbmdJbnB1dChCb3VudHlDcmVhdGlvblNlc3Npb24uSW5wdXRUeXBlLlRJTUUpOw0KICAgICAgICBQbGFjZWhvbGRlckNvbnRleHQgY29udGV4dCA9IFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKQ0KICAgICAgICAgICAgICAgIC5wbGF5ZXIocGxheWVyKQ0KICAgICAgICAgICAgICAgIC50aW1lVmFsdWUoc2Vzc2lvbi5nZXRGb3JtYXR0ZWRUaW1lKCkpOw0KICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiYWRkLXRpbWUtcHJvbXB0IiwgY29udGV4dCk7DQogICAgICAgIHBsYXllci5jbG9zZUludmVudG9yeSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEhhbmRsZXMgdGhlIFRvdGFsIEJvdW50eSBWYWx1ZSBidXR0b24gY2xpY2ssIHByb21wdGluZyBmb3IgcGxheWVyIG5hbWUgaW5wdXQNCiAgICAgKiAvLyBub3RlOiBJbml0aWF0ZXMgY2hhdCBwcm9tcHQgZm9yIHNlbGVjdGluZyBib3VudHkgdGFyZ2V0DQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGhhbmRsZVRvdGFsVmFsdWVCdXR0b24oUGxheWVyIHBsYXllciwgQm91bnR5Q3JlYXRpb25TZXNzaW9uIHNlc3Npb24pIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJUb3RhbCBWYWx1ZSBidXR0b24gY2xpY2tlZCBieSAiICsgcGxheWVyLmdldE5hbWUoKSk7DQoNCiAgICAgICAgLy8gUHJldmVudCBkdXBsaWNhdGUgcHJvbXB0cyBpZiBhbHJlYWR5IGF3YWl0aW5nIGlucHV0DQogICAgICAgIGlmIChzZXNzaW9uLmdldEF3YWl0aW5nSW5wdXQoKSA9PSBCb3VudHlDcmVhdGlvblNlc3Npb24uSW5wdXRUeXBlLlBMQVlFUl9OQU1FKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBzZXNzaW9uLnNldEF3YWl0aW5nSW5wdXQoQm91bnR5Q3JlYXRpb25TZXNzaW9uLklucHV0VHlwZS5QTEFZRVJfTkFNRSk7DQogICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiU2V0IFBMQVlFUl9OQU1FIGlucHV0IGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQoNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAucGxheWVyKHBsYXllcikNCiAgICAgICAgICAgICAgICAudGFyZ2V0KHNlc3Npb24uZ2V0VGFyZ2V0VVVJRCgpKTsNCiAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgImFkZC1wbGF5ZXItcHJvbXB0IiwgY29udGV4dCk7DQogICAgICAgIHBsYXllci5jbG9zZUludmVudG9yeSgpOw0KICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIlNlbnQgcGxheWVyIG5hbWUgcHJvbXB0IGFuZCBjbG9zZWQgR1VJIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyB0aGUgQ2FuY2VsIGJ1dHRvbiBjbGljaywgcHJvbXB0aW5nIGZvciBjb25maXJtYXRpb24gaWYgY2hhbmdlcyBleGlzdA0KICAgICAqIC8vIG5vdGU6IEluaXRpYXRlcyBib3VudHkgY3JlYXRpb24gY2FuY2VsbGF0aW9uIHdpdGggY29uZmlybWF0aW9uIHByb21wdCBvciByZXR1cm5zIHRvIEJvdW50eUdVSQ0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBoYW5kbGVDYW5jZWxCdXR0b24oUGxheWVyIHBsYXllcikgew0KICAgICAgICBCb3VudHlDcmVhdGlvblNlc3Npb24gc2Vzc2lvbiA9IEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5nZXRTZXNzaW9uKHBsYXllcik7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gQ3JlYXRlR1VJXSBDYW5jZWwgYnV0dG9uIGNsaWNrZWQgYnkgIiArIHBsYXllci5nZXROYW1lKCkpOw0KDQogICAgICAgIGlmIChzZXNzaW9uICE9IG51bGwgJiYgc2Vzc2lvbi5oYXNDaGFuZ2VzKCkpIHsNCiAgICAgICAgICAgIHNlc3Npb24uc2V0QXdhaXRpbmdJbnB1dChCb3VudHlDcmVhdGlvblNlc3Npb24uSW5wdXRUeXBlLkNBTkNFTF9DT05GSVJNQVRJT04pOw0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBDcmVhdGVHVUldIFNldCBDQU5DRUxfQ09ORklSTUFUSU9OIGlucHV0IGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiY2FuY2VsLWNvbmZpcm1hdGlvbi1wcm9tcHQiKTsNCiAgICAgICAgICAgIHBsYXllci5jbG9zZUludmVudG9yeSgpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaWYgKHNlc3Npb24gIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5yZW1vdmVTZXNzaW9uKHBsYXllcik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBwbGF5ZXIuY2xvc2VJbnZlbnRvcnkoKTsNCiAgICAgICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrTGF0ZXIocGx1Z2luLCAoKSAtPiB7DQogICAgICAgICAgICAgICAgQm91bnR5R1VJLm9wZW5Cb3VudHlHVUkocGxheWVyLCBCb3VudHlHVUkuZ2V0RmlsdGVySGlnaFRvTG93KCksIEJvdW50eUdVSS5nZXRTaG93T25seU9ubGluZSgpLCBCb3VudHlHVUkuZ2V0Q3VycmVudFBhZ2UoKSk7DQogICAgICAgICAgICB9LCAzTCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBIYW5kbGVzIGludmVudG9yeSBjbG9zZSBldmVudHMsIG1hbmFnaW5nIHNlc3Npb24gc3RhdGUNCiAgICAgKiAvLyBub3RlOiBDb250cm9scyBzZXNzaW9uIGNsZWFudXAgYW5kIGZvcmNlcyBHVUkgcmVvcGVuIGZvciBhY3RpdmUgc2Vzc2lvbnMNCiAgICAgKi8NCiAgICBARXZlbnRIYW5kbGVyDQogICAgcHVibGljIHZvaWQgb25JbnZlbnRvcnlDbG9zZShJbnZlbnRvcnlDbG9zZUV2ZW50IGV2ZW50KSB7DQogICAgICAgIGlmICghKGV2ZW50LmdldFBsYXllcigpIGluc3RhbmNlb2YgUGxheWVyKSkgcmV0dXJuOw0KICAgICAgICBpZiAoIWV2ZW50LmdldFZpZXcoKS5nZXRUaXRsZSgpLmVxdWFscyhHVUlfVElUTEUpKSByZXR1cm47DQogICAgICAgIGlmICghZXZlbnQuZ2V0UGxheWVyKCkuZXF1YWxzKHBsYXllcikpIHJldHVybjsNCg0KICAgICAgICBQbGF5ZXIgY2xvc2luZ1BsYXllciA9IChQbGF5ZXIpIGV2ZW50LmdldFBsYXllcigpOw0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIkludmVudG9yeSBjbG9zZWQgYnkgIiArIGNsb3NpbmdQbGF5ZXIuZ2V0TmFtZSgpKTsNCg0KICAgICAgICAvLyBJZ25vcmUgY2xvc3VyZXMgd2l0aGluIDEwMG1zIG9mIG9wZW5pbmcgdG8gcHJldmVudCByYWNlIGNvbmRpdGlvbnMNCiAgICAgICAgaWYgKFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpIC0gb3BlblRpbWUgPCAxMDApIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiSWdub3JpbmcgZWFybHkgaW52ZW50b3J5IGNsb3NlIGZvciAiICsgY2xvc2luZ1BsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgQm91bnR5Q3JlYXRpb25TZXNzaW9uIHNlc3Npb24gPSBCb3VudHlDcmVhdGlvblNlc3Npb24uZ2V0U2Vzc2lvbihjbG9zaW5nUGxheWVyKTsNCiAgICAgICAgaWYgKHNlc3Npb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJObyBzZXNzaW9uIGZvdW5kIGZvciAiICsgY2xvc2luZ1BsYXllci5nZXROYW1lKCkgKyAiLCBhbGxvd2luZyBjbG9zZSIpOw0KICAgICAgICAgICAgY2xlYW51cCgpOw0KICAgICAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2tMYXRlcihwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgICAgICBCb3VudHlHVUkub3BlbkJvdW50eUdVSShjbG9zaW5nUGxheWVyLCBCb3VudHlHVUkuZ2V0RmlsdGVySGlnaFRvTG93KCksIEJvdW50eUdVSS5nZXRTaG93T25seU9ubGluZSgpLCBCb3VudHlHVUkuZ2V0Q3VycmVudFBhZ2UoKSk7DQogICAgICAgICAgICB9LCAzTCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBNYXJrIEdVSSBhcyBpbmFjdGl2ZQ0KICAgICAgICBzZXNzaW9uLnNldEd1aUFjdGl2ZShmYWxzZSk7DQoNCiAgICAgICAgLy8gQWxsb3cgY2xvc2luZyBpZiBhd2FpdGluZyBpbnB1dCBmb3IgcHJvbXB0cw0KICAgICAgICBpZiAoc2Vzc2lvbi5pc0F3YWl0aW5nSW5wdXQoKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJQcmVzZXJ2aW5nIHNlc3Npb24gZm9yICIgKyBjbG9zaW5nUGxheWVyLmdldE5hbWUoKSArICI6IGF3YWl0aW5nIGlucHV0IHR5cGUgIiArIHNlc3Npb24uZ2V0QXdhaXRpbmdJbnB1dCgpLm5hbWUoKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBBbGxvdyBjbG9zaW5nIGlmIGNvbmZpcm0gYnV0dG9uIHdhcyBwcmVzc2VkIGFuZCBib3VudHkgaXMgdmFsaWQNCiAgICAgICAgaWYgKHNlc3Npb24uaXNDb25maXJtUHJlc3NlZCgpICYmIHNlc3Npb24uaXNWYWxpZCgpKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIlNraXBwaW5nIEdVSSByZW9wZW4gZm9yICIgKyBjbG9zaW5nUGxheWVyLmdldE5hbWUoKSArICI6IGNvbmZpcm0gcHJlc3NlZCB3aXRoIHZhbGlkIGJvdW50eSIpOw0KICAgICAgICAgICAgY2xlYW51cCgpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gRm9yY2UgcmVvcGVuIENyZWF0ZUdVSSBpZiBzZXNzaW9uIGhhcyBjaGFuZ2VzDQogICAgICAgIGlmIChzZXNzaW9uLmhhc0NoYW5nZXMoKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJGb3JjaW5nIENyZWF0ZUdVSSByZW9wZW4gZm9yICIgKyBjbG9zaW5nUGxheWVyLmdldE5hbWUoKSArICI6IGFjdGl2ZSBzZXNzaW9uIHdpdGggY2hhbmdlcyIpOw0KICAgICAgICAgICAgQnVra2l0LmdldFNjaGVkdWxlcigpLnJ1blRhc2tMYXRlcihwbHVnaW4sICgpIC0+IHsNCiAgICAgICAgICAgICAgICBDcmVhdGVHVUkgbmV3R3VpID0gbmV3IENyZWF0ZUdVSShjbG9zaW5nUGxheWVyLCBwbHVnaW4uZ2V0RXZlbnRNYW5hZ2VyKCkpOw0KICAgICAgICAgICAgICAgIG5ld0d1aS5vcGVuSW52ZW50b3J5KGNsb3NpbmdQbGF5ZXIpOw0KICAgICAgICAgICAgfSwgM0wpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQWxsb3cgY2xvc2luZyBhbmQgcmV0dXJuIHRvIEJvdW50eUdVSSBpZiBubyBjaGFuZ2VzDQogICAgICAgIEJvdW50eUNyZWF0aW9uU2Vzc2lvbi5yZW1vdmVTZXNzaW9uKGNsb3NpbmdQbGF5ZXIpOw0KICAgICAgICBjbGVhbnVwKCk7DQogICAgICAgIEJ1a2tpdC5nZXRTY2hlZHVsZXIoKS5ydW5UYXNrTGF0ZXIocGx1Z2luLCAoKSAtPiB7DQogICAgICAgICAgICBCb3VudHlHVUkub3BlbkJvdW50eUdVSShjbG9zaW5nUGxheWVyLCBCb3VudHlHVUkuZ2V0RmlsdGVySGlnaFRvTG93KCksIEJvdW50eUdVSS5nZXRTaG93T25seU9ubGluZSgpLCBCb3VudHlHVUkuZ2V0Q3VycmVudFBhZ2UoKSk7DQogICAgICAgIH0sIDNMKTsNCiAgICB9DQp9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG9ueTI2L2JvdW50aWVzUGx1cy9HVUlzL0h1bnRlckRlbkdVSS5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMTM0NjQ1IDE1MDI2NzAzNzc0IDAxNzAzMAAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYWNrYWdlIHRvbnkyNi5ib3VudGllc1BsdXMuR1VJczsNCg0KaW1wb3J0IG5ldC5tZF81LmJ1bmdlZS5hcGkuY2hhdC5CYXNlQ29tcG9uZW50Ow0KaW1wb3J0IG9yZy5idWtraXQuQnVra2l0Ow0KaW1wb3J0IG9yZy5idWtraXQuQ2hhdENvbG9yOw0KaW1wb3J0IG9yZy5idWtraXQuTWF0ZXJpYWw7DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuRmlsZUNvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuWWFtbENvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5lbmNoYW50bWVudHMuRW5jaGFudG1lbnQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuRXZlbnRIYW5kbGVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuSGFuZGxlckxpc3Q7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5MaXN0ZW5lcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LmludmVudG9yeS5DbGlja1R5cGU7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5pbnZlbnRvcnkuSW52ZW50b3J5Q2xpY2tFdmVudDsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JbnZlbnRvcnk7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSW52ZW50b3J5SG9sZGVyOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1GbGFnOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1TdGFjazsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5tZXRhLkl0ZW1NZXRhOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuQm91bnRpZXNQbHVzOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuRXZlbnRNYW5hZ2VyOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuU2t1bGxVdGlsczsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlRheE1hbmFnZXI7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy4qOw0KaW1wb3J0IG5ldC5tZF81LmJ1bmdlZS5hcGkuY2hhdC5UZXh0Q29tcG9uZW50Ow0KaW1wb3J0IG1lLmNsaXAucGxhY2Vob2xkZXJhcGkuUGxhY2Vob2xkZXJBUEk7DQoNCmltcG9ydCBqYXZhLmlvLkZpbGU7DQppbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7DQppbXBvcnQgamF2YS51dGlsLlNldDsNCmltcG9ydCBqYXZhLnV0aWwuKjsNCmltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7DQoNCnB1YmxpYyBjbGFzcyBIdW50ZXJEZW5HVUkgaW1wbGVtZW50cyBJbnZlbnRvcnlIb2xkZXIsIExpc3RlbmVyIHsNCg0KICAgIHByaXZhdGUgZmluYWwgSW52ZW50b3J5IGludmVudG9yeTsNCiAgICBwcml2YXRlIGZpbmFsIFBsYXllciBwbGF5ZXI7DQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KICAgIHByaXZhdGUgU3RyaW5nIEdVSV9USVRMRTsNCiAgICBwcml2YXRlIHRyYW5zaWVudCBJbnZlbnRvcnlDbGlja0V2ZW50IGV2ZW50OyAvLyBTdG9yZSBldmVudCBmb3IgY2xpY2sgdHlwZSBhY2Nlc3MNCiAgICBwcml2YXRlIGZpbmFsIEZpbGVDb25maWd1cmF0aW9uIG1lc3NhZ2VzQ29uZmlnOw0KICAgIHByaXZhdGUgZmluYWwgU2V0PEludGVnZXI+IHByb3RlY3RlZFNsb3RzID0gbmV3IEhhc2hTZXQ8PigpOw0KDQogICAgLyoqDQogICAgICogQ29uc3RydWN0cyB0aGUgSHVudGVyRGVuR1VJIGZvciBhIHBsYXllcg0KICAgICAqIC8vIG5vdGU6IEluaXRpYWxpemVzIHRoZSBzaG9wIEdVSSB3aXRoIGl0ZW1zLCBib3JkZXJzLCBhbmQgcmVnaXN0ZXJzIGxpc3RlbmVycw0KICAgICAqLw0KICAgIHB1YmxpYyBIdW50ZXJEZW5HVUkoUGxheWVyIHBsYXllciwgRXZlbnRNYW5hZ2VyIGV2ZW50TWFuYWdlcikgew0KICAgICAgICB0aGlzLnBsYXllciA9IHBsYXllcjsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKTsNCiAgICAgICAgdGhpcy5tZXNzYWdlc0NvbmZpZyA9IHBsdWdpbi5nZXRNZXNzYWdlc0NvbmZpZygpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0SHVudGVyc0RlbkNvbmZpZygpOw0KICAgICAgICBGaWxlIGNvbmZpZ0ZpbGUgPSBuZXcgRmlsZShwbHVnaW4uZ2V0RGF0YUZvbGRlcigpLCAiR1VJcy9IdW50ZXJzRGVuLnltbCIpOw0KDQogICAgICAgIC8vIFZlcmlmeSBjb25maWd1cmF0aW9uIGludGVncml0eQ0KICAgICAgICBpZiAoIWNvbmZpZ0ZpbGUuZXhpc3RzKCkgfHwgY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJQbHVnaW4tSXRlbXMiKSA9PSBudWxsKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCkubG9nV2FybmluZygiW0RFQlVHIC0gSHVudGVyRGVuR1VJXSBIdW50ZXJzRGVuLnltbCBpcyBtaXNzaW5nIG9yIGludmFsaWQsIHJlbG9hZGluZyBkZWZhdWx0Iik7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGlmIChjb25maWdGaWxlLmV4aXN0cygpKSBjb25maWdGaWxlLmRlbGV0ZSgpOyAvLyBSZW1vdmUgaW52YWxpZCBmaWxlDQogICAgICAgICAgICAgICAgcGx1Z2luLnNhdmVSZXNvdXJjZSgiR1VJcy9IdW50ZXJzRGVuLnltbCIsIGZhbHNlKTsgLy8gQ29weSBkZWZhdWx0DQogICAgICAgICAgICAgICAgY29uZmlnID0gWWFtbENvbmZpZ3VyYXRpb24ubG9hZENvbmZpZ3VyYXRpb24oY29uZmlnRmlsZSk7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldERlYnVnTWFuYWdlcigpLmxvZ0RlYnVnKCJbREVCVUcgLSBIdW50ZXJEZW5HVUldIFJlbG9hZGVkIGRlZmF1bHQgSHVudGVyc0Rlbi55bWwiKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgcGx1Z2luLmdldERlYnVnTWFuYWdlcigpLmxvZ1dhcm5pbmcoIltERUJVRyAtIEh1bnRlckRlbkdVSV0gRmFpbGVkIHRvIHJlbG9hZCBkZWZhdWx0IEh1bnRlcnNEZW4ueW1sOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgdGhpcy5HVUlfVElUTEUgPSBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGNvbmZpZy5nZXRTdHJpbmcoImd1aS10aXRsZSIsICImNCZs4pqUIEh1bnRlcidzIERlbiDimpQiKSk7DQogICAgICAgIHRoaXMuaW52ZW50b3J5ID0gQnVra2l0LmNyZWF0ZUludmVudG9yeSh0aGlzLCA1NCwgR1VJX1RJVExFKTsNCiAgICAgICAgZXZlbnRNYW5hZ2VyLnJlZ2lzdGVyKHRoaXMpOw0KICAgICAgICBpbml0aWFsaXplR1VJKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSW5pdGlhbGl6ZXMgdGhlIEdVSSB3aXRoIHNob3AgaXRlbXMsIGV4dHJhIGl0ZW1zLCBiYWNrIGJ1dHRvbiwgYW5kIGJvcmRlcnMNCiAgICAgKiAvLyBub3RlOiBQb3B1bGF0ZXMgR1VJIGluIGNvcnJlY3Qgb3JkZXIgdG8gcHJldmVudCBzbG90IGNvbmZsaWN0cw0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBpbml0aWFsaXplR1VJKCkgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0SHVudGVyc0RlbkNvbmZpZygpOw0KDQogICAgICAgIC8vIEFkZCBzaG9wIGl0ZW1zIGZpcnN0IHRvIHJlc2VydmUgdGhlaXIgc2xvdHMNCiAgICAgICAgYWRkU2hvcEl0ZW1zKGNvbmZpZyk7DQoNCiAgICAgICAgLy8gQWRkIGV4dHJhIGl0ZW1zDQogICAgICAgIGFkZEV4dHJhSXRlbXMoY29uZmlnKTsNCg0KICAgICAgICAvLyBBZGQgYmFjayBidXR0b24NCiAgICAgICAgYWRkQmFja0J1dHRvbihjb25maWcpOw0KDQogICAgICAgIC8vIEFkZCBib3JkZXJzIGxhc3QsIHNraXBwaW5nIG9jY3VwaWVkIHNsb3RzDQogICAgICAgIGFkZEJvcmRlcnMoY29uZmlnKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIGJvcmRlcnMgdG8gdGhlIEdVSSwgc2tpcHBpbmcgb2NjdXBpZWQgc2xvdHMNCiAgICAgKiAvLyBub3RlOiBQb3B1bGF0ZXMgYm9yZGVyIHNsb3RzIHdpdGggY29uZmlndXJlZCBtYXRlcmlhbCwgYXZvaWRpbmcgc2hvcCBpdGVtcywgZXh0cmEgaXRlbXMsIGFuZCBiYWNrIGJ1dHRvbg0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBhZGRCb3JkZXJzKEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZykgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBpZiAoIWNvbmZpZy5nZXRCb29sZWFuKCJib3JkZXIuZW5hYmxlZCIsIHRydWUpKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVR10gQm9yZGVycyBkaXNhYmxlZCBpbiBIdW50ZXJzRGVuLnltbCIpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgU3RyaW5nIG1hdGVyaWFsTmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoImJvcmRlci5tYXRlcmlhbCIsICJSRURfU1RBSU5FRF9HTEFTU19QQU5FIik7DQogICAgICAgIFN0cmluZyBuYW1lID0gY29uZmlnLmdldFN0cmluZygiYm9yZGVyLm5hbWUiLCAiICIpOw0KICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KCJib3JkZXIubG9yZSIpOw0KICAgICAgICBib29sZWFuIGVuY2hhbnRtZW50R2xvdyA9IGNvbmZpZy5nZXRCb29sZWFuKCJib3JkZXIuZW5jaGFudG1lbnQtZ2xvdyIsIGZhbHNlKTsNCiAgICAgICAgTGlzdDxJbnRlZ2VyPiBib3JkZXJTbG90cyA9IGNvbmZpZy5nZXRJbnRlZ2VyTGlzdCgiYm9yZGVyLnNsb3RzIik7DQoNCiAgICAgICAgaWYgKGJvcmRlclNsb3RzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCA5OyBpKyspIGJvcmRlclNsb3RzLmFkZChpKTsNCiAgICAgICAgICAgIGZvciAoaW50IGkgPSA0NTsgaSA8IDU0OyBpKyspIGJvcmRlclNsb3RzLmFkZChpKTsNCiAgICAgICAgICAgIGZvciAoaW50IGkgPSA5OyBpIDwgNDU7IGkgKz0gOSkgYm9yZGVyU2xvdHMuYWRkKGkpOw0KICAgICAgICAgICAgZm9yIChpbnQgaSA9IDE3OyBpIDwgNDU7IGkgKz0gOSkgYm9yZGVyU2xvdHMuYWRkKGkpOw0KICAgICAgICB9DQoNCiAgICAgICAgTWF0ZXJpYWwgYm9yZGVyTWF0ZXJpYWwgPSBWZXJzaW9uVXRpbHMuZ2V0TWF0ZXJpYWxTYWZlbHkobWF0ZXJpYWxOYW1lLCAiR0xBU1NfUEFORSIpOw0KICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQogICAgICAgIGlmICghVmVyc2lvblV0aWxzLmlzR2xhc3NQYW5lKG5ldyBJdGVtU3RhY2soYm9yZGVyTWF0ZXJpYWwpKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIkludmFsaWQgYm9yZGVyIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIicgaW4gSHVudGVyc0Rlbi55bWwsIHVzaW5nIFJFRF9TVEFJTkVEX0dMQVNTX1BBTkUiKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIjsNCiAgICAgICAgICAgIGJvcmRlck1hdGVyaWFsID0gVmVyc2lvblV0aWxzLmdldE1hdGVyaWFsU2FmZWx5KCJSRURfU1RBSU5FRF9HTEFTU19QQU5FIiwgIlNUQUlORURfR0xBU1NfUEFORSIpOw0KICAgICAgICB9DQoNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHRoaXMucGxheWVyKTsNCiAgICAgICAgbmFtZSA9IFBsYWNlaG9sZGVycy5hcHBseShuYW1lLCBjb250ZXh0KTsNCiAgICAgICAgbG9yZSA9IFBsYWNlaG9sZGVycy5hcHBseShsb3JlLCBjb250ZXh0KTsNCg0KICAgICAgICBJdGVtU3RhY2sgYm9yZGVySXRlbSA9IGNyZWF0ZUNvbmZpZ3VyYWJsZUl0ZW0oYm9yZGVyTWF0ZXJpYWwsIG5hbWUsIGxvcmUsIGVuY2hhbnRtZW50R2xvdyk7DQogICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBib3JkZXJJdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmIChtZXRhID09IG51bGwpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIGZvciBib3JkZXIgaXRlbSIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIjsNCiAgICAgICAgfQ0KDQogICAgICAgIGludCB0b3RhbEl0ZW1zID0gYm9yZGVyU2xvdHMuc2l6ZSgpOw0KICAgICAgICBpbnQgc3VjY2Vzc2Z1bEl0ZW1zID0gMDsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGZhaWx1cmVzID0gbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgZm9yIChpbnQgc2xvdCA6IGJvcmRlclNsb3RzKSB7DQogICAgICAgICAgICBpZiAoc2xvdCA+PSAwICYmIHNsb3QgPCA1NCkgew0KICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlUmVhc29uID09IG51bGwgJiYgaW52ZW50b3J5LmdldEl0ZW0oc2xvdCkgPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBpbnZlbnRvcnkuc2V0SXRlbShzbG90LCBib3JkZXJJdGVtKTsNCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkU2xvdHMuYWRkKHNsb3QpOw0KICAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsSXRlbXMrKzsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZhaWx1cmVSZWFzb24gIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoImJvcmRlci1zbG90LSIgKyBzbG90ICsgIiBSZWFzb246ICIgKyBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoImJvcmRlci1zbG90LSIgKyBzbG90ICsgIiBSZWFzb246IFNsb3Qgb2NjdXBpZWQiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJJbnZhbGlkIHNsb3QgIiArIHNsb3QgKyAiIGluIEh1bnRlcnNEZW4ueW1sIGJvcmRlciBjb25maWd1cmF0aW9uIik7DQogICAgICAgICAgICAgICAgZmFpbHVyZXMuYWRkKCJib3JkZXItc2xvdC0iICsgc2xvdCArICIgUmVhc29uOiBJbnZhbGlkIHNsb3QgIiArIHNsb3QpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gTG9nIGNvbnNvbGlkYXRlZCBkZWJ1ZyBtZXNzYWdlDQogICAgICAgIGlmIChzdWNjZXNzZnVsSXRlbXMgPT0gdG90YWxJdGVtcykgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUddIEFsbCBib3JkZXIgaXRlbXMgY3JlYXRlZCIpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVNZXNzYWdlID0gIltERUJVR10gIiArIHN1Y2Nlc3NmdWxJdGVtcyArICIvIiArIHRvdGFsSXRlbXMgKyAiIGJvcmRlciBpdGVtcyBjcmVhdGVkIjsNCiAgICAgICAgICAgIGlmICghZmFpbHVyZXMuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgZmFpbHVyZU1lc3NhZ2UgKz0gIiwgZmFpbGVkIHRvIGNyZWF0ZTogIiArIFN0cmluZy5qb2luKCIsICIsIGZhaWx1cmVzKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5idWZmZXJGYWlsdXJlKCJIdW50ZXJEZW5HVUlfYm9yZGVyX2l0ZW1zXyIgKyBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSwgZmFpbHVyZU1lc3NhZ2UpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQWRkcyBzaG9wIGl0ZW1zIHRvIHRoZSBHVUkgZnJvbSBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogUG9wdWxhdGVzIHB1cmNoYXNhYmxlIGl0ZW1zIGZyb20gUGx1Z2luLUl0ZW1zIHdpdGggY29uZmlndXJhYmxlIHByb3BlcnRpZXMgYW5kIHBsYWNlaG9sZGVycw0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBhZGRTaG9wSXRlbXMoRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnKSB7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIFNldDxTdHJpbmc+IHNob3BJdGVtS2V5cyA9IGNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiUGx1Z2luLUl0ZW1zIikgIT0gbnVsbCA/DQogICAgICAgICAgICAgICAgY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJQbHVnaW4tSXRlbXMiKS5nZXRLZXlzKGZhbHNlKSA6IG5ldyBIYXNoU2V0PD4oKTsNCiAgICAgICAgc2hvcEl0ZW1LZXlzLnJlbW92ZSgiYm9yZGVyIik7IC8vIEV4Y2x1ZGUgYm9yZGVyIGl0ZW0NCiAgICAgICAgc2hvcEl0ZW1LZXlzLnJlbW92ZSgiYmFjay1idXR0b24iKTsgLy8gRXhjbHVkZSBiYWNrIGJ1dHRvbg0KICAgICAgICBpbnQgdG90YWxJdGVtcyA9IHNob3BJdGVtS2V5cy5zaXplKCk7DQogICAgICAgIGludCBzdWNjZXNzZnVsSXRlbXMgPSAwOw0KICAgICAgICBMaXN0PFN0cmluZz4gZmFpbHVyZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCg0KICAgICAgICBmb3IgKFN0cmluZyBpdGVtSWQgOiBzaG9wSXRlbUtleXMpIHsNCiAgICAgICAgICAgIFN0cmluZyBiYXNlUGF0aCA9ICJQbHVnaW4tSXRlbXMuIiArIGl0ZW1JZDsNCiAgICAgICAgICAgIGludCBzbG90ID0gY29uZmlnLmdldEludChiYXNlUGF0aCArICIuc2xvdCIsIC0xKTsNCiAgICAgICAgICAgIFN0cmluZyBmYWlsdXJlUmVhc29uID0gbnVsbDsNCg0KICAgICAgICAgICAgaWYgKHNsb3QgPCAwIHx8IHNsb3QgPj0gNTQpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZyhtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoIndhcm5pbmdzLmludmFsaWQtaXRlbS1zbG90IiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkludmFsaWQgc2xvdCAlc2xvdCUgZm9yIGl0ZW0gJWl0ZW0lIGluIEh1bnRlcnNEZW4ueW1sIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlc2xvdCUiLCBTdHJpbmcudmFsdWVPZihzbG90KSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlaXRlbSUiLCBpdGVtSWQpKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoaXRlbUlkICsgIiBSZWFzb246IEludmFsaWQgc2xvdCAiICsgc2xvdCk7DQogICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIFN0cmluZyBtYXRlcmlhbE5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKGJhc2VQYXRoICsgIi5tYXRlcmlhbCIsICJTVE9ORSIpOw0KICAgICAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgICAgICBpZiAoaXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJTVE9ORSIpKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcobWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJ3YXJuaW5ncy5pbnZhbGlkLWl0ZW0tbWF0ZXJpYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiSW52YWxpZCBtYXRlcmlhbCAnJW1hdGVyaWFsJScgZm9yIGl0ZW0gJWl0ZW0lIGluIEh1bnRlcnNEZW4ueW1sLCB1c2luZyBTVE9ORSIpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW1hdGVyaWFsJSIsIG1hdGVyaWFsTmFtZSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlaXRlbSUiLCBpdGVtSWQpKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyI7DQogICAgICAgICAgICAgICAgaXRlbSA9IG5ldyBJdGVtU3RhY2soTWF0ZXJpYWwuU1RPTkUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBTdHJpbmcgbmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoYmFzZVBhdGggKyAiLm5hbWUiLCAiJmYiICsgaXRlbUlkKTsNCiAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gY29uZmlnLmdldFN0cmluZ0xpc3QoYmFzZVBhdGggKyAiLmxvcmUiKTsNCiAgICAgICAgICAgIGJvb2xlYW4gZW5jaGFudG1lbnRHbG93ID0gY29uZmlnLmdldEJvb2xlYW4oYmFzZVBhdGggKyAiLmVuY2hhbnRtZW50LWdsb3ciLCBmYWxzZSk7DQoNCiAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgICAgIC5wbGF5ZXIodGhpcy5wbGF5ZXIpDQogICAgICAgICAgICAgICAgICAgIC5tb25leVZhbHVlKGNvbmZpZy5nZXREb3VibGUoYmFzZVBhdGggKyAiLnByaWNlIiwgMC4wKSkNCiAgICAgICAgICAgICAgICAgICAgLmV4cFZhbHVlKGNvbmZpZy5nZXRJbnQoYmFzZVBhdGggKyAiLnhwLXByaWNlIiwgMCkpDQogICAgICAgICAgICAgICAgICAgIC5pdGVtQ291bnQoY29uZmlnLmdldEludChiYXNlUGF0aCArICIuc2t1bGwtY291bnQiLCAwKSkNCiAgICAgICAgICAgICAgICAgICAgLndpdGhBbW91bnQoY29uZmlnLmdldERvdWJsZShiYXNlUGF0aCArICIubWluLXNrdWxsLXZhbHVlIiwgMC4wKSk7DQoNCiAgICAgICAgICAgIG5hbWUgPSBQbGFjZWhvbGRlcnMuYXBwbHkobmFtZSwgY29udGV4dCk7DQogICAgICAgICAgICBsb3JlID0gUGxhY2Vob2xkZXJzLmFwcGx5KGxvcmUsIGNvbnRleHQpOw0KDQogICAgICAgICAgICBJdGVtTWV0YSBtZXRhID0gaXRlbS5nZXRJdGVtTWV0YSgpOw0KICAgICAgICAgICAgaWYgKG1ldGEgPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygid2FybmluZ3MuaXRlbS1sb2FkLWVycm9yIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkVycm9yIGxvYWRpbmcgc2hvcCBpdGVtICVpdGVtJSBmcm9tIEh1bnRlcnNEZW4ueW1sOiAlZXJyb3IlIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlaXRlbSUiLCBpdGVtSWQpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJWVycm9yJSIsICJGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIikpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIG1ldGEuc2V0RGlzcGxheU5hbWUoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBuYW1lKSk7DQogICAgICAgICAgICAgICAgaWYgKGxvcmUgIT0gbnVsbCAmJiAhbG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGNvbG9yZWRMb3JlID0gbG9yZS5zdHJlYW0oKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAobGluZSAtPiBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGxpbmUpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpOw0KICAgICAgICAgICAgICAgICAgICBtZXRhLnNldExvcmUoY29sb3JlZExvcmUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoZW5jaGFudG1lbnRHbG93KSB7DQogICAgICAgICAgICAgICAgICAgIG1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGl0ZW0uc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChmYWlsdXJlUmVhc29uID09IG51bGwgJiYgaW52ZW50b3J5LmdldEl0ZW0oc2xvdCkgPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKHNsb3QsIGl0ZW0pOw0KICAgICAgICAgICAgICAgIHByb3RlY3RlZFNsb3RzLmFkZChzbG90KTsNCiAgICAgICAgICAgICAgICBzdWNjZXNzZnVsSXRlbXMrKzsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmFpbHVyZVJlYXNvbiAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgZmFpbHVyZXMuYWRkKGl0ZW1JZCArICIgUmVhc29uOiAiICsgZmFpbHVyZVJlYXNvbik7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygid2FybmluZ3Muc2xvdC1vY2N1cGllZCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJTbG90ICVzbG90JSBmb3IgJWl0ZW0lIGlzIGFscmVhZHkgb2NjdXBpZWQiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVzbG90JSIsIFN0cmluZy52YWx1ZU9mKHNsb3QpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVpdGVtJSIsIGl0ZW1JZCkpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZChpdGVtSWQgKyAiIFJlYXNvbjogU2xvdCAiICsgc2xvdCArICIgb2NjdXBpZWQiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmICh0b3RhbEl0ZW1zID09IDApIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHXSBObyBzaG9wIGl0ZW1zIHRvIGNyZWF0ZSIpOw0KICAgICAgICB9IGVsc2UgaWYgKHN1Y2Nlc3NmdWxJdGVtcyA9PSB0b3RhbEl0ZW1zKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVR10gQWxsIHNob3AgaXRlbXMgY3JlYXRlZCIpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVNZXNzYWdlID0gIltERUJVR10gIiArIHN1Y2Nlc3NmdWxJdGVtcyArICIvIiArIHRvdGFsSXRlbXMgKyAiIHNob3AgaXRlbXMgY3JlYXRlZCI7DQogICAgICAgICAgICBpZiAoIWZhaWx1cmVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGZhaWx1cmVNZXNzYWdlICs9ICIsIGZhaWxlZCB0byBjcmVhdGU6ICIgKyBTdHJpbmcuam9pbigiLCAiLCBmYWlsdXJlcyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRmFpbHVyZSgiSHVudGVyRGVuR1VJX3Nob3BfaXRlbXNfIiArIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpLCBmYWlsdXJlTWVzc2FnZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIGV4dHJhIGRlY29yYXRpdmUgaXRlbXMgdG8gdGhlIEdVSQ0KICAgICAqIC8vIG5vdGU6IFBvcHVsYXRlcyBub24tcHVyY2hhc2FibGUgZGVjb3JhdGl2ZSBpdGVtcyBmcm9tIEN1c3RvbS1JdGVtcyB3aXRoIHBsYWNlaG9sZGVycw0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBhZGRFeHRyYUl0ZW1zKEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZykgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBTZXQ8U3RyaW5nPiBleHRyYUl0ZW1LZXlzID0gY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJDdXN0b20tSXRlbXMiKSAhPSBudWxsID8NCiAgICAgICAgICAgICAgICBjb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oIkN1c3RvbS1JdGVtcyIpLmdldEtleXMoZmFsc2UpIDogbmV3IEhhc2hTZXQ8PigpOw0KICAgICAgICBpbnQgdG90YWxJdGVtcyA9IGV4dHJhSXRlbUtleXMuc2l6ZSgpOw0KICAgICAgICBpbnQgc3VjY2Vzc2Z1bEl0ZW1zID0gMDsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGZhaWx1cmVzID0gbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgZm9yIChTdHJpbmcgaXRlbUlkIDogZXh0cmFJdGVtS2V5cykgew0KICAgICAgICAgICAgU3RyaW5nIGJhc2VQYXRoID0gIkN1c3RvbS1JdGVtcy4iICsgaXRlbUlkOw0KICAgICAgICAgICAgTGlzdDxJbnRlZ2VyPiBzbG90cyA9IGNvbmZpZy5jb250YWlucyhiYXNlUGF0aCArICIuc2xvdHMiKSA/DQogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5nZXRJbnRlZ2VyTGlzdChiYXNlUGF0aCArICIuc2xvdHMiKSA6DQogICAgICAgICAgICAgICAgICAgIChjb25maWcuY29udGFpbnMoYmFzZVBhdGggKyAiLnNsb3QiKSA/IENvbGxlY3Rpb25zLnNpbmdsZXRvbkxpc3QoY29uZmlnLmdldEludChiYXNlUGF0aCArICIuc2xvdCIsIC0xKSkgOiBDb2xsZWN0aW9ucy5lbXB0eUxpc3QoKSk7DQogICAgICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQoNCiAgICAgICAgICAgIFN0cmluZyBtYXRlcmlhbE5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKGJhc2VQYXRoICsgIi5tYXRlcmlhbCIsICJTVE9ORSIpOw0KICAgICAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgICAgICBpZiAoaXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJTVE9ORSIpKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcobWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJ3YXJuaW5ncy5pbnZhbGlkLWV4dHJhLWl0ZW0tbWF0ZXJpYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiSW52YWxpZCBtYXRlcmlhbCAnJW1hdGVyaWFsJScgZm9yIGV4dHJhIGl0ZW0gJWl0ZW0lIGluIEh1bnRlcnNEZW4ueW1sLCB1c2luZyBTVE9ORSIpDQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJW1hdGVyaWFsJSIsIG1hdGVyaWFsTmFtZSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlaXRlbSUiLCBpdGVtSWQpKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyI7DQogICAgICAgICAgICAgICAgaXRlbSA9IG5ldyBJdGVtU3RhY2soTWF0ZXJpYWwuU1RPTkUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBTdHJpbmcgbmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoYmFzZVBhdGggKyAiLm5hbWUiLCAiJmYiICsgaXRlbUlkKTsNCiAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gY29uZmlnLmdldFN0cmluZ0xpc3QoYmFzZVBhdGggKyAiLmxvcmUiKTsNCiAgICAgICAgICAgIGJvb2xlYW4gZW5jaGFudG1lbnRHbG93ID0gY29uZmlnLmdldEJvb2xlYW4oYmFzZVBhdGggKyAiLmVuY2hhbnRtZW50LWdsb3ciLCBmYWxzZSk7DQoNCiAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgICAgIC5wbGF5ZXIodGhpcy5wbGF5ZXIpDQogICAgICAgICAgICAgICAgICAgIC5leHBWYWx1ZShwbGF5ZXIuZ2V0TGV2ZWwoKSkNCiAgICAgICAgICAgICAgICAgICAgLm1vbmV5VmFsdWUoQm91bnRpZXNQbHVzLmdldEVjb25vbXkoKSAhPSBudWxsID8gQm91bnRpZXNQbHVzLmdldEVjb25vbXkoKS5nZXRCYWxhbmNlKHBsYXllcikgOiAwLjApOw0KDQogICAgICAgICAgICBuYW1lID0gUGxhY2Vob2xkZXJzLmFwcGx5KG5hbWUsIGNvbnRleHQpOw0KICAgICAgICAgICAgbG9yZSA9IFBsYWNlaG9sZGVycy5hcHBseShsb3JlLCBjb250ZXh0KTsNCg0KICAgICAgICAgICAgSXRlbU1ldGEgbWV0YSA9IGl0ZW0uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgICAgIGlmIChtZXRhID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZyhtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoIndhcm5pbmdzLmV4dHJhLWl0ZW0tbG9hZC1lcnJvciIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJFcnJvciBsb2FkaW5nIGV4dHJhIGl0ZW0gJWl0ZW0lIGZyb20gSHVudGVyc0Rlbi55bWw6ICVlcnJvciUiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVpdGVtJSIsIGl0ZW1JZCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlZXJyb3IlIiwgIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEiKSk7DQogICAgICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIjsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIG5hbWUpKTsNCiAgICAgICAgICAgICAgICBpZiAobG9yZSAhPSBudWxsICYmICFsb3JlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gY29sb3JlZExvcmUgPSBsb3JlLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChsaW5lIC0+IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbGluZSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSk7DQogICAgICAgICAgICAgICAgICAgIG1ldGEuc2V0TG9yZShjb2xvcmVkTG9yZSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChlbmNoYW50bWVudEdsb3cpIHsNCiAgICAgICAgICAgICAgICAgICAgbWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0VOQ0hBTlRTKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaXRlbS5zZXRJdGVtTWV0YShtZXRhKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZm9yIChpbnQgc2xvdCA6IHNsb3RzKSB7DQogICAgICAgICAgICAgICAgaWYgKHNsb3QgPCAwIHx8IHNsb3QgPj0gNTQpIHsNCiAgICAgICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcobWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJ3YXJuaW5ncy5pbnZhbGlkLWV4dHJhLWl0ZW0tc2xvdCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiSW52YWxpZCBzbG90ICVzbG90JSBmb3IgZXh0cmEgaXRlbSAlaXRlbSUgaW4gSHVudGVyc0Rlbi55bWwiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlc2xvdCUiLCBTdHJpbmcudmFsdWVPZihzbG90KSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJWl0ZW0lIiwgaXRlbUlkKSk7DQogICAgICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZChpdGVtSWQgKyAiIGF0IHNsb3QgIiArIHNsb3QgKyAiIFJlYXNvbjogSW52YWxpZCBzbG90Iik7DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlUmVhc29uID09IG51bGwgJiYgaW52ZW50b3J5LmdldEl0ZW0oc2xvdCkgPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBpbnZlbnRvcnkuc2V0SXRlbShzbG90LCBpdGVtLmNsb25lKCkpOw0KICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWRTbG90cy5hZGQoc2xvdCk7DQogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxJdGVtcysrOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmFpbHVyZVJlYXNvbiAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZChpdGVtSWQgKyAiIGF0IHNsb3QgIiArIHNsb3QgKyAiIFJlYXNvbjogIiArIGZhaWx1cmVSZWFzb24pOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygid2FybmluZ3Muc2xvdC1vY2N1cGllZCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiU2xvdCAlc2xvdCUgZm9yICVpdGVtJSBpcyBhbHJlYWR5IG9jY3VwaWVkIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJXNsb3QlIiwgU3RyaW5nLnZhbHVlT2Yoc2xvdCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVpdGVtJSIsIGl0ZW1JZCkpOw0KICAgICAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoaXRlbUlkICsgIiBhdCBzbG90ICIgKyBzbG90ICsgIiBSZWFzb246IFNsb3Qgb2NjdXBpZWQiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAodG90YWxJdGVtcyA9PSAwKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVR10gTm8gZXh0cmEgaXRlbXMgdG8gY3JlYXRlIik7DQogICAgICAgIH0gZWxzZSBpZiAoc3VjY2Vzc2Z1bEl0ZW1zID09IHRvdGFsSXRlbXMpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHXSBBbGwgZXh0cmEgaXRlbXMgY3JlYXRlZCIpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVNZXNzYWdlID0gIltERUJVR10gIiArIHN1Y2Nlc3NmdWxJdGVtcyArICIvIiArIHRvdGFsSXRlbXMgKyAiIGV4dHJhIGl0ZW1zIGNyZWF0ZWQiOw0KICAgICAgICAgICAgaWYgKCFmYWlsdXJlcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBmYWlsdXJlTWVzc2FnZSArPSAiLCBmYWlsZWQgdG8gY3JlYXRlOiAiICsgU3RyaW5nLmpvaW4oIiwgIiwgZmFpbHVyZXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckZhaWx1cmUoIkh1bnRlckRlbkdVSV9leHRyYV9pdGVtc18iICsgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCksIGZhaWx1cmVNZXNzYWdlKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEFkZHMgdGhlIGJhY2sgYnV0dG9uIHRvIHRoZSBHVUkNCiAgICAgKiAvLyBub3RlOiBDcmVhdGVzIGEgYmFjayBidXR0b24gdG8gcmV0dXJuIHRvIHRoZSBtYWluIGJvdW50eSBHVUkNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgYWRkQmFja0J1dHRvbihGaWxlQ29uZmlndXJhdGlvbiBjb25maWcpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgU3RyaW5nIGJ1dHRvbk5hbWUgPSAiYmFjay1idXR0b24iOw0KICAgICAgICBpbnQgc2xvdCA9IGNvbmZpZy5nZXRJbnQoImJhY2stYnV0dG9uLnNsb3QiLCA0OSk7DQogICAgICAgIFN0cmluZyBmYWlsdXJlUmVhc29uID0gbnVsbDsNCg0KICAgICAgICBpZiAoc2xvdCA8IDAgfHwgc2xvdCA+PSA1NCkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIkludmFsaWQgc2xvdCAiICsgc2xvdCArICIgZm9yIGJhY2sgYnV0dG9uIGluIEh1bnRlcnNEZW4ueW1sLCBkZWZhdWx0aW5nIHRvIDQ5Iik7DQogICAgICAgICAgICBzbG90ID0gNDk7DQogICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkludmFsaWQgc2xvdCAiICsgc2xvdDsNCiAgICAgICAgfQ0KDQogICAgICAgIFN0cmluZyBtYXRlcmlhbE5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKCJiYWNrLWJ1dHRvbi5tYXRlcmlhbCIsICJCQVJSSUVSIik7DQogICAgICAgIEl0ZW1TdGFjayBiYWNrQnV0dG9uID0gVmVyc2lvblV0aWxzLmdldFhNYXRlcmlhbEl0ZW1TdGFjayhtYXRlcmlhbE5hbWUpOw0KICAgICAgICBpZiAoYmFja0J1dHRvbi5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJCQVJSSUVSIikpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJJbnZhbGlkIGJhY2sgYnV0dG9uIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIicgaW4gSHVudGVyc0Rlbi55bWwsIHVzaW5nIEJBUlJJRVIiKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIjsNCiAgICAgICAgICAgIGJhY2tCdXR0b24gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJCQVJSSUVSIik7DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgbmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoImJhY2stYnV0dG9uLm5hbWUiLCAiJmMmbEJhY2sgdG8gQm91bnRpZXMiKTsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdCgiYmFjay1idXR0b24ubG9yZSIpOw0KICAgICAgICBib29sZWFuIGVuY2hhbnRtZW50R2xvdyA9IGNvbmZpZy5nZXRCb29sZWFuKCJiYWNrLWJ1dHRvbi5lbmNoYW50bWVudC1nbG93IiwgZmFsc2UpOw0KDQogICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpLnBsYXllcih0aGlzLnBsYXllcik7DQogICAgICAgIG5hbWUgPSBQbGFjZWhvbGRlcnMuYXBwbHkobmFtZSwgY29udGV4dCk7DQogICAgICAgIGxvcmUgPSBQbGFjZWhvbGRlcnMuYXBwbHkobG9yZSwgY29udGV4dCk7DQoNCiAgICAgICAgSXRlbU1ldGEgbWV0YSA9IGJhY2tCdXR0b24uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgaWYgKG1ldGEgPT0gbnVsbCkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEgZm9yIGJhY2sgYnV0dG9uIik7DQogICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEiOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIG5hbWUpKTsNCiAgICAgICAgICAgIGlmIChsb3JlICE9IG51bGwgJiYgIWxvcmUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGNvbG9yZWRMb3JlID0gbG9yZS5zdHJlYW0oKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChsaW5lIC0+IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbGluZSkpDQogICAgICAgICAgICAgICAgICAgICAgICAuY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgpKTsNCiAgICAgICAgICAgICAgICBtZXRhLnNldExvcmUoY29sb3JlZExvcmUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKGVuY2hhbnRtZW50R2xvdykgew0KICAgICAgICAgICAgICAgIG1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0VOQ0hBTlRTKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGJhY2tCdXR0b24uc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgIH0NCg0KICAgICAgICBpbnQgdG90YWxCdXR0b25zID0gMTsNCiAgICAgICAgaW50IHN1Y2Nlc3NmdWxCdXR0b25zID0gMDsNCg0KICAgICAgICBpZiAoZmFpbHVyZVJlYXNvbiA9PSBudWxsICYmIChpbnZlbnRvcnkuZ2V0SXRlbShzbG90KSA9PSBudWxsIHx8IGludmVudG9yeS5nZXRJdGVtKHNsb3QpLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5BSVIpKSB7DQogICAgICAgICAgICBpbnZlbnRvcnkuc2V0SXRlbShzbG90LCBiYWNrQnV0dG9uKTsNCiAgICAgICAgICAgIHByb3RlY3RlZFNsb3RzLmFkZChzbG90KTsNCiAgICAgICAgICAgIHN1Y2Nlc3NmdWxCdXR0b25zKys7DQogICAgICAgIH0gZWxzZSBpZiAoZmFpbHVyZVJlYXNvbiAhPSBudWxsKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiRmFpbGVkIHRvIGNyZWF0ZSBiYWNrIGJ1dHRvbjogIiArIGZhaWx1cmVSZWFzb24pOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIlNsb3QgIiArIHNsb3QgKyAiIGZvciBiYWNrIGJ1dHRvbiBpcyBhbHJlYWR5IG9jY3VwaWVkIik7DQogICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIlNsb3QgIiArIHNsb3QgKyAiIG9jY3VwaWVkIjsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChzdWNjZXNzZnVsQnV0dG9ucyA9PSB0b3RhbEJ1dHRvbnMpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHXSBBbGwgYnV0dG9ucyBjcmVhdGVkIik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBTdHJpbmcgZmFpbHVyZU1lc3NhZ2UgPSAiW0RFQlVHXSAiICsgc3VjY2Vzc2Z1bEJ1dHRvbnMgKyAiLyIgKyB0b3RhbEJ1dHRvbnMgKyAiIGJ1dHRvbnMgY3JlYXRlZCI7DQogICAgICAgICAgICBpZiAoZmFpbHVyZVJlYXNvbiAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgZmFpbHVyZU1lc3NhZ2UgKz0gIiwgZmFpbGVkIHRvIGNyZWF0ZTogIiArIGJ1dHRvbk5hbWUgKyAiIFJlYXNvbjogIiArIGZhaWx1cmVSZWFzb247DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRmFpbHVyZSgiSHVudGVyRGVuR1VJX2JhY2tfYnV0dG9uXyIgKyBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSwgZmFpbHVyZU1lc3NhZ2UpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBpbnZlbnRvcnkgY2xpY2sgZXZlbnRzIGZvciB0aGUgR1VJDQogICAgICogLy8gbm90ZTogUHJvY2Vzc2VzIGNsaWNrcyBvbiBzaG9wIGl0ZW1zLCBleHRyYSBpdGVtcywgYW5kIGJhY2sgYnV0dG9uDQogICAgICovDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uSW52ZW50b3J5Q2xpY2soSW52ZW50b3J5Q2xpY2tFdmVudCBldmVudCkgew0KICAgICAgICBpZiAoIWV2ZW50LmdldFZpZXcoKS5nZXRUaXRsZSgpLmVxdWFscyhHVUlfVElUTEUpKSByZXR1cm47DQogICAgICAgIGlmICghZXZlbnQuZ2V0V2hvQ2xpY2tlZCgpLmVxdWFscyh0aGlzLnBsYXllcikpIHJldHVybjsNCg0KICAgICAgICBldmVudC5zZXRDYW5jZWxsZWQodHJ1ZSk7IC8vIFByZXZlbnQgaXRlbSBtb3ZlbWVudA0KICAgICAgICBQbGF5ZXIgY2xpY2tpbmdQbGF5ZXIgPSAoUGxheWVyKSBldmVudC5nZXRXaG9DbGlja2VkKCk7DQogICAgICAgIEl0ZW1TdGFjayBjbGlja2VkSXRlbSA9IGV2ZW50LmdldEN1cnJlbnRJdGVtKCk7DQogICAgICAgIGludCBzbG90ID0gZXZlbnQuZ2V0U2xvdCgpOw0KDQogICAgICAgIGlmIChjbGlja2VkSXRlbSA9PSBudWxsIHx8ICFjbGlja2VkSXRlbS5oYXNJdGVtTWV0YSgpKSByZXR1cm47DQoNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldEh1bnRlcnNEZW5Db25maWcoKTsNCg0KICAgICAgICAvLyBDaGVjayBmb3IgYmFjayBidXR0b24gYnkgc2xvdA0KICAgICAgICBpbnQgYmFja0J1dHRvblNsb3QgPSBjb25maWcuZ2V0SW50KCJiYWNrLWJ1dHRvbi5zbG90IiwgNDkpOw0KICAgICAgICBpZiAoc2xvdCA9PSBiYWNrQnV0dG9uU2xvdCkgew0KICAgICAgICAgICAgY2xpY2tpbmdQbGF5ZXIuY2xvc2VJbnZlbnRvcnkoKTsNCiAgICAgICAgICAgIGNsZWFudXAoKTsNCiAgICAgICAgICAgIEJvdW50eUdVSS5vcGVuQm91bnR5R1VJKGNsaWNraW5nUGxheWVyLCBCb3VudHlHVUkuZ2V0RmlsdGVySGlnaFRvTG93KCksIEJvdW50eUdVSS5nZXRTaG93T25seU9ubGluZSgpLCAwKTsNCiAgICAgICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5idWZmZXJEZWJ1ZygiQmFjayBidXR0b24gY2xpY2tlZCBieSAiICsgY2xpY2tpbmdQbGF5ZXIuZ2V0TmFtZSgpICsgIiwgb3BlbmVkIEJvdW50eUdVSSIpOw0KICAgICAgICAgICAgY2xpY2tpbmdQbGF5ZXIudXBkYXRlSW52ZW50b3J5KCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDaGVjayBmb3Igc2hvcCBpdGVtcw0KICAgICAgICBmb3IgKFN0cmluZyBpdGVtSWQgOiBjb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oInNob3AtaXRlbXMiKS5nZXRLZXlzKGZhbHNlKSkgew0KICAgICAgICAgICAgaW50IGl0ZW1TbG90ID0gY29uZmlnLmdldEludCgic2hvcC1pdGVtcy4iICsgaXRlbUlkICsgIi5zbG90IiwgLTEpOw0KICAgICAgICAgICAgaWYgKHNsb3QgPT0gaXRlbVNsb3QpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7IC8vIFN0b3JlIGV2ZW50IGZvciBjbGljayB0eXBlIGFjY2Vzcw0KICAgICAgICAgICAgICAgIGhhbmRsZVNob3BJdGVtQ2xpY2soY2xpY2tpbmdQbGF5ZXIsIGl0ZW1JZCwgY29uZmlnKTsNCiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50ID0gbnVsbDsgLy8gQ2xlYXIgZXZlbnQNCiAgICAgICAgICAgICAgICBjbGlja2luZ1BsYXllci51cGRhdGVJbnZlbnRvcnkoKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDaGVjayBmb3IgZXh0cmEgaXRlbXMNCiAgICAgICAgZm9yIChTdHJpbmcgaXRlbUlkIDogY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJleHRyYS1pdGVtcyIpLmdldEtleXMoZmFsc2UpKSB7DQogICAgICAgICAgICBpbnQgaXRlbVNsb3QgPSBjb25maWcuZ2V0SW50KCJleHRyYS1pdGVtcy4iICsgaXRlbUlkICsgIi5zbG90IiwgLTEpOw0KICAgICAgICAgICAgaWYgKHNsb3QgPT0gaXRlbVNsb3QpIHsNCiAgICAgICAgICAgICAgICBoYW5kbGVFeHRyYUl0ZW1DbGljayhjbGlja2luZ1BsYXllciwgaXRlbUlkLCBjbGlja2VkSXRlbSk7DQogICAgICAgICAgICAgICAgY2xpY2tpbmdQbGF5ZXIudXBkYXRlSW52ZW50b3J5KCk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgY2xpY2tpbmdQbGF5ZXIudXBkYXRlSW52ZW50b3J5KCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBzaG9wIGl0ZW0gY2xpY2tzIGluIHRoZSBIdW50ZXIncyBEZW4gR1VJDQogICAgICogLy8gbm90ZTogUHJvY2Vzc2VzIHB1cmNoYXNlcyB3aXRoIG1vbmV5LCBYUCwgb3Igc2t1bGxzIGJhc2VkIG9uIGNsaWNrIHR5cGUsIHJlc3BlY3RpbmcgcGVybWlzc2lvbnMgYW5kIGludmVudG9yeSBzcGFjZQ0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBoYW5kbGVTaG9wSXRlbUNsaWNrKFBsYXllciBwbGF5ZXIsIFN0cmluZyBpdGVtSWQsIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZykgew0KICAgICAgICBTdHJpbmcgYmFzZVBhdGggPSAiUGx1Z2luLUl0ZW1zLiIgKyBpdGVtSWQ7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpLnBsYXllcihwbGF5ZXIpLml0ZW1OYW1lKGl0ZW1JZCk7DQoNCiAgICAgICAgLy8gQ2hlY2sgc2hvcCBwZXJtaXNzaW9uDQogICAgICAgIGlmICghcGxheWVyLmhhc1Blcm1pc3Npb24oY29uZmlnLmdldFN0cmluZygicGVybWlzc2lvbnMudXNlLXNob3AiLCAiYm91bnRpZXNwbHVzLnNob3AudXNlIikpKSB7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygibm8tcGVybWlzc2lvbiIsICImY1lvdSBkb24ndCBoYXZlIHBlcm1pc3Npb24gdG8gcHVyY2hhc2UgdGhpcyBpdGVtISIpLCBjb250ZXh0KSk7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVR10gUGxheWVyICIgKyBwbGF5ZXIuZ2V0TmFtZSgpICsgIiBsYWNrcyBwZXJtaXNzaW9uIGZvciBzaG9wIHB1cmNoYXNlOiAiICsgaXRlbUlkKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIENoZWNrIHByZW1pdW0gcGVybWlzc2lvbiBmb3IgZWxpdGUgaXRlbXMNCiAgICAgICAgYm9vbGVhbiBpc1ByZW1pdW1JdGVtID0gaXRlbUlkLmVxdWFscygiZWxpdGVfcGFjayIpOw0KICAgICAgICBpZiAoaXNQcmVtaXVtSXRlbSAmJiAhcGxheWVyLmhhc1Blcm1pc3Npb24oY29uZmlnLmdldFN0cmluZygicGVybWlzc2lvbnMuYnV5LXByZW1pdW0iLCAiYm91bnRpZXNwbHVzLnNob3AucHJlbWl1bSIpKSkgew0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKFBsYWNlaG9sZGVycy5hcHBseShtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoIm5vLXBlcm1pc3Npb24iLCAiJmNZb3UgZG9uJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHB1cmNoYXNlIHRoaXMgaXRlbSEiKSwgY29udGV4dCkpOw0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUddIFBsYXllciAiICsgcGxheWVyLmdldE5hbWUoKSArICIgbGFja3MgcHJlbWl1bSBwZXJtaXNzaW9uIGZvcjogIiArIGl0ZW1JZCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgY3VycmVuY3lUeXBlID0gY29uZmlnLmdldFN0cmluZyhiYXNlUGF0aCArICIuY3VycmVuY3ktdHlwZSIsICJtb25leSIpLnRvTG93ZXJDYXNlKCk7DQogICAgICAgIGRvdWJsZSBwcmljZSA9IGNvbmZpZy5nZXREb3VibGUoYmFzZVBhdGggKyAiLnByaWNlIiwgMC4wKTsNCiAgICAgICAgaW50IHhwUHJpY2UgPSBjb25maWcuZ2V0SW50KGJhc2VQYXRoICsgIi54cC1wcmljZSIsIDApOw0KICAgICAgICBpbnQgc2t1bGxDb3VudCA9IGNvbmZpZy5nZXRJbnQoYmFzZVBhdGggKyAiLnNrdWxsLWNvdW50IiwgMCk7DQogICAgICAgIGRvdWJsZSBtaW5Ta3VsbFZhbHVlID0gY29uZmlnLmdldERvdWJsZShiYXNlUGF0aCArICIubWluLXNrdWxsLXZhbHVlIiwgMC4wKTsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGNvbW1hbmRzID0gY29uZmlnLmdldFN0cmluZ0xpc3QoYmFzZVBhdGggKyAiLmNvbW1hbmRzLm1vbmV5Iik7IC8vIERlZmF1bHQgdG8gbW9uZXkgY29tbWFuZHMNCiAgICAgICAgQ2xpY2tUeXBlIGNsaWNrVHlwZSA9IGV2ZW50LmdldENsaWNrKCk7DQoNCiAgICAgICAgLy8gRGV0ZXJtaW5lIHNlbGVjdGVkIGN1cnJlbmN5IGZvciBtdWx0aS1jdXJyZW5jeSBpdGVtcw0KICAgICAgICBTdHJpbmcgc2VsZWN0ZWRDdXJyZW5jeSA9IGN1cnJlbmN5VHlwZTsNCiAgICAgICAgaWYgKGN1cnJlbmN5VHlwZS5lcXVhbHMoIm11bHRpIikpIHsNCiAgICAgICAgICAgIGlmIChjbGlja1R5cGUgPT0gQ2xpY2tUeXBlLkxFRlQpIHsNCiAgICAgICAgICAgICAgICBzZWxlY3RlZEN1cnJlbmN5ID0gIm1vbmV5IjsNCiAgICAgICAgICAgICAgICBjb21tYW5kcyA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KGJhc2VQYXRoICsgIi5jb21tYW5kcy5tb25leSIpOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChjbGlja1R5cGUgPT0gQ2xpY2tUeXBlLlNISUZUX0xFRlQgfHwgY2xpY2tUeXBlID09IENsaWNrVHlwZS5TSElGVF9SSUdIVCkgew0KICAgICAgICAgICAgICAgIHNlbGVjdGVkQ3VycmVuY3kgPSAieHAiOw0KICAgICAgICAgICAgICAgIGNvbW1hbmRzID0gY29uZmlnLmdldFN0cmluZ0xpc3QoYmFzZVBhdGggKyAiLmNvbW1hbmRzLnhwIik7DQogICAgICAgICAgICB9IGVsc2UgaWYgKGNsaWNrVHlwZSA9PSBDbGlja1R5cGUuUklHSFQpIHsNCiAgICAgICAgICAgICAgICBzZWxlY3RlZEN1cnJlbmN5ID0gInNrdWxscyI7DQogICAgICAgICAgICAgICAgY29tbWFuZHMgPSBjb25maWcuZ2V0U3RyaW5nTGlzdChiYXNlUGF0aCArICIuY29tbWFuZHMuc2t1bGxzIik7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkobWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJpbnZhbGlkLWN1cnJlbmN5LXR5cGUiLCAiJmNJbnZhbGlkIGNsaWNrIHR5cGUgZm9yIG11bHRpLWN1cnJlbmN5IGl0ZW0hIiksIGNvbnRleHQpKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSBpZiAoY3VycmVuY3lUeXBlLmVxdWFscygibW9uZXkiKSkgew0KICAgICAgICAgICAgaWYgKGNsaWNrVHlwZSAhPSBDbGlja1R5cGUuTEVGVCkgew0KICAgICAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkobWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJpbnZhbGlkLWN1cnJlbmN5LXR5cGUiLCAiJmNVc2UgbGVmdC1jbGljayB0byBwdXJjaGFzZSB3aXRoIG1vbmV5ISIpLCBjb250ZXh0KSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gVmFsaWRhdGUgY29tbWFuZHMNCiAgICAgICAgaWYgKGNvbW1hbmRzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcobWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJ3YXJuaW5ncy5wdXJjaGFzZS1lcnJvciIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIkVycm9yIHByb2Nlc3NpbmcgcHVyY2hhc2UgZm9yICVwbGF5ZXIlOiAlZXJyb3IlIikNCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVwbGF5ZXIlIiwgcGxheWVyLmdldE5hbWUoKSkNCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVlcnJvciUiLCAiTm8gY29tbWFuZHMgZGVmaW5lZCBmb3IgIiArIGl0ZW1JZCkpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKFBsYWNlaG9sZGVycy5hcHBseShtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInB1cmNoYXNlLWZhaWxlZCIsICImYyZs4pyXIEZhaWxlZCB0byBwdXJjaGFzZSAlaXRlbSUhIiksIGNvbnRleHQpKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFZhbGlkYXRlIGludmVudG9yeSBzcGFjZQ0KICAgICAgICBpZiAoIWhhc0Vub3VnaEludmVudG9yeVNwYWNlKHBsYXllciwgY29tbWFuZHMpKSB7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiaW52ZW50b3J5LWZ1bGwtc2hvcCIsICImYyZsWW91ciBpbnZlbnRvcnkgaXMgdG9vIGZ1bGwgdG8gcmVjZWl2ZSB0aGlzIGl0ZW0hIiksIGNvbnRleHQpKTsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHXSBQbGF5ZXIgIiArIHBsYXllci5nZXROYW1lKCkgKyAiIGhhcyBpbnN1ZmZpY2llbnQgaW52ZW50b3J5IHNwYWNlIGZvcjogIiArIGl0ZW1JZCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDYWxjdWxhdGUgdGF4DQogICAgICAgIFRheE1hbmFnZXIgdGF4TWFuYWdlciA9IHBsdWdpbi5nZXRUYXhNYW5hZ2VyKCk7DQogICAgICAgIGRvdWJsZSB0YXhBbW91bnQgPSB0YXhNYW5hZ2VyLmNhbGN1bGF0ZVRheChwcmljZSwgbnVsbCk7DQoNCiAgICAgICAgLy8gVmFsaWRhdGUgY3VycmVuY3kgcmVxdWlyZW1lbnRzDQogICAgICAgIGNvbnRleHQgPSBjb250ZXh0Lm1vbmV5VmFsdWUocHJpY2UpLmV4cFZhbHVlKHhwUHJpY2UpLml0ZW1Db3VudChza3VsbENvdW50KS53aXRoQW1vdW50KG1pblNrdWxsVmFsdWUpLnRheEFtb3VudCh0YXhBbW91bnQpOw0KICAgICAgICBpZiAoIWNoZWNrQ3VycmVuY3lSZXF1aXJlbWVudHMocGxheWVyLCBzZWxlY3RlZEN1cnJlbmN5LCBwcmljZSArIHRheEFtb3VudCwgeHBQcmljZSwgY29uZmlnLCBpdGVtSWQpKSB7DQogICAgICAgICAgICBTdHJpbmcgbWVzc2FnZUtleSA9IHNlbGVjdGVkQ3VycmVuY3kuZXF1YWxzKCJtb25leSIpID8gImluc3VmZmljaWVudC1mdW5kcyIgOg0KICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEN1cnJlbmN5LmVxdWFscygieHAiKSA/ICJpbnN1ZmZpY2llbnQteHAiIDogImluc3VmZmljaWVudC1za3VsbHMiOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKFBsYWNlaG9sZGVycy5hcHBseShtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcobWVzc2FnZUtleSwgIiZjWW91IG5lZWQgJXJlcXVpcmVkX2Ftb3VudCUgdG8gcHVyY2hhc2UgdGhpcyBpdGVtISIpLCBjb250ZXh0KSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyBQcm9jZXNzIHB1cmNoYXNlDQogICAgICAgIGlmIChwcm9jZXNzUHVyY2hhc2UocGxheWVyLCBpdGVtSWQsIHNlbGVjdGVkQ3VycmVuY3ksIHByaWNlICsgdGF4QW1vdW50LCB4cFByaWNlKSkgew0KICAgICAgICAgICAgZXhlY3V0ZUNvbW1hbmRzKHBsYXllciwgY29tbWFuZHMpOw0KICAgICAgICAgICAgcGxheWVyLnNlbmRNZXNzYWdlKFBsYWNlaG9sZGVycy5hcHBseShtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoInB1cmNoYXNlLXN1Y2Nlc3MiLCAiJmEmbOKckyBTdWNjZXNzZnVsbHkgcHVyY2hhc2VkICVpdGVtJSEiKSwgY29udGV4dCkpOw0KICAgICAgICAgICAgdGF4TWFuYWdlci5zZW5kVGF4TWVzc2FnZXMocGxheWVyLCBudWxsLCBwcmljZSwgdGF4QW1vdW50KTsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHXSBQbGF5ZXIgIiArIHBsYXllci5nZXROYW1lKCkgKyAiIHB1cmNoYXNlZCAiICsgaXRlbUlkICsgIiB3aXRoICIgKyBzZWxlY3RlZEN1cnJlbmN5KTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kTWVzc2FnZShQbGFjZWhvbGRlcnMuYXBwbHkobWVzc2FnZXNDb25maWcuZ2V0U3RyaW5nKCJwdXJjaGFzZS1mYWlsZWQiLCAiJmMmbOKclyBGYWlsZWQgdG8gcHVyY2hhc2UgJWl0ZW0lISIpLCBjb250ZXh0KSk7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVR10gUHVyY2hhc2UgZmFpbGVkIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSArICI6ICIgKyBpdGVtSWQpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIHBsYXllciBoYXMgZW5vdWdoIGludmVudG9yeSBzcGFjZSBmb3IgY29tbWFuZC1leGVjdXRlZCBpdGVtcw0KICAgICAqIC8vIG5vdGU6IFZhbGlkYXRlcyBzcGFjZSBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIGl0ZW1zIGdpdmVuIGJ5IGNvbW1hbmRzDQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIGhhc0Vub3VnaEludmVudG9yeVNwYWNlKFBsYXllciBwbGF5ZXIsIExpc3Q8U3RyaW5nPiBjb21tYW5kcykgew0KICAgICAgICBpbnQgaXRlbXNUb0dpdmUgPSAwOw0KICAgICAgICBmb3IgKFN0cmluZyBjb21tYW5kIDogY29tbWFuZHMpIHsNCiAgICAgICAgICAgIGlmIChjb21tYW5kLmNvbnRhaW5zKCJib3VudHkgZ2l2ZSIpKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nW10gcGFydHMgPSBjb21tYW5kLnNwbGl0KCIgIik7DQogICAgICAgICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+PSA1KSB7DQogICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1RvR2l2ZSArPSBJbnRlZ2VyLnBhcnNlSW50KHBhcnRzWzRdKTsNCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGlnbm9yZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpbnQgZW1wdHlTbG90cyA9IDA7DQogICAgICAgIGZvciAoSXRlbVN0YWNrIGl0ZW0gOiBwbGF5ZXIuZ2V0SW52ZW50b3J5KCkuZ2V0Q29udGVudHMoKSkgew0KICAgICAgICAgICAgaWYgKGl0ZW0gPT0gbnVsbCB8fCBpdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5BSVIpIHsNCiAgICAgICAgICAgICAgICBlbXB0eVNsb3RzKys7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGVtcHR5U2xvdHMgPj0gaXRlbXNUb0dpdmU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlIGV4dHJhIGl0ZW0gY2xpY2sgaW50ZXJhY3Rpb25zDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGhhbmRsZUV4dHJhSXRlbUNsaWNrKFBsYXllciBwbGF5ZXIsIFN0cmluZyBpdGVtSWQsIEl0ZW1TdGFjayBjbGlja2VkSXRlbSkgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0SHVudGVyc0RlbkNvbmZpZygpOyAvLyBGaXhlZCBtZXRob2QgbmFtZQ0KICAgICAgICBTdHJpbmcgYmFzZVBhdGggPSAiZXh0cmEtaXRlbXMuIiArIGl0ZW1JZDsNCg0KICAgICAgICAvLyBHZXQgY2xpY2sgYWN0aW9uDQogICAgICAgIFN0cmluZyBhY3Rpb24gPSBjb25maWcuZ2V0U3RyaW5nKGJhc2VQYXRoICsgIi5jbGljay1hY3Rpb24iLCAibm9uZSIpOw0KDQogICAgICAgIHN3aXRjaCAoYWN0aW9uLnRvTG93ZXJDYXNlKCkpIHsNCiAgICAgICAgICAgIGNhc2UgImNsb3NlIjoNCiAgICAgICAgICAgICAgICBwbGF5ZXIuY2xvc2VJbnZlbnRvcnkoKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgImNvbW1hbmQiOg0KICAgICAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBjb21tYW5kcyA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KGJhc2VQYXRoICsgIi5jb21tYW5kcyIpOw0KICAgICAgICAgICAgICAgIGV4ZWN1dGVDb21tYW5kcyhwbGF5ZXIsIGNvbW1hbmRzKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgIm1lc3NhZ2UiOg0KICAgICAgICAgICAgICAgIFN0cmluZyBtZXNzYWdlID0gY29uZmlnLmdldFN0cmluZyhiYXNlUGF0aCArICIubWVzc2FnZSIsICIiKTsNCiAgICAgICAgICAgICAgICBpZiAoIW1lc3NhZ2UuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlKHBsYXllciwgbWVzc2FnZSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAvLyBObyBhY3Rpb24gZGVmaW5lZA0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2tzIGlmIGFuIGl0ZW0gaXMgYSBib3VudHkgc2t1bGwgLy8gbm90ZTogSWRlbnRpZmllcyBib3VudHkgc2t1bGxzIGJ5IGxvcmUgY29udGFpbmluZyBCT1VOVFlfU0tVTEwgaWRlbnRpZmllciBvciBtYXRjaGluZyBjb25maWcueW1sIGJvdW50eS1za3VsbCBmb3JtYXQNCiAgICAgKi8NCiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW4gaXNCb3VudHlTa3VsbChJdGVtU3RhY2sgaXRlbSkgew0KICAgICAgICBpZiAoaXRlbSA9PSBudWxsKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgTWF0ZXJpYWwgcGxheWVySGVhZE1hdGVyaWFsID0gVmVyc2lvblV0aWxzLmdldFBsYXllckhlYWRNYXRlcmlhbCgpOw0KICAgICAgICBpZiAoaXRlbS5nZXRUeXBlKCkgIT0gcGxheWVySGVhZE1hdGVyaWFsKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgSXRlbU1ldGEgbWV0YSA9IGl0ZW0uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgaWYgKG1ldGEgPT0gbnVsbCB8fCAhbWV0YS5oYXNMb3JlKCkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IG1ldGEuZ2V0TG9yZSgpOw0KICAgICAgICBpZiAobG9yZSA9PSBudWxsKSByZXR1cm4gZmFsc2U7DQogICAgICAgIC8vIENoZWNrIGZvciBleHBsaWNpdCBCT1VOVFlfU0tVTEwgaWRlbnRpZmllcg0KICAgICAgICBmb3IgKFN0cmluZyBsaW5lIDogbG9yZSkgew0KICAgICAgICAgICAgaWYgKGxpbmUuY29udGFpbnMoQ2hhdENvbG9yLkRBUktfR1JBWSArICIiICsgQ2hhdENvbG9yLk1BR0lDICsgIkJPVU5UWV9TS1VMTCIpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgLy8gRmFsbGJhY2s6IENoZWNrIGZvciBsb3JlIG1hdGNoaW5nIGNvbmZpZy55bWwgYm91bnR5LXNrdWxsIGZvcm1hdA0KICAgICAgICBCb3VudGllc1BsdXMgcGx1Z2luID0gQm91bnRpZXNQbHVzLmdldEluc3RhbmNlKCk7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRDb25maWcoKTsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGV4cGVjdGVkTG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KCJib3VudHktc2t1bGwubG9yZSIpOw0KICAgICAgICBpZiAoZXhwZWN0ZWRMb3JlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgIC8vIEJhc2ljIGNoZWNrOiBsb3JlIGNvbnRhaW5zIGF0IGxlYXN0IG9uZSBleHBlY3RlZCBsaW5lIChlLmcuLCAiVGhpcyBpcyB0aGUgaGVhZCBvZiBhIHdhbnRlZCBjcmltaW5hbCEiKQ0KICAgICAgICBmb3IgKFN0cmluZyBleHBlY3RlZExpbmUgOiBleHBlY3RlZExvcmUpIHsNCiAgICAgICAgICAgIFN0cmluZyBjbGVhbkV4cGVjdGVkID0gQ2hhdENvbG9yLnN0cmlwQ29sb3IoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBleHBlY3RlZExpbmUpKQ0KICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJXRhcmdldCUiLCAiIikucmVwbGFjZSgiJXRvdGFsX2JvdW50eSUiLCAiIikNCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVib3VudHlfY291bnQlIiwgIiIpLnJlcGxhY2UoIiVraWxsZXIlIiwgIiIpDQogICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlZGVhdGhfdGltZSUiLCAiIikudHJpbSgpOw0KICAgICAgICAgICAgaWYgKGNsZWFuRXhwZWN0ZWQuaXNFbXB0eSgpKSBjb250aW51ZTsNCiAgICAgICAgICAgIGZvciAoU3RyaW5nIGFjdHVhbExpbmUgOiBsb3JlKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIGNsZWFuQWN0dWFsID0gQ2hhdENvbG9yLnN0cmlwQ29sb3IoYWN0dWFsTGluZSkudHJpbSgpOw0KICAgICAgICAgICAgICAgIGlmIChjbGVhbkFjdHVhbC5jb250YWlucyhjbGVhbkV4cGVjdGVkKSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEV4dHJhY3QgYm91bnR5IHZhbHVlIGZyb20gc2t1bGwgbG9yZSAvLyBub3RlOiBQYXJzZXMgbG9yZSBmb3IgYm91bnR5IGFtb3VudA0KICAgICAqLw0KICAgIHB1YmxpYyBzdGF0aWMgZG91YmxlIGV4dHJhY3RCb3VudHlWYWx1ZUZyb21Ta3VsbChJdGVtU3RhY2sgc2t1bGwpIHsNCiAgICAgICAgaWYgKCFpc0JvdW50eVNrdWxsKHNrdWxsKSkgcmV0dXJuIDAuMDsNCiAgICAgICAgSXRlbU1ldGEgbWV0YSA9IHNrdWxsLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmIChtZXRhID09IG51bGwgfHwgIW1ldGEuaGFzTG9yZSgpKSByZXR1cm4gMC4wOw0KICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IG1ldGEuZ2V0TG9yZSgpOw0KICAgICAgICBpZiAobG9yZSA9PSBudWxsKSByZXR1cm4gMC4wOw0KICAgICAgICBmb3IgKFN0cmluZyBsaW5lIDogbG9yZSkgew0KICAgICAgICAgICAgaWYgKGxpbmUuY29udGFpbnMoIkJvdW50eSBWYWx1ZToiKSkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBjbGVhbkxpbmUgPSBDaGF0Q29sb3Iuc3RyaXBDb2xvcihsaW5lKTsNCiAgICAgICAgICAgICAgICBTdHJpbmdbXSBwYXJ0cyA9IGNsZWFuTGluZS5zcGxpdCgiOiIpOw0KICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7DQogICAgICAgICAgICAgICAgICAgIFN0cmluZyB2YWx1ZVN0ciA9IHBhcnRzWzFdLnRyaW0oKS5yZXBsYWNlKCIkIiwgIiIpLnJlcGxhY2UoIiwiLCAiIik7DQogICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRG91YmxlLnBhcnNlRG91YmxlKHZhbHVlU3RyKTsNCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpbGVudGx5IGlnbm9yZSBwYXJzaW5nIGVycm9ycyB0byBhdm9pZCBzdGF0aWMgY29udGV4dCBpc3N1ZXMNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gMC4wOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiBhIGJvdW50eSBza3VsbCBpcyB0aWVkIHRvIGFuIGFjdGl2ZSBib3VudHkgLy8gbm90ZTogVmVyaWZpZXMgaWYgdGhlIGtpbGxlZCBwbGF5ZXIgaGFzIGFuIGFjdGl2ZSBib3VudHkgZm9yIHNob3AgcHVyY2hhc2UgdmFsaWRhdGlvbg0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBpc1NrdWxsQWN0aXZlKEl0ZW1TdGFjayBza3VsbCkgew0KICAgICAgICBVVUlEIGtpbGxlZFVVSUQgPSBTa3VsbFV0aWxzLmdldEtpbGxlZFBsYXllclVVSUQoc2t1bGwpOw0KICAgICAgICByZXR1cm4ga2lsbGVkVVVJRCAhPSBudWxsICYmIHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuaGFzQm91bnR5KGtpbGxlZFVVSUQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiBwbGF5ZXIgaGFzIGVub3VnaCB2YWxpZCBib3VudHkgc2t1bGxzIHdpdGggbWluaW11bSB2YWx1ZSAvLyBub3RlOiBWYWxpZGF0ZXMgc2t1bGwgY291bnQgYW5kIHN0YXR1cyAoYWN0aXZlIG9yIGV4cGlyZWQvY2xhaW1lZCBiYXNlZCBvbiBhbGxvdy1leHBpcmVkLXNrdWxscyBzZXR0aW5nKQ0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBjaGVja1NrdWxsUmVxdWlyZW1lbnRzKFBsYXllciBwbGF5ZXIsIGludCByZXF1aXJlZENvdW50LCBkb3VibGUgbWluVmFsdWUpIHsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldENvbmZpZygpOw0KICAgICAgICBib29sZWFuIGFsbG93RXhwaXJlZFNrdWxscyA9IGNvbmZpZy5nZXRCb29sZWFuKCJhbGxvdy1leHBpcmVkLXNrdWxscyIsIHRydWUpOw0KICAgICAgICBpbnQgdmFsaWRTa3VsbENvdW50ID0gMDsNCg0KICAgICAgICBmb3IgKEl0ZW1TdGFjayBpdGVtIDogcGxheWVyLmdldEludmVudG9yeSgpLmdldENvbnRlbnRzKCkpIHsNCiAgICAgICAgICAgIGlmIChpc0JvdW50eVNrdWxsKGl0ZW0pKSB7DQogICAgICAgICAgICAgICAgZG91YmxlIHNrdWxsVmFsdWUgPSBleHRyYWN0Qm91bnR5VmFsdWVGcm9tU2t1bGwoaXRlbSk7DQogICAgICAgICAgICAgICAgaWYgKHNrdWxsVmFsdWUgPj0gbWluVmFsdWUgJiYgKGFsbG93RXhwaXJlZFNrdWxscyB8fCBpc1NrdWxsQWN0aXZlKGl0ZW0pKSkgew0KICAgICAgICAgICAgICAgICAgICB2YWxpZFNrdWxsQ291bnQgKz0gaXRlbS5nZXRBbW91bnQoKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkU2t1bGxDb3VudCA+PSByZXF1aXJlZENvdW50KSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghYWxsb3dFeHBpcmVkU2t1bGxzKSB7DQogICAgICAgICAgICBzZW5kTWVzc2FnZShwbGF5ZXIsIFBsYWNlaG9sZGVycy5hcHBseShtZXNzYWdlc0NvbmZpZy5nZXRTdHJpbmcoImludmFsaWQtc2t1bGwiLCAiJmNPbmx5IGFjdGl2ZSBib3VudHkgc2t1bGxzIGNhbiBiZSB1c2VkIGZvciB0aGlzIHB1cmNoYXNlISIpLCBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcikpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZW1vdmVzIHJlcXVpcmVkIHZhbGlkIGJvdW50eSBza3VsbHMgZnJvbSBwbGF5ZXIgaW52ZW50b3J5IC8vIG5vdGU6IERlZHVjdHMgc2t1bGxzIG1lZXRpbmcgdmFsdWUgYW5kIHN0YXR1cyByZXF1aXJlbWVudHMgKGFjdGl2ZSBvciBleHBpcmVkL2NsYWltZWQgYmFzZWQgb24gYWxsb3ctZXhwaXJlZC1za3VsbHMgc2V0dGluZykNCiAgICAgKi8NCiAgICBwcml2YXRlIGJvb2xlYW4gcmVtb3ZlU2t1bGxzRnJvbUludmVudG9yeShQbGF5ZXIgcGxheWVyLCBpbnQgcmVxdWlyZWRDb3VudCwgZG91YmxlIG1pblZhbHVlKSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRDb25maWcoKTsNCiAgICAgICAgYm9vbGVhbiBhbGxvd0V4cGlyZWRTa3VsbHMgPSBjb25maWcuZ2V0Qm9vbGVhbigiYWxsb3ctZXhwaXJlZC1za3VsbHMiLCB0cnVlKTsNCiAgICAgICAgaW50IHJlbWFpbmluZ1RvUmVtb3ZlID0gcmVxdWlyZWRDb3VudDsNCg0KICAgICAgICBmb3IgKEl0ZW1TdGFjayBpdGVtIDogcGxheWVyLmdldEludmVudG9yeSgpLmdldENvbnRlbnRzKCkpIHsNCiAgICAgICAgICAgIGlmIChyZW1haW5pbmdUb1JlbW92ZSA8PSAwKSBicmVhazsNCg0KICAgICAgICAgICAgaWYgKGlzQm91bnR5U2t1bGwoaXRlbSkpIHsNCiAgICAgICAgICAgICAgICBkb3VibGUgc2t1bGxWYWx1ZSA9IGV4dHJhY3RCb3VudHlWYWx1ZUZyb21Ta3VsbChpdGVtKTsNCiAgICAgICAgICAgICAgICBpZiAoc2t1bGxWYWx1ZSA+PSBtaW5WYWx1ZSAmJiAoYWxsb3dFeHBpcmVkU2t1bGxzIHx8IGlzU2t1bGxBY3RpdmUoaXRlbSkpKSB7DQogICAgICAgICAgICAgICAgICAgIGludCBjdXJyZW50QW1vdW50ID0gaXRlbS5nZXRBbW91bnQoKTsNCiAgICAgICAgICAgICAgICAgICAgaW50IHRvUmVtb3ZlID0gTWF0aC5taW4oY3VycmVudEFtb3VudCwgcmVtYWluaW5nVG9SZW1vdmUpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmICh0b1JlbW92ZSA+PSBjdXJyZW50QW1vdW50KSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNldFR5cGUoTWF0ZXJpYWwuQUlSKTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc2V0QW1vdW50KGN1cnJlbnRBbW91bnQgLSB0b1JlbW92ZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICByZW1haW5pbmdUb1JlbW92ZSAtPSB0b1JlbW92ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIWFsbG93RXhwaXJlZFNrdWxscyAmJiByZW1haW5pbmdUb1JlbW92ZSA+IDApIHsNCiAgICAgICAgICAgIHNlbmRNZXNzYWdlKHBsYXllciwgUGxhY2Vob2xkZXJzLmFwcGx5KG1lc3NhZ2VzQ29uZmlnLmdldFN0cmluZygiaW52YWxpZC1za3VsbCIsICImY09ubHkgYWN0aXZlIGJvdW50eSBza3VsbHMgY2FuIGJlIHVzZWQgZm9yIHRoaXMgcHVyY2hhc2UhIiksIFBsYWNlaG9sZGVyQ29udGV4dC5jcmVhdGUoKS5wbGF5ZXIocGxheWVyKSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcGxheWVyLnVwZGF0ZUludmVudG9yeSgpOw0KICAgICAgICByZXR1cm4gcmVtYWluaW5nVG9SZW1vdmUgPD0gMDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBFeGVjdXRlIGNvbW1hbmRzIGZvciBzdWNjZXNzZnVsIHB1cmNoYXNlDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGV4ZWN1dGVDb21tYW5kcyhQbGF5ZXIgcGxheWVyLCBMaXN0PFN0cmluZz4gY29tbWFuZHMpIHsNCiAgICAgICAgZm9yIChTdHJpbmcgY29tbWFuZCA6IGNvbW1hbmRzKSB7DQogICAgICAgICAgICBTdHJpbmcgcHJvY2Vzc2VkQ29tbWFuZCA9IGNvbW1hbmQucmVwbGFjZSgiJXBsYXllciUiLCBwbGF5ZXIuZ2V0TmFtZSgpKTsNCg0KICAgICAgICAgICAgaWYgKHByb2Nlc3NlZENvbW1hbmQuc3RhcnRzV2l0aCgicGxheWVyOiIpKSB7DQogICAgICAgICAgICAgICAgLy8gRXhlY3V0ZSBhcyBwbGF5ZXINCiAgICAgICAgICAgICAgICBTdHJpbmcgcGxheWVyQ29tbWFuZCA9IHByb2Nlc3NlZENvbW1hbmQuc3Vic3RyaW5nKDcpOw0KICAgICAgICAgICAgICAgIHBsYXllci5wZXJmb3JtQ29tbWFuZChwbGF5ZXJDb21tYW5kKTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzc2VkQ29tbWFuZC5zdGFydHNXaXRoKCJjb25zb2xlOiIpKSB7DQogICAgICAgICAgICAgICAgLy8gRXhlY3V0ZSBhcyBjb25zb2xlDQogICAgICAgICAgICAgICAgU3RyaW5nIGNvbnNvbGVDb21tYW5kID0gcHJvY2Vzc2VkQ29tbWFuZC5zdWJzdHJpbmcoOCk7DQogICAgICAgICAgICAgICAgQnVra2l0LmRpc3BhdGNoQ29tbWFuZChCdWtraXQuZ2V0Q29uc29sZVNlbmRlcigpLCBjb25zb2xlQ29tbWFuZCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gY29uc29sZSBleGVjdXRpb24NCiAgICAgICAgICAgICAgICBCdWtraXQuZGlzcGF0Y2hDb21tYW5kKEJ1a2tpdC5nZXRDb25zb2xlU2VuZGVyKCksIHByb2Nlc3NlZENvbW1hbmQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ3JlYXRlcyBhIGNvbmZpZ3VyYWJsZSBpdGVtIHdpdGggcHJvcGVyIHZlcnNpb24gY29tcGF0aWJpbGl0eQ0KICAgICAqLw0KICAgIHByaXZhdGUgSXRlbVN0YWNrIGNyZWF0ZUNvbmZpZ3VyYWJsZUl0ZW0oTWF0ZXJpYWwgbWF0ZXJpYWwsIFN0cmluZyBuYW1lLCBMaXN0PFN0cmluZz4gbG9yZSwgYm9vbGVhbiBlbmNoYW50bWVudEdsb3cpIHsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBuZXcgSXRlbVN0YWNrKG1hdGVyaWFsKTsNCiAgICAgICAgSXRlbU1ldGEgbWV0YSA9IGl0ZW0uZ2V0SXRlbU1ldGEoKTsNCg0KICAgICAgICBpZiAobWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbmFtZSkpOw0KDQogICAgICAgICAgICBpZiAobG9yZSAhPSBudWxsICYmICFsb3JlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBjb2xvcmVkTG9yZSA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiBsb3JlKSB7DQogICAgICAgICAgICAgICAgICAgIGNvbG9yZWRMb3JlLmFkZChDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGxpbmUpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgbWV0YS5zZXRMb3JlKGNvbG9yZWRMb3JlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGVuY2hhbnRtZW50R2xvdykgew0KICAgICAgICAgICAgICAgIG1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0VOQ0hBTlRTKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaXRlbS5zZXRJdGVtTWV0YShtZXRhKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBpdGVtOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHVybnMgdGhlIGludmVudG9yeSBmb3IgdGhpcyBHVUkNCiAgICAgKi8NCiAgICBAT3ZlcnJpZGUNCiAgICBwdWJsaWMgSW52ZW50b3J5IGdldEludmVudG9yeSgpIHsNCiAgICAgICAgcmV0dXJuIGludmVudG9yeTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBPcGVucyB0aGUgaW52ZW50b3J5IGZvciB0aGUgcGxheWVyDQogICAgICovDQogICAgcHVibGljIHZvaWQgb3BlbkludmVudG9yeShQbGF5ZXIgcGxheWVyKSB7DQogICAgICAgIGlmICghcGxheWVyLmVxdWFscyh0aGlzLnBsYXllcikpIHsNCiAgICAgICAgICAgIHJldHVybjsgLy8gU2FmZXR5IGNoZWNrDQogICAgICAgIH0NCiAgICAgICAgcGxheWVyLm9wZW5JbnZlbnRvcnkoaW52ZW50b3J5KTsNCiAgICB9DQoNCg0KICAgIC8qKg0KICAgICAqIENoZWNrIGlmIHBsYXllciBtZWV0cyBhbGwgY3VycmVuY3kgcmVxdWlyZW1lbnRzDQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIGNoZWNrQ3VycmVuY3lSZXF1aXJlbWVudHMoUGxheWVyIHBsYXllciwgU3RyaW5nIGN1cnJlbmN5VHlwZSwgZG91YmxlIHByaWNlLCBpbnQgeHBQcmljZSwgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnLCBTdHJpbmcgaXRlbUlkKSB7DQogICAgICAgIFN0cmluZyBiYXNlUGF0aCA9ICJzaG9wLWl0ZW1zLiIgKyBpdGVtSWQ7DQoNCiAgICAgICAgc3dpdGNoIChjdXJyZW5jeVR5cGUudG9Mb3dlckNhc2UoKSkgew0KICAgICAgICAgICAgY2FzZSAibW9uZXkiOg0KICAgICAgICAgICAgICAgIHJldHVybiBoYXNFbm91Z2hNb25leShwbGF5ZXIsIHByaWNlKTsNCg0KICAgICAgICAgICAgY2FzZSAieHAiOg0KICAgICAgICAgICAgICAgIHJldHVybiBoYXNFbm91Z2hYUChwbGF5ZXIsIHhwUHJpY2UpOw0KDQogICAgICAgICAgICBjYXNlICJza3VsbHMiOg0KICAgICAgICAgICAgICAgIGludCBza3VsbENvdW50ID0gY29uZmlnLmdldEludChiYXNlUGF0aCArICIuc2t1bGwtY291bnQiLCAxKTsNCiAgICAgICAgICAgICAgICBkb3VibGUgbWluU2t1bGxWYWx1ZSA9IGNvbmZpZy5nZXREb3VibGUoYmFzZVBhdGggKyAiLm1pbi1za3VsbC12YWx1ZSIsIDEwMC4wKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tTa3VsbFJlcXVpcmVtZW50cyhwbGF5ZXIsIHNrdWxsQ291bnQsIG1pblNrdWxsVmFsdWUpOw0KDQogICAgICAgICAgICBjYXNlICJtdWx0aSI6DQogICAgICAgICAgICAgICAgLy8gRm9yIG11bHRpLCBwbGF5ZXIgb25seSBuZWVkcyBPTkUgb2YgdGhlIGN1cnJlbmN5IHR5cGVzDQogICAgICAgICAgICAgICAgcmV0dXJuIGhhc0Vub3VnaE1vbmV5KHBsYXllciwgcHJpY2UpIHx8DQogICAgICAgICAgICAgICAgICAgICAgICBoYXNFbm91Z2hYUChwbGF5ZXIsIHhwUHJpY2UpIHx8DQogICAgICAgICAgICAgICAgICAgICAgICBjaGVja1NrdWxsUmVxdWlyZW1lbnRzKHBsYXllciwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmdldEludChiYXNlUGF0aCArICIuc2t1bGwtY291bnQiLCAxKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmdldERvdWJsZShiYXNlUGF0aCArICIubWluLXNrdWxsLXZhbHVlIiwgMTAwLjApKTsNCg0KICAgICAgICAgICAgY2FzZSAiY29tYmluZWQiOg0KICAgICAgICAgICAgICAgIC8vIE5FVzogRm9yIGNvbWJpbmVkLCBwbGF5ZXIgbmVlZHMgQUxMIGN1cnJlbmN5IHR5cGVzDQogICAgICAgICAgICAgICAgaW50IGNvbWJpbmVkU2t1bGxDb3VudCA9IGNvbmZpZy5nZXRJbnQoYmFzZVBhdGggKyAiLnNrdWxsLWNvdW50IiwgMSk7DQogICAgICAgICAgICAgICAgZG91YmxlIGNvbWJpbmVkTWluU2t1bGxWYWx1ZSA9IGNvbmZpZy5nZXREb3VibGUoYmFzZVBhdGggKyAiLm1pbi1za3VsbC12YWx1ZSIsIDEwMC4wKTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiBoYXNFbm91Z2hNb25leShwbGF5ZXIsIHByaWNlKSAmJg0KICAgICAgICAgICAgICAgICAgICAgICAgaGFzRW5vdWdoWFAocGxheWVyLCB4cFByaWNlKSAmJg0KICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tTa3VsbFJlcXVpcmVtZW50cyhwbGF5ZXIsIGNvbWJpbmVkU2t1bGxDb3VudCwgY29tYmluZWRNaW5Ta3VsbFZhbHVlKTsNCg0KICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICByZXR1cm4gaGFzRW5vdWdoTW9uZXkocGxheWVyLCBwcmljZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBQcm9jZXNzZXMgYSBwdXJjaGFzZSBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgY3VycmVuY3kgdHlwZSAvLyBub3RlOiBEZWR1Y3RzIG1vbmV5LCBYUCwgb3Igc2t1bGxzIGFuZCByZXR1cm5zIHRydWUgb24gc3VjY2Vzcw0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBwcm9jZXNzUHVyY2hhc2UoUGxheWVyIHBsYXllciwgU3RyaW5nIGl0ZW1JZCwgU3RyaW5nIGN1cnJlbmN5VHlwZSwgZG91YmxlIHByaWNlLCBpbnQgeHBQcmljZSkgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0SHVudGVyc0RlbkNvbmZpZygpOw0KICAgICAgICBTdHJpbmcgYmFzZVBhdGggPSAic2hvcC1pdGVtcy4iICsgaXRlbUlkOw0KDQogICAgICAgIHN3aXRjaCAoY3VycmVuY3lUeXBlLnRvTG93ZXJDYXNlKCkpIHsNCiAgICAgICAgICAgIGNhc2UgIm1vbmV5IjoNCiAgICAgICAgICAgICAgICBpZiAoaGFzRW5vdWdoTW9uZXkocGxheWVyLCBwcmljZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldEVjb25vbXkoKS53aXRoZHJhd1BsYXllcihwbGF5ZXIsIHByaWNlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCg0KICAgICAgICAgICAgY2FzZSAieHAiOg0KICAgICAgICAgICAgICAgIGlmIChoYXNFbm91Z2hYUChwbGF5ZXIsIHhwUHJpY2UpKSB7DQogICAgICAgICAgICAgICAgICAgIHJlbW92ZUV4cGVyaWVuY2UocGxheWVyLCB4cFByaWNlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCg0KICAgICAgICAgICAgY2FzZSAic2t1bGxzIjoNCiAgICAgICAgICAgICAgICBpbnQgc2t1bGxDb3VudCA9IGNvbmZpZy5nZXRJbnQoYmFzZVBhdGggKyAiLnNrdWxsLWNvdW50IiwgMSk7DQogICAgICAgICAgICAgICAgZG91YmxlIG1pblNrdWxsVmFsdWUgPSBjb25maWcuZ2V0RG91YmxlKGJhc2VQYXRoICsgIi5taW4tc2t1bGwtdmFsdWUiLCAxMDAuMCk7DQogICAgICAgICAgICAgICAgaWYgKGNoZWNrU2t1bGxSZXF1aXJlbWVudHMocGxheWVyLCBza3VsbENvdW50LCBtaW5Ta3VsbFZhbHVlKSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3ZlU2t1bGxzRnJvbUludmVudG9yeShwbGF5ZXIsIHNrdWxsQ291bnQsIG1pblNrdWxsVmFsdWUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQoNCiAgICAgICAgICAgIGNhc2UgImNvbWJpbmVkIjoNCiAgICAgICAgICAgICAgICBpbnQgY29tYmluZWRTa3VsbENvdW50ID0gY29uZmlnLmdldEludChiYXNlUGF0aCArICIuc2t1bGwtY291bnQiLCAxKTsNCiAgICAgICAgICAgICAgICBkb3VibGUgY29tYmluZWRNaW5Ta3VsbFZhbHVlID0gY29uZmlnLmdldERvdWJsZShiYXNlUGF0aCArICIubWluLXNrdWxsLXZhbHVlIiwgMTAwLjApOw0KICAgICAgICAgICAgICAgIGlmIChoYXNFbm91Z2hNb25leShwbGF5ZXIsIHByaWNlKSAmJg0KICAgICAgICAgICAgICAgICAgICAgICAgaGFzRW5vdWdoWFAocGxheWVyLCB4cFByaWNlKSAmJg0KICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tTa3VsbFJlcXVpcmVtZW50cyhwbGF5ZXIsIGNvbWJpbmVkU2t1bGxDb3VudCwgY29tYmluZWRNaW5Ta3VsbFZhbHVlKSkgew0KICAgICAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0RWNvbm9teSgpLndpdGhkcmF3UGxheWVyKHBsYXllciwgcHJpY2UpOw0KICAgICAgICAgICAgICAgICAgICByZW1vdmVFeHBlcmllbmNlKHBsYXllciwgeHBQcmljZSk7DQogICAgICAgICAgICAgICAgICAgIHJlbW92ZVNrdWxsc0Zyb21JbnZlbnRvcnkocGxheWVyLCBjb21iaW5lZFNrdWxsQ291bnQsIGNvbWJpbmVkTWluU2t1bGxWYWx1ZSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQoNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgaWYgKGhhc0Vub3VnaE1vbmV5KHBsYXllciwgcHJpY2UpKSB7DQogICAgICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRFY29ub215KCkud2l0aGRyYXdQbGF5ZXIocGxheWVyLCBwcmljZSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDbGVhbnMgdXAgdGhlIEdVSSBieSB1bnJlZ2lzdGVyaW5nIGxpc3RlbmVycw0KICAgICAqIC8vIG5vdGU6IFByZXZlbnRzIG1lbW9yeSBsZWFrcyB3aGVuIEdVSSBpcyBjbG9zZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBjbGVhbnVwKCkgew0KICAgICAgICBIYW5kbGVyTGlzdC51bnJlZ2lzdGVyQWxsKHRoaXMpOw0KICAgICAgICBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCkubG9nRGVidWcoIkNsZWFuZWQgdXAgSHVudGVyRGVuR1VJIGZvciBwbGF5ZXI6ICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGVjayBpZiBwbGF5ZXIgaGFzIGVub3VnaCBtb25leSB1c2luZyBWYXVsdCBlY29ub215DQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIGhhc0Vub3VnaE1vbmV5KFBsYXllciBwbGF5ZXIsIGRvdWJsZSBhbW91bnQpIHsNCiAgICAgICAgaWYgKHBsdWdpbi5nZXRFY29ub215KCkgPT0gbnVsbCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICByZXR1cm4gcGx1Z2luLmdldEVjb25vbXkoKS5nZXRCYWxhbmNlKHBsYXllcikgPj0gYW1vdW50Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrIGlmIHBsYXllciBoYXMgZW5vdWdoIFhQDQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIGhhc0Vub3VnaFhQKFBsYXllciBwbGF5ZXIsIGludCBhbW91bnQpIHsNCiAgICAgICAgcmV0dXJuIEN1cnJlbmN5VXRpbC5oYXNFbm91Z2hYUChwbGF5ZXIsIGFtb3VudCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmVtb3ZlcyBleHBlcmllbmNlIGZyb20gdGhlIHBsYXllcg0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCByZW1vdmVFeHBlcmllbmNlKFBsYXllciBwbGF5ZXIsIGludCBhbW91bnQpIHsNCiAgICAgICAgQ3VycmVuY3lVdGlsLnJlbW92ZUV4cGVyaWVuY2UocGxheWVyLCBhbW91bnQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNlbmRzIGEgbWVzc2FnZSB0byB0aGUgcGxheWVyIHdpdGggY29sb3IgY29kZXMgYW5kIHBsYWNlaG9sZGVycw0KICAgICAqIC8vIG5vdGU6IEZvcm1hdHMgbWVzc2FnZSB3aXRoIGNvbG9ycyBhbmQgcGxhY2Vob2xkZXJzLCBzZW5kaW5nIGFzIEJhc2VDb21wb25lbnQNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgc2VuZE1lc3NhZ2UoUGxheWVyIHBsYXllciwgU3RyaW5nIG1lc3NhZ2UpIHsNCiAgICAgICAgaWYgKG1lc3NhZ2UgIT0gbnVsbCAmJiAhbWVzc2FnZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGlmIChCdWtraXQuZ2V0UGx1Z2luTWFuYWdlcigpLmlzUGx1Z2luRW5hYmxlZCgiUGxhY2Vob2xkZXJBUEkiKSkgew0KICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBQbGFjZWhvbGRlckFQSS5zZXRQbGFjZWhvbGRlcnMocGxheWVyLCBtZXNzYWdlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIG1lc3NhZ2UgPSBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIG1lc3NhZ2UpOw0KICAgICAgICAgICAgQmFzZUNvbXBvbmVudFtdIGNvbXBvbmVudHMgPSBUZXh0Q29tcG9uZW50LmZyb21MZWdhY3lUZXh0KG1lc3NhZ2UpOw0KICAgICAgICAgICAgcGxheWVyLnNwaWdvdCgpLnNlbmRNZXNzYWdlKGNvbXBvbmVudHMpOw0KICAgICAgICB9DQogICAgfQ0KfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0b255MjYvYm91bnRpZXNQbHVzL0dVSXMvUHJldmlld0dVSS5qYXZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAxMTEwMjUgMTUwMjY3MDM2MjMgMDE2NTMxACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy5HVUlzOw0KDQppbXBvcnQgb3JnLmJ1a2tpdC5CdWtraXQ7DQppbXBvcnQgb3JnLmJ1a2tpdC5DaGF0Q29sb3I7DQppbXBvcnQgb3JnLmJ1a2tpdC5NYXRlcmlhbDsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uQ29uZmlndXJhdGlvblNlY3Rpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5jb25maWd1cmF0aW9uLmZpbGUuWWFtbENvbmZpZ3VyYXRpb247DQppbXBvcnQgb3JnLmJ1a2tpdC5lbnRpdHkuUGxheWVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuRXZlbnRIYW5kbGVyOw0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuTGlzdGVuZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5pbnZlbnRvcnkuSW52ZW50b3J5Q2xpY2tFdmVudDsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LmludmVudG9yeS5JbnZlbnRvcnlDbG9zZUV2ZW50Ow0KaW1wb3J0IG9yZy5idWtraXQuZXZlbnQuaW52ZW50b3J5LkludmVudG9yeURyYWdFdmVudDsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JbnZlbnRvcnk7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkuSW52ZW50b3J5SG9sZGVyOw0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5Lkl0ZW1TdGFjazsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5tZXRhLkl0ZW1NZXRhOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuQm91bnRpZXNQbHVzOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMuQm91bnR5Ow0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuRXZlbnRNYW5hZ2VyOw0KaW1wb3J0IHRvbnkyNi5ib3VudGllc1BsdXMudXRpbHMuKjsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5GaWxlQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmVuY2hhbnRtZW50cy5FbmNoYW50bWVudDsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JdGVtRmxhZzsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LkhhbmRsZXJMaXN0Ow0KDQppbXBvcnQgamF2YS5pby5GaWxlOw0KaW1wb3J0IGphdmEudXRpbC4qOw0KaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uQ29sbGVjdG9yczsNCg0KLyoqDQogKiBEaXNwbGF5cyBhIHByZXZpZXcgb2YgYW4gYWN0aXZlIGJvdW50eSB3aGVuIG9wZW5lZCBmcm9tIEJvdW50eUdVSQ0KICovDQpwdWJsaWMgY2xhc3MgUHJldmlld0dVSSBpbXBsZW1lbnRzIEludmVudG9yeUhvbGRlciwgTGlzdGVuZXIgew0KICAgIHByaXZhdGUgZmluYWwgSW52ZW50b3J5IGludmVudG9yeTsNCiAgICBwcml2YXRlIGZpbmFsIFBsYXllciBwbGF5ZXI7DQogICAgcHJpdmF0ZSBmaW5hbCBCb3VudGllc1BsdXMgcGx1Z2luOw0KICAgIHByaXZhdGUgZmluYWwgVVVJRCB0YXJnZXRVVUlEOw0KICAgIHByaXZhdGUgZmluYWwgU3RyaW5nIEdVSV9USVRMRTsNCiAgICBwcml2YXRlIGZpbmFsIFNldDxJbnRlZ2VyPiBwcm90ZWN0ZWRTbG90cyA9IG5ldyBIYXNoU2V0PD4oKTsNCiAgICBwcml2YXRlIGludCBjdXJyZW50UGFnZSA9IDA7DQoNCiAgICAvKioNCiAgICAgKiBDb25zdHJ1Y3RzIHRoZSBQcmV2aWV3R1VJDQogICAgICogLy8gbm90ZTogSW5pdGlhbGl6ZXMgdGhlIGJvdW50eSBwcmV2aWV3IEdVSSBhbmQgcmVnaXN0ZXJzIGxpc3RlbmVycw0KICAgICAqLw0KICAgIHB1YmxpYyBQcmV2aWV3R1VJKFBsYXllciBwbGF5ZXIsIFVVSUQgdGFyZ2V0VVVJRCwgRXZlbnRNYW5hZ2VyIGV2ZW50TWFuYWdlcikgew0KICAgICAgICB0aGlzLnBsYXllciA9IHBsYXllcjsNCiAgICAgICAgdGhpcy5wbHVnaW4gPSBCb3VudGllc1BsdXMuZ2V0SW5zdGFuY2UoKTsNCiAgICAgICAgdGhpcy50YXJnZXRVVUlEID0gdGFyZ2V0VVVJRDsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldFByZXZpZXdHVUlDb25maWcoKTsNCiAgICAgICAgRmlsZSBjb25maWdGaWxlID0gbmV3IEZpbGUocGx1Z2luLmdldERhdGFGb2xkZXIoKSwgIkdVSXMvUHJldmlld0dVSS55bWwiKTsNCg0KICAgICAgICAvLyBWZXJpZnkgY29uZmlndXJhdGlvbiBpbnRlZ3JpdHkNCiAgICAgICAgaWYgKCFjb25maWdGaWxlLmV4aXN0cygpIHx8IGNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiYm91bnR5LWluZm8iKSA9PSBudWxsKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCkubG9nV2FybmluZygiW0RFQlVHIC0gUHJldmlld0dVSV0gUHJldmlld0dVSS55bWwgaXMgbWlzc2luZyBvciBpbnZhbGlkLCByZWxvYWRpbmcgZGVmYXVsdCIpOw0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBpZiAoY29uZmlnRmlsZS5leGlzdHMoKSkgY29uZmlnRmlsZS5kZWxldGUoKTsgLy8gUmVtb3ZlIGludmFsaWQgZmlsZQ0KICAgICAgICAgICAgICAgIHBsdWdpbi5zYXZlUmVzb3VyY2UoIkdVSXMvUHJldmlld0dVSS55bWwiLCBmYWxzZSk7IC8vIENvcHkgZGVmYXVsdA0KICAgICAgICAgICAgICAgIGNvbmZpZyA9IFlhbWxDb25maWd1cmF0aW9uLmxvYWRDb25maWd1cmF0aW9uKGNvbmZpZ0ZpbGUpOw0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKS5sb2dEZWJ1ZygiW0RFQlVHIC0gUHJldmlld0dVSV0gUmVsb2FkZWQgZGVmYXVsdCBQcmV2aWV3R1VJLnltbCIpOw0KICAgICAgICAgICAgfSBjYXRjaCAoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCkubG9nV2FybmluZygiW0RFQlVHIC0gUHJldmlld0dVSV0gRmFpbGVkIHRvIHJlbG9hZCBkZWZhdWx0IFByZXZpZXdHVUkueW1sOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgdGhpcy5HVUlfVElUTEUgPSBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGNvbmZpZy5nZXRTdHJpbmcoImd1aS10aXRsZSIsICImNkJvdW50eSBQcmV2aWV3IikpOw0KICAgICAgICB0aGlzLmludmVudG9yeSA9IEJ1a2tpdC5jcmVhdGVJbnZlbnRvcnkodGhpcywgNTQsIEdVSV9USVRMRSk7DQogICAgICAgIGV2ZW50TWFuYWdlci5yZWdpc3Rlcih0aGlzKTsNCiAgICAgICAgaW5pdGlhbGl6ZUdVSSgpOw0KICAgIH0NCg0KICAgIEBPdmVycmlkZQ0KICAgIHB1YmxpYyBJbnZlbnRvcnkgZ2V0SW52ZW50b3J5KCkgew0KICAgICAgICByZXR1cm4gaW52ZW50b3J5Ow0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIG9wZW5JbnZlbnRvcnkoUGxheWVyIHBsYXllcikgew0KICAgICAgICB1cGRhdGVQcm90ZWN0ZWRTbG90cygpOw0KICAgICAgICBpZiAoIXBsYXllci5lcXVhbHModGhpcy5wbGF5ZXIpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgcmVmcmVzaEdVSSgpOw0KICAgICAgICBwbGF5ZXIub3BlbkludmVudG9yeShpbnZlbnRvcnkpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBpbml0aWFsaXplR1VJKCkgew0KICAgICAgICByZWZyZXNoR1VJKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmVmcmVzaGVzIHRoZSBHVUkgd2l0aCB1cGRhdGVkIGNvbnRlbnQgLy8gbm90ZTogQ2xlYXJzIGFuZCByZXBvcHVsYXRlcyB0aGUgaW52ZW50b3J5IHdpdGggYm9yZGVycywgYm91bnR5IGluZm8sIGJvdW50eSBpdGVtcywgYW5kIGN1c3RvbSBpdGVtcw0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCByZWZyZXNoR1VJKCkgew0KICAgICAgICBpbnZlbnRvcnkuY2xlYXIoKTsNCiAgICAgICAgYWRkQm9yZGVycygpOw0KICAgICAgICBhZGRCb3VudHlJbmZvSXRlbSgpOw0KICAgICAgICBhZGRCb3VudHlJdGVtcygpOw0KICAgICAgICBhZGRDdXN0b21JdGVtcygpOw0KICAgICAgICB1cGRhdGVQcm90ZWN0ZWRTbG90cygpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBsb2FkUHJvdGVjdGVkU2xvdHMoRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnKSB7DQogICAgICAgIHByb3RlY3RlZFNsb3RzLmNsZWFyKCk7DQogICAgICAgIGlmIChpbnZlbnRvcnkgPT0gbnVsbCkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIExpc3Q8SW50ZWdlcj4gY29uZmlnU2xvdHMgPSBjb25maWcuZ2V0SW50ZWdlckxpc3QoImJvcmRlci5zbG90cyIpOw0KICAgICAgICBpZiAoIWNvbmZpZ1Nsb3RzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgcHJvdGVjdGVkU2xvdHMuYWRkQWxsKGNvbmZpZ1Nsb3RzKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIExpc3Q8SW50ZWdlcj4gZGVmYXVsdFNsb3RzID0gQXJyYXlzLmFzTGlzdCgwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxNywgMTgsIDI2LCAyNywgMzUsIDM2LCA0NCwgNDUsIDQ2LCA0NywgNDgsIDQ5LCA1MCwgNTEsIDUyLCA1Myk7DQogICAgICAgICAgICBwcm90ZWN0ZWRTbG90cy5hZGRBbGwoZGVmYXVsdFNsb3RzKTsNCiAgICAgICAgfQ0KICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGludmVudG9yeS5nZXRTaXplKCk7IGkrKykgew0KICAgICAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBpbnZlbnRvcnkuZ2V0SXRlbShpKTsNCiAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgaXRlbS5nZXRUeXBlKCkgIT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICAgICAgcHJvdGVjdGVkU2xvdHMuYWRkKGkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIHVwZGF0ZVByb3RlY3RlZFNsb3RzKCkgew0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0UHJldmlld0dVSUNvbmZpZygpOw0KICAgICAgICBsb2FkUHJvdGVjdGVkU2xvdHMoY29uZmlnKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIGJvcmRlciBpdGVtcyB0byB0aGUgR1VJDQogICAgICogLy8gbm90ZTogUG9wdWxhdGVzIGJvcmRlciBzbG90cyB3aXRoIGNvbmZpZ3VyZWQgbWF0ZXJpYWwNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgYWRkQm9yZGVycygpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldFByZXZpZXdHVUlDb25maWcoKTsNCiAgICAgICAgaWYgKCFjb25maWcuZ2V0Qm9vbGVhbigiYm9yZGVyLmVuYWJsZWQiLCB0cnVlKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBQcmV2aWV3R1VJXSBCb3JkZXJzIGRpc2FibGVkIGluIFByZXZpZXdHVUkueW1sIik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gY29uZmlnLmdldFN0cmluZygiYm9yZGVyLm1hdGVyaWFsIiwgIldISVRFX1NUQUlORURfR0xBU1NfUEFORSIpOw0KICAgICAgICBJdGVtU3RhY2sgYm9yZGVySXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2sobWF0ZXJpYWxOYW1lKTsNCiAgICAgICAgU3RyaW5nIGZhaWx1cmVSZWFzb24gPSBudWxsOw0KICAgICAgICBpZiAoYm9yZGVySXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuU1RPTkUgJiYgIW1hdGVyaWFsTmFtZS5lcXVhbHNJZ25vcmVDYXNlKCJXSElURV9TVEFJTkVEX0dMQVNTX1BBTkUiKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIFByZXZpZXdHVUldIEludmFsaWQgYm9yZGVyIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIicgaW4gUHJldmlld0dVSS55bWwsIHVzaW5nIFdISVRFX1NUQUlORURfR0xBU1NfUEFORSIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIiciOw0KICAgICAgICAgICAgYm9yZGVySXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIldISVRFX1NUQUlORURfR0xBU1NfUEFORSIpOw0KICAgICAgICB9DQoNCiAgICAgICAgSXRlbU1ldGEgYm9yZGVyTWV0YSA9IGJvcmRlckl0ZW0uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgaWYgKGJvcmRlck1ldGEgIT0gbnVsbCkgew0KICAgICAgICAgICAgYm9yZGVyTWV0YS5zZXREaXNwbGF5TmFtZSgiICIpOw0KICAgICAgICAgICAgaWYgKGNvbmZpZy5nZXRCb29sZWFuKCJib3JkZXIuZW5jaGFudG1lbnQtZ2xvdyIsIGZhbHNlKSkgew0KICAgICAgICAgICAgICAgIGJvcmRlck1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgICAgICBib3JkZXJNZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0VOQ0hBTlRTKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGJvcmRlckl0ZW0uc2V0SXRlbU1ldGEoYm9yZGVyTWV0YSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gUHJldmlld0dVSV0gRmFpbGVkIHRvIGdldCBJdGVtTWV0YSBmb3IgYm9yZGVyIGl0ZW0iKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgIH0NCg0KICAgICAgICBMaXN0PEludGVnZXI+IGJvcmRlclNsb3RzID0gY29uZmlnLmdldEludGVnZXJMaXN0KCJib3JkZXIuc2xvdHMiKTsNCiAgICAgICAgaWYgKGJvcmRlclNsb3RzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgYm9yZGVyU2xvdHMgPSBBcnJheXMuYXNMaXN0KDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDE3LCAxOCwgMjYsIDI3LCAzNSwgMzYsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksIDUwLCA1MSwgNTIsIDUzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGludCB0b3RhbEl0ZW1zID0gYm9yZGVyU2xvdHMuc2l6ZSgpOw0KICAgICAgICBpbnQgc3VjY2Vzc2Z1bEl0ZW1zID0gMDsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGZhaWx1cmVzID0gbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgZm9yIChpbnQgc2xvdCA6IGJvcmRlclNsb3RzKSB7DQogICAgICAgICAgICBpZiAoc2xvdCA+PSAwICYmIHNsb3QgPCA1NCkgew0KICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlUmVhc29uID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgaW52ZW50b3J5LnNldEl0ZW0oc2xvdCwgYm9yZGVySXRlbS5jbG9uZSgpKTsNCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkU2xvdHMuYWRkKHNsb3QpOw0KICAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsSXRlbXMrKzsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoImJvcmRlci1zbG90LSIgKyBzbG90ICsgIiBSZWFzb246ICIgKyBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBQcmV2aWV3R1VJXSBJbnZhbGlkIHNsb3QgIiArIHNsb3QgKyAiIGluIFByZXZpZXdHVUkueW1sIGJvcmRlciBjb25maWd1cmF0aW9uIik7DQogICAgICAgICAgICAgICAgZmFpbHVyZXMuYWRkKCJib3JkZXItc2xvdC0iICsgc2xvdCArICIgUmVhc29uOiBJbnZhbGlkIHNsb3QgIiArIHNsb3QpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHN1Y2Nlc3NmdWxJdGVtcyA9PSB0b3RhbEl0ZW1zKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIFByZXZpZXdHVUldIEFsbCBib3JkZXIgaXRlbXMgY3JlYXRlZCIpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVNZXNzYWdlID0gIltERUJVRyAtIFByZXZpZXdHVUldICIgKyBzdWNjZXNzZnVsSXRlbXMgKyAiLyIgKyB0b3RhbEl0ZW1zICsgIiBib3JkZXIgaXRlbXMgY3JlYXRlZCI7DQogICAgICAgICAgICBpZiAoIWZhaWx1cmVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGZhaWx1cmVNZXNzYWdlICs9ICIsIGZhaWxlZCB0byBjcmVhdGU6ICIgKyBTdHJpbmcuam9pbigiLCAiLCBmYWlsdXJlcyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRmFpbHVyZSgiUHJldmlld0dVSV9ib3JkZXJfIiArIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpLCBmYWlsdXJlTWVzc2FnZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIHRoZSBtYWluIGJvdW50eSBpbmZvcm1hdGlvbiBpdGVtIHRvIHRoZSBHVUkNCiAgICAgKiAvLyBub3RlOiBEaXNwbGF5cyBib3VudHkgZGV0YWlscyBsaWtlIG1vbmV5LCBYUCwgYW5kIGl0ZW1zDQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGFkZEJvdW50eUluZm9JdGVtKCkgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0UHJldmlld0dVSUNvbmZpZygpOw0KICAgICAgICBpbnQgc2xvdCA9IGNvbmZpZy5nZXRJbnQoImJvdW50eS1pbmZvLnNsb3QiLCA0OSk7DQogICAgICAgIFN0cmluZyBmYWlsdXJlUmVhc29uID0gbnVsbDsNCg0KICAgICAgICBpZiAoc2xvdCA8IDAgfHwgc2xvdCA+IDUzKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gUHJldmlld0dVSV0gSW52YWxpZCBib3VudHktaW5mby5zbG90ICIgKyBzbG90ICsgIiBpbiBQcmV2aWV3R1VJLnltbCwgdXNpbmcgZGVmYXVsdCA0OSIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJJbnZhbGlkIHNsb3QgIiArIHNsb3Q7DQogICAgICAgICAgICBzbG90ID0gNDk7DQogICAgICAgIH0NCg0KICAgICAgICBTdHJpbmcgbWF0ZXJpYWxOYW1lID0gY29uZmlnLmdldFN0cmluZygiYm91bnR5LWluZm8ubWF0ZXJpYWwiLCAiUEFQRVIiKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgIGlmIChpdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5TVE9ORSAmJiAhbWF0ZXJpYWxOYW1lLmVxdWFsc0lnbm9yZUNhc2UoIlBBUEVSIikpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBQcmV2aWV3R1VJXSBJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIicgZm9yIGJvdW50eS1pbmZvLCB1c2luZyBQQVBFUiIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJJbnZhbGlkIG1hdGVyaWFsICciICsgbWF0ZXJpYWxOYW1lICsgIiciOw0KICAgICAgICAgICAgaXRlbSA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIlBBUEVSIik7DQogICAgICAgIH0NCg0KICAgICAgICBJdGVtTWV0YSBtZXRhID0gaXRlbS5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAobWV0YSA9PSBudWxsKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gUHJldmlld0dVSV0gRmFpbGVkIHRvIGdldCBJdGVtTWV0YSBmb3IgYm91bnR5LWluZm8gaXRlbSIpOw0KICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIjsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIEJvdW50eSBib3VudHkgPSBwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLmdldEJvdW50eSh0YXJnZXRVVUlEKTsNCiAgICAgICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgICAgIC5wbGF5ZXIocGxheWVyKQ0KICAgICAgICAgICAgICAgICAgICAudGFyZ2V0KHRhcmdldFVVSUQpDQogICAgICAgICAgICAgICAgICAgIC5ib3VudHlDb3VudChib3VudHkgIT0gbnVsbCA/IGJvdW50eS5nZXRTcG9uc29ycygpLnNpemUoKSA6IDApDQogICAgICAgICAgICAgICAgICAgIC5tb25leVZhbHVlKGJvdW50eSAhPSBudWxsID8gYm91bnR5LmdldEN1cnJlbnRNb25leSgpIDogMC4wKQ0KICAgICAgICAgICAgICAgICAgICAuZXhwVmFsdWUoYm91bnR5ICE9IG51bGwgPyBib3VudHkuZ2V0Q3VycmVudFhQKCkgOiAwKQ0KICAgICAgICAgICAgICAgICAgICAudGltZVZhbHVlKGJvdW50eSAhPSBudWxsID8gYm91bnR5LmdldEZvcm1hdHRlZEN1cnJlbnREdXJhdGlvbigpIDogIlBlcm1hbmVudCIpDQogICAgICAgICAgICAgICAgICAgIC5pdGVtQ291bnQoYm91bnR5ICE9IG51bGwgPyBib3VudHkuZ2V0Q3VycmVudEl0ZW1zKCkuc2l6ZSgpIDogMCkNCiAgICAgICAgICAgICAgICAgICAgLml0ZW1WYWx1ZShib3VudHkgIT0gbnVsbCA/IGJvdW50eS5nZXRDdXJyZW50SXRlbVZhbHVlKCkgOiAwLjApDQogICAgICAgICAgICAgICAgICAgIC50YXhSYXRlKHBsdWdpbi5nZXRDb25maWcoKS5nZXREb3VibGUoImJvdW50eS1wbGFjZS10YXgtcmF0ZSIsIDAuMCkpDQogICAgICAgICAgICAgICAgICAgIC5tb25leUxpbmUoIiY3TW9uZXk6ICZhJCIgKyAoYm91bnR5ICE9IG51bGwgPyBTdHJpbmcuZm9ybWF0KCIlLjJmIiwgYm91bnR5LmdldEN1cnJlbnRNb25leSgpKSA6ICIwLjAwIikpDQogICAgICAgICAgICAgICAgICAgIC5leHBlcmllbmNlTGluZSgiJjdFeHBlcmllbmNlOiAmZSIgKyAoYm91bnR5ICE9IG51bGwgPyAoYm91bnR5LmdldEN1cnJlbnRYUCgpID09IDAgPyAiMCBYUCBMZXZlbHMiIDogYm91bnR5LmdldEN1cnJlbnRYUCgpICsgIiBYUCBMZXZlbCIgKyAoYm91bnR5LmdldEN1cnJlbnRYUCgpID4gMSA/ICJzIiA6ICIiKSkgOiAiMCBYUCBMZXZlbHMiKSk7DQoNCiAgICAgICAgICAgIFN0cmluZyBuYW1lID0gY29uZmlnLmdldFN0cmluZygiYm91bnR5LWluZm8ubmFtZSIsICImNiVib3VudGllc3BsdXNfdGFyZ2V0JSBCb3VudHkiKTsNCiAgICAgICAgICAgIGlmIChuYW1lID09IG51bGwgfHwgbmFtZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gUHJldmlld0dVSV0gSW52YWxpZCBvciBlbXB0eSBib3VudHktaW5mby5uYW1lLCB1c2luZyBkZWZhdWx0Iik7DQogICAgICAgICAgICAgICAgbmFtZSA9ICImNiVib3VudGllc3BsdXNfdGFyZ2V0JSBCb3VudHkiOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgU3RyaW5nIHByb2Nlc3NlZE5hbWUgPSBQbGFjZWhvbGRlcnMuYXBwbHkobmFtZSwgY29udGV4dCk7DQogICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKHByb2Nlc3NlZE5hbWUpOw0KDQogICAgICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KCJib3VudHktaW5mby5sb3JlIik7DQogICAgICAgICAgICBpZiAobG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gUHJldmlld0dVSV0gRW1wdHkgYm91bnR5LWluZm8ubG9yZSwgdXNpbmcgZGVmYXVsdCIpOw0KICAgICAgICAgICAgICAgIGxvcmUgPSBBcnJheXMuYXNMaXN0KA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3VG9wIFNwb25zb3JzOiAlYm91bnRpZXNwbHVzX3RvcDNfc3BvbnNvcnNfbnVtYmVyZWQlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICIiLA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3T3JpZ2luYWwgTW9uZXk6ICZhJCVib3VudGllc3BsdXNfb3JpZ2luYWxfbW9uZXklIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImN0N1cnJlbnQgTW9uZXk6ICZhJCVib3VudGllc3BsdXNfbW9uZXlfdmFsdWUlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImN01vbmV5IEluY3JlYXNlOiAmZSVib3VudGllc3BsdXNfcHJpY2VfaW5jcmVhc2VfcGVyY2VudCUlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICIiLA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3T3JpZ2luYWwgSXRlbXM6ICZiJWJvdW50aWVzcGx1c19vcmlnaW5hbF9pdGVtX2NvdW50JSAoJCVib3VudGllc3BsdXNfb3JpZ2luYWxfaXRlbV92YWx1ZSUpIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImN0N1cnJlbnQgSXRlbXM6ICZiJWJvdW50aWVzcGx1c19pdGVtX2NvdW50JSAoJCVib3VudGllc3BsdXNfaXRlbV92YWx1ZSUpIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImN0l0ZW0gSW5jcmVhc2U6ICZlJWJvdW50aWVzcGx1c19pdGVtX2luY3JlYXNlX3BlcmNlbnQlJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAiIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImN09yaWdpbmFsIFhQOiAmZSVib3VudGllc3BsdXNfb3JpZ2luYWxfeHAlIExldmVscyIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdDdXJyZW50IFhQOiAmZSVib3VudGllc3BsdXNfZXhwX3ZhbHVlJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdYUCBJbmNyZWFzZTogJmUlYm91bnRpZXNwbHVzX3hwbGV2ZWxfaW5jcmVhc2VfcGVyY2VudCUlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICIiLA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3T3JpZ2luYWwgRHVyYXRpb246ICY5JWJvdW50aWVzcGx1c19vcmlnaW5hbF9kdXJhdGlvbiUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3Q3VycmVudCBEdXJhdGlvbjogJjklYm91bnRpZXNwbHVzX3RpbWVfdmFsdWUlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImN0R1cmF0aW9uIEluY3JlYXNlOiAmZSVib3VudGllc3BsdXNfYm91bnR5ZHVyYXRpb25faW5jcmVhc2VfcGVyY2VudCUlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICIiLA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3T3JpZ2luYWwgUG9vbDogJjYkJWJvdW50aWVzcGx1c19vcmlnaW5hbF9wb29sJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdDdXJyZW50IFBvb2w6ICY2JCVib3VudGllc3BsdXNfdG90YWxfcG9vbCUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3UG9vbCBJbmNyZWFzZTogJmUlYm91bnRpZXNwbHVzX3Bvb2xfaW5jcmVhc2VfcGVyY2VudCUlIg0KICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBMaXN0PFN0cmluZz4gcHJvY2Vzc2VkTG9yZSA9IFBsYWNlaG9sZGVycy5hcHBseShsb3JlLCBjb250ZXh0KTsNCiAgICAgICAgICAgIG1ldGEuc2V0TG9yZShwcm9jZXNzZWRMb3JlKTsNCg0KICAgICAgICAgICAgYm9vbGVhbiBlbmNoYW50bWVudEdsb3cgPSBjb25maWcuZ2V0Qm9vbGVhbigiYm91bnR5LWluZm8uZW5jaGFudG1lbnQtZ2xvdyIsIGZhbHNlKTsNCiAgICAgICAgICAgIGlmIChlbmNoYW50bWVudEdsb3cpIHsNCiAgICAgICAgICAgICAgICBtZXRhLmFkZEVuY2hhbnQoRW5jaGFudG1lbnQuRFVSQUJJTElUWSwgMSwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoVmVyc2lvblV0aWxzLmlzUG9zdDE5KCkpIHsNCiAgICAgICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0FUVFJJQlVURVMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaXRlbS5zZXRJdGVtTWV0YShtZXRhKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGludCB0b3RhbEl0ZW1zID0gMTsNCiAgICAgICAgaW50IHN1Y2Nlc3NmdWxJdGVtcyA9IDA7DQogICAgICAgIExpc3Q8U3RyaW5nPiBmYWlsdXJlcyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KDQogICAgICAgIGlmIChmYWlsdXJlUmVhc29uID09IG51bGwgJiYgbWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICBpbnZlbnRvcnkuc2V0SXRlbShzbG90LCBpdGVtKTsNCiAgICAgICAgICAgIHByb3RlY3RlZFNsb3RzLmFkZChzbG90KTsNCiAgICAgICAgICAgIHN1Y2Nlc3NmdWxJdGVtcysrOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZmFpbHVyZXMuYWRkKCJib3VudHktaW5mbyBSZWFzb246ICIgKyAoZmFpbHVyZVJlYXNvbiAhPSBudWxsID8gZmFpbHVyZVJlYXNvbiA6ICJGYWlsZWQgdG8gY3JlYXRlIGl0ZW0iKSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoc3VjY2Vzc2Z1bEl0ZW1zID09IHRvdGFsSXRlbXMpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gUHJldmlld0dVSV0gQWxsIGJvdW50eSBpbmZvIGl0ZW1zIGNyZWF0ZWQiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFN0cmluZyBmYWlsdXJlTWVzc2FnZSA9ICJbREVCVUcgLSBQcmV2aWV3R1VJXSAiICsgc3VjY2Vzc2Z1bEl0ZW1zICsgIi8iICsgdG90YWxJdGVtcyArICIgYm91bnR5IGluZm8gaXRlbXMgY3JlYXRlZCI7DQogICAgICAgICAgICBpZiAoIWZhaWx1cmVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGZhaWx1cmVNZXNzYWdlICs9ICIsIGZhaWxlZCB0byBjcmVhdGU6ICIgKyBTdHJpbmcuam9pbigiLCAiLCBmYWlsdXJlcyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRmFpbHVyZSgiUHJldmlld0dVSV9ib3VudHlfaW5mb18iICsgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCksIGZhaWx1cmVNZXNzYWdlKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICAvKioNCiAgICAgKiBBZGRzIGN1c3RvbSBpdGVtcyB0byB0aGUgR1VJIGZyb20gUHJldmlld0dVSS55bWwNCiAgICAgKiAvLyBub3RlOiBQb3B1bGF0ZXMgY3VzdG9tIGRlY29yYXRpdmUgb3IgaW50ZXJhY3RpdmUgaXRlbXMgd2l0aCBwbGFjZWhvbGRlcnMNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgYWRkQ3VzdG9tSXRlbXMoKSB7DQogICAgICAgIERlYnVnTWFuYWdlciBkZWJ1Z01hbmFnZXIgPSBwbHVnaW4uZ2V0RGVidWdNYW5hZ2VyKCk7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRQcmV2aWV3R1VJQ29uZmlnKCk7DQogICAgICAgIENvbmZpZ3VyYXRpb25TZWN0aW9uIGN1c3RvbUl0ZW1zU2VjdGlvbiA9IGNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiY3VzdG9tLWl0ZW1zIik7DQogICAgICAgIGlmIChjdXN0b21JdGVtc1NlY3Rpb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUddIE5vIGN1c3RvbS1pdGVtcyBzZWN0aW9uIGZvdW5kIGluIFByZXZpZXdHVUkueW1sIik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpbnQgdG90YWxJdGVtcyA9IGN1c3RvbUl0ZW1zU2VjdGlvbi5nZXRLZXlzKGZhbHNlKS5zaXplKCk7DQogICAgICAgIGludCBzdWNjZXNzZnVsSXRlbXMgPSAwOw0KICAgICAgICBMaXN0PFN0cmluZz4gZmFpbHVyZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCg0KICAgICAgICBCb3VudHkgYm91bnR5ID0gcGx1Z2luLmdldEJvdW50eU1hbmFnZXIoKS5nZXRCb3VudHkodGFyZ2V0VVVJRCk7DQogICAgICAgIFBsYWNlaG9sZGVyQ29udGV4dCBjb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgLnBsYXllcihwbGF5ZXIpDQogICAgICAgICAgICAgICAgLnRhcmdldCh0YXJnZXRVVUlEKQ0KICAgICAgICAgICAgICAgIC5ib3VudHlDb3VudChib3VudHkgIT0gbnVsbCA/IGJvdW50eS5nZXRTcG9uc29ycygpLnNpemUoKSA6IDApDQogICAgICAgICAgICAgICAgLm1vbmV5VmFsdWUoYm91bnR5ICE9IG51bGwgPyBib3VudHkuZ2V0Q3VycmVudE1vbmV5KCkgOiAwLjApDQogICAgICAgICAgICAgICAgLmV4cFZhbHVlKGJvdW50eSAhPSBudWxsID8gYm91bnR5LmdldEN1cnJlbnRYUCgpIDogMCkNCiAgICAgICAgICAgICAgICAudGltZVZhbHVlKGJvdW50eSAhPSBudWxsID8gYm91bnR5LmdldEZvcm1hdHRlZEN1cnJlbnREdXJhdGlvbigpIDogIlBlcm1hbmVudCIpDQogICAgICAgICAgICAgICAgLml0ZW1Db3VudChib3VudHkgIT0gbnVsbCA/IGJvdW50eS5nZXRDdXJyZW50SXRlbXMoKS5zaXplKCkgOiAwKQ0KICAgICAgICAgICAgICAgIC5pdGVtVmFsdWUoYm91bnR5ICE9IG51bGwgPyBib3VudHkuZ2V0Q3VycmVudEl0ZW1WYWx1ZSgpIDogMC4wKTsNCg0KICAgICAgICBmb3IgKFN0cmluZyBrZXkgOiBjdXN0b21JdGVtc1NlY3Rpb24uZ2V0S2V5cyhmYWxzZSkpIHsNCiAgICAgICAgICAgIFN0cmluZyBwYXRoID0gImN1c3RvbS1pdGVtcy4iICsga2V5Ow0KICAgICAgICAgICAgU3RyaW5nIG1hdGVyaWFsTmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcocGF0aCArICIubWF0ZXJpYWwiLCAiU1RPTkUiKTsNCiAgICAgICAgICAgIGludCBzbG90ID0gY29uZmlnLmdldEludChwYXRoICsgIi5zbG90IiwgLTEpOw0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVSZWFzb24gPSBudWxsOw0KDQogICAgICAgICAgICBpZiAoc2xvdCA8IDAgfHwgc2xvdCA+PSA1NCkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJJbnZhbGlkIHNsb3QgIiArIHNsb3QgKyAiIGZvciBjdXN0b20gaXRlbSAiICsga2V5ICsgIiBpbiBQcmV2aWV3R1VJLnltbCIpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiSW52YWxpZCBzbG90ICIgKyBzbG90Ow0KICAgICAgICAgICAgICAgIE1hcDxTdHJpbmcsIFN0cmluZz4gcGxhY2Vob2xkZXJzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVycy5wdXQoInNsb3QiLCBTdHJpbmcudmFsdWVPZihzbG90KSk7DQogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJzLnB1dCgiaXRlbSIsIGtleSk7DQogICAgICAgICAgICAgICAgTWVzc2FnZVV0aWxzLnNlbmRGb3JtYXR0ZWRNZXNzYWdlKHBsYXllciwgImludmFsaWQtY3VzdG9tLXNsb3QiKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoa2V5ICsgIiBSZWFzb246ICIgKyBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHByb3RlY3RlZFNsb3RzLmNvbnRhaW5zKHNsb3QpKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIlNsb3QgIiArIHNsb3QgKyAiIGZvciBjdXN0b20gaXRlbSAiICsga2V5ICsgIiBpcyBhbHJlYWR5IG9jY3VwaWVkIik7DQogICAgICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJTbG90ICIgKyBzbG90ICsgIiBvY2N1cGllZCI7DQogICAgICAgICAgICAgICAgTWFwPFN0cmluZywgU3RyaW5nPiBwbGFjZWhvbGRlcnMgPSBuZXcgSGFzaE1hcDw+KCk7DQogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJzLnB1dCgic2xvdCIsIFN0cmluZy52YWx1ZU9mKHNsb3QpKTsNCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcnMucHV0KCJpdGVtIiwga2V5KTsNCiAgICAgICAgICAgICAgICBNZXNzYWdlVXRpbHMuc2VuZEZvcm1hdHRlZE1lc3NhZ2UocGxheWVyLCAiaW52YWxpZC1jdXN0b20tc2xvdCIpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZChrZXkgKyAiIFJlYXNvbjogIiArIGZhaWx1cmVSZWFzb24pOw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBNYXRlcmlhbCBtYXRlcmlhbCA9IFZlcnNpb25VdGlscy5nZXRNYXRlcmlhbFNhZmVseShtYXRlcmlhbE5hbWUsICJTVE9ORSIpOw0KICAgICAgICAgICAgaWYgKG1hdGVyaWFsID09IG51bGwpIHsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gUHJldmlld0dVSV0gSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIGZvciBjdXN0b20gaXRlbSAiICsga2V5ICsgIiwgdXNpbmcgU1RPTkUiKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyI7DQogICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBNYXRlcmlhbC5TVE9ORTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBuZXcgSXRlbVN0YWNrKG1hdGVyaWFsKTsNCiAgICAgICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBpdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgICAgICBpZiAobWV0YSA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIFByZXZpZXdHVUldIEZhaWxlZCB0byBnZXQgSXRlbU1ldGEgZm9yIGN1c3RvbSBpdGVtICIgKyBrZXkpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgICAgICAgICAgZmFpbHVyZXMuYWRkKGtleSArICIgUmVhc29uOiAiICsgZmFpbHVyZVJlYXNvbik7DQogICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIFN0cmluZyBuYW1lID0gY29uZmlnLmdldFN0cmluZyhwYXRoICsgIi5uYW1lIiwgIiY2Q3VzdG9tIEl0ZW0iKTsNCiAgICAgICAgICAgIG1ldGEuc2V0RGlzcGxheU5hbWUoQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBQbGFjZWhvbGRlcnMuYXBwbHkobmFtZSwgY29udGV4dCkpKTsNCg0KICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdChwYXRoICsgIi5sb3JlIik7DQogICAgICAgICAgICBpZiAoIWxvcmUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgTGlzdDxTdHJpbmc+IHByb2Nlc3NlZExvcmUgPSBQbGFjZWhvbGRlcnMuYXBwbHkobG9yZSwgY29udGV4dCkuc3RyZWFtKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAobGluZSAtPiBsaW5lLnJlcGxhY2UoIiVpdGVtX3ZhbHVlJSIsIFN0cmluZy5mb3JtYXQoIiUuMmYiLCBwbHVnaW4uZ2V0SXRlbVZhbHVlQ2FsY3VsYXRvcigpLmNhbGN1bGF0ZUl0ZW1WYWx1ZShpdGVtKSkpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChsaW5lIC0+IENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbGluZSkpDQogICAgICAgICAgICAgICAgICAgICAgICAuY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgpKTsNCiAgICAgICAgICAgICAgICBtZXRhLnNldExvcmUocHJvY2Vzc2VkTG9yZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGJvb2xlYW4gZW5jaGFudG1lbnRHbG93ID0gY29uZmlnLmdldEJvb2xlYW4ocGF0aCArICIuZW5jaGFudG1lbnQtZ2xvdyIsIGZhbHNlKTsNCiAgICAgICAgICAgIGlmIChlbmNoYW50bWVudEdsb3cgJiYgVmVyc2lvblV0aWxzLnN1cHBvcnRzR2xvd2luZ0VmZmVjdCgpKSB7DQogICAgICAgICAgICAgICAgbWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgICAgIG1ldGEuYWRkSXRlbUZsYWdzKEl0ZW1GbGFnLkhJREVfRU5DSEFOVFMpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpdGVtLnNldEl0ZW1NZXRhKG1ldGEpOw0KDQogICAgICAgICAgICBpZiAoZmFpbHVyZVJlYXNvbiA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgaW52ZW50b3J5LnNldEl0ZW0oc2xvdCwgaXRlbSk7DQogICAgICAgICAgICAgICAgcHJvdGVjdGVkU2xvdHMuYWRkKHNsb3QpOw0KICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxJdGVtcysrOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIkFkZGVkIGN1c3RvbSBpdGVtICIgKyBrZXkgKyAiIHRvIHNsb3QgIiArIHNsb3QpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gTG9nIGNvbnNvbGlkYXRlZCBkZWJ1ZyBtZXNzYWdlDQogICAgICAgIGlmIChzdWNjZXNzZnVsSXRlbXMgPT0gdG90YWxJdGVtcykgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBQcmV2aWV3R1VJXSBBbGwgY3VzdG9tIGl0ZW1zIGNyZWF0ZWQiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFN0cmluZyBmYWlsdXJlTWVzc2FnZSA9ICJbREVCVUcgLSBQcmV2aWV3R1VJXSAiICsgc3VjY2Vzc2Z1bEl0ZW1zICsgIi8iICsgdG90YWxJdGVtcyArICIgY3VzdG9tIGl0ZW1zIGNyZWF0ZWQiOw0KICAgICAgICAgICAgaWYgKCFmYWlsdXJlcy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBmYWlsdXJlTWVzc2FnZSArPSAiLCBmYWlsZWQgdG8gY3JlYXRlOiAiICsgU3RyaW5nLmpvaW4oIiwgIiwgZmFpbHVyZXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckZhaWx1cmUoIlByZXZpZXdHVUlfY3VzdG9tX2l0ZW1zXyIgKyBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSwgZmFpbHVyZU1lc3NhZ2UpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQWRkcyBib3VudHkgaXRlbXMgdG8gdGhlIEdVSQ0KICAgICAqIC8vIG5vdGU6IFBvcHVsYXRlcyBhdmFpbGFibGUgc2xvdHMgd2l0aCBpdGVtcyBjb250cmlidXRlZCBieSBzcG9uc29ycyB0byB0aGUgYm91bnR5DQogICAgICovDQogICAgcHJpdmF0ZSB2b2lkIGFkZEJvdW50eUl0ZW1zKCkgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcgPSBwbHVnaW4uZ2V0UHJldmlld0dVSUNvbmZpZygpOw0KICAgICAgICBMaXN0PEludGVnZXI+IGNvbnRlbnRTbG90cyA9IGNvbmZpZy5nZXRJbnRlZ2VyTGlzdCgiYm91bnR5LWl0ZW1zLmNvbnRlbnQtc2xvdHMiKTsNCiAgICAgICAgaWYgKGNvbnRlbnRTbG90cy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIGNvbnRlbnRTbG90cyA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgZm9yIChpbnQgcm93ID0gMTsgcm93IDw9IDQ7IHJvdysrKSB7DQogICAgICAgICAgICAgICAgZm9yIChpbnQgY29sID0gMTsgY29sIDw9IDc7IGNvbCsrKSB7DQogICAgICAgICAgICAgICAgICAgIGludCBzbG90ID0gKHJvdyAqIDkpICsgY29sOw0KICAgICAgICAgICAgICAgICAgICBjb250ZW50U2xvdHMuYWRkKHNsb3QpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gUHJldmlld0dVSV0gVXNpbmcgZGVmYXVsdCBjb250ZW50IHNsb3RzIGZvciBib3VudHkgaXRlbXM6ICIgKyBjb250ZW50U2xvdHMpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgY29udGVudFNsb3RzID0gY29udGVudFNsb3RzLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoc2xvdCAtPiBzbG90ID49IDAgJiYgc2xvdCA8IDU0ICYmICFwcm90ZWN0ZWRTbG90cy5jb250YWlucyhzbG90KSkNCiAgICAgICAgICAgICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSk7DQogICAgICAgICAgICBpZiAoY29udGVudFNsb3RzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBQcmV2aWV3R1VJXSBObyB2YWxpZCBjb250ZW50IHNsb3RzIGRlZmluZWQgaW4gUHJldmlld0dVSS55bWwgZm9yIGJvdW50eSBpdGVtcywgdXNpbmcgZGVmYXVsdCIpOw0KICAgICAgICAgICAgICAgIGZvciAoaW50IHJvdyA9IDE7IHJvdyA8PSA0OyByb3crKykgew0KICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBjb2wgPSAxOyBjb2wgPD0gNzsgY29sKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGludCBzbG90ID0gKHJvdyAqIDkpICsgY29sOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwcm90ZWN0ZWRTbG90cy5jb250YWlucyhzbG90KSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRTbG90cy5hZGQoc2xvdCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpbnQgaXRlbXNQZXJQYWdlID0gY29udGVudFNsb3RzLnNpemUoKTsNCiAgICAgICAgaW50IHN0YXJ0SW5kZXggPSBjdXJyZW50UGFnZSAqIGl0ZW1zUGVyUGFnZTsNCiAgICAgICAgQm91bnR5IGJvdW50eSA9IHBsdWdpbi5nZXRCb3VudHlNYW5hZ2VyKCkuZ2V0Qm91bnR5KHRhcmdldFVVSUQpOw0KICAgICAgICBMaXN0PEJvdW50eS5Cb3VudHlJdGVtPiBpdGVtcyA9IChib3VudHkgIT0gbnVsbCAmJiAhYm91bnR5LmdldEN1cnJlbnRJdGVtcygpLmlzRW1wdHkoKSkgPw0KICAgICAgICAgICAgICAgIGJvdW50eS5nZXRTb3J0ZWRJdGVtcygpIDogbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgaW50IHRvdGFsSXRlbXMgPSBNYXRoLm1pbihpdGVtcy5zaXplKCkgLSBzdGFydEluZGV4LCBpdGVtc1BlclBhZ2UpOw0KICAgICAgICBpbnQgc3VjY2Vzc2Z1bEl0ZW1zID0gMDsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGZhaWx1cmVzID0gbmV3IEFycmF5TGlzdDw+KCk7DQoNCiAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJBZGRpbmcgYm91bnR5IGl0ZW1zOiBUb3RhbCBpdGVtcz0iICsgaXRlbXMuc2l6ZSgpICsNCiAgICAgICAgICAgICAgICAiLCBQYWdlPSIgKyAoY3VycmVudFBhZ2UgKyAxKSArICIsIFN0YXJ0SW5kZXg9IiArIHN0YXJ0SW5kZXggKw0KICAgICAgICAgICAgICAgICIsIEl0ZW1zUGVyUGFnZT0iICsgaXRlbXNQZXJQYWdlICsgIiwgQXZhaWxhYmxlU2xvdHM9IiArIGNvbnRlbnRTbG90cy5zaXplKCkpOw0KDQogICAgICAgIGZvciAoaW50IHNsb3QgOiBjb250ZW50U2xvdHMpIHsNCiAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKHNsb3QsIG51bGwpOw0KICAgICAgICB9DQoNCiAgICAgICAgaW50IGVuZEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCArIGl0ZW1zUGVyUGFnZSwgaXRlbXMuc2l6ZSgpKTsNCiAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGJhc2VDb250ZXh0ID0gUGxhY2Vob2xkZXJDb250ZXh0LmNyZWF0ZSgpDQogICAgICAgICAgICAgICAgLnBsYXllcihwbGF5ZXIpDQogICAgICAgICAgICAgICAgLnRhcmdldCh0YXJnZXRVVUlEKTsNCg0KICAgICAgICBmb3IgKGludCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpKyspIHsNCiAgICAgICAgICAgIEJvdW50eS5Cb3VudHlJdGVtIGJvdW50eUl0ZW0gPSBpdGVtcy5nZXQoaSk7DQogICAgICAgICAgICBJdGVtU3RhY2sgaXRlbSA9IGJvdW50eUl0ZW0uZ2V0SXRlbSgpLmNsb25lKCk7DQogICAgICAgICAgICBJdGVtTWV0YSBtZXRhID0gaXRlbS5nZXRJdGVtTWV0YSgpOw0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVSZWFzb24gPSBudWxsOw0KDQogICAgICAgICAgICBpZiAobWV0YSA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIFByZXZpZXdHVUldIEZhaWxlZCB0byBnZXQgSXRlbU1ldGEgZm9yIGJvdW50eSBpdGVtIGF0IGluZGV4ICIgKyBpICsNCiAgICAgICAgICAgICAgICAgICAgICAgICIsIE1hdGVyaWFsPSIgKyBpdGVtLmdldFR5cGUoKS5uYW1lKCkpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgICAgICAgICAgZmFpbHVyZXMuYWRkKCJib3VudHktaXRlbS0iICsgaSArICIgUmVhc29uOiAiICsgZmFpbHVyZVJlYXNvbik7DQogICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIFN0cmluZyBjb250cmlidXRvck5hbWUgPSBib3VudHlJdGVtLmlzQW5vbnltb3VzKCkgPyAiJmt8fHx8fHx8IiA6DQogICAgICAgICAgICAgICAgICAgIEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVyKGJvdW50eUl0ZW0uZ2V0Q29udHJpYnV0b3IoKSkuZ2V0TmFtZSgpOw0KICAgICAgICAgICAgaWYgKGNvbnRyaWJ1dG9yTmFtZSA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgY29udHJpYnV0b3JOYW1lID0gIlVua25vd24iOw0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBQcmV2aWV3R1VJXSBDb250cmlidXRvciBuYW1lIGlzIG51bGwgZm9yIFVVSUQ6ICIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgYm91bnR5SXRlbS5nZXRDb250cmlidXRvcigpKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIlVua25vd24gY29udHJpYnV0b3IiOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBkb3VibGUgaXRlbVZhbHVlID0gcGx1Z2luLmdldEl0ZW1WYWx1ZUNhbGN1bGF0b3IoKS5jYWxjdWxhdGVJdGVtVmFsdWUoaXRlbSk7DQogICAgICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KCJib3VudHktaXRlbXMubG9yZSIpOw0KICAgICAgICAgICAgaWYgKGxvcmUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgbG9yZSA9IEFycmF5cy5hc0xpc3QoDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdDb250cmlidXRvcjogJWNvbnRyaWJ1dG9yJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdWYWx1ZTogJmEkJWl0ZW1fdmFsdWUlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImN0NsaWNrIHRvIHZpZXcgZGV0YWlscyINCiAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBMaXN0PFN0cmluZz4gcHJvY2Vzc2VkTG9yZSA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgZm9yIChTdHJpbmcgbGluZSA6IGxvcmUpIHsNCiAgICAgICAgICAgICAgICBTdHJpbmcgcHJvY2Vzc2VkTGluZSA9IFBsYWNlaG9sZGVycy5hcHBseShsaW5lLCBiYXNlQ29udGV4dCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIlY29udHJpYnV0b3IlIiwgY29udHJpYnV0b3JOYW1lKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVpdGVtX3ZhbHVlJSIsIFN0cmluZy5mb3JtYXQoIiUuMmYiLCBpdGVtVmFsdWUpKTsNCiAgICAgICAgICAgICAgICBwcm9jZXNzZWRMb3JlLmFkZChDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIHByb2Nlc3NlZExpbmUpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIG1ldGEuc2V0TG9yZShwcm9jZXNzZWRMb3JlKTsNCg0KICAgICAgICAgICAgYm9vbGVhbiBlbmNoYW50bWVudEdsb3cgPSBjb25maWcuZ2V0Qm9vbGVhbigiYm91bnR5LWl0ZW1zLmVuY2hhbnRtZW50LWdsb3ciLCBmYWxzZSk7DQogICAgICAgICAgICBpZiAoZW5jaGFudG1lbnRHbG93ICYmIFZlcnNpb25VdGlscy5zdXBwb3J0c0dsb3dpbmdFZmZlY3QoKSkgew0KICAgICAgICAgICAgICAgIG1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0VOQ0hBTlRTKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaXRlbS5zZXRJdGVtTWV0YShtZXRhKTsNCg0KICAgICAgICAgICAgaW50IHNsb3RJbmRleCA9IGkgLSBzdGFydEluZGV4Ow0KICAgICAgICAgICAgaWYgKHNsb3RJbmRleCA8IGNvbnRlbnRTbG90cy5zaXplKCkpIHsNCiAgICAgICAgICAgICAgICBpbnQgc2xvdCA9IGNvbnRlbnRTbG90cy5nZXQoc2xvdEluZGV4KTsNCiAgICAgICAgICAgICAgICBpZiAoZmFpbHVyZVJlYXNvbiA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKHNsb3QsIGl0ZW0pOw0KICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWRTbG90cy5hZGQoc2xvdCk7DQogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxJdGVtcysrOw0KICAgICAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIFByZXZpZXdHVUldIFBsYWNlZCBib3VudHkgaXRlbSAoTWF0ZXJpYWw9IiArIGl0ZW0uZ2V0VHlwZSgpLm5hbWUoKSArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwgQ29udHJpYnV0b3I9IiArIGNvbnRyaWJ1dG9yTmFtZSArICIpIGluIHNsb3QgIiArIHNsb3QpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZCgiYm91bnR5LWl0ZW0tIiArIGkgKyAiIFJlYXNvbjogIiArIGZhaWx1cmVSZWFzb24pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIlNsb3QgaW5kZXggIiArIHNsb3RJbmRleCArDQogICAgICAgICAgICAgICAgICAgICAgICAiIGV4Y2VlZHMgYXZhaWxhYmxlIGNvbnRlbnQgc2xvdHMgZm9yIGl0ZW0gYXQgaW5kZXggIiArIGkpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZCgiYm91bnR5LWl0ZW0tIiArIGkgKyAiIFJlYXNvbjogSW52YWxpZCBzbG90IGluZGV4ICIgKyBzbG90SW5kZXgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQWRkIHBhZ2luYXRpb24gYnV0dG9ucyBpZiBuZWNlc3NhcnkNCiAgICAgICAgaWYgKGl0ZW1zLnNpemUoKSA+IGl0ZW1zUGVyUGFnZSkgew0KICAgICAgICAgICAgYWRkUGFnaW5hdGlvbkJ1dHRvbnMoaXRlbXNQZXJQYWdlLCBpdGVtcy5zaXplKCkpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaW50IHByZXZTbG90ID0gY29uZmlnLmdldEludCgicGFnaW5hdGlvbi5wcmV2aW91cy5zbG90IiwgNDUpOw0KICAgICAgICAgICAgaW50IG5leHRTbG90ID0gY29uZmlnLmdldEludCgicGFnaW5hdGlvbi5uZXh0LnNsb3QiLCA1Myk7DQogICAgICAgICAgICBpbnZlbnRvcnkuc2V0SXRlbShwcmV2U2xvdCwgbnVsbCk7DQogICAgICAgICAgICBpbnZlbnRvcnkuc2V0SXRlbShuZXh0U2xvdCwgbnVsbCk7DQogICAgICAgICAgICBwcm90ZWN0ZWRTbG90cy5yZW1vdmUocHJldlNsb3QpOw0KICAgICAgICAgICAgcHJvdGVjdGVkU2xvdHMucmVtb3ZlKG5leHRTbG90KTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIExvZyBjb25zb2xpZGF0ZWQgZGVidWcgbWVzc2FnZQ0KICAgICAgICBpZiAodG90YWxJdGVtcyA9PSAwKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIFByZXZpZXdHVUldIE5vIGJvdW50eSBpdGVtcyB0byBjcmVhdGUiKTsNCiAgICAgICAgfSBlbHNlIGlmIChzdWNjZXNzZnVsSXRlbXMgPT0gdG90YWxJdGVtcykgew0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVNZXNzYWdlID0gIltERUJVRyAtIFByZXZpZXdHVUldICIgKyBzdWNjZXNzZnVsSXRlbXMgKyAiLyIgKyB0b3RhbEl0ZW1zICsgIiBib3VudHkgaXRlbXMgY3JlYXRlZCI7DQogICAgICAgICAgICBpZiAoIWZhaWx1cmVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGZhaWx1cmVNZXNzYWdlICs9ICIsIGZhaWxlZCB0byBjcmVhdGU6ICIgKyBTdHJpbmcuam9pbigiLCAiLCBmYWlsdXJlcyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRmFpbHVyZSgiUHJldmlld0dVSV9ib3VudHlfaXRlbXNfIiArIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpLCBmYWlsdXJlTWVzc2FnZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGRzIHBhZ2luYXRpb24gYnV0dG9ucyB0byB0aGUgR1VJDQogICAgICogLy8gbm90ZTogUGxhY2VzIFByZXZpb3VzIGFuZCBOZXh0IGJ1dHRvbnMgZm9yIG5hdmlnYXRpbmcgYm91bnR5IGl0ZW0gcGFnZXMNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgYWRkUGFnaW5hdGlvbkJ1dHRvbnMoaW50IGl0ZW1zUGVyUGFnZSwgaW50IHRvdGFsSXRlbXMpIHsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCiAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldFByZXZpZXdHVUlDb25maWcoKTsNCiAgICAgICAgaW50IHRvdGFsQnV0dG9ucyA9IChjdXJyZW50UGFnZSA+IDAgPyAxIDogMCkgKyAoY3VycmVudFBhZ2UgPCAoaW50KSBNYXRoLmNlaWwoKGRvdWJsZSkgdG90YWxJdGVtcyAvIGl0ZW1zUGVyUGFnZSkgLSAxID8gMSA6IDApOw0KICAgICAgICBpbnQgc3VjY2Vzc2Z1bEJ1dHRvbnMgPSAwOw0KICAgICAgICBMaXN0PFN0cmluZz4gZmFpbHVyZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCg0KICAgICAgICBpZiAoY3VycmVudFBhZ2UgPiAwKSB7DQogICAgICAgICAgICBJdGVtU3RhY2sgcHJldkJ1dHRvbiA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIkFSUk9XIik7DQogICAgICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQogICAgICAgICAgICBJdGVtTWV0YSBwcmV2TWV0YSA9IHByZXZCdXR0b24uZ2V0SXRlbU1ldGEoKTsNCiAgICAgICAgICAgIGlmIChwcmV2TWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIG5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKCJwYWdpbmF0aW9uLnByZXZpb3VzLm5hbWUiLCAiJmVQcmV2aW91cyBQYWdlIik7DQogICAgICAgICAgICAgICAgcHJldk1ldGEuc2V0RGlzcGxheU5hbWUoUGxhY2Vob2xkZXJzLmFwcGx5KG5hbWUsIG51bGwpKTsNCiAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KCJwYWdpbmF0aW9uLnByZXZpb3VzLmxvcmUiKTsNCiAgICAgICAgICAgICAgICBpZiAobG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICAgICAgbG9yZSA9IEFycmF5cy5hc0xpc3QoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiY3UGFnZSAlY3VycmVudF9wYWdlJSBvZiAldG90YWxfcGFnZXMlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJjdDbGljayB0byBnbyB0byBwcmV2aW91cyBwYWdlIg0KICAgICAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gcHJvY2Vzc2VkTG9yZSA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgICAgIGludCB0b3RhbFBhZ2VzID0gKGludCkgTWF0aC5jZWlsKChkb3VibGUpIHRvdGFsSXRlbXMgLyBpdGVtc1BlclBhZ2UpOw0KICAgICAgICAgICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiBsb3JlKSB7DQogICAgICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoIiVjdXJyZW50X3BhZ2UlIiwgU3RyaW5nLnZhbHVlT2YoY3VycmVudFBhZ2UpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCIldG90YWxfcGFnZXMlIiwgU3RyaW5nLnZhbHVlT2YodG90YWxQYWdlcykpOw0KICAgICAgICAgICAgICAgICAgICBwcm9jZXNzZWRMb3JlLmFkZChQbGFjZWhvbGRlcnMuYXBwbHkobGluZSwgbnVsbCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBwcmV2TWV0YS5zZXRMb3JlKHByb2Nlc3NlZExvcmUpOw0KICAgICAgICAgICAgICAgIGJvb2xlYW4gZ2xvdyA9IGNvbmZpZy5nZXRCb29sZWFuKCJwYWdpbmF0aW9uLnByZXZpb3VzLmVuY2hhbnRtZW50LWdsb3ciLCBmYWxzZSk7DQogICAgICAgICAgICAgICAgaWYgKGdsb3cpIHsNCiAgICAgICAgICAgICAgICAgICAgcHJldk1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgcHJldk1ldGEuYWRkSXRlbUZsYWdzKEl0ZW1GbGFnLkhJREVfRU5DSEFOVFMpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBwcmV2QnV0dG9uLnNldEl0ZW1NZXRhKHByZXZNZXRhKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIFByZXZpZXdHVUldIEZhaWxlZCB0byBnZXQgSXRlbU1ldGEgZm9yIHByZXZpb3VzIHBhZ2luYXRpb24gYnV0dG9uIik7DQogICAgICAgICAgICAgICAgZmFpbHVyZVJlYXNvbiA9ICJGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaW50IHNsb3QgPSBjb25maWcuZ2V0SW50KCJwYWdpbmF0aW9uLnByZXZpb3VzLnNsb3QiLCA0NSk7DQogICAgICAgICAgICBpZiAoZmFpbHVyZVJlYXNvbiA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgaW52ZW50b3J5LnNldEl0ZW0oc2xvdCwgcHJldkJ1dHRvbik7DQogICAgICAgICAgICAgICAgcHJvdGVjdGVkU2xvdHMuYWRkKHNsb3QpOw0KICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxCdXR0b25zKys7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZCgicHJldmlvdXMtYnV0dG9uIFJlYXNvbjogIiArIGZhaWx1cmVSZWFzb24pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGN1cnJlbnRQYWdlIDwgKGludCkgTWF0aC5jZWlsKChkb3VibGUpIHRvdGFsSXRlbXMgLyBpdGVtc1BlclBhZ2UpIC0gMSkgew0KICAgICAgICAgICAgSXRlbVN0YWNrIG5leHRCdXR0b24gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJBUlJPVyIpOw0KICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmVSZWFzb24gPSBudWxsOw0KICAgICAgICAgICAgSXRlbU1ldGEgbmV4dE1ldGEgPSBuZXh0QnV0dG9uLmdldEl0ZW1NZXRhKCk7DQogICAgICAgICAgICBpZiAobmV4dE1ldGEgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIFN0cmluZyBuYW1lID0gY29uZmlnLmdldFN0cmluZygicGFnaW5hdGlvbi5uZXh0Lm5hbWUiLCAiJmVOZXh0IFBhZ2UiKTsNCiAgICAgICAgICAgICAgICBuZXh0TWV0YS5zZXREaXNwbGF5TmFtZShQbGFjZWhvbGRlcnMuYXBwbHkobmFtZSwgbnVsbCkpOw0KICAgICAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBsb3JlID0gY29uZmlnLmdldFN0cmluZ0xpc3QoInBhZ2luYXRpb24ubmV4dC5sb3JlIik7DQogICAgICAgICAgICAgICAgaWYgKGxvcmUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgICAgIGxvcmUgPSBBcnJheXMuYXNMaXN0KA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICImN1BhZ2UgJWN1cnJlbnRfcGFnZSUgb2YgJXRvdGFsX3BhZ2VzJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiY3Q2xpY2sgdG8gZ28gdG8gbmV4dCBwYWdlIg0KICAgICAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBMaXN0PFN0cmluZz4gcHJvY2Vzc2VkTG9yZSA9IG5ldyBBcnJheUxpc3Q8PigpOw0KICAgICAgICAgICAgICAgIGludCB0b3RhbFBhZ2VzID0gKGludCkgTWF0aC5jZWlsKChkb3VibGUpIHRvdGFsSXRlbXMgLyBpdGVtc1BlclBhZ2UpOw0KICAgICAgICAgICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiBsb3JlKSB7DQogICAgICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoIiVjdXJyZW50X3BhZ2UlIiwgU3RyaW5nLnZhbHVlT2YoY3VycmVudFBhZ2UgKyAyKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiJXRvdGFsX3BhZ2VzJSIsIFN0cmluZy52YWx1ZU9mKHRvdGFsUGFnZXMpKTsNCiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkTG9yZS5hZGQoUGxhY2Vob2xkZXJzLmFwcGx5KGxpbmUsIG51bGwpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgbmV4dE1ldGEuc2V0TG9yZShwcm9jZXNzZWRMb3JlKTsNCiAgICAgICAgICAgICAgICBib29sZWFuIGdsb3cgPSBjb25maWcuZ2V0Qm9vbGVhbigicGFnaW5hdGlvbi5uZXh0LmVuY2hhbnRtZW50LWdsb3ciLCBmYWxzZSk7DQogICAgICAgICAgICAgICAgaWYgKGdsb3cpIHsNCiAgICAgICAgICAgICAgICAgICAgbmV4dE1ldGEuYWRkRW5jaGFudChFbmNoYW50bWVudC5EVVJBQklMSVRZLCAxLCB0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgbmV4dE1ldGEuYWRkSXRlbUZsYWdzKEl0ZW1GbGFnLkhJREVfRU5DSEFOVFMpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBuZXh0QnV0dG9uLnNldEl0ZW1NZXRhKG5leHRNZXRhKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIFByZXZpZXdHVUldIEZhaWxlZCB0byBnZXQgSXRlbU1ldGEgZm9yIG5leHQgcGFnaW5hdGlvbiBidXR0b24iKTsNCiAgICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkZhaWxlZCB0byBnZXQgSXRlbU1ldGEiOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpbnQgc2xvdCA9IGNvbmZpZy5nZXRJbnQoInBhZ2luYXRpb24ubmV4dC5zbG90IiwgNTMpOw0KICAgICAgICAgICAgaWYgKGZhaWx1cmVSZWFzb24gPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKHNsb3QsIG5leHRCdXR0b24pOw0KICAgICAgICAgICAgICAgIHByb3RlY3RlZFNsb3RzLmFkZChzbG90KTsNCiAgICAgICAgICAgICAgICBzdWNjZXNzZnVsQnV0dG9ucysrOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBmYWlsdXJlcy5hZGQoIm5leHQtYnV0dG9uIFJlYXNvbjogIiArIGZhaWx1cmVSZWFzb24pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHRvdGFsQnV0dG9ucyA9PSAwKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nRGVidWcoIltERUJVRyAtIFByZXZpZXdHVUldIE5vIHBhZ2luYXRpb24gYnV0dG9ucyB0byBjcmVhdGUiKTsNCiAgICAgICAgfSBlbHNlIGlmIChzdWNjZXNzZnVsQnV0dG9ucyA9PSB0b3RhbEJ1dHRvbnMpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dEZWJ1ZygiW0RFQlVHIC0gUHJldmlld0dVSV0gQWxsIHBhZ2luYXRpb24gYnV0dG9ucyBjcmVhdGVkIik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBTdHJpbmcgZmFpbHVyZU1lc3NhZ2UgPSAiW0RFQlVHIC0gUHJldmlld0dVSV0gIiArIHN1Y2Nlc3NmdWxCdXR0b25zICsgIi8iICsgdG90YWxCdXR0b25zICsgIiBwYWdpbmF0aW9uIGJ1dHRvbnMgY3JlYXRlZCI7DQogICAgICAgICAgICBpZiAoIWZhaWx1cmVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGZhaWx1cmVNZXNzYWdlICs9ICIsIGZhaWxlZCB0byBjcmVhdGU6ICIgKyBTdHJpbmcuam9pbigiLCAiLCBmYWlsdXJlcyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRmFpbHVyZSgiUHJldmlld0dVSV9wYWdpbmF0aW9uXyIgKyBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSwgZmFpbHVyZU1lc3NhZ2UpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBpbnZlbnRvcnkgY2xpY2sgZXZlbnRzIGZvciB0aGUgR1VJIC8vIG5vdGU6IFByb2Nlc3NlcyBjbGlja3Mgb24gcGFnaW5hdGlvbiBidXR0b25zIGFuZCBjdXN0b20gaXRlbXMNCiAgICAgKi8NCiAgICBARXZlbnRIYW5kbGVyDQogICAgcHVibGljIHZvaWQgb25JbnZlbnRvcnlDbGljayhJbnZlbnRvcnlDbGlja0V2ZW50IGV2ZW50KSB7DQogICAgICAgIGlmICghZXZlbnQuZ2V0V2hvQ2xpY2tlZCgpLmVxdWFscyhwbGF5ZXIpKSByZXR1cm47DQogICAgICAgIGlmICghZXZlbnQuZ2V0VmlldygpLmdldFRpdGxlKCkuZXF1YWxzKEdVSV9USVRMRSkpIHJldHVybjsNCiAgICAgICAgUGxheWVyIGNsaWNraW5nUGxheWVyID0gKFBsYXllcikgZXZlbnQuZ2V0V2hvQ2xpY2tlZCgpOw0KICAgICAgICBJdGVtU3RhY2sgY2xpY2tlZEl0ZW0gPSBldmVudC5nZXRDdXJyZW50SXRlbSgpOw0KICAgICAgICBpbnQgc2xvdCA9IGV2ZW50LmdldFNsb3QoKTsNCiAgICAgICAgaWYgKHByb3RlY3RlZFNsb3RzLmNvbnRhaW5zKHNsb3QpKSB7DQogICAgICAgICAgICBldmVudC5zZXRDYW5jZWxsZWQodHJ1ZSk7DQogICAgICAgICAgICBpZiAoY2xpY2tlZEl0ZW0gPT0gbnVsbCB8fCAhY2xpY2tlZEl0ZW0uaGFzSXRlbU1ldGEoKSkgcmV0dXJuOw0KICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldFByZXZpZXdHVUlDb25maWcoKTsNCiAgICAgICAgICAgIGlmIChzbG90ID09IGNvbmZpZy5nZXRJbnQoInBhZ2luYXRpb24ucHJldmlvdXMuc2xvdCIsIDQ1KSAmJiBjbGlja2VkSXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuQVJST1cpIHsNCiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFBhZ2UgPiAwKSB7DQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlLS07DQogICAgICAgICAgICAgICAgICAgIHJlZnJlc2hHVUkoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGVsc2UgaWYgKHNsb3QgPT0gY29uZmlnLmdldEludCgicGFnaW5hdGlvbi5uZXh0LnNsb3QiLCA1MykgJiYgY2xpY2tlZEl0ZW0uZ2V0VHlwZSgpID09IE1hdGVyaWFsLkFSUk9XKSB7DQogICAgICAgICAgICAgICAgaW50IHRvdGFsSXRlbXMgPSBwbHVnaW4uZ2V0Qm91bnR5TWFuYWdlcigpLmdldEJvdW50eSh0YXJnZXRVVUlEKS5nZXRDdXJyZW50SXRlbXMoKS5zaXplKCk7DQogICAgICAgICAgICAgICAgaW50IGl0ZW1zUGVyUGFnZSA9IDI4Ow0KICAgICAgICAgICAgICAgIGludCB0b3RhbFBhZ2VzID0gKGludCkgTWF0aC5jZWlsKChkb3VibGUpIHRvdGFsSXRlbXMgLyBpdGVtc1BlclBhZ2UpOw0KICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSA8IHRvdGFsUGFnZXMgLSAxKSB7DQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlKys7DQogICAgICAgICAgICAgICAgICAgIHJlZnJlc2hHVUkoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIENvbmZpZ3VyYXRpb25TZWN0aW9uIGN1c3RvbUl0ZW1zU2VjdGlvbiA9IGNvbmZpZy5nZXRDb25maWd1cmF0aW9uU2VjdGlvbigiY3VzdG9tLWl0ZW1zIik7DQogICAgICAgICAgICAgICAgaWYgKGN1c3RvbUl0ZW1zU2VjdGlvbiAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIGZvciAoU3RyaW5nIGtleSA6IGN1c3RvbUl0ZW1zU2VjdGlvbi5nZXRLZXlzKGZhbHNlKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW50IGN1c3RvbVNsb3QgPSBjb25maWcuZ2V0SW50KCJjdXN0b20taXRlbXMuIiArIGtleSArICIuc2xvdCIsIC0xKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbG90ID09IGN1c3RvbVNsb3QpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVDdXN0b21JdGVtQ2xpY2soY2xpY2tpbmdQbGF5ZXIsIGtleSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBjbGlja3Mgb24gY3VzdG9tIGl0ZW1zIC8vIG5vdGU6IFByb2Nlc3NlcyBhY3Rpb25zIGZvciBjdXN0b20gaXRlbXMgbGlrZSBjbG9zaW5nIHRoZSBHVUkNCiAgICAgKi8NCiAgICBwcml2YXRlIHZvaWQgaGFuZGxlQ3VzdG9tSXRlbUNsaWNrKFBsYXllciBwbGF5ZXIsIFN0cmluZyBpdGVtS2V5KSB7DQogICAgICAgIEZpbGVDb25maWd1cmF0aW9uIGNvbmZpZyA9IHBsdWdpbi5nZXRQcmV2aWV3R1VJQ29uZmlnKCk7DQogICAgICAgIFN0cmluZyBwYXRoID0gImN1c3RvbS1pdGVtcy4iICsgaXRlbUtleTsNCiAgICAgICAgU3RyaW5nIGFjdGlvbiA9IGNvbmZpZy5nZXRTdHJpbmcocGF0aCArICIuYWN0aW9uIiwgIm5vbmUiKTsNCiAgICAgICAgc3dpdGNoIChhY3Rpb24udG9Mb3dlckNhc2UoKSkgew0KICAgICAgICAgICAgY2FzZSAiY2xvc2UiOg0KICAgICAgICAgICAgICAgIHBsYXllci5jbG9zZUludmVudG9yeSgpOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIEBFdmVudEhhbmRsZXINCiAgICBwdWJsaWMgdm9pZCBvbkludmVudG9yeURyYWcoSW52ZW50b3J5RHJhZ0V2ZW50IGV2ZW50KSB7DQogICAgICAgIGlmICghZXZlbnQuZ2V0V2hvQ2xpY2tlZCgpLmVxdWFscyhwbGF5ZXIpKSByZXR1cm47DQogICAgICAgIGlmICghZXZlbnQuZ2V0SW52ZW50b3J5KCkuZXF1YWxzKGludmVudG9yeSkpIHJldHVybjsNCiAgICAgICAgYm9vbGVhbiBoYXNQcm90ZWN0ZWRTbG90cyA9IGZhbHNlOw0KICAgICAgICBmb3IgKGludCBzbG90IDogZXZlbnQuZ2V0UmF3U2xvdHMoKSkgew0KICAgICAgICAgICAgaWYgKHNsb3QgPCBpbnZlbnRvcnkuZ2V0U2l6ZSgpICYmIHByb3RlY3RlZFNsb3RzLmNvbnRhaW5zKHNsb3QpKSB7DQogICAgICAgICAgICAgICAgaGFzUHJvdGVjdGVkU2xvdHMgPSB0cnVlOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmIChoYXNQcm90ZWN0ZWRTbG90cykgew0KICAgICAgICAgICAgZXZlbnQuc2V0Q2FuY2VsbGVkKHRydWUpOw0KICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnID0gcGx1Z2luLmdldFByZXZpZXdHVUlDb25maWcoKTsNCiAgICAgICAgICAgIFN0cmluZyBlcnJvck1lc3NhZ2UgPSBjb25maWcuZ2V0U3RyaW5nKCJtZXNzYWdlcy5jYW5ub3QtcGxhY2UtaXRlbXMiLCAiJmNZb3UgY2Fubm90IHBsYWNlIGl0ZW1zIGluIHRoaXMgR1VJISIpOw0KICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcik7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZE1lc3NhZ2UoUGxhY2Vob2xkZXJzLmFwcGx5KGVycm9yTWVzc2FnZSwgY29udGV4dCkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uSW52ZW50b3J5Q2xvc2UoSW52ZW50b3J5Q2xvc2VFdmVudCBldmVudCkgew0KICAgICAgICBpZiAoIShldmVudC5nZXRQbGF5ZXIoKSBpbnN0YW5jZW9mIFBsYXllcikpIHJldHVybjsNCiAgICAgICAgaWYgKCFldmVudC5nZXRWaWV3KCkuZ2V0VGl0bGUoKS5lcXVhbHMoR1VJX1RJVExFKSkgcmV0dXJuOw0KICAgICAgICBpZiAoIWV2ZW50LmdldFBsYXllcigpLmVxdWFscyhwbGF5ZXIpKSByZXR1cm47DQogICAgICAgIGNsZWFudXAoKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgY2xlYW51cCgpIHsNCiAgICAgICAgSGFuZGxlckxpc3QudW5yZWdpc3RlckFsbCh0aGlzKTsNCiAgICB9DQpb255MjYvYm91bnRpZXNQbHVzL0dVSXMvVG9wR1VJLmphdmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwNzUzMTYgMTUwMjY3MDM1MTUgMDE1NjY2ACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBhY2thZ2UgdG9ueTI2LmJvdW50aWVzUGx1cy5HVUlzOw0KDQppbXBvcnQgb3JnLmJ1a2tpdC4qOw0KaW1wb3J0IG9yZy5idWtraXQuY29uZmlndXJhdGlvbi5Db25maWd1cmF0aW9uU2VjdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5GaWxlQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmNvbmZpZ3VyYXRpb24uZmlsZS5ZYW1sQ29uZmlndXJhdGlvbjsNCmltcG9ydCBvcmcuYnVra2l0LmVuY2hhbnRtZW50cy5FbmNoYW50bWVudDsNCmltcG9ydCBvcmcuYnVra2l0LmVudGl0eS5QbGF5ZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5FdmVudEhhbmRsZXI7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5MaXN0ZW5lcjsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LmludmVudG9yeS5DbGlja1R5cGU7DQppbXBvcnQgb3JnLmJ1a2tpdC5ldmVudC5pbnZlbnRvcnkuSW52ZW50b3J5Q2xpY2tFdmVudDsNCmltcG9ydCBvcmcuYnVra2l0LmV2ZW50LmludmVudG9yeS5JbnZlbnRvcnlDbG9zZUV2ZW50Ow0KaW1wb3J0IG9yZy5idWtraXQuaW52ZW50b3J5LkludmVudG9yeTsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JdGVtRmxhZzsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5JdGVtU3RhY2s7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkubWV0YS5GaXJld29ya0VmZmVjdE1ldGE7DQppbXBvcnQgb3JnLmJ1a2tpdC5pbnZlbnRvcnkubWV0YS5JdGVtTWV0YTsNCmltcG9ydCBvcmcuYnVra2l0LmludmVudG9yeS5tZXRhLlNrdWxsTWV0YTsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLkJvdW50aWVzUGx1czsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLkV2ZW50TWFuYWdlcjsNCmltcG9ydCB0b255MjYuYm91bnRpZXNQbHVzLnV0aWxzLlNrdWxsVXRpbHM7DQppbXBvcnQgdG9ueTI2LmJvdW50aWVzUGx1cy51dGlscy4qOw0KDQppbXBvcnQgamF2YS5pby5GaWxlOw0KaW1wb3J0IGphdmEuc3FsLkNvbm5lY3Rpb247DQppbXBvcnQgamF2YS5zcWwuUmVzdWx0U2V0Ow0KaW1wb3J0IGphdmEuc3FsLlNRTEV4Y2VwdGlvbjsNCmltcG9ydCBqYXZhLnNxbC5TdGF0ZW1lbnQ7DQppbXBvcnQgamF2YS51dGlsLio7DQppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuQ29uY3VycmVudEhhc2hNYXA7DQppbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3JzOw0KDQpwdWJsaWMgY2xhc3MgVG9wR1VJIGltcGxlbWVudHMgTGlzdGVuZXIgew0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIGludCBST1dTID0gNjsNCiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBpbnQgU0xPVFNfUEVSX1BBR0UgPSAyODsgLy8gNCByb3dzICgyLTUpIG1pbnVzIDggYm9yZGVyIHNsb3RzIHBlciByb3cNCiAgICBwcml2YXRlIGZpbmFsIEJvdW50aWVzUGx1cyBwbHVnaW47DQogICAgcHJpdmF0ZSBGaWxlQ29uZmlndXJhdGlvbiBjb25maWc7DQogICAgcHJpdmF0ZSBmaW5hbCBNYXA8VVVJRCwgSW50ZWdlcj4gb3BlblBhZ2VzOw0KICAgIHByaXZhdGUgZmluYWwgTWFwPFVVSUQsIEludmVudG9yeT4gb3BlbkludmVudG9yaWVzOw0KICAgIHByaXZhdGUgc3RhdGljIEZpbHRlclR5cGUgY3VycmVudEZpbHRlclR5cGUgPSBGaWx0ZXJUeXBlLkNMQUlNRUQ7DQogICAgcHJpdmF0ZSBzdGF0aWMgYm9vbGVhbiBzb3J0SGlnaFRvTG93ID0gdHJ1ZTsNCiAgICAvLyBTdGF0aWMgZmllbGQgdG8gdHJhY2sgaXRlbSBmYWlsdXJlcw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIE1hcDxTdHJpbmcsIFN0cmluZz4gaXRlbUZhaWx1cmVzID0gbmV3IENvbmN1cnJlbnRIYXNoTWFwPD4oKTsNCg0KICAgIHB1YmxpYyBlbnVtIEZpbHRlclR5cGUgew0KICAgICAgICBDTEFJTUVELCBTVVJWSVZFRCwgTU9ORVlfRUFSTkVELCBYUF9FQVJORUQsIFRPVEFMX1ZBTFVFDQogICAgfQ0KDQogICAgcHJpdmF0ZSBzdGF0aWMgY2xhc3MgUGxheWVyRGF0YSB7DQogICAgICAgIHByaXZhdGUgZmluYWwgVVVJRCB1dWlkOw0KICAgICAgICBwcml2YXRlIGZpbmFsIGludCBjbGFpbWVkOw0KICAgICAgICBwcml2YXRlIGZpbmFsIGludCBzdXJ2aXZlZDsNCiAgICAgICAgcHJpdmF0ZSBmaW5hbCBkb3VibGUgbW9uZXlFYXJuZWQ7DQogICAgICAgIHByaXZhdGUgZmluYWwgaW50IHhwRWFybmVkOw0KICAgICAgICBwcml2YXRlIGZpbmFsIGRvdWJsZSB0b3RhbFZhbHVlRWFybmVkOw0KDQoNCiAgICAgICAgcHVibGljIFBsYXllckRhdGEoVVVJRCB1dWlkLCBpbnQgY2xhaW1lZCwgaW50IHN1cnZpdmVkLCBkb3VibGUgbW9uZXlFYXJuZWQsIGludCB4cEVhcm5lZCwgZG91YmxlIHRvdGFsVmFsdWVFYXJuZWQpIHsNCiAgICAgICAgICAgIHRoaXMudXVpZCA9IHV1aWQ7DQogICAgICAgICAgICB0aGlzLmNsYWltZWQgPSBjbGFpbWVkOw0KICAgICAgICAgICAgdGhpcy5zdXJ2aXZlZCA9IHN1cnZpdmVkOw0KICAgICAgICAgICAgdGhpcy5tb25leUVhcm5lZCA9IG1vbmV5RWFybmVkOw0KICAgICAgICAgICAgdGhpcy54cEVhcm5lZCA9IHhwRWFybmVkOw0KICAgICAgICAgICAgdGhpcy50b3RhbFZhbHVlRWFybmVkID0gdG90YWxWYWx1ZUVhcm5lZDsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBVVUlEIGdldFVVSUQoKSB7IHJldHVybiB1dWlkOyB9DQogICAgICAgIHB1YmxpYyBpbnQgZ2V0Q2xhaW1lZCgpIHsgcmV0dXJuIGNsYWltZWQ7IH0NCiAgICAgICAgcHVibGljIGludCBnZXRTdXJ2aXZlZCgpIHsgcmV0dXJuIHN1cnZpdmVkOyB9DQogICAgICAgIHB1YmxpYyBkb3VibGUgZ2V0TW9uZXlFYXJuZWQoKSB7IHJldHVybiBtb25leUVhcm5lZDsgfQ0KICAgICAgICBwdWJsaWMgaW50IGdldFhQRWFybmVkKCkgeyByZXR1cm4geHBFYXJuZWQ7IH0NCiAgICAgICAgcHVibGljIGRvdWJsZSBnZXRUb3RhbFZhbHVlRWFybmVkKCkgeyByZXR1cm4gdG90YWxWYWx1ZUVhcm5lZDsgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENvbnN0cnVjdHMgdGhlIFRvcEdVSQ0KICAgICAqIC8vIG5vdGU6IEluaXRpYWxpemVzIGxlYWRlcmJvYXJkIEdVSSBhbmQgcmVnaXN0ZXJzIGxpc3RlbmVycw0KICAgICAqLw0KICAgIHB1YmxpYyBUb3BHVUkoQm91bnRpZXNQbHVzIHBsdWdpbiwgRXZlbnRNYW5hZ2VyIGV2ZW50TWFuYWdlcikgew0KICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsNCiAgICAgICAgdGhpcy5vcGVuUGFnZXMgPSBuZXcgSGFzaE1hcDw+KCk7DQogICAgICAgIHRoaXMub3BlbkludmVudG9yaWVzID0gbmV3IEhhc2hNYXA8PigpOw0KICAgICAgICBsb2FkQ29uZmlnKCk7DQogICAgICAgIGV2ZW50TWFuYWdlci5yZWdpc3Rlcih0aGlzKTsgLy8gVXNlIEV2ZW50TWFuYWdlcg0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIExvYWRzIG9yIGNyZWF0ZXMgVG9wR1VJLnltbCBjb25maWd1cmF0aW9uDQogICAgICogLy8gbm90ZTogSW5pdGlhbGl6ZXMgR1VJIHNldHRpbmdzIGZvciB0aGUgbGVhZGVyYm9hcmQgZGlzcGxheQ0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBsb2FkQ29uZmlnKCkgew0KICAgICAgICBGaWxlIGNvbmZpZ0ZpbGUgPSBuZXcgRmlsZShwbHVnaW4uZ2V0RGF0YUZvbGRlcigpLCAiR1VJcy9Ub3BHVUkueW1sIik7DQogICAgICAgIGlmICghY29uZmlnRmlsZS5leGlzdHMoKSkgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uc2F2ZVJlc291cmNlKCJHVUlzL1RvcEdVSS55bWwiLCBmYWxzZSk7IC8vIENvcHkgZGVmYXVsdCBjb25maWcgZnJvbSByZXNvdXJjZXMNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkuaW5mbygiW0RFQlVHIC0gVG9wR1VJXSBDcmVhdGVkIGRlZmF1bHQgVG9wR1VJLnltbCIpOw0KICAgICAgICAgICAgfSBjYXRjaCAoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHIC0gVG9wR1VJXSBGYWlsZWQgdG8gc2F2ZSBkZWZhdWx0IFRvcEdVSS55bWw6ICIgKyBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgY29uZmlnID0gWWFtbENvbmZpZ3VyYXRpb24ubG9hZENvbmZpZ3VyYXRpb24oY29uZmlnRmlsZSk7DQogICAgICAgIC8vIFZlcmlmeSBjb25maWd1cmF0aW9uIGludGVncml0eQ0KICAgICAgICBpZiAoY29uZmlnLmdldENvbmZpZ3VyYXRpb25TZWN0aW9uKCJQbHVnaW4tSXRlbXMiKSA9PSBudWxsKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHIC0gVG9wR1VJXSBUb3BHVUkueW1sIGlzIGVtcHR5IG9yIGludmFsaWQsIHJlbG9hZGluZyBkZWZhdWx0Iik7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGNvbmZpZ0ZpbGUuZGVsZXRlKCk7IC8vIFJlbW92ZSBpbnZhbGlkIGZpbGUNCiAgICAgICAgICAgICAgICBwbHVnaW4uc2F2ZVJlc291cmNlKCJHVUlzL1RvcEdVSS55bWwiLCBmYWxzZSk7IC8vIFJlY29weSBkZWZhdWx0DQogICAgICAgICAgICAgICAgY29uZmlnID0gWWFtbENvbmZpZ3VyYXRpb24ubG9hZENvbmZpZ3VyYXRpb24oY29uZmlnRmlsZSk7DQogICAgICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUcgLSBUb3BHVUldIEZhaWxlZCB0byByZWxvYWQgZGVmYXVsdCBUb3BHVUkueW1sOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICogT3BlbnMgdGhlIGxlYWRlcmJvYXJkIEdVSSBmb3IgYSBwbGF5ZXINCiAgICAgKiAvLyBub3RlOiBEaXNwbGF5cyBwbGF5ZXIgc2t1bGxzIHdpdGggc2VsZWN0ZWQgZmlsdGVyIGFuZCBzb3J0IG9yZGVyLCBpbmNsdWRpbmcgbmF2aWdhdGlvbiBhbmQgZmlsdGVyIGJ1dHRvbnMNCiAgICAgKi8NCiAgICBwdWJsaWMgdm9pZCBvcGVuVG9wR1VJKFBsYXllciBwbGF5ZXIsIGludCBwYWdlLCBGaWx0ZXJUeXBlIGZpbHRlclR5cGUsIGJvb2xlYW4gc29ydEhpZ2hUb0xvdykgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBpdGVtRmFpbHVyZXMuY2xlYXIoKTsgLy8gQ2xlYXIgcHJldmlvdXMgZmFpbHVyZXMNCg0KICAgICAgICBTdHJpbmcgdGl0bGUgPSBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGNvbmZpZy5nZXRTdHJpbmcoInRpdGxlIiwgIiY0JmxCb3VudHkgTGVhZGVyYm9hcmQiKSk7DQogICAgICAgIEludmVudG9yeSBpbnZlbnRvcnkgPSBCdWtraXQuY3JlYXRlSW52ZW50b3J5KG51bGwsIFJPV1MgKiA5LCB0aXRsZSk7DQogICAgICAgIGN1cnJlbnRGaWx0ZXJUeXBlID0gZmlsdGVyVHlwZTsNCiAgICAgICAgdGhpcy5zb3J0SGlnaFRvTG93ID0gc29ydEhpZ2hUb0xvdzsNCg0KICAgICAgICAvLyBMaXN0IG9mIGl0ZW1zIHRvIGNyZWF0ZQ0KICAgICAgICBNYXA8U3RyaW5nLCBJbnRlZ2VyPiBpdGVtcyA9IG5ldyBIYXNoTWFwPD4oKTsNCiAgICAgICAgaXRlbXMucHV0KCJQbHVnaW4tSXRlbXMuQm9yZGVyIiwgLTEpOyAvLyBNdWx0aXBsZSBzbG90cw0KICAgICAgICBpdGVtcy5wdXQoIlBsdWdpbi1JdGVtcy5JbmZvIiwgMyk7DQogICAgICAgIGl0ZW1zLnB1dCgiUGx1Z2luLUl0ZW1zLlBsYXllci1Ta3VsbCIsIDQpOyAvLyBQbGF5ZXIgc2t1bGwNCiAgICAgICAgaXRlbXMucHV0KCJQbHVnaW4tSXRlbXMuRmlsdGVyIiwgNSk7DQogICAgICAgIGl0ZW1zLnB1dCgiUGx1Z2luLUl0ZW1zLkNsb3NlIiwgNDkpOw0KICAgICAgICBpZiAocGFnZSA+IDApIHsNCiAgICAgICAgICAgIGl0ZW1zLnB1dCgiUGx1Z2luLUl0ZW1zLlByZXZpb3VzIiwgNDgpOw0KICAgICAgICB9DQogICAgICAgIGlmIChwYWdlIDwgKGludCkgTWF0aC5jZWlsKChkb3VibGUpIGdldEZpbHRlcmVkUGxheWVycyhmaWx0ZXJUeXBlLCBzb3J0SGlnaFRvTG93KS5zaXplKCkgLyBTTE9UU19QRVJfUEFHRSkgLSAxKSB7DQogICAgICAgICAgICBpdGVtcy5wdXQoIlBsdWdpbi1JdGVtcy5OZXh0IiwgNTApOw0KICAgICAgICB9DQoNCiAgICAgICAgaW50IHRvdGFsSXRlbXMgPSBpdGVtcy5zaXplKCkgKyAxOyAvLyArMSBmb3IgYm9yZGVyIHNsb3RzDQogICAgICAgIGludCBzdWNjZXNzZnVsSXRlbXMgPSAwOw0KICAgICAgICBMaXN0PFN0cmluZz4gZmFpbHVyZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCg0KICAgICAgICAvLyBTZXQgYm9yZGVyIHdpdGggZ2xhc3MgcGFuZXMNCiAgICAgICAgSXRlbVN0YWNrIGJvcmRlckl0ZW0gPSBjcmVhdGVJdGVtKCJQbHVnaW4tSXRlbXMuQm9yZGVyIik7DQogICAgICAgIGlmIChib3JkZXJJdGVtICE9IG51bGwgJiYgYm9yZGVySXRlbS5nZXRUeXBlKCkgIT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDk7IGkrKykgew0KICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKGksIGJvcmRlckl0ZW0pOyAvLyBUb3Agcm93DQogICAgICAgICAgICAgICAgaW52ZW50b3J5LnNldEl0ZW0oNDUgKyBpLCBib3JkZXJJdGVtKTsgLy8gQm90dG9tIHJvdw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZm9yIChpbnQgaSA9IDk7IGkgPD0gNDU7IGkgKz0gOSkgew0KICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKGksIGJvcmRlckl0ZW0pOyAvLyBMZWZ0IGNvbHVtbg0KICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKGkgKyA4LCBib3JkZXJJdGVtKTsgLy8gUmlnaHQgY29sdW1uDQogICAgICAgICAgICB9DQogICAgICAgICAgICBzdWNjZXNzZnVsSXRlbXMrKzsgLy8gQ291bnQgYm9yZGVyIGFzIG9uZSBpdGVtDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBmYWlsdXJlcy5hZGQoIlBsdWdpbi1JdGVtcy5Cb3JkZXIgUmVhc29uOiBGYWlsZWQgdG8gY3JlYXRlIGl0ZW0iKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFBsYWNlIG90aGVyIGl0ZW1zDQogICAgICAgIGZvciAoTWFwLkVudHJ5PFN0cmluZywgSW50ZWdlcj4gZW50cnkgOiBpdGVtcy5lbnRyeVNldCgpKSB7DQogICAgICAgICAgICBTdHJpbmcgcGF0aCA9IGVudHJ5LmdldEtleSgpOw0KICAgICAgICAgICAgaW50IHNsb3QgPSBlbnRyeS5nZXRWYWx1ZSgpOw0KICAgICAgICAgICAgaWYgKHBhdGguZXF1YWxzKCJQbHVnaW4tSXRlbXMuQm9yZGVyIikpIGNvbnRpbnVlOyAvLyBIYW5kbGVkIGFib3ZlDQoNCiAgICAgICAgICAgIEl0ZW1TdGFjayBpdGVtID0gbnVsbDsNCiAgICAgICAgICAgIGlmIChwYXRoLmVxdWFscygiUGx1Z2luLUl0ZW1zLkZpbHRlciIpKSB7DQogICAgICAgICAgICAgICAgaXRlbSA9IGNyZWF0ZUZpbHRlckl0ZW0oZmlsdGVyVHlwZSwgc29ydEhpZ2hUb0xvdyk7DQogICAgICAgICAgICB9IGVsc2UgaWYgKHBhdGguZXF1YWxzKCJQbHVnaW4tSXRlbXMuUGxheWVyLVNrdWxsIikpIHsNCiAgICAgICAgICAgICAgICBpdGVtID0gY3JlYXRlUGxheWVyU2t1bGwocGxheWVyKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgaXRlbSA9IGNyZWF0ZUl0ZW0ocGF0aCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgaXRlbS5nZXRUeXBlKCkgIT0gTWF0ZXJpYWwuQUlSICYmIHNsb3QgPj0gMCAmJiBzbG90IDwgaW52ZW50b3J5LmdldFNpemUoKSkgew0KICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKHNsb3QsIGl0ZW0pOw0KICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxJdGVtcysrOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtID09IG51bGwgfHwgaXRlbS5nZXRUeXBlKCkgPT0gTWF0ZXJpYWwuQUlSKSB7DQogICAgICAgICAgICAgICAgU3RyaW5nIGZhaWx1cmUgPSBpdGVtRmFpbHVyZXMuZ2V0KHBhdGgpOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZChwYXRoICsgIiBSZWFzb246ICIgKyAoZmFpbHVyZSAhPSBudWxsID8gZmFpbHVyZSA6ICJGYWlsZWQgdG8gY3JlYXRlIGl0ZW0iKSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGZhaWx1cmVzLmFkZChwYXRoICsgIiBSZWFzb246IEludmFsaWQgc2xvdCAiICsgc2xvdCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyBGaWxsIHNsb3RzIHdpdGggcGxheWVyIHNrdWxscw0KICAgICAgICBMaXN0PFBsYXllckRhdGE+IHBsYXllckRhdGFMaXN0ID0gZ2V0RmlsdGVyZWRQbGF5ZXJzKGZpbHRlclR5cGUsIHNvcnRIaWdoVG9Mb3cpOw0KICAgICAgICBpbnQgdG90YWxQYWdlcyA9IChpbnQpIE1hdGguY2VpbCgoZG91YmxlKSBwbGF5ZXJEYXRhTGlzdC5zaXplKCkgLyBTTE9UU19QRVJfUEFHRSk7DQogICAgICAgIHBhZ2UgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihwYWdlLCB0b3RhbFBhZ2VzIC0gMSkpOw0KICAgICAgICBpbnQgc3RhcnRJbmRleCA9IHBhZ2UgKiBTTE9UU19QRVJfUEFHRTsNCiAgICAgICAgaW50IGVuZEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCArIFNMT1RTX1BFUl9QQUdFLCBwbGF5ZXJEYXRhTGlzdC5zaXplKCkpOw0KICAgICAgICBpbnRbXSBjb250ZW50U2xvdHMgPSB7DQogICAgICAgICAgICAgICAgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsDQogICAgICAgICAgICAgICAgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsDQogICAgICAgICAgICAgICAgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsDQogICAgICAgICAgICAgICAgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMNCiAgICAgICAgfTsNCg0KICAgICAgICBpbnQgdG90YWxQbGF5ZXJTa3VsbHMgPSBlbmRJbmRleCAtIHN0YXJ0SW5kZXg7DQogICAgICAgIGludCBzdWNjZXNzZnVsUGxheWVyU2t1bGxzID0gMDsNCiAgICAgICAgTGlzdDxTdHJpbmc+IHBsYXllclNrdWxsRmFpbHVyZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsNCg0KICAgICAgICBmb3IgKGludCBpID0gc3RhcnRJbmRleCwgc2xvdEluZGV4ID0gMDsgaSA8IGVuZEluZGV4ICYmIHNsb3RJbmRleCA8IGNvbnRlbnRTbG90cy5sZW5ndGg7IGkrKywgc2xvdEluZGV4KyspIHsNCiAgICAgICAgICAgIFBsYXllckRhdGEgZGF0YSA9IHBsYXllckRhdGFMaXN0LmdldChpKTsNCiAgICAgICAgICAgIEl0ZW1TdGFjayBza3VsbCA9IGNyZWF0ZVBsYXllclNrdWxsKGRhdGEpOw0KICAgICAgICAgICAgaWYgKHNrdWxsICE9IG51bGwgJiYgc2t1bGwuZ2V0VHlwZSgpICE9IE1hdGVyaWFsLkFJUikgew0KICAgICAgICAgICAgICAgIGludmVudG9yeS5zZXRJdGVtKGNvbnRlbnRTbG90c1tzbG90SW5kZXhdLCBza3VsbCk7DQogICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bFBsYXllclNrdWxscysrOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBTdHJpbmcgZmFpbHVyZSA9IGl0ZW1GYWlsdXJlcy5nZXQoIlBsdWdpbi1JdGVtcy5QbGF5ZXItU2t1bGwtIiArIGRhdGEuZ2V0VVVJRCgpKTsNCiAgICAgICAgICAgICAgICBwbGF5ZXJTa3VsbEZhaWx1cmVzLmFkZCgiUGxheWVyLVNrdWxsLSIgKyBkYXRhLmdldFVVSUQoKSArICIgUmVhc29uOiAiICsgKGZhaWx1cmUgIT0gbnVsbCA/IGZhaWx1cmUgOiAiRmFpbGVkIHRvIGNyZWF0ZSBza3VsbCIpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIENvbWJpbmUgaXRlbXMgYW5kIHBsYXllciBza3VsbHMgZm9yIHRvdGFsIGNvdW50DQogICAgICAgIHRvdGFsSXRlbXMgKz0gdG90YWxQbGF5ZXJTa3VsbHM7DQogICAgICAgIHN1Y2Nlc3NmdWxJdGVtcyArPSBzdWNjZXNzZnVsUGxheWVyU2t1bGxzOw0KICAgICAgICBmYWlsdXJlcy5hZGRBbGwocGxheWVyU2t1bGxGYWlsdXJlcyk7DQoNCiAgICAgICAgLy8gTG9nIGNvbnNvbGlkYXRlZCBkZWJ1ZyBtZXNzYWdlDQogICAgICAgIGlmIChzdWNjZXNzZnVsSXRlbXMgPT0gdG90YWxJdGVtcykgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ0RlYnVnKCJbREVCVUcgLSBUb3BHVUldIEFsbCBpdGVtcyBjcmVhdGVkIik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBTdHJpbmcgZmFpbHVyZU1lc3NhZ2UgPSAiW0RFQlVHIC0gVG9wR1VJXSAiICsgc3VjY2Vzc2Z1bEl0ZW1zICsgIi8iICsgdG90YWxJdGVtcyArICIgaXRlbXMgY3JlYXRlZCI7DQogICAgICAgICAgICBpZiAoIWZhaWx1cmVzLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICAgIGZhaWx1cmVNZXNzYWdlICs9ICIsIGZhaWxlZCB0byBjcmVhdGU6ICIgKyBTdHJpbmcuam9pbigiLCAiLCBmYWlsdXJlcyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRmFpbHVyZSgiVG9wR1VJX2l0ZW1zXyIgKyBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSwgZmFpbHVyZU1lc3NhZ2UpOw0KICAgICAgICB9DQoNCiAgICAgICAgb3BlblBhZ2VzLnB1dChwbGF5ZXIuZ2V0VW5pcXVlSWQoKSwgcGFnZSk7DQogICAgICAgIG9wZW5JbnZlbnRvcmllcy5wdXQocGxheWVyLmdldFVuaXF1ZUlkKCksIGludmVudG9yeSk7DQogICAgICAgIHBsYXllci5vcGVuSW52ZW50b3J5KGludmVudG9yeSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmV0cmlldmVzIGEgY29sb3IgZnJvbSB0aGUgY29uZmlndXJhdGlvbg0KICAgICAqIC8vIG5vdGU6IFBhcnNlcyBSR0Igb3IgaGV4IGNvbG9yIHZhbHVlcyB3aXRoIGZhbGxiYWNrIHRvIHdoaXRlDQogICAgICovDQogICAgcHJpdmF0ZSBDb2xvciBnZXRDb2xvckZyb21Db25maWcoRmlsZUNvbmZpZ3VyYXRpb24gY29uZmlnLCBTdHJpbmcgY29sb3JDb25maWdQYXRoKSB7DQogICAgICAgIGlmIChjb25maWcuY29udGFpbnMoY29sb3JDb25maWdQYXRoICsgIi5yZWQiKSAmJg0KICAgICAgICAgICAgICAgIGNvbmZpZy5jb250YWlucyhjb2xvckNvbmZpZ1BhdGggKyAiLmdyZWVuIikgJiYNCiAgICAgICAgICAgICAgICBjb25maWcuY29udGFpbnMoY29sb3JDb25maWdQYXRoICsgIi5ibHVlIikpIHsNCiAgICAgICAgICAgIGludCByZWQgPSBjb25maWcuZ2V0SW50KGNvbG9yQ29uZmlnUGF0aCArICIucmVkIiwgMjU1KTsNCiAgICAgICAgICAgIGludCBncmVlbiA9IGNvbmZpZy5nZXRJbnQoY29sb3JDb25maWdQYXRoICsgIi5ncmVlbiIsIDI1NSk7DQogICAgICAgICAgICBpbnQgYmx1ZSA9IGNvbmZpZy5nZXRJbnQoY29sb3JDb25maWdQYXRoICsgIi5ibHVlIiwgMjU1KTsNCiAgICAgICAgICAgIHJlZCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgcmVkKSk7DQogICAgICAgICAgICBncmVlbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgZ3JlZW4pKTsNCiAgICAgICAgICAgIGJsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIGJsdWUpKTsNCiAgICAgICAgICAgIHJldHVybiBDb2xvci5mcm9tUkdCKHJlZCwgZ3JlZW4sIGJsdWUpOw0KICAgICAgICB9DQogICAgICAgIGlmIChjb25maWcuY29udGFpbnMoY29sb3JDb25maWdQYXRoICsgIi5oZXgiKSkgew0KICAgICAgICAgICAgU3RyaW5nIGhleCA9IGNvbmZpZy5nZXRTdHJpbmcoY29sb3JDb25maWdQYXRoICsgIi5oZXgiLCAiI0ZGRkZGRiIpOw0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBpZiAoaGV4LnN0YXJ0c1dpdGgoIiMiKSkgew0KICAgICAgICAgICAgICAgICAgICBoZXggPSBoZXguc3Vic3RyaW5nKDEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpbnQgcmdiID0gSW50ZWdlci5wYXJzZUludChoZXgsIDE2KTsNCiAgICAgICAgICAgICAgICByZXR1cm4gQ29sb3IuZnJvbVJHQihyZ2IpOw0KICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHIC0gVG9wR1VJXSBJbnZhbGlkIGhleCBjb2xvcjogIiArIGhleCArICIsIHVzaW5nIHdoaXRlIik7DQogICAgICAgICAgICAgICAgcmV0dXJuIENvbG9yLldISVRFOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUcgLSBUb3BHVUldIE5vIGNvbG9yIGNvbmZpZ3VyYXRpb24gZm91bmQgZm9yIHBhdGg6ICIgKyBjb2xvckNvbmZpZ1BhdGggKyAiLCB1c2luZyB3aGl0ZSIpOw0KICAgICAgICByZXR1cm4gQ29sb3IuV0hJVEU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQXBwbGllcyBhIGZpcmV3b3JrIGVmZmVjdCBjb2xvciB0byBhIGZpcmV3b3JrIHN0YXIgaXRlbQ0KICAgICAqIC8vIG5vdGU6IFNldHMgdGhlIGZpcmV3b3JrIHN0YXLigJlzIGNvbG9yIGJhc2VkIG9uIGNvbmZpZyBzZXR0aW5ncw0KICAgICAqLw0KICAgIHByaXZhdGUgdm9pZCBhcHBseUZpcmV3b3JrU3RhckNvbG9yKEl0ZW1TdGFjayBpdGVtLCBGaWxlQ29uZmlndXJhdGlvbiBjb25maWcsIFN0cmluZyBjb2xvckNvbmZpZ1BhdGgpIHsNCiAgICAgICAgaWYgKGl0ZW0gPT0gbnVsbCB8fCBpdGVtLmdldFR5cGUoKSAhPSBWZXJzaW9uVXRpbHMuZ2V0RmlyZXdvcmtTdGFyTWF0ZXJpYWwoKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIEZpcmV3b3JrRWZmZWN0TWV0YSBtZXRhID0gKEZpcmV3b3JrRWZmZWN0TWV0YSkgaXRlbS5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAobWV0YSA9PSBudWxsKSByZXR1cm47DQogICAgICAgIENvbG9yIGNvbG9yID0gZ2V0Q29sb3JGcm9tQ29uZmlnKGNvbmZpZywgY29sb3JDb25maWdQYXRoKTsNCiAgICAgICAgU3RyaW5nIGVmZmVjdFR5cGVTdHJpbmcgPSBjb25maWcuZ2V0U3RyaW5nKCJQbHVnaW4tSXRlbXMuRmlsdGVyLmZpcmV3b3JrLWVmZmVjdC5lZmZlY3QtdHlwZSIsICJTVEFSIik7DQogICAgICAgIEZpcmV3b3JrRWZmZWN0LlR5cGUgZWZmZWN0VHlwZTsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGVmZmVjdFR5cGUgPSBGaXJld29ya0VmZmVjdC5UeXBlLnZhbHVlT2YoZWZmZWN0VHlwZVN0cmluZy50b1VwcGVyQ2FzZSgpKTsNCiAgICAgICAgfSBjYXRjaCAoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIGVmZmVjdFR5cGUgPSBGaXJld29ya0VmZmVjdC5UeXBlLlNUQVI7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHIC0gVG9wR1VJXSBJbnZhbGlkIGZpcmV3b3JrIGVmZmVjdCB0eXBlOiAiICsgZWZmZWN0VHlwZVN0cmluZyArICIsIHVzaW5nIFNUQVIiKTsNCiAgICAgICAgfQ0KICAgICAgICBGaXJld29ya0VmZmVjdCBlZmZlY3QgPSBGaXJld29ya0VmZmVjdC5idWlsZGVyKCkNCiAgICAgICAgICAgICAgICAud2l0aENvbG9yKGNvbG9yKQ0KICAgICAgICAgICAgICAgIC53aXRoKGVmZmVjdFR5cGUpDQogICAgICAgICAgICAgICAgLmJ1aWxkKCk7DQogICAgICAgIG1ldGEuc2V0RWZmZWN0KGVmZmVjdCk7DQogICAgICAgIGl0ZW0uc2V0SXRlbU1ldGEobWV0YSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ3JlYXRlcyBhIGZpbHRlciBpdGVtIHdpdGggZHluYW1pYyBhcHBlYXJhbmNlIGJhc2VkIG9uIGZpbHRlciBhbmQgc29ydCBzdGF0ZQ0KICAgICAqIC8vIG5vdGU6IEdlbmVyYXRlcyBhIGZpcmV3b3JrIHN0YXIgd2l0aCBjb2xvciBhbmQgZ2xvdyByZWZsZWN0aW5nIGN1cnJlbnQgZmlsdGVyIGFuZCBzb3J0IG9yZGVyDQogICAgICovDQogICAgcHJpdmF0ZSBJdGVtU3RhY2sgY3JlYXRlRmlsdGVySXRlbShGaWx0ZXJUeXBlIGZpbHRlclR5cGUsIGJvb2xlYW4gc29ydEhpZ2hUb0xvdykgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBTdHJpbmcgcGF0aCA9ICJQbHVnaW4tSXRlbXMuRmlsdGVyIjsNCiAgICAgICAgU3RyaW5nIGZhaWx1cmVSZWFzb24gPSBudWxsOw0KDQogICAgICAgIFN0cmluZyBtYXRlcmlhbE5hbWUgPSBjb25maWcuZ2V0U3RyaW5nKHBhdGggKyAiLk1hdGVyaWFsIiwgIkZJUkVXT1JLX1NUQVIiKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgIGlmIChpdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5TVE9ORSAmJiAhbWF0ZXJpYWxOYW1lLmVxdWFsc0lnbm9yZUNhc2UoIkZJUkVXT1JLX1NUQVIiKSkgew0KICAgICAgICAgICAgZGVidWdNYW5hZ2VyLmxvZ1dhcm5pbmcoIltERUJVRyAtIFRvcEdVSV0gSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIGZvciBmaWx0ZXItYnV0dG9uIGluIFRvcEdVSS55bWwsIHVzaW5nIEZJUkVXT1JLX1NUQVIiKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiSW52YWxpZCBtYXRlcmlhbCAnIiArIG1hdGVyaWFsTmFtZSArICInIjsNCiAgICAgICAgICAgIGl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKCJGSVJFV09SS19TVEFSIik7DQogICAgICAgIH0NCg0KICAgICAgICBib29sZWFuIHNob3VsZEdsb3cgPSBzb3J0SGlnaFRvTG93Ow0KICAgICAgICBTdHJpbmcgZmlsdGVyU3RhdHVzOw0KICAgICAgICBTdHJpbmcgZmlsdGVyRGV0YWlsczsNCiAgICAgICAgU3RyaW5nIGNvbG9yQ29uZmlnUGF0aDsNCiAgICAgICAgc3dpdGNoIChmaWx0ZXJUeXBlKSB7DQogICAgICAgICAgICBjYXNlIENMQUlNRUQ6DQogICAgICAgICAgICAgICAgZmlsdGVyU3RhdHVzID0gIiZlQ2xhaW1lZCI7DQogICAgICAgICAgICAgICAgZmlsdGVyRGV0YWlscyA9ICImZUJvdW50aWVzIENsYWltZWQiOw0KICAgICAgICAgICAgICAgIGNvbG9yQ29uZmlnUGF0aCA9IHBhdGggKyAiLmZpcmV3b3JrLWVmZmVjdC5jbGFpbWVkLWNvbG9yIjsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgU1VSVklWRUQ6DQogICAgICAgICAgICAgICAgZmlsdGVyU3RhdHVzID0gIiZlU3Vydml2ZWQiOw0KICAgICAgICAgICAgICAgIGZpbHRlckRldGFpbHMgPSAiJmVCb3VudGllcyBTdXJ2aXZlZCI7DQogICAgICAgICAgICAgICAgY29sb3JDb25maWdQYXRoID0gcGF0aCArICIuZmlyZXdvcmstZWZmZWN0LnN1cnZpdmVkLWNvbG9yIjsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgTU9ORVlfRUFSTkVEOg0KICAgICAgICAgICAgICAgIGZpbHRlclN0YXR1cyA9ICImZU1vbmV5IjsNCiAgICAgICAgICAgICAgICBmaWx0ZXJEZXRhaWxzID0gIiZlTW9uZXkgRWFybmVkIjsNCiAgICAgICAgICAgICAgICBjb2xvckNvbmZpZ1BhdGggPSBwYXRoICsgIi5maXJld29yay1lZmZlY3QubW9uZXktZWFybmVkLWNvbG9yIjsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgWFBfRUFSTkVEOg0KICAgICAgICAgICAgICAgIGZpbHRlclN0YXR1cyA9ICImZVhQIjsNCiAgICAgICAgICAgICAgICBmaWx0ZXJEZXRhaWxzID0gIiZlWFAgRWFybmVkIjsNCiAgICAgICAgICAgICAgICBjb2xvckNvbmZpZ1BhdGggPSBwYXRoICsgIi5maXJld29yay1lZmZlY3QueHAtZWFybmVkLWNvbG9yIjsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgVE9UQUxfVkFMVUU6DQogICAgICAgICAgICAgICAgZmlsdGVyU3RhdHVzID0gIiZlVmFsdWUiOw0KICAgICAgICAgICAgICAgIGZpbHRlckRldGFpbHMgPSAiJmVUb3RhbCBWYWx1ZSBFYXJuZWQiOw0KICAgICAgICAgICAgICAgIGNvbG9yQ29uZmlnUGF0aCA9IHBhdGggKyAiLmZpcmV3b3JrLWVmZmVjdC50b3RhbC12YWx1ZS1jb2xvciI7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgIGZpbHRlclN0YXR1cyA9ICImZUFsbCI7DQogICAgICAgICAgICAgICAgZmlsdGVyRGV0YWlscyA9ICImZUFsbCBTdGF0cyI7DQogICAgICAgICAgICAgICAgY29sb3JDb25maWdQYXRoID0gcGF0aCArICIuZmlyZXdvcmstZWZmZWN0LmFsbC1jb2xvciI7DQogICAgICAgIH0NCiAgICAgICAgaWYgKHNvcnRIaWdoVG9Mb3cpIHsNCiAgICAgICAgICAgIGZpbHRlclN0YXR1cyArPSAiICY4fCAmZUhpZ2jihpJMb3ciOw0KICAgICAgICAgICAgZmlsdGVyRGV0YWlscyArPSAiICY4KyAmZUhpZ2ggdG8gTG93IFNvcnRpbmciOw0KICAgICAgICAgICAgc2hvdWxkR2xvdyA9IHRydWU7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBmaWx0ZXJTdGF0dXMgKz0gIiAmOHwgJmVMb3fihpJIaWdoIjsNCiAgICAgICAgICAgIGZpbHRlckRldGFpbHMgKz0gIiAmOCsgJmVMb3cgdG8gSGlnaCBTb3J0aW5nIjsNCiAgICAgICAgfQ0KDQogICAgICAgIGFwcGx5RmlyZXdvcmtTdGFyQ29sb3IoaXRlbSwgY29uZmlnLCBjb2xvckNvbmZpZ1BhdGgpOw0KDQogICAgICAgIEl0ZW1NZXRhIG1ldGEgPSBpdGVtLmdldEl0ZW1NZXRhKCk7DQogICAgICAgIGlmIChtZXRhID09IG51bGwpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBUb3BHVUldIEZhaWxlZCB0byBnZXQgSXRlbU1ldGEgZm9yIGZpbHRlci1idXR0b24iKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgICAgICByZXR1cm4gaXRlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIFN0cmluZyBuYW1lID0gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBjb25maWcuZ2V0U3RyaW5nKHBhdGggKyAiLk5hbWUiLCAiJmVGaWx0ZXI6ICVmaWx0ZXJfc3RhdHVzJSIpKTsNCiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgiJWZpbHRlcl9zdGF0dXMlIiwgQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBmaWx0ZXJTdGF0dXMpKTsNCiAgICAgICAgbWV0YS5zZXREaXNwbGF5TmFtZShuYW1lKTsNCg0KICAgICAgICBMaXN0PFN0cmluZz4gbG9yZSA9IGNvbmZpZy5nZXRTdHJpbmdMaXN0KHBhdGggKyAiLkxvcmUiKTsNCiAgICAgICAgTGlzdDxTdHJpbmc+IGNvbG9yZWRMb3JlID0gbmV3IEFycmF5TGlzdDw+KCk7DQogICAgICAgIGZvciAoU3RyaW5nIGxpbmUgOiBsb3JlKSB7DQogICAgICAgICAgICBsaW5lID0gQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBsaW5lKTsNCiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoIiVmaWx0ZXJfc3RhdHVzJSIsIENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgZmlsdGVyU3RhdHVzKSk7DQogICAgICAgICAgICBsaW5lID0gbGluZS5yZXBsYWNlKCIlZmlsdGVyX2RldGFpbHMlIiwgQ2hhdENvbG9yLnRyYW5zbGF0ZUFsdGVybmF0ZUNvbG9yQ29kZXMoJyYnLCBmaWx0ZXJEZXRhaWxzKSk7DQogICAgICAgICAgICBjb2xvcmVkTG9yZS5hZGQobGluZSk7DQogICAgICAgIH0NCiAgICAgICAgbWV0YS5zZXRMb3JlKGNvbG9yZWRMb3JlKTsNCg0KICAgICAgICBpZiAoc2hvdWxkR2xvdyB8fCBjb25maWcuZ2V0Qm9vbGVhbihwYXRoICsgIi5FbmNoYW50bWVudC1HbG93IiwgZmFsc2UpKSB7DQogICAgICAgICAgICBtZXRhLmFkZEVuY2hhbnQoRW5jaGFudG1lbnQuRFVSQUJJTElUWSwgMSwgdHJ1ZSk7DQogICAgICAgICAgICBtZXRhLmFkZEl0ZW1GbGFncyhJdGVtRmxhZy5ISURFX0VOQ0hBTlRTKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGl0ZW0uc2V0SXRlbU1ldGEobWV0YSk7DQoNCiAgICAgICAgaWYgKGZhaWx1cmVSZWFzb24gIT0gbnVsbCkgew0KICAgICAgICAgICAgaXRlbUZhaWx1cmVzLnB1dChwYXRoLCBmYWlsdXJlUmVhc29uKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBpdGVtOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHJpZXZlcyBmaWx0ZXJlZCBhbmQgc29ydGVkIHBsYXllciBkYXRhDQogICAgICogLy8gbm90ZTogRmlsdGVycyBieSBzdGF0IHR5cGUgYW5kIHNvcnRzIGJ5IHZhbHVlIGluIHNwZWNpZmllZCBvcmRlcg0KICAgICAqLw0KICAgIHByaXZhdGUgTGlzdDxQbGF5ZXJEYXRhPiBnZXRGaWx0ZXJlZFBsYXllcnMoRmlsdGVyVHlwZSBmaWx0ZXJUeXBlLCBib29sZWFuIHNvcnRIaWdoVG9Mb3cpIHsNCiAgICAgICAgTGlzdDxQbGF5ZXJEYXRhPiBwbGF5ZXJEYXRhTGlzdCA9IG5ldyBBcnJheUxpc3Q8PigpOw0KDQogICAgICAgIGlmIChwbHVnaW4uZ2V0TXlTUUwoKS5pc0VuYWJsZWQoKSkgew0KICAgICAgICAgICAgdHJ5IChDb25uZWN0aW9uIGNvbm4gPSBwbHVnaW4uZ2V0TXlTUUwoKS5nZXRDb25uZWN0aW9uKCk7DQogICAgICAgICAgICAgICAgIFN0YXRlbWVudCBzdG10ID0gY29ubi5jcmVhdGVTdGF0ZW1lbnQoKTsNCiAgICAgICAgICAgICAgICAgUmVzdWx0U2V0IHJzID0gc3RtdC5leGVjdXRlUXVlcnkoIlNFTEVDVCBwbGF5ZXJfdXVpZCwgY2xhaW1lZCwgc3Vydml2ZWQsIG1vbmV5X2Vhcm5lZCwgeHBfZWFybmVkLCB0b3RhbF92YWx1ZV9lYXJuZWQgRlJPTSBwbGF5ZXJfc3RhdHMiKSkgew0KICAgICAgICAgICAgICAgIHdoaWxlIChycy5uZXh0KCkpIHsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHV1aWRTdHJpbmcgPSBycy5nZXRTdHJpbmcoInBsYXllcl91dWlkIik7DQogICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICBVVUlEIHV1aWQgPSBVVUlELmZyb21TdHJpbmcodXVpZFN0cmluZyk7DQogICAgICAgICAgICAgICAgICAgICAgICBPZmZsaW5lUGxheWVyIG9mZmxpbmVQbGF5ZXIgPSBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcih1dWlkKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvZmZsaW5lUGxheWVyLmdldE5hbWUoKSA9PSBudWxsKSBjb250aW51ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGludCBjbGFpbWVkID0gcnMuZ2V0SW50KCJjbGFpbWVkIik7DQogICAgICAgICAgICAgICAgICAgICAgICBpbnQgc3Vydml2ZWQgPSBycy5nZXRJbnQoInN1cnZpdmVkIik7DQogICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgbW9uZXlFYXJuZWQgPSBycy5nZXREb3VibGUoIm1vbmV5X2Vhcm5lZCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaW50IHhwRWFybmVkID0gcnMuZ2V0SW50KCJ4cF9lYXJuZWQiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRvdWJsZSB0b3RhbFZhbHVlRWFybmVkID0gcnMuZ2V0RG91YmxlKCJ0b3RhbF92YWx1ZV9lYXJuZWQiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckRhdGFMaXN0LmFkZChuZXcgUGxheWVyRGF0YSh1dWlkLCBjbGFpbWVkLCBzdXJ2aXZlZCwgbW9uZXlFYXJuZWQsIHhwRWFybmVkLCB0b3RhbFZhbHVlRWFybmVkKSk7DQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHIC0gVG9wR1VJXSBJbnZhbGlkIFVVSUQgaW4gcGxheWVyX3N0YXRzOiAiICsgdXVpZFN0cmluZyk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGNhdGNoIChTUUxFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUcgLSBUb3BHVUldIEZhaWxlZCB0byBmZXRjaCBzdGF0cyBmcm9tIE15U1FMOiAiICsgZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgRmlsZUNvbmZpZ3VyYXRpb24gc3RhdHNDb25maWcgPSBwbHVnaW4uZ2V0U3RhdHNDb25maWcoKTsNCiAgICAgICAgICAgIENvbmZpZ3VyYXRpb25TZWN0aW9uIHBsYXllcnNTZWN0aW9uID0gc3RhdHNDb25maWcuZ2V0Q29uZmlndXJhdGlvblNlY3Rpb24oInBsYXllcnMiKTsNCiAgICAgICAgICAgIGlmIChwbGF5ZXJzU2VjdGlvbiAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgZm9yIChTdHJpbmcgdXVpZFN0cmluZyA6IHBsYXllcnNTZWN0aW9uLmdldEtleXMoZmFsc2UpKSB7DQogICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICBVVUlEIHV1aWQgPSBVVUlELmZyb21TdHJpbmcodXVpZFN0cmluZyk7DQogICAgICAgICAgICAgICAgICAgICAgICBPZmZsaW5lUGxheWVyIG9mZmxpbmVQbGF5ZXIgPSBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcih1dWlkKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvZmZsaW5lUGxheWVyLmdldE5hbWUoKSA9PSBudWxsKSBjb250aW51ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGludCBjbGFpbWVkID0gc3RhdHNDb25maWcuZ2V0SW50KCJwbGF5ZXJzLiIgKyB1dWlkU3RyaW5nICsgIi5jbGFpbWVkIiwgMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpbnQgc3Vydml2ZWQgPSBzdGF0c0NvbmZpZy5nZXRJbnQoInBsYXllcnMuIiArIHV1aWRTdHJpbmcgKyAiLnN1cnZpdmVkIiwgMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgbW9uZXlFYXJuZWQgPSBzdGF0c0NvbmZpZy5nZXREb3VibGUoInBsYXllcnMuIiArIHV1aWRTdHJpbmcgKyAiLm1vbmV5X2Vhcm5lZCIsIDAuMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpbnQgeHBFYXJuZWQgPSBzdGF0c0NvbmZpZy5nZXRJbnQoInBsYXllcnMuIiArIHV1aWRTdHJpbmcgKyAiLnhwX2Vhcm5lZCIsIDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIHRvdGFsVmFsdWVFYXJuZWQgPSBzdGF0c0NvbmZpZy5nZXREb3VibGUoInBsYXllcnMuIiArIHV1aWRTdHJpbmcgKyAiLnRvdGFsX3ZhbHVlX2Vhcm5lZCIsIDAuMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJEYXRhTGlzdC5hZGQobmV3IFBsYXllckRhdGEodXVpZCwgY2xhaW1lZCwgc3Vydml2ZWQsIG1vbmV5RWFybmVkLCB4cEVhcm5lZCwgdG90YWxWYWx1ZUVhcm5lZCkpOw0KICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldExvZ2dlcigpLndhcm5pbmcoIltERUJVRyAtIFRvcEdVSV0gSW52YWxpZCBVVUlEIGluIHN0YXRzLnltbDogIiArIHV1aWRTdHJpbmcpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgQ29tcGFyYXRvcjxQbGF5ZXJEYXRhPiBjb21wYXJhdG9yOw0KICAgICAgICBzd2l0Y2ggKGZpbHRlclR5cGUpIHsNCiAgICAgICAgICAgIGNhc2UgQ0xBSU1FRDoNCiAgICAgICAgICAgICAgICBjb21wYXJhdG9yID0gQ29tcGFyYXRvci5jb21wYXJpbmdJbnQoUGxheWVyRGF0YTo6Z2V0Q2xhaW1lZCk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBjYXNlIFNVUlZJVkVEOg0KICAgICAgICAgICAgICAgIGNvbXBhcmF0b3IgPSBDb21wYXJhdG9yLmNvbXBhcmluZ0ludChQbGF5ZXJEYXRhOjpnZXRTdXJ2aXZlZCk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBjYXNlIE1PTkVZX0VBUk5FRDoNCiAgICAgICAgICAgICAgICBjb21wYXJhdG9yID0gQ29tcGFyYXRvci5jb21wYXJpbmdEb3VibGUoUGxheWVyRGF0YTo6Z2V0TW9uZXlFYXJuZWQpOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgY2FzZSBYUF9FQVJORUQ6DQogICAgICAgICAgICAgICAgY29tcGFyYXRvciA9IENvbXBhcmF0b3IuY29tcGFyaW5nSW50KFBsYXllckRhdGE6OmdldFhQRWFybmVkKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgVE9UQUxfVkFMVUU6DQogICAgICAgICAgICAgICAgY29tcGFyYXRvciA9IENvbXBhcmF0b3IuY29tcGFyaW5nRG91YmxlKFBsYXllckRhdGE6OmdldFRvdGFsVmFsdWVFYXJuZWQpOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICBjb21wYXJhdG9yID0gKHAxLCBwMikgLT4gew0KICAgICAgICAgICAgICAgICAgICBPZmZsaW5lUGxheWVyIG9wMSA9IEJ1a2tpdC5nZXRPZmZsaW5lUGxheWVyKHAxLmdldFVVSUQoKSk7DQogICAgICAgICAgICAgICAgICAgIE9mZmxpbmVQbGF5ZXIgb3AyID0gQnVra2l0LmdldE9mZmxpbmVQbGF5ZXIocDIuZ2V0VVVJRCgpKTsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIG5hbWUxID0gb3AxLmdldE5hbWUoKSAhPSBudWxsID8gb3AxLmdldE5hbWUoKSA6IHAxLmdldFVVSUQoKS50b1N0cmluZygpOw0KICAgICAgICAgICAgICAgICAgICBTdHJpbmcgbmFtZTIgPSBvcDIuZ2V0TmFtZSgpICE9IG51bGwgPyBvcDIuZ2V0TmFtZSgpIDogcDIuZ2V0VVVJRCgpLnRvU3RyaW5nKCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lMS5jb21wYXJlVG9JZ25vcmVDYXNlKG5hbWUyKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHNvcnRIaWdoVG9Mb3cpIHsNCiAgICAgICAgICAgIGNvbXBhcmF0b3IgPSBjb21wYXJhdG9yLnJldmVyc2VkKCk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gcGxheWVyRGF0YUxpc3Quc3RyZWFtKCkNCiAgICAgICAgICAgICAgICAuc29ydGVkKGNvbXBhcmF0b3IpDQogICAgICAgICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ3JlYXRlcyBhIGN1c3RvbWl6YWJsZSBpdGVtIGZyb20gY29uZmlnDQogICAgICogLy8gbm90ZTogQnVpbGRzIGFuIGl0ZW0gd2l0aCBzcGVjaWZpZWQgbWF0ZXJpYWwsIG5hbWUsIGxvcmUsIGFuZCBnbG93DQogICAgICovDQogICAgcHJpdmF0ZSBJdGVtU3RhY2sgY3JlYXRlSXRlbShTdHJpbmcgcGF0aCkgew0KICAgICAgICBEZWJ1Z01hbmFnZXIgZGVidWdNYW5hZ2VyID0gcGx1Z2luLmdldERlYnVnTWFuYWdlcigpOw0KICAgICAgICBTdHJpbmcgZmFpbHVyZVJlYXNvbiA9IG51bGw7DQoNCiAgICAgICAgU3RyaW5nIG1hdGVyaWFsTmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcocGF0aCArICIuTWF0ZXJpYWwiLCAiU1RPTkUiKTsNCiAgICAgICAgSXRlbVN0YWNrIGl0ZW0gPSBWZXJzaW9uVXRpbHMuZ2V0WE1hdGVyaWFsSXRlbVN0YWNrKG1hdGVyaWFsTmFtZSk7DQogICAgICAgIGlmIChpdGVtLmdldFR5cGUoKSA9PSBNYXRlcmlhbC5TVE9ORSAmJiAhbWF0ZXJpYWxOYW1lLmVxdWFsc0lnbm9yZUNhc2UoIlNUT05FIikpIHsNCiAgICAgICAgICAgIGRlYnVnTWFuYWdlci5sb2dXYXJuaW5nKCJbREVCVUcgLSBUb3BHVUldIEludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyBhdCAiICsgcGF0aCArICIsIHVzaW5nIFNUT05FIik7DQogICAgICAgICAgICBmYWlsdXJlUmVhc29uID0gIkludmFsaWQgbWF0ZXJpYWwgJyIgKyBtYXRlcmlhbE5hbWUgKyAiJyI7DQogICAgICAgIH0NCg0KICAgICAgICBJdGVtTWV0YSBtZXRhID0gaXRlbS5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAobWV0YSA9PSBudWxsKSB7DQogICAgICAgICAgICBkZWJ1Z01hbmFnZXIubG9nV2FybmluZygiW0RFQlVHIC0gVG9wR1VJXSBGYWlsZWQgdG8gZ2V0IEl0ZW1NZXRhIGZvciBpdGVtIGF0ICIgKyBwYXRoKTsNCiAgICAgICAgICAgIGZhaWx1cmVSZWFzb24gPSAiRmFpbGVkIHRvIGdldCBJdGVtTWV0YSI7DQogICAgICAgICAgICByZXR1cm4gaXRlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIFN0cmluZyBuYW1lID0gY29uZmlnLmdldFN0cmluZyhwYXRoICsgIi5OYW1lIiwgIiIpOw0KICAgICAgICBpZiAoIW5hbWUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbmFtZSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdChwYXRoICsgIi5Mb3JlIik7DQogICAgICAgIGlmICghbG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgIG1ldGEuc2V0TG9yZShsb3JlLnN0cmVhbSgpDQogICAgICAgICAgICAgICAgICAgIC5tYXAobGluZSAtPiBDaGF0Q29sb3IudHJhbnNsYXRlQWx0ZXJuYXRlQ29sb3JDb2RlcygnJicsIGxpbmUpKQ0KICAgICAgICAgICAgICAgICAgICAuY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgpKSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoY29uZmlnLmdldEJvb2xlYW4ocGF0aCArICIuRW5jaGFudG1lbnQtR2xvdyIsIGZhbHNlKSkgew0KICAgICAgICAgICAgbWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgIH0NCg0KICAgICAgICBpdGVtLnNldEl0ZW1NZXRhKG1ldGEpOw0KDQogICAgICAgIGlmIChmYWlsdXJlUmVhc29uICE9IG51bGwpIHsNCiAgICAgICAgICAgIGl0ZW1GYWlsdXJlcy5wdXQocGF0aCwgZmFpbHVyZVJlYXNvbik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gaXRlbTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDcmVhdGVzIGEgcGxheWVyIHNrdWxsIHdpdGggY3VzdG9taXphYmxlIHNldHRpbmdzIGFuZCBzdGF0cw0KICAgICAqIC8vIG5vdGU6IEJ1aWxkcyBhIHNrdWxsIHdpdGggdGhlIHBsYXllcuKAmXMgc2tpbiBhbmQgc3RhdHMNCiAgICAgKi8NCiAgICBwcml2YXRlIEl0ZW1TdGFjayBjcmVhdGVQbGF5ZXJTa3VsbChQbGF5ZXJEYXRhIGRhdGEpIHsNCiAgICAgICAgT2ZmbGluZVBsYXllciBwbGF5ZXIgPSBCdWtraXQuZ2V0T2ZmbGluZVBsYXllcihkYXRhLmdldFVVSUQoKSk7DQogICAgICAgIEl0ZW1TdGFjayBza3VsbCA9IFNrdWxsVXRpbHMuY3JlYXRlVmVyc2lvbkF3YXJlUGxheWVySGVhZChwbGF5ZXIpOw0KICAgICAgICBpZiAoc2t1bGwgPT0gbnVsbCB8fCAhVmVyc2lvblV0aWxzLmlzUGxheWVySGVhZChza3VsbCkpIHsNCiAgICAgICAgICAgIHBsdWdpbi5nZXRMb2dnZXIoKS53YXJuaW5nKCJbREVCVUcgLSBUb3BHVUldIEZhaWxlZCB0byBjcmVhdGUgcGxheWVyIGhlYWQgZm9yICIgKyAocGxheWVyLmdldE5hbWUoKSAhPSBudWxsID8gcGxheWVyLmdldE5hbWUoKSA6IGRhdGEuZ2V0VVVJRCgpKSk7DQogICAgICAgICAgICBza3VsbCA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIlNLRUxFVE9OX1NLVUxMIik7DQogICAgICAgIH0NCiAgICAgICAgU2t1bGxNZXRhIG1ldGEgPSAoU2t1bGxNZXRhKSBza3VsbC5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAobWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICBTdHJpbmcgbmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoIlBsdWdpbi1JdGVtcy5QbGF5ZXItU2t1bGwuTmFtZSIsICImZSVwbGF5ZXIlIikNCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVwbGF5ZXIlIiwgcGxheWVyLmdldE5hbWUoKSAhPSBudWxsID8gcGxheWVyLmdldE5hbWUoKSA6ICJVbmtub3duIik7DQogICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbmFtZSkpOw0KICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdCgiUGx1Z2luLUl0ZW1zLlBsYXllci1Ta3VsbC5Mb3JlIik7DQogICAgICAgICAgICBpZiAobG9yZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBsb3JlID0gQXJyYXlzLmFzTGlzdCgNCiAgICAgICAgICAgICAgICAgICAgICAgICImN0NsYWltZWQ6ICZlJWJvdW50aWVzcGx1c19jbGFpbWVkJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdTdXJ2aXZlZDogJmUlYm91bnRpZXNwbHVzX3N1cnZpdmVkJSIsDQogICAgICAgICAgICAgICAgICAgICAgICAiJjdNb25leTogJmUlYm91bnRpZXNwbHVzX3RvdGFsbW9uZXllYXJuZWQlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICImN1hQOiAmZSVib3VudGllc3BsdXNfdG90YWx4cGVhcm5lZCUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgIiY3VmFsdWU6ICZlJWJvdW50aWVzcGx1c190b3RhbHZhbHVlZWFybmVkJSINCiAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkNCiAgICAgICAgICAgICAgICAgICAgLnRhcmdldChkYXRhLmdldFVVSUQoKSkNCiAgICAgICAgICAgICAgICAgICAgLmJvdW50eUNvdW50KGRhdGEuZ2V0Q2xhaW1lZCgpKQ0KICAgICAgICAgICAgICAgICAgICAud2l0aEFtb3VudChkYXRhLmdldE1vbmV5RWFybmVkKCkpDQogICAgICAgICAgICAgICAgICAgIC5leHBWYWx1ZShkYXRhLmdldFhQRWFybmVkKCkpDQogICAgICAgICAgICAgICAgICAgIC50b3RhbEJvdW50eUFtb3VudChkYXRhLmdldFRvdGFsVmFsdWVFYXJuZWQoKSk7DQogICAgICAgICAgICBMaXN0PFN0cmluZz4gcHJvY2Vzc2VkTG9yZSA9IFBsYWNlaG9sZGVycy5hcHBseShsb3JlLCBjb250ZXh0KTsNCiAgICAgICAgICAgIG1ldGEuc2V0TG9yZShwcm9jZXNzZWRMb3JlKTsNCiAgICAgICAgICAgIGlmIChjb25maWcuZ2V0Qm9vbGVhbigiUGx1Z2luLUl0ZW1zLlBsYXllci1Ta3VsbC5FbmNoYW50bWVudC1HbG93IiwgZmFsc2UpKSB7DQogICAgICAgICAgICAgICAgbWV0YS5hZGRFbmNoYW50KEVuY2hhbnRtZW50LkRVUkFCSUxJVFksIDEsIHRydWUpOw0KICAgICAgICAgICAgICAgIG1ldGEuYWRkSXRlbUZsYWdzKEl0ZW1GbGFnLkhJREVfRU5DSEFOVFMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgc2t1bGwuc2V0SXRlbU1ldGEobWV0YSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHNrdWxsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZXMgYSBwbGF5ZXIgc2t1bGwgZm9yIGEgUGxheWVyIG9iamVjdA0KICAgICAqIC8vIG5vdGU6IEJ1aWxkcyBhIHNrdWxsIHdpdGggdGhlIHBsYXllcuKAmXMgc2tpbiB1c2luZyBjb25maWctZGVmaW5lZCBwcm9wZXJ0aWVzDQogICAgICovDQogICAgcHJpdmF0ZSBJdGVtU3RhY2sgY3JlYXRlUGxheWVyU2t1bGwoUGxheWVyIHBsYXllcikgew0KICAgICAgICBJdGVtU3RhY2sgc2t1bGwgPSBTa3VsbFV0aWxzLmNyZWF0ZVZlcnNpb25Bd2FyZVBsYXllckhlYWQocGxheWVyKTsNCiAgICAgICAgaWYgKHNrdWxsID09IG51bGwgfHwgIVZlcnNpb25VdGlscy5pc1BsYXllckhlYWQoc2t1bGwpKSB7DQogICAgICAgICAgICBwbHVnaW4uZ2V0TG9nZ2VyKCkud2FybmluZygiW0RFQlVHIC0gVG9wR1VJXSBGYWlsZWQgdG8gY3JlYXRlIHBsYXllciBoZWFkIGZvciAiICsgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICBza3VsbCA9IFZlcnNpb25VdGlscy5nZXRYTWF0ZXJpYWxJdGVtU3RhY2soIlNLRUxFVE9OX1NLVUxMIik7DQogICAgICAgIH0NCiAgICAgICAgU2t1bGxNZXRhIG1ldGEgPSAoU2t1bGxNZXRhKSBza3VsbC5nZXRJdGVtTWV0YSgpOw0KICAgICAgICBpZiAobWV0YSAhPSBudWxsKSB7DQogICAgICAgICAgICBTdHJpbmcgbmFtZSA9IGNvbmZpZy5nZXRTdHJpbmcoIlBsdWdpbi1JdGVtcy5QbGF5ZXItU2t1bGwuTmFtZSIsICImZSVwbGF5ZXIlIikNCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIiVwbGF5ZXIlIiwgcGxheWVyLmdldE5hbWUoKSk7DQogICAgICAgICAgICBtZXRhLnNldERpc3BsYXlOYW1lKENoYXRDb2xvci50cmFuc2xhdGVBbHRlcm5hdGVDb2xvckNvZGVzKCcmJywgbmFtZSkpOw0KICAgICAgICAgICAgTGlzdDxTdHJpbmc+IGxvcmUgPSBjb25maWcuZ2V0U3RyaW5nTGlzdCgiUGx1Z2luLUl0ZW1zLlBsYXllci1Ta3VsbC5Mb3JlIik7DQogICAgICAgICAgICBpZiAoIWxvcmUuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgUGxhY2Vob2xkZXJDb250ZXh0IGNvbnRleHQgPSBQbGFjZWhvbGRlckNvbnRleHQuY3JlYXRlKCkucGxheWVyKHBsYXllcik7DQogICAgICAgICAgICAgICAgTGlzdDxTdHJpbmc+IHByb2Nlc3NlZExvcmUgPSBQbGFjZWhvbGRlcnMuYXBwbHkobG9yZSwgY29udGV4dCk7DQogICAgICAgICAgICAgICAgbWV0YS5zZXRMb3JlKHByb2Nlc3NlZExvcmUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKGNvbmZpZy5nZXRCb29sZWFuKCJQbHVnaW4tSXRlbXMuUGxheWVyLVNrdWxsLkVuY2hhbnRtZW50LUdsb3ciLCBmYWxzZSkpIHsNCiAgICAgICAgICAgICAgICBtZXRhLmFkZEVuY2hhbnQoRW5jaGFudG1lbnQuRFVSQUJJTElUWSwgMSwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgbWV0YS5hZGRJdGVtRmxhZ3MoSXRlbUZsYWcuSElERV9FTkNIQU5UUyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBza3VsbC5zZXRJdGVtTWV0YShtZXRhKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gc2t1bGw7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSGFuZGxlcyBjbGlja3MgaW4gdGhlIFRvcEdVSQ0KICAgICAqIC8vIG5vdGU6IFByZXZlbnRzIGl0ZW0gbW92ZW1lbnQgYW5kIHByb2Nlc3NlcyBidXR0b24gYWN0aW9ucywgaW5jbHVkaW5nIGZpbHRlciBjeWNsaW5nIGFuZCBzb3J0IHRvZ2dsaW5nDQogICAgICovDQogICAgQEV2ZW50SGFuZGxlcg0KICAgIHB1YmxpYyB2b2lkIG9uSW52ZW50b3J5Q2xpY2soSW52ZW50b3J5Q2xpY2tFdmVudCBldmVudCkgew0KICAgICAgICBpZiAoIShldmVudC5nZXRXaG9DbGlja2VkKCkgaW5zdGFuY2VvZiBQbGF5ZXIpKSByZXR1cm47DQogICAgICAgIFBsYXllciBwbGF5ZXIgPSAoUGxheWVyKSBldmVudC5nZXRXaG9DbGlja2VkKCk7DQogICAgICAgIEludmVudG9yeSBpbnZlbnRvcnkgPSBldmVudC5nZXRJbnZlbnRvcnkoKTsNCiAgICAgICAgRGVidWdNYW5hZ2VyIGRlYnVnTWFuYWdlciA9IHBsdWdpbi5nZXREZWJ1Z01hbmFnZXIoKTsNCg0KICAgICAgICAvLyBWYWxpZGF0ZSBpbnZlbnRvcnkNCiAgICAgICAgSW52ZW50b3J5IHRyYWNrZWRJbnZlbnRvcnkgPSBvcGVuSW52ZW50b3JpZXMuZ2V0T3JEZWZhdWx0KHBsYXllci5nZXRVbmlxdWVJZCgpLCBudWxsKTsNCiAgICAgICAgaWYgKHRyYWNrZWRJbnZlbnRvcnkgPT0gbnVsbCB8fCAhdHJhY2tlZEludmVudG9yeS5lcXVhbHMoaW52ZW50b3J5KSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgZXZlbnQuc2V0Q2FuY2VsbGVkKHRydWUpOw0KICAgICAgICBJdGVtU3RhY2sgY2xpY2tlZEl0ZW0gPSBldmVudC5nZXRDdXJyZW50SXRlbSgpOw0KICAgICAgICBpZiAoY2xpY2tlZEl0ZW0gPT0gbnVsbCB8fCBldmVudC5nZXRTbG90VHlwZSgpID09IG51bGwpIHJldHVybjsNCg0KICAgICAgICBpbnQgc2xvdCA9IGV2ZW50LmdldFJhd1Nsb3QoKTsNCiAgICAgICAgVVVJRCBwbGF5ZXJVVUlEID0gcGxheWVyLmdldFVuaXF1ZUlkKCk7DQogICAgICAgIGludCBjdXJyZW50UGFnZSA9IG9wZW5QYWdlcy5nZXRPckRlZmF1bHQocGxheWVyVVVJRCwgMCk7DQoNCiAgICAgICAgZGVidWdNYW5hZ2VyLmJ1ZmZlckRlYnVnKCJUb3BHVUkgY2xpY2sgYnkgIiArIHBsYXllci5nZXROYW1lKCkgKyAiIGluIHNsb3QgIiArIHNsb3QpOw0KDQogICAgICAgIGlmIChzbG90ID09IDQ4ICYmIGludmVudG9yeS5nZXRJdGVtKDQ4KSAhPSBudWxsKSB7DQogICAgICAgICAgICAvLyBQcmV2aW91cyBQYWdlDQogICAgICAgICAgICBvcGVuVG9wR1VJKHBsYXllciwgY3VycmVudFBhZ2UgLSAxLCBjdXJyZW50RmlsdGVyVHlwZSwgc29ydEhpZ2hUb0xvdyk7DQogICAgICAgIH0gZWxzZSBpZiAoc2xvdCA9PSA0OSkgew0KICAgICAgICAgICAgLy8gQ2xvc2UNCiAgICAgICAgICAgIHBsYXllci5jbG9zZUludmVudG9yeSgpOw0KICAgICAgICB9IGVsc2UgaWYgKHNsb3QgPT0gNTAgJiYgaW52ZW50b3J5LmdldEl0ZW0oNTApICE9IG51bGwpIHsNCiAgICAgICAgICAgIC8vIE5leHQgUGFnZQ0KICAgICAgICAgICAgb3BlblRvcEdVSShwbGF5ZXIsIGN1cnJlbnRQYWdlICsgMSwgY3VycmVudEZpbHRlclR5cGUsIHNvcnRIaWdoVG9Mb3cpOw0KICAgICAgICB9IGVsc2UgaWYgKHNsb3QgPT0gNSkgew0KICAgICAgICAgICAgLy8gRmlsdGVyIEJ1dHRvbg0KICAgICAgICAgICAgaWYgKGV2ZW50LmdldENsaWNrKCkgPT0gQ2xpY2tUeXBlLkxFRlQpIHsNCiAgICAgICAgICAgICAgICBjdXJyZW50RmlsdGVyVHlwZSA9IEZpbHRlclR5cGUudmFsdWVzKClbKGN1cnJlbnRGaWx0ZXJUeXBlLm9yZGluYWwoKSArIDEpICUgRmlsdGVyVHlwZS52YWx1ZXMoKS5sZW5ndGhdOw0KICAgICAgICAgICAgICAgIGRlYnVnTWFuYWdlci5idWZmZXJEZWJ1ZygiW0RFQlVHIC0gVG9wR1VJXSBGaWx0ZXIgY3ljbGVkIHRvICIgKyBjdXJyZW50RmlsdGVyVHlwZSArICIgYnkgIiArIHBsYXllci5nZXROYW1lKCkpOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5nZXRDbGljaygpID09IENsaWNrVHlwZS5SSUdIVCkgew0KICAgICAgICAgICAgICAgIHNvcnRIaWdoVG9Mb3cgPSAhc29ydEhpZ2hUb0xvdzsNCiAgICAgICAgICAgICAgICBkZWJ1Z01hbmFnZXIuYnVmZmVyRGVidWcoIltERUJVRyAtIFRvcEdVSV0gU29ydCB0b2dnbGVkIHRvICIgKyAoc29ydEhpZ2hUb0xvdyA/ICJIaWdo4oaSTG93IiA6ICJMb3fihpJIaWdoIikgKyAiIGJ5ICIgKyBwbGF5ZXIuZ2V0TmFtZSgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIG9wZW5Ub3BHVUkocGxheWVyLCAwLCBjdXJyZW50RmlsdGVyVHlwZSwgc29ydEhpZ2hUb0xvdyk7DQogICAgICAgIH0NCg0KICAgICAgICBwbGF5ZXIudXBkYXRlSW52ZW50b3J5KCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2xlYW5zIHVwIHdoZW4gdGhlIGludmVudG9yeSBpcyBjbG9zZWQNCiAgICAgKiAvLyBub3RlOiBSZW1vdmVzIHBsYXllciBmcm9tIHRyYWNraW5nIG1hcHMNCiAgICAgKi8NCiAgICBARXZlbnRIYW5kbGVyDQogICAgcHVibGljIHZvaWQgb25JbnZlbnRvcnlDbG9zZShJbnZlbnRvcnlDbG9zZUV2ZW50IGV2ZW50KSB7DQogICAgICAgIGlmICghKGV2ZW50LmdldFBsYXllcigpIGluc3RhbmNlb2YgUGxheWVyKSkgcmV0dXJuOw0KICAgICAgICBQbGF5ZXIgcGxheWVyID0gKFBsYXllcikgZXZlbnQuZ2V0UGxheWVyKCk7DQogICAgICAgIFVVSUQgcGxheWVyVVVJRCA9IHBsYXllci5nZXRVbmlxdWVJZCgpOw0KICAgICAgICBpZiAob3BlbkludmVudG9yaWVzLmNvbnRhaW5zS2V5KHBsYXllclVVSUQpKSB7DQogICAgICAgICAgICBvcGVuUGFnZXMucmVtb3ZlKHBsYXllclVVSUQpOw0KICAgICAgICAgICAgb3BlbkludmVudG9yaWVzLnJlbW92ZShwbGF5ZXJVVUlEKTsNCiAgICAgICAgfQ0KICAgIH0NCn0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAByZXNvdXJjZXMvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNzc3IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMDAwMDAgMTUwMjYzNDczMTIgMDExMjQ1ACA1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJlc291cmNlcy9Cb3VudHlUZWFtQ2hlY2tzLnltbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAwNzI0MCAxNTAyNDQyNDEyNiAwMTUyMDAAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIyBCb3VudHkgVGVhbSBDaGVja3MgQ29uZmlndXJhdGlvbg0KIw0KIyBUaGlzIGZpbGUgZGVmaW5lcyBjaGVja3MgdG8gaWRlbnRpZnkgaWYgcGxheWVycyBhcmUgaW4gdGhlIHNhbWUgdGVhbSwgcGFydHksIGZhY3Rpb24sIG9yIGdhbmcuDQojIFVzZSB0aGVzZSBjaGVja3MgdG8gcHJldmVudCBhY3Rpb25zIGxpa2UgcGxhY2luZyBvciBjbGFpbWluZyBib3VudGllcyB3aXRoaW4gdGhlIHNhbWUgZ3JvdXAuDQojDQojIENoZWNrIHR5cGVzOg0KIyAtIHNjb3JlYm9hcmQ6IENoZWNrcyBzY29yZWJvYXJkIHRlYW0gbWVtYmVyc2hpcCAoZS5nLiwgc2FtZSB0ZWFtIG5hbWUpLg0KIyAtIHBlcm1pc3Npb246IFZlcmlmaWVzIGEgc2hhcmVkIHBlcm1pc3Npb24gbm9kZSAoZS5nLiwgdGVhbS48bmFtZT4ubWVtYmVyKS4NCiMgLSBjb21tYW5kOiBSdW5zIGEgY29tbWFuZCBhbmQgdXNlcyBhIHJlZ2V4IHRvIHBhcnNlIGdyb3VwIGluZm8gZnJvbSB0aGUgb3V0cHV0Lg0KIw0KIyBDdXN0b21pemUgY29tbWFuZHMsIHJlZ2V4IHBhdHRlcm5zLCBhbmQgbm9kZXMgYmFzZWQgb24geW91ciBwbHVnaW5zLg0KIw0KIyBOb3RlOiBDb21tYW5kLWJhc2VkIGNoZWNrcyByZXF1aXJlIGN1c3RvbSBjb21tYW5kIG91dHB1dCBwYXJzaW5nLCB3aGljaCBpcyBub3QgZnVsbHkgaW1wbGVtZW50ZWQNCiMgaW4gdGhlIHByb3ZpZGVkIEJvdW50eVRlYW1DaGVjayBjbGFzcy4gSW1wbGVtZW50IGV4ZWN1dGVDb21tYW5kQW5kUGFyc2UgZm9yIGZ1bGwgZnVuY3Rpb25hbGl0eS4NCg0KZ3JvdXAtY2hlY2tzOg0KICAjIFRlYW0gUGx1Z2lucw0KICBzaW1wbGV0ZWFtcy1zY29yZWJvYXJkOg0KICAgIHR5cGU6IHNjb3JlYm9hcmQNCiAgICB0ZWFtLXByZWZpeDogInRlYW1fIg0KICAgIGVycm9yLW1lc3NhZ2U6ICImY1lvdSBjYW4ndCB0YXJnZXQgJXRhcmdldCUgb24geW91ciB0ZWFtISINCiAgICAjIENoZWNrcyBzY29yZWJvYXJkIHRlYW1zIHdpdGggYSAndGVhbV8nIHByZWZpeCwgY29tbW9uIGZvciBTaW1wbGVUZWFtcw0KICBiZXR0ZXJ0ZWFtcy1zY29yZWJvYXJkOg0KICAgIHR5cGU6IHNjb3JlYm9hcmQNCiAgICB0ZWFtLXByZWZpeDogImJ0XyINCiAgICBlcnJvci1tZXNzYWdlOiAiJmNZb3UgY2FuJ3QgdGFyZ2V0ICV0YXJnZXQlIG9uIHlvdXIgdGVhbSEiDQogICAgIyBDaGVja3Mgc2NvcmVib2FyZCB0ZWFtcyB3aXRoIGEgJ2J0XycgcHJlZml4LCB1c2VkIGJ5IEJldHRlclRlYW1zDQogIGd1aWxkcy1jb21tYW5kOg0KICAgIHR5cGU6IGNvbW1hbmQNCiAgICBjb21tYW5kOiAiZ3VpbGQgaW5mbyAlcGxheWVyJSINCiAgICByZWdleDogIkd1aWxkOiAoLiopIg0KICAgIGVycm9yLW1lc3NhZ2U6ICImY1lvdSBjYW4ndCB0YXJnZXQgJXRhcmdldCUgaW4geW91ciBndWlsZCEiDQogICAgIyBQYXJzZXMgZ3VpbGQgbmFtZSBmcm9tIC9ndWlsZCBpbmZvIGNvbW1hbmQgb3V0cHV0DQoNCiAgIyBQYXJ0eSBQbHVnaW5zDQogIHBhcnR5Z2FtZXN4LWNvbW1hbmQ6DQogICAgdHlwZTogY29tbWFuZA0KICAgIGNvbW1hbmQ6ICJwYXJ0eXggaW5mbyAlcGxheWVyJSINCiAgICByZWdleDogIlBhcnR5OiAoLiopIg0KICAgIGVycm9yLW1lc3NhZ2U6ICImY1lvdSBjYW4ndCB0YXJnZXQgJXRhcmdldCUgaW4geW91ciBwYXJ0eSEiDQogICAgIyBQYXJzZXMgcGFydHkgbmFtZSBmcm9tIC9wYXJ0eXggaW5mbyBjb21tYW5kIG91dHB1dCwgYmFzZWQgb24gUGFydHkgR2FtZXMgWCBHVUkgc2V0dXANCiAgbWluaWdhbWVzbGliLXNjb3JlYm9hcmQ6DQogICAgdHlwZTogc2NvcmVib2FyZA0KICAgIHRlYW0tcHJlZml4OiAibWdsaWJfIg0KICAgIGVycm9yLW1lc3NhZ2U6ICImY1lvdSBjYW4ndCB0YXJnZXQgJXRhcmdldCUgaW4geW91ciBwYXJ0eSEiDQogICAgIyBDaGVja3Mgc2NvcmVib2FyZCB0ZWFtcyB3aXRoIGEgJ21nbGliXycgcHJlZml4LCB1c2VkIGJ5IE1pbmlnYW1lc0xpYiBmb3IgdGVhbS1iYXNlZCBtaW5pZ2FtZXMNCiAgbWluaWdhbWVwbHVnaW4tY29tbWFuZDoNCiAgICB0eXBlOiBjb21tYW5kDQogICAgY29tbWFuZDogIm1wIGluZm8gJXBsYXllciUiDQogICAgcmVnZXg6ICJUZWFtOiAoLiopIg0KICAgIGVycm9yLW1lc3NhZ2U6ICImY1lvdSBjYW4ndCB0YXJnZXQgJXRhcmdldCUgaW4geW91ciB0ZWFtISINCiAgICAjIFBhcnNlcyB0ZWFtIG5hbWUgZnJvbSAvbXAgaW5mbyBjb21tYW5kIG91dHB1dCwgcmVmbGVjdGluZyBNaW5pZ2FtZSBQbHVnaW4ncyBjb21tYW5kLWRyaXZlbiBldmVudHMNCg0KICAjIEZhY3Rpb24gUGx1Z2lucw0KICBpbXByb3ZlZGZhY3Rpb25zLWNvbW1hbmQ6DQogICAgdHlwZTogY29tbWFuZA0KICAgIGNvbW1hbmQ6ICJmIHdobyAlcGxheWVyJSINCiAgICByZWdleDogIkZhY3Rpb246ICguKikiDQogICAgZXJyb3ItbWVzc2FnZTogIiZjWW91IGNhbid0IHRhcmdldCAldGFyZ2V0JSBpbiB5b3VyIGZhY3Rpb24hIg0KICAgICMgUGFyc2VzIGZhY3Rpb24gbmFtZSBmcm9tIC9mIHdobyBjb21tYW5kIG91dHB1dCwgdXNlZCBieSBJbXByb3ZlZCBGYWN0aW9ucw0KICBmYWN0aW9ucy1jb21tYW5kOg0KICAgIHR5cGU6IGNvbW1hbmQNCiAgICBjb21tYW5kOiAiZiB3aG8gJXBsYXllciUiDQogICAgcmVnZXg6ICJGYWN0aW9uOiAoLiopIg0KICAgIGVycm9yLW1lc3NhZ2U6ICImY1lvdSBjYW4ndCB0YXJnZXQgJXRhcmdldCUgaW4geW91ciBmYWN0aW9uISINCiAgICAjIFBhcnNlcyBmYWN0aW9uIG5hbWUgZnJvbSAvZiB3aG8gY29tbWFuZCBvdXRwdXQsIHVzZWQgYnkgRmFjdGlvbnMvU2FiZXJGYWN0aW9ucw0KICBzaW1wbGVmYWN0aW9ucy1zY29yZWJvYXJkOg0KICAgIHR5cGU6IHNjb3JlYm9hcmQNCiAgICB0ZWFtLXByZWZpeDogInNmYWNfIg0KICAgIGVycm9yLW1lc3NhZ2U6ICImY1lvdSBjYW4ndCB0YXJnZXQgJXRhcmdldCUgaW4geW91ciBmYWN0aW9uISINCiAgICAjIENoZWNrcyBzY29yZWJvYXJkIHRlYW1zIHdpdGggYSAnc2ZhY18nIHByZWZpeCwgdXNlZCBieSBTaW1wbGUgRmFjdGlvbnMNCg0KICAjIEdhbmcgUGx1Z2lucw0KICBteWNodW5rLWdhbmdsYW5kcy1jb21tYW5kOg0KICAgIHR5cGU6IGNvbW1hbmQNCiAgICBjb21tYW5kOiAiZ2FuZyBpbmZvICVwbGF5ZXIlIg0KICAgIHJlZ2V4OiAiR2FuZzogKC4qKSINCiAgICBlcnJvci1tZXNzYWdlOiAiJmNZb3UgY2FuJ3QgdGFyZ2V0ICV0YXJnZXQlIGluIHlvdXIgZ2FuZyEiDQogICAgIyBQYXJzZXMgZ2FuZyBuYW1lIGZyb20gL2dhbmcgaW5mbyBjb21tYW5kIG91dHB1dCwgdXNlZCBieSBNeUNodW5rICsgR2FuZ0xhbmRzDQogIG15Z2FuZ3MtcGVybWlzc2lvbjoNCiAgICB0eXBlOiBwZXJtaXNzaW9uDQogICAgbm9kZTogImdhbmcuJWdhbmdfaWQlLm1lbWJlciINCiAgICBlcnJvci1tZXNzYWdlOiAiJmNZb3UgY2FuJ3QgdGFyZ2V0ICV0YXJnZXQlIGluIHlvdXIgZ2FuZyEiDQogICAgIyBDaGVja3MgaWYgcGxheWVycyBzaGFyZSBhIGdhbmctc3BlY2lmaWMgcGVybWlzc2lvbiwgdXNlZCBieSBNeUdhbmdzDQogIGdhbmdlbGl0ZS1jb21tYW5kOg0KICAgIHR5cGU6IGNvbW1hbmQNCiAgICBjb21tYW5kOiAiZ2FuZ2VsaXRlIGluZm8gJXBsYXllciUiDQogICAgcmVnZXg6ICJHYW5nOiAoLiopIg0KICAgIGVycm9yLW1lc3NhZ2U6ICImY1lvdSBjYW4ndCB0YXJnZXQgJXRhcmdldCUgaW4geW91ciBnYW5nISINCiAgICAjIFBhcnNlcyBnYW5nIG5hbWUgZnJvbSAvZ2FuZ2VsaXRlIGluZm8gY29tbWFuZCBvdXRwdXQsIHVzZWQgYnkgR2FuZ0VsaXRlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJlc291cmNlcy9jb25maWcueW1sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAxMTQyMCAxNTAyNjMwNTQyNSAwMTMyMzIAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBNeVNRTCBDb25maWd1cmF0aW9uDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQpteXNxbDoNCiAgdXNlLW15c3FsOiBmYWxzZQ0KICBob3N0OiBsb2NhbGhvc3QNCiAgcG9ydDogMzMwNg0KICBkYXRhYmFzZTogYm91bnRpZXNwbHVzDQogIHVzZXJuYW1lOiByb290DQogIHBhc3N3b3JkOiAiIg0KICBkYXRhLW1pZ3JhdGVkOiBmYWxzZQ0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBDdXN0b20gUGxhY2Vob2xkZXJzIC0gQ3VzdG9taXplIHRoZSB3YXkgcGxhY2Vob2xkZXJzIHJlc29sdmUNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmN1c3RvbS1wbGFjZWhvbGRlcnM6DQogIGJvdW50eS10YXJnZXQtZmFsbGJhY2s6ICJOb25lIg0KICBib3VudHktc3RhdHVzLW5vLWV4cGlyYXRpb246ICImZiZLfHx8ICY0RGVhdGggQ29udHJhY3QgJmYmS3x8fCINCiAgYW5vbnltb3VzLXNwb25zb3I6ICIma3x8fHx8fHwiDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIERlYnVnIC8gR2VuZXJhbCBCb3VudHkgU2V0dGluZ3MNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmRlYnVnLWVuYWJsZWQ6IHRydWUNCnJlc3RyaWN0LXNhbWUtaXAtYm91bnRpZXM6IGZhbHNlDQpyZXF1aXJlLXNrdWxsLXR1cm4taW46IHRydWUNCmFsbG93LW9mZmxpbmUtcGxheWVyczogdHJ1ZQ0KdXNlLXhwLWxldmVsczogZmFsc2UNCm1vbmV5Og0KICBhbGxvdy16ZXJvLWRvbGxhci1ib3VudGllczogdHJ1ZQ0KICBtaW4tYm91bnR5LWFtb3VudDogMTAwDQogIG1heC1ib3VudHktYW1vdW50OiAxMDAwMDAwDQp0aW1lOg0KICBhbGxvdy10aW1lOiB0cnVlDQogIHJlcXVpcmUtdGltZTogZmFsc2UNCiAgZGVmYXVsdC1ib3VudHktZHVyYXRpb246IDE0NDANCiAgbWluLWJvdW50eS10aW1lOiAzNjAwDQogIG1heC1ib3VudHktdGltZTogODY0MDANCnNob3A6DQogIGVuYWJsZS1zaG9wOiB0cnVlDQogIGFsbG93LWV4cGlyZWQtc2t1bGxzOiB0cnVlDQogIHVzZS1zaG9wLWd1aS1wbHVzOiBmYWxzZQ0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBBbm9ueW1vdXMgQm91bnRpZXMgU2V0dGluZ3MNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmFub255bW91cy1ib3VudGllczoNCiAgZW5hYmxlZDogdHJ1ZQ0KICBiYXNlLXBlcmNlbnRhZ2U6IDE1LjANCiAgbWluaW11bS1jb3N0OiA1MC4wDQogIG1heGltdW0tY29zdDogNTAwMC4wDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIFRheCBTZXR0aW5ncw0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KYm91bnR5LXBsYWNlLXRheC1yYXRlOiAxMC4wDQpib3VudHktY2FuY2VsLXRheC1yYXRlOiAxMC4wDQp0YXgtdG90YWwtdmFsdWU6IGZhbHNlDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIFRhYmxpc3QgU2V0dGluZ3MNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCnRhYmxpc3QtbW9kaWZpY2F0aW9uOg0KICBlbmFibGVkOiB0cnVlDQogIGZvcm1hdDogIiY0WyAmYSVib3VudGllc3BsdXNfdG90YWxfcG9vbCUgJmEmbygmYSZvKyAlYm91bnRpZXNwbHVzX3Bvb2xfaW5jcmVhc2VfcGVyY2VudCUgJSZhJm8pICY0XSAlcGxheWVyX25hbWUlIg0KICBtb3ZlLWJvb3N0ZWQtdG8tdG9wOiB0cnVlDQogIGJvb3N0ZWQtZm9ybWF0OiAiJjZbQm9vc3RlZCAlYm91bnRpZXNwbHVzX2Jvb3N0JXhdICZhJWJvdW50aWVzcGx1c190b3RhbF9wb29sJSAmNl0gJXBsYXllcl9uYW1lJSINCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiMgQmxhY2tsaXN0IEl0ZW1zIGZyb20gYmVpbmcgYWRkZWQgdG8gYSBib3VudHkgKFN1cHBvcnRzIE5CVCB0YWdzIGZvciBDdXN0b20gSXRlbXMNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmJsYWNrbGlzdGVkLWl0ZW1zOg0KICAtICJESUFNT05EX1NXT1JEIg0KICAtICJORVRIRVJJVEVfQVhFIg0KYmxhY2tsaXN0ZWQtbmJ0LWl0ZW1zOg0KICAtIG5idF9rZXk6ICJpdGVtX3R5cGUiDQogICAgbmJ0X3ZhbHVlOiAidHJhY2tlciINCiAgLSBuYnRfa2V5OiAiaXRlbV90eXBlIg0KICAgIG5idF92YWx1ZTogInVhdiINCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiMgQ3VzdG9taXplIFNrdWxsIHRoYXQgZHJvcHMgd2hlbiBhIHBsYXllciB3aXRoIGJvdW50eSBpcyBraWxsZWQNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmJvdW50eS1za3VsbDoNCiAgbmFtZTogIiZjJmzimKAgJjRCb3VudHkgSGVhZCBvZiAldGFyZ2V0JSAmYyZs4pigIg0KICBsb3JlOg0KICAgIC0gIiY3VGhpcyBpcyB0aGUgaGVhZCBvZiBhIHdhbnRlZCBjcmltaW5hbCEiDQogICAgLSAiJjdQbGF5ZXI6ICZlJXRhcmdldCUiDQogICAgLSAiJjdUb3RhbCBCb3VudHk6ICZhJCV0b3RhbF9ib3VudHklIg0KICAgIC0gIiY3Qm91bnRpZXM6ICZmJWJvdW50eV9jb3VudCUiDQogICAgLSAiJjdLaWxsZWQgYnk6ICZjJWtpbGxlciUiDQogICAgLSAiJjdUaW1lIG9mIERlYXRoOiAmNiVkZWF0aF90aW1lJSINCiAgICAtICIiDQogICAgLSAiJmVSaWdodC1jbGljayB0byB0dXJuIGluIGZvciByZXdhcmRzISINCiAgICAtICImY1dhcm5pbmc6IEhlYWQgd2lsbCBleHBpcmUgaW4gMjQgaG91cnMiDQogIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiMgQm9vc3RlZCBCb3VudGllcyBTZXR0aW5ncw0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KYm9vc3RlZC1ib3VudGllczoNCiAgZW5hYmxlZDogdHJ1ZQ0KICBib29zdC1pbnRlcnZhbDogMTIwDQogIG11bHRpcGxpZXItY2hhbmNlczoNCiAgICAiMi4wIjogNTAuMA0KICAgICIzLjAiOiAzMC4wDQogICAgIjUuMCI6IDIwLjANCiAgYm9vc3RlZC10aXRsZTogIiZhQm91bnR5IEJvb3N0ZWQhIg0KICBib29zdGVkLXN1YnRpdGxlOiAiJmUldGFyZ2V0JSAmYWJ5ICZlJW11bHRpcGxpZXIleCINCiAgZW5hYmxlLXRpdGxlLXN1YnRpdGxlOiB0cnVlDQogIGJvc3NiYXI6DQogICAgZW5hYmxlZDogdHJ1ZQ0KICAgIGRpc3BsYXktYmVmb3JlLWJvb3N0OiAzDQogICAgbWVzc2FnZTogIiY2TmV4dCBCb29zdGVkIEJvdW50eSBpbiAldGltZSUiDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIEZyZW56eSBNb2RlIFNldHRpbmdzDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQpmcmVuenk6DQogIGVuYWJsZWQ6IHRydWUNCiAgZnJlbnp5LWludGVydmFsOiAxODANCiAgbXVsdGlwbGllci1jaGFuY2VzOg0KICAgICIyLjAiOiA1MC4wDQogICAgIjMuMCI6IDMwLjANCiAgICAiNS4wIjogMjAuMA0KICBib3NzYmFyOg0KICAgIGVuYWJsZWQ6IHRydWUNCiAgICBkaXNwbGF5LWJlZm9yZS1mcmVuenk6IDUNCiAgICBtZXNzYWdlOiAiJmNGcmVuenkgTW9kZSBTdGFydGluZyBpbiAldGltZSUiDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIFNvdW5kIFNldHRpbmdzDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQpib3VudHktc291bmQ6DQogIGVuYWJsZWQ6IHRydWUNCiAgc291bmQ6ICJFTlRJVFlfQkxBWkVfU0hPT1QiDQogIHZvbHVtZTogMS4wDQogIHBpdGNoOiAxLjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAByZXNvdXJjZXMvR1VJcy8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNzc3IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMDAwMDAgMTUwMjY0MzEwNzEgMDEyMDUwACA1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJlc291cmNlcy9pdGVtcy55bWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAxNjczMiAxNTAyNDE3NzM0MCAwMTMxMjIAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY3VzdG9tLWl0ZW1zOg0KICB0cmFja2VyOg0KICAgIHZhbHVlOg0KICAgICAgYmFzZTogNTAuMA0KICAgICAgcGVyLXVzZTogMjAuMA0KICB1YXY6DQogICAgdmFsdWU6DQogICAgICBiYXNlOiA3NS4wDQogICAgICBwZXItdXNlOiAyNS4wDQogIGphbW1lcjoNCiAgICB2YWx1ZToNCiAgICAgIGJhc2U6IDEwMC4wDQogIGNocm9ub3Nfc2hhcmQ6DQogICAgdmFsdWU6DQogICAgICBiYXNlOiAxNTAuMA0KICBtYW51YWxfYm9vc3Q6DQogICAgdmFsdWU6DQogICAgICBiYXNlOiAyMDAuMA0KICBtYW51YWxfZnJlbnp5Og0KICAgIHZhbHVlOg0KICAgICAgYmFzZTogMzAwLjANCiAgcmV2ZXJzZV9ib3VudHk6DQogICAgdmFsdWU6DQogICAgICBiYXNlOiAyNTAuMA0KICBvdGhlcl9wbHVnaW5zOg0KICAgIGV4YW1wbGVfaXRlbToNCiAgICAgIG5idF9rZXk6ICJJdGVtc0FkZGVyOml0ZW1faWQiDQogICAgICBuYnRfdmFsdWU6ICJkcmFnb25fc3dvcmQiDQogICAgICB2YWx1ZToNCiAgICAgICAgYmFzZTogNTAwLjANCg0KdHJhY2tlcjoNCiAgaXRlbS1uYW1lOiAiJjYmbEJvdW50eSBUcmFja2VyIg0KICBpdGVtLWxvcmU6DQogICAgLSAiJjdSaWdodC1jbGljayB0byB0cmFjayB0aGUgbmVhcmVzdCBwbGF5ZXIiDQogICAgLSAiJjd3aXRoaW4gYSAmZSVyYWRpdXMlICY3YmxvY2sgcmFkaXVzIg0KICAgIC0gIiZjJmxVc2VzOiAmZiV1c2VzJSZjLyZmJW1heF91c2VzJSINCiAgICAtICIiDQogICAgLSAiJmVUaGlzIGNvbXBhc3Mgd2lsbCBwb2ludCB0byB5b3VyIg0KICAgIC0gIiZldGFyZ2V0IGZvciAmYSVkdXJhdGlvbiUgJmVzZWNvbmRzIg0KICAgIC0gIiINCiAgICAtICImN0dyZWF0IGZvciBodW50aW5nIGRvd24gYm91bnRpZXMhIg0KICBtYXgtdXNlczogNQ0KICBzZWFyY2gtcmFkaXVzOiAxMDAuMA0KICB0cmFja2luZy1kdXJhdGlvbjogMzANCiAgYWN0aW9uLWJhci1tZXNzYWdlOiAiJmVUcmFja2luZyB0aW1lIHJlbWFpbmluZzogJmMldGltZSVzIg0KICBtZXNzYWdlczoNCiAgICBuby10YXJnZXQ6ICImY05vIHBsYXllcnMgZm91bmQgd2l0aGluIHRyYWNraW5nIHJhbmdlISINCiAgICB0cmFja2luZy1zdGFydDogIiZhVHJhY2tlciBhY3RpdmF0ZWQhIFBvaW50aW5nIHRvIG5lYXJlc3QgcGxheWVyIGZvciAmZSVkdXJhdGlvbiUgJmFzZWNvbmRzLiINCiAgICB0cmFja2VyLWV4cGlyZWQ6ICImY1lvdXIgdHJhY2tlciBoYXMgcnVuIG91dCBvZiB1c2VzIGFuZCB3YXMgcmVtb3ZlZCEiDQogICAgYWxyZWFkeS1hY3RpdmU6ICImY1RyYWNrZXIgaXMgYWxyZWFkeSBhY3RpdmUhIg0KICAgIHRhcmdldC1sb3N0OiAiJmNUYXJnZXQgbG9zdCEgU2VhcmNoaW5nIGZvciBuZXcgdGFyZ2V0Li4uIg0KICAgIHRyYWNraW5nLWV4cGlyZWQ6ICImZVRyYWNrZXIgaGFzIGV4cGlyZWQuIg0KICAgIGphbW1lci1ibG9ja2VkOiAiJmMmbEpBTU1FRCEgJjdFbmVteSBjb3VudGVybWVhc3VyZXMgYXJlIGJsb2NraW5nIHlvdXIgdHJhY2tlciEiDQoNCnVhdjoNCiAgaXRlbS1uYW1lOiAiJjYmbFVBViBTY2FubmVyIg0KICBpdGVtLWxvcmU6DQogICAgLSAiJjdSaWdodC1jbGljayB0byBkZXBsb3kgVUFWIHNjYW5uZXIiDQogICAgLSAiJjd3aXRoaW4gYSAmZSVyYWRpdXMlICY3YmxvY2sgcmFkaXVzIg0KICAgIC0gIiZjJmxVc2VzOiAmZiV1c2VzJSZjLyZmJW1heF91c2VzJSINCiAgICAtICIiDQogICAgLSAiJmVCb3VudHkgdGFyZ2V0cyB3aWxsIGdsb3cgZm9yIg0KICAgIC0gIiZlJWR1cmF0aW9uJSAmZXNlY29uZHMgdGhyb3VnaCB3YWxscyINCiAgICAtICIiDQogICAgLSAiJjdQZXJmZWN0IGZvciB0cmFja2luZyBtYXJrZWQgdGFyZ2V0cyEiDQogIG1heC11c2VzOiAzDQogIHNlYXJjaC1yYWRpdXM6IDEwMC4wDQogIGVmZmVjdC1kdXJhdGlvbjogMzANCiAgbWVzc2FnZXM6DQogICAgbm8tdGFyZ2V0OiAiJmNObyBib3VudHkgdGFyZ2V0cyBmb3VuZCB3aXRoaW4gcmFuZ2UhIg0KICAgIHVhdi1zdGFydDogIiZhVUFWIGRlcGxveWVkISBCb3VudHkgdGFyZ2V0cyBhcmUgbm93IGdsb3dpbmcuIg0KICAgIHVhdi1leHBpcmVkOiAiJmNZb3VyIFVBViBoYXMgcnVuIG91dCBvZiB1c2VzIGFuZCB3YXMgcmVtb3ZlZCEiDQogICAgYWxyZWFkeS1hY3RpdmU6ICImY1VBViBpcyBhbHJlYWR5IGFjdGl2ZSEiDQogICAgdmVyc2lvbi1ub3Qtc3VwcG9ydGVkOiAiJmNVQVYgcmVxdWlyZXMgTWluZWNyYWZ0IDEuOSBvciBoaWdoZXIhIg0KICAgIHRhcmdldC1mb3VuZDogIiZhQm91bnR5IHRhcmdldCBkZXRlY3RlZDogJmUldGFyZ2V0JSINCiAgICBlZmZlY3QtZXhwaXJlZDogIiZlVUFWIGVmZmVjdCBoYXMgZXhwaXJlZC4iDQoNCmphbW1lcjoNCiAgaXRlbS1uYW1lOiAiJmMmbFNpZ25hbCBKYW1tZXIiDQogIGl0ZW0tbG9yZToNCiAgICAtICImN1JpZ2h0LWNsaWNrIHRvIHRvZ2dsZSBqYW1tZXIgb24vb2ZmIg0KICAgIC0gIiY3QmxvY2tzIHRyYWNrZXIgYW5kIFVBViBmdW5jdGlvbmFsaXR5Ig0KICAgIC0gIiY3d2hlbiBhY3RpdmUgYW5kIGluIGludmVudG9yeSINCiAgICAtICIiDQogICAgLSAiJmVEdXJhdGlvbjogJmElZHVyYXRpb24lICZlbWludXRlcyBvZiBhY3RpdmUgdXNlIg0KICAgIC0gIiZjQnJlYWtzIGFmdGVyIGZ1bGwgZHVyYXRpb24gaXMgY29uc3VtZWQiDQogICAgLSAiIg0KICAgIC0gIiY3UGVyZmVjdCBmb3Igc3RheWluZyBvZmYgdGhlIHJhZGFyISINCiAgamFtbWluZy1kdXJhdGlvbjogMzAwDQogIGFjdGlvbi1iYXItbWVzc2FnZTogIiZjSmFtbWVyIEFjdGl2ZTogJmUldGltZSVzIHJlbWFpbmluZyINCiAgbWVzc2FnZXM6DQogICAgamFtbWVyLWFjdGl2YXRlZDogIiZhSmFtbWVyIGFjdGl2YXRlZCEgWW91IGFyZSBub3cgcHJvdGVjdGVkIGZyb20gdHJhY2tpbmcgZm9yICZlJWR1cmF0aW9uJSAmYXNlY29uZHMuIg0KICAgIGphbW1lci1kZWFjdGl2YXRlZDogIiZjSmFtbWVyIGRlYWN0aXZhdGVkLiINCiAgICBqYW1tZXItZXhwaXJlZDogIiZjWW91ciBqYW1tZXIgaGFzIGV4cGlyZWQgYW5kIHdhcyByZW1vdmVkISINCiAgICBqYW1tZXItYmxvY2tlZDogIiZjWW91ciBhY3Rpb24gd2FzIGJsb2NrZWQgYnkgYW4gYWN0aXZlIGphbW1lciEiDQoNCnJldmVyc2UtYm91bnR5Og0KICBpdGVtLW5hbWU6ICImZCZsUmV2ZXJzZSBCb3VudHkiDQogIGl0ZW0tbG9yZToNCiAgICAtICImN1JpZ2h0LWNsaWNrIHRvIHJldmVyc2UgeW91ciBib3VudHkiDQogICAgLSAiJjdvbnRvIHRoZSBwbGF5ZXIgd2hvIGNvbnRyaWJ1dGVkIg0KICAgIC0gIiY3dGhlIG1vc3QgbW9uZXkgdG8geW91ciBib3VudHkiDQogICAgLSAiIg0KICAgIC0gIiZlVHJhbnNmZXJzIGFsbCBib3VudGllcyBmcm9tIHlvdSINCiAgICAtICImZXRvIHRoZSBoaWdoZXN0IGNvbnRyaWJ1dG9yIg0KICAgIC0gIiINCiAgICAtICImY0NoYW5jZSBvZiBmYWlsdXJlOiAmZSVtaW5fZmFpbHVyZSUlLSZlJW1heF9mYWlsdXJlJSUiDQogICAgLSAiIg0KICAgIC0gIiY3UGVyZmVjdCBmb3IgdHVybmluZyB0aGUgdGFibGVzISINCiAgY2hhbmNlOg0KICAgIGVuYWJsZWQ6IHRydWUNCiAgICBtaW4tZmFpbHVyZTogMTAuMA0KICAgIG1heC1mYWlsdXJlOiAzMC4wDQogIHNlcnZlci1icm9hZGNhc3QtbWVzc2FnZTogIiY2JmxbQk9VTlRZXSAmZSVwbGF5ZXIlICY2aGFzIHVzZWQgYSByZXZlcnNlIGJvdW50eSEgVGhlIGJvdW50eSBpcyBub3cgb24gJmUldGFyZ2V0JSY2ISINCiAgbWVzc2FnZXM6DQogICAgbm8tYm91bnR5OiAiJmNZb3UgaGF2ZSBubyBib3VudHkgdG8gcmV2ZXJzZSEiDQogICAgc3VjY2VzczogIiZhUmV2ZXJzZSBib3VudHkgc3VjY2Vzc2Z1bCEgVGhlIGJvdW50eSBoYXMgYmVlbiB0cmFuc2ZlcnJlZCB0byAmZSV0YXJnZXQlJmEuIg0KICAgIGZhaWx1cmU6ICImY1JldmVyc2UgYm91bnR5IGZhaWxlZCEgVGhlIGl0ZW0gd2FzIGNvbnN1bWVkIGJ1dCB0aGUgcmV2ZXJzYWwgZGlkIG5vdCB3b3JrLiINCg0KY2hyb25vcy1zaGFyZDoNCiAgaXRlbS1uYW1lOiAiJmImbENocm9ub3MgU2hhcmQiDQogIGl0ZW0tbG9yZToNCiAgICAtICImN1JpZ2h0LWNsaWNrIHRvIG1hbmlwdWxhdGUgdGltZSBhbmQiDQogICAgLSAiJjdkZWNyZWFzZSB5b3VyIGJvdW50eSBkdXJhdGlvbiINCiAgICAtICIiDQogICAgLSAiJmVEZWNyZWFzZSBSYW5nZTogJmElbWluX2RlY3JlYXNlJSUtJmElbWF4X2RlY3JlYXNlJSUiDQogICAgLSAiJmNGYWlsdXJlIENoYW5jZTogJmUlbWluX2ZhaWx1cmUlJS0mZSVtYXhfZmFpbHVyZSUlIg0KICAgIC0gIiZjRmFpbHVyZSBFZmZlY3Q6ICZlKyVmYWlsdXJlX2luY3JlYXNlJSUgdGltZSINCiAgICAtICIiDQogICAgLSAiJjdIYXJuZXNzIHRoZSBwb3dlciBvZiB0aW1lIGl0c2VsZiEiDQogIGRlY3JlYXNlLXJhbmdlOg0KICAgIG1pbi1wZXJjZW50OiA1LjANCiAgICBtYXgtcGVyY2VudDogMTUuMA0KICBmYWlsdXJlLXJhbmdlOg0KICAgIG1pbi1jaGFuY2U6IDE1LjANCiAgICBtYXgtY2hhbmNlOiAyNS4wDQogIGZhaWx1cmU6DQogICAgYWRkcy10aW1lOiB0cnVlDQogICAgaW5jcmVhc2UtcGVyY2VudDogMTAuMA0KICBzZXJ2ZXItYnJvYWRjYXN0LW1lc3NhZ2U6ICImNiZsW0JPVU5UWV0gJmUlcGxheWVyJSAmNnVzZWQgYSBDaHJvbm9zIFNoYXJkIGFuZCBkZWNyZWFzZWQgdGhlaXIgYm91bnR5IHRpbWUhIg0KICBtZXNzYWdlczoNCiAgICBuby1ib3VudHk6ICImY1lvdSBoYXZlIG5vIGJvdW50eSB0byBkZWNyZWFzZSEiDQogICAgc3VjY2VzczogIiZhQ2hyb25vcyBTaGFyZCBhY3RpdmF0ZWQhIFlvdXIgYm91bnR5IHRpbWUgd2FzIGRlY3JlYXNlZCBieSAmZSVwZXJjZW50YWdlJSZhJSEiDQogICAgZmFpbHVyZTogIiZjQ2hyb25vcyBTaGFyZCBmYWlsZWQhIFRoZSB0aW1lIG1hbmlwdWxhdGlvbiB3YXMgdW5zdWNjZXNzZnVsLiINCiAgICBmYWlsdXJlLXdpdGgtdGltZTogIiZjQ2hyb25vcyBTaGFyZCBiYWNrZmlyZWQhIFlvdXIgYm91bnR5IHRpbWUgd2FzIGluY3JlYXNlZCBieSAmZSVwZXJjZW50YWdlJSZjJSEiDQoNCm1hbnVhbC1ib29zdDoNCiAgaXRlbS1uYW1lOiAiJmQmbE1hbnVhbCBCb29zdCINCiAgaXRlbS1sb3JlOg0KICAgIC0gIiY3UmlnaHQtY2xpY2sgdG8gYXBwbHkgYSBtYW51YWwgYm9vc3QiDQogICAgLSAiJjd0byBhIHBsYXllcidzIGJvdW50eSByZXdhcmRzIg0KICAgIC0gIiINCiAgICAtICImZU11bHRpcGxpZXIgUmFuZ2U6ICZhJW1pbl9tdWx0aXBsaWVyJXgtJmElbWF4X211bHRpcGxpZXIleCINCiAgICAtICImZUR1cmF0aW9uIFJhbmdlOiAmYSVtaW5fdGltZSUtJmElbWF4X3RpbWUlIG1pbnV0ZXMiDQogICAgLSAiJmNGYWlsdXJlIENoYW5jZTogJmUlbWluX2ZhaWx1cmUlJS0mZSVtYXhfZmFpbHVyZSUlIg0KICAgIC0gIiINCiAgICAtICImN1BlcmZlY3QgZm9yIHJld2FyZGluZyBodW50ZXJzISINCiAgbXVsdGlwbGllci1yYW5nZToNCiAgICBtaW4tbXVsdGlwbGllcjogMS41DQogICAgbWF4LW11bHRpcGxpZXI6IDMuMA0KICB0aW1lLXJhbmdlOg0KICAgIG1pbi1taW51dGVzOiAxMA0KICAgIG1heC1taW51dGVzOiAzMA0KICBmYWlsdXJlLXJhbmdlOg0KICAgIG1pbi1jaGFuY2U6IDEwLjANCiAgICBtYXgtY2hhbmNlOiAyMC4wDQogIGNhbmNlbC1jb21tYW5kOiAiY2FuY2VsIg0KICBtZXNzYWdlczoNCiAgICBwcm9tcHQ6ICImZVR5cGUgdGhlIG5hbWUgb2YgdGhlIHBsYXllciB5b3Ugd2FudCB0byBib29zdCwgb3IgdHlwZSAnY2FuY2VsJyB0byBjYW5jZWw6Ig0KICAgIGNhbmNlbDogIiZjTWFudWFsIGJvb3N0IGNhbmNlbGxlZC4gSXRlbSByZXR1cm5lZCB0byB5b3VyIGludmVudG9yeS4iDQogICAgaW52YWxpZC1wbGF5ZXI6ICImY0ludmFsaWQgcGxheWVyIG5hbWUuIFBsZWFzZSB0cnkgYWdhaW4gb3IgdHlwZSAnY2FuY2VsJy4iDQogICAgcGxheWVyLW9mZmxpbmU6ICImY1RoYXQgcGxheWVyIGlzIGN1cnJlbnRseSBvZmZsaW5lLiBQbGVhc2UgY2hvb3NlIGFuIG9ubGluZSBwbGF5ZXIuIg0KICAgIHBsYXllci1ub3QtZm91bmQ6ICImY1BsYXllciBub3QgZm91bmQuIFBsZWFzZSB0cnkgYWdhaW4gb3IgdHlwZSAnY2FuY2VsJy4iDQogICAgYWxyZWFkeS1ib29zdGVkOiAiJmNUaGF0IHBsYXllciBhbHJlYWR5IGhhcyBhbiBhY3RpdmUgbWFudWFsIGJvb3N0ISINCiAgICBzdWNjZXNzOiAiJmFNYW51YWwgYm9vc3QgYXBwbGllZCEgJmUldGFyZ2V0JSZhIG5vdyBoYXMgYSAmZSVtdWx0aXBsaWVyJXgmYSBib29zdCBmb3IgJmUldGltZSUmYSBtaW51dGVzISINCiAgICBmYWlsdXJlOiAiJmNNYW51YWwgYm9vc3QgZmFpbGVkISBUaGUgYm9vc3QgYXBwbGljYXRpb24gd2FzIHVuc3VjY2Vzc2Z1bC4iDQogIHNlcnZlci1icm9hZGNhc3QtbWVzc2FnZTogIiY2JmxbQk9VTlRZXSAmZSVwbGF5ZXIlICY2aGFzIGFwcGxpZWQgYSBtYW51YWwgYm9vc3QgdG8gJmUldGFyZ2V0JSY2ISINCg0KbWFudWFsLWZyZW56eToNCiAgaXRlbS1pZGVudGlmaWVyOiAiTUFOVUFMX0ZSRU5aWV9JVEVNIiAgIyBBZGRlZCB0byBlbnN1cmUgdW5pcXVlIGlkZW50aWZpY2F0aW9uDQogIGl0ZW0tbmFtZTogIiZjJmxNYW51YWwgRnJlbnp5Ig0KICBpdGVtLWxvcmU6DQogICAgLSAiJjdSaWdodC1jbGljayB0byBhY3RpdmF0ZSBhIG1hbnVhbCINCiAgICAtICImN2ZyZW56eSBtb2RlIGZvciBhbGwgYm91bnR5IHJld2FyZHMiDQogICAgLSAiIg0KICAgIC0gIiZlTXVsdGlwbGllciBSYW5nZTogJmMlbWluX211bHRpcGxpZXIleC0mYyVtYXhfbXVsdGlwbGllciV4Ig0KICAgIC0gIiZlRHVyYXRpb24gUmFuZ2U6ICZjJW1pbl90aW1lJS0mYyVtYXhfdGltZSUgbWludXRlcyINCiAgICAtICImY0ZhaWx1cmUgQ2hhbmNlOiAmZSVtaW5fZmFpbHVyZSUlLSZlJW1heF9mYWlsdXJlJSUiDQogICAgLSAiIg0KICAgIC0gIiZjQWZmZWN0cyBBTEwgYm91bnR5IGtpbGxzIGR1cmluZyBkdXJhdGlvbiEiDQogICAgLSAiJjdVbmxlYXNoIGNoYW9zIHVwb24gdGhlIHNlcnZlciEiDQogIGRlZmF1bHQtbXVsdGlwbGllcjogMi4wDQogIGRlZmF1bHQtdGltZS1taW51dGVzOiA1DQogIGRlZmF1bHQtZmFpbHVyZS1jaGFuY2U6IDEwLjANCiAgbXVsdGlwbGllci1yYW5nZToNCiAgICBtaW4tbXVsdGlwbGllcjogMi4wDQogICAgbWF4LW11bHRpcGxpZXI6IDQuMA0KICB0aW1lLXJhbmdlOg0KICAgIG1pbi1taW51dGVzOiA1DQogICAgbWF4LW1pbnV0ZXM6IDE1DQogIGZhaWx1cmUtcmFuZ2U6DQogICAgbWluLWNoYW5jZTogMTUuMA0KICAgIG1heC1jaGFuY2U6IDI1LjANCiAgbWVzc2FnZXM6DQogICAgc3VjY2VzczogIiZhTWFudWFsIGZyZW56eSBhY3RpdmF0ZWQhIEFsbCBib3VudHkgcmV3YXJkcyBhcmUgbm93IGJvb3N0ZWQgYnkgJmUlbXVsdGlwbGllciV4JmEgZm9yICZlJXRpbWUlJmEgbWludXRlcyEiDQogICAgZmFpbHVyZTogIiZjTWFudWFsIGZyZW56eSBmYWlsZWQhIFRoZSBmcmVuenkgYWN0aXZhdGlvbiB3YXMgdW5zdWNjZXNzZnVsLiINCiAgICBhbHJlYWR5LWFjdGl2ZTogIiZjRnJlbnp5IG1vZGUgaXMgYWxyZWFkeSBhY3RpdmUhIg0KICBzZXJ2ZXItYnJvYWRjYXN0LW1lc3NhZ2U6ICImNiZsW0JPVU5UWV0gJmUlcGxheWVyJSAmNmhhcyBhY3RpdmF0ZWQgYSBtYW51YWwgZnJlbnp5ISBBbGwgYm91bnR5IHJld2FyZHMgYXJlIGJvb3N0ZWQgYnkgJmUlbXVsdGlwbGllciV4JjYhIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcmVzb3VyY2VzL0l0ZW1WYWx1ZS55bWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDQ3NDI3IDE1MDI0MTc3MzQwIDAxMzcwMQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCiMgSXRlbSBWYWx1ZSBDb25maWd1cmF0aW9uIEZpbGUNCiMgQ29uZmlndXJlIG1vbmV0YXJ5IHZhbHVlcyBmb3IgaXRlbXMgYW5kIGVuY2hhbnRtZW50cyB3aGVuIGFkZGluZyB0aGVtIHRvIGJvdW50aWVzDQojIFRoaXMgZGV0ZXJtaW5lcyBob3cgbXVjaCBlYWNoIGl0ZW0vZW5jaGFudG1lbnQgY29udHJpYnV0ZXMgdG8gdGhlIGJvdW50eSB0b3RhbA0KDQojIERlZmF1bHQgdmFsdWUgZm9yIGl0ZW1zIG5vdCBsaXN0ZWQgYmVsb3cgKGluIG1vbmV5KQ0KZGVmYXVsdC1pdGVtLXZhbHVlOiAxMC4wDQoNCiMgRGVmYXVsdCB2YWx1ZSBtdWx0aXBsaWVyIGZvciBlbmNoYW50ZWQgaXRlbXMNCmVuY2hhbnRtZW50LW11bHRpcGxpZXI6IDEuNQ0KDQojIFNwZWNpYWwgY2FsY3VsYXRpb24gc2V0dGluZ3MNCmNhbGN1bGF0aW9uOg0KICAjIFdoZXRoZXIgdG8gYXBwbHkgZW5jaGFudG1lbnQgbXVsdGlwbGllciB0byBiYXNlIGl0ZW0gdmFsdWUNCiAgYXBwbHlfZW5jaGFudG1lbnRfbXVsdGlwbGllcl90b19iYXNlOiB0cnVlDQogIA0KICAjIFdoZXRoZXIgdG8gcm91bmQgZmluYWwgdmFsdWVzIHRvIG5lYXJlc3QgaW50ZWdlcg0KICByb3VuZF9maW5hbF92YWx1ZTogdHJ1ZQ0KICANCiAgIyBNaW5pbXVtIHZhbHVlIGFuIGl0ZW0gY2FuIGhhdmUgKHByZXZlbnRzIG5lZ2F0aXZlIHZhbHVlcyBmcm9tIGN1cnNlcykNCiAgbWluaW11bV9pdGVtX3ZhbHVlOiAxLjANCiAgDQogICMgTWF4aW11bSB2YWx1ZSBtdWx0aXBsaWVyIGZvciBhIHNpbmdsZSBpdGVtIChwcmV2ZW50cyBleHRyZW1lbHkgdmFsdWFibGUgaXRlbXMpDQogIG1heGltdW1fdmFsdWVfbXVsdGlwbGllcjogMTAwLjANCg0KIyBJdGVtIFZhbHVlcyAoTWF0ZXJpYWwgTmFtZTogVmFsdWUgaW4gTW9uZXkpDQppdGVtczoNCiAgIyBCdWlsZGluZyBCbG9ja3MNCiAgU1RPTkU6IDEuMA0KICBHUkFOSVRFOiAxLjUNCiAgUE9MSVNIRURfR1JBTklURTogMi4wDQogIERJT1JJVEU6IDEuNQ0KICBQT0xJU0hFRF9ESU9SSVRFOiAyLjANCiAgQU5ERVNJVEU6IDEuNQ0KICBQT0xJU0hFRF9BTkRFU0lURTogMi4wDQogIEdSQVNTX0JMT0NLOiAyLjANCiAgRElSVDogMS4wDQogIENPQVJTRV9ESVJUOiAxLjUNCiAgUE9EWk9MOiAzLjANCiAgQ09CQkxFU1RPTkU6IDEuNQ0KICBPQUtfUExBTktTOiAyLjANCiAgU1BSVUNFX1BMQU5LUzogMi4wDQogIEJJUkNIX1BMQU5LUzogMi4wDQogIEpVTkdMRV9QTEFOS1M6IDIuMA0KICBBQ0FDSUFfUExBTktTOiAyLjANCiAgREFSS19PQUtfUExBTktTOiAyLjANCiAgQ1JJTVNPTl9QTEFOS1M6IDMuMA0KICBXQVJQRURfUExBTktTOiAzLjANCiAgTUFOR1JPVkVfUExBTktTOiAyLjUNCiAgQ0hFUlJZX1BMQU5LUzogMi41DQogIEJBTUJPT19QTEFOS1M6IDIuNQ0KICBCQU1CT09fTU9TQUlDOiAzLjANCiAgDQogICMgT3JlcyBhbmQgTWluZXJhbHMNCiAgQ09BTF9PUkU6IDUuMA0KICBJUk9OX09SRTogMTUuMA0KICBDT1BQRVJfT1JFOiA4LjANCiAgR09MRF9PUkU6IDI1LjANCiAgUkVEU1RPTkVfT1JFOiAxMi4wDQogIExBUElTX09SRTogMjAuMA0KICBESUFNT05EX09SRTogMTAwLjANCiAgRU1FUkFMRF9PUkU6IDE1MC4wDQogIE5FVEhFUl9RVUFSVFpfT1JFOiA4LjANCiAgQU5DSUVOVF9ERUJSSVM6IDUwMC4wDQogIA0KICAjIERlZXBzbGF0ZSBPcmVzDQogIERFRVBTTEFURV9DT0FMX09SRTogNy4wDQogIERFRVBTTEFURV9JUk9OX09SRTogMjAuMA0KICBERUVQU0xBVEVfQ09QUEVSX09SRTogMTAuMA0KICBERUVQU0xBVEVfR09MRF9PUkU6IDMwLjANCiAgREVFUFNMQVRFX1JFRFNUT05FX09SRTogMTUuMA0KICBERUVQU0xBVEVfTEFQSVNfT1JFOiAyNS4wDQogIERFRVBTTEFURV9ESUFNT05EX09SRTogMTIwLjANCiAgREVFUFNMQVRFX0VNRVJBTERfT1JFOiAxODAuMA0KICANCiAgIyBSYXcgTWF0ZXJpYWxzDQogIFJBV19JUk9OOiAxNS4wDQogIFJBV19DT1BQRVI6IDguMA0KICBSQVdfR09MRDogMjUuMA0KICANCiAgIyBJbmdvdHMgYW5kIEdlbXMNCiAgQ09BTDogMy4wDQogIENIQVJDT0FMOiAyLjANCiAgSVJPTl9JTkdPVDogMjAuMA0KICBDT1BQRVJfSU5HT1Q6IDEwLjANCiAgR09MRF9JTkdPVDogMzAuMA0KICBORVRIRVJJVEVfSU5HT1Q6IDEwMDAuMA0KICBESUFNT05EOiA4MC4wDQogIEVNRVJBTEQ6IDEyMC4wDQogIExBUElTX0xBWlVMSTogNS4wDQogIFJFRFNUT05FOiAzLjANCiAgUVVBUlRaOiA1LjANCiAgDQogICMgVG9vbHMgLSBXb29kDQogIFdPT0RFTl9TV09SRDogNS4wDQogIFdPT0RFTl9QSUNLQVhFOiA4LjANCiAgV09PREVOX0FYRTogOC4wDQogIFdPT0RFTl9TSE9WRUw6IDUuMA0KICBXT09ERU5fSE9FOiA1LjANCiAgDQogICMgVG9vbHMgLSBTdG9uZQ0KICBTVE9ORV9TV09SRDogMTAuMA0KICBTVE9ORV9QSUNLQVhFOiAxNS4wDQogIFNUT05FX0FYRTogMTUuMA0KICBTVE9ORV9TSE9WRUw6IDEwLjANCiAgU1RPTkVfSE9FOiAxMC4wDQogIA0KICAjIFRvb2xzIC0gSXJvbg0KICBJUk9OX1NXT1JEOiA1MC4wDQogIElST05fUElDS0FYRTogNzUuMA0KICBJUk9OX0FYRTogNzUuMA0KICBJUk9OX1NIT1ZFTDogNTAuMA0KICBJUk9OX0hPRTogNTAuMA0KICANCiAgIyBUb29scyAtIEdvbGQNCiAgR09MREVOX1NXT1JEOiA3NS4wDQogIEdPTERFTl9QSUNLQVhFOiAxMDAuMA0KICBHT0xERU5fQVhFOiAxMDAuMA0KICBHT0xERU5fU0hPVkVMOiA3NS4wDQogIEdPTERFTl9IT0U6IDc1LjANCiAgDQogICMgVG9vbHMgLSBEaWFtb25kDQogIERJQU1PTkRfU1dPUkQ6IDIwMC4wDQogIERJQU1PTkRfUElDS0FYRTogMzAwLjANCiAgRElBTU9ORF9BWEU6IDMwMC4wDQogIERJQU1PTkRfU0hPVkVMOiAyMDAuMA0KICBESUFNT05EX0hPRTogMjAwLjANCiAgDQogICMgVG9vbHMgLSBOZXRoZXJpdGUNCiAgTkVUSEVSSVRFX1NXT1JEOiAyMDAwLjANCiAgTkVUSEVSSVRFX1BJQ0tBWEU6IDMwMDAuMA0KICBORVRIRVJJVEVfQVhFOiAzMDAwLjANCiAgTkVUSEVSSVRFX1NIT1ZFTDogMjAwMC4wDQogIE5FVEhFUklURV9IT0U6IDIwMDAuMA0KICANCiAgIyBBcm1vciAtIExlYXRoZXINCiAgTEVBVEhFUl9IRUxNRVQ6IDE1LjANCiAgTEVBVEhFUl9DSEVTVFBMQVRFOiAyNS4wDQogIExFQVRIRVJfTEVHR0lOR1M6IDIwLjANCiAgTEVBVEhFUl9CT09UUzogMTUuMA0KICANCiAgIyBBcm1vciAtIENoYWlubWFpbA0KICBDSEFJTk1BSUxfSEVMTUVUOiAzMC4wDQogIENIQUlOTUFJTF9DSEVTVFBMQVRFOiA1MC4wDQogIENIQUlOTUFJTF9MRUdHSU5HUzogNDAuMA0KICBDSEFJTk1BSUxfQk9PVFM6IDMwLjANCiAgDQogICMgQXJtb3IgLSBJcm9uDQogIElST05fSEVMTUVUOiAxMDAuMA0KICBJUk9OX0NIRVNUUExBVEU6IDIwMC4wDQogIElST05fTEVHR0lOR1M6IDE1MC4wDQogIElST05fQk9PVFM6IDEwMC4wDQogIA0KICAjIEFybW9yIC0gR29sZA0KICBHT0xERU5fSEVMTUVUOiAxNTAuMA0KICBHT0xERU5fQ0hFU1RQTEFURTogMzAwLjANCiAgR09MREVOX0xFR0dJTkdTOiAyMjUuMA0KICBHT0xERU5fQk9PVFM6IDE1MC4wDQogIA0KICAjIEFybW9yIC0gRGlhbW9uZA0KICBESUFNT05EX0hFTE1FVDogNTAwLjANCiAgRElBTU9ORF9DSEVTVFBMQVRFOiA4MDAuMA0KICBESUFNT05EX0xFR0dJTkdTOiA3MDAuMA0KICBESUFNT05EX0JPT1RTOiA0MDAuMA0KICANCiAgIyBBcm1vciAtIE5ldGhlcml0ZQ0KICBORVRIRVJJVEVfSEVMTUVUOiA1MDAwLjANCiAgTkVUSEVSSVRFX0NIRVNUUExBVEU6IDgwMDAuMA0KICBORVRIRVJJVEVfTEVHR0lOR1M6IDcwMDAuMA0KICBORVRIRVJJVEVfQk9PVFM6IDQwMDAuMA0KICANCiAgIyBTcGVjaWFsIEl0ZW1zDQogIEVMWVRSQTogMjUwMC4wDQogIFRPVEVNX09GX1VORFlJTkc6IDE1MDAuMA0KICBORVRIRVJfU1RBUjogMzAwMC4wDQogIEJFQUNPTjogNTAwMC4wDQogIENPTkRVSVQ6IDEwMDAuMA0KICBIRUFSVF9PRl9USEVfU0VBOiA4MDAuMA0KICBOQVVUSUxVU19TSEVMTDogMjAwLjANCiAgDQogICMgRW5jaGFudGVkIEJvb2tzDQogIEVOQ0hBTlRFRF9CT09LOiA1MC4wDQogIA0KICAjIEZvb2QgSXRlbXMNCiAgQVBQTEU6IDIuMA0KICBHT0xERU5fQVBQTEU6IDEwMC4wDQogIEVOQ0hBTlRFRF9HT0xERU5fQVBQTEU6IDIwMDAuMA0KICBCUkVBRDogNS4wDQogIENPT0tFRF9CRUVGOiA4LjANCiAgQ09PS0VEX1BPUktDSE9QOiA4LjANCiAgQ09PS0VEX0NISUNLRU46IDYuMA0KICBDT09LRURfQ09EOiA1LjANCiAgQ09PS0VEX1NBTE1PTjogNi4wDQogIEdPTERFTl9DQVJST1Q6IDUwLjANCiAgDQogICMgUG90aW9ucyBhbmQgQnJld2luZw0KICBQT1RJT046IDIwLjANCiAgU1BMQVNIX1BPVElPTjogMjUuMA0KICBMSU5HRVJJTkdfUE9USU9OOiAzMC4wDQogIEJSRVdJTkdfU1RBTkQ6IDE1LjANCiAgQ0FVTERST046IDI1LjANCiAgQkxBWkVfUE9XREVSOiAxMC4wDQogIEJMQVpFX1JPRDogMjAuMA0KICBHSEFTVF9URUFSOiA1MC4wDQogIE1BR01BX0NSRUFNOiAxNS4wDQogIFNQSURFUl9FWUU6IDUuMA0KICBGRVJNRU5URURfU1BJREVSX0VZRTogOC4wDQogIEdMSVNURVJJTkdfTUVMT05fU0xJQ0U6IDE1LjANCiAgDQogICMgVHJhbnNwb3J0YXRpb24NCiAgTUlORUNBUlQ6IDMwLjANCiAgQ0hFU1RfTUlORUNBUlQ6IDQwLjANCiAgRlVSTkFDRV9NSU5FQ0FSVDogNDAuMA0KICBUTlRfTUlORUNBUlQ6IDUwLjANCiAgSE9QUEVSX01JTkVDQVJUOiA4MC4wDQogIEJPQVQ6IDIwLjANCiAgT0FLX0JPQVQ6IDIwLjANCiAgU1BSVUNFX0JPQVQ6IDIwLjANCiAgQklSQ0hfQk9BVDogMjAuMA0KICBKVU5HTEVfQk9BVDogMjAuMA0KICBBQ0FDSUFfQk9BVDogMjAuMA0KICBEQVJLX09BS19CT0FUOiAyMC4wDQogIE1BTkdST1ZFX0JPQVQ6IDI1LjANCiAgQ0hFUlJZX0JPQVQ6IDI1LjANCiAgQkFNQk9PX1JBRlQ6IDI1LjANCiAgDQogICMgUmVkc3RvbmUNCiAgUkVEU1RPTkVfVE9SQ0g6IDUuMA0KICBSRURTVE9ORV9MQU1QOiAxNS4wDQogIFJFUEVBVEVSOiAxMC4wDQogIENPTVBBUkFUT1I6IDE1LjANCiAgT0JTRVJWRVI6IDIwLjANCiAgUElTVE9OOiAyNS4wDQogIFNUSUNLWV9QSVNUT046IDMwLjANCiAgRElTUEVOU0VSOiAzNS4wDQogIERST1BQRVI6IDMwLjANCiAgSE9QUEVSOiA1MC4wDQogIA0KICAjIE1vYiBEcm9wcw0KICBCT05FOiAyLjANCiAgU1RSSU5HOiAxLjANCiAgU1BJREVSX0VZRTogMy4wDQogIEdVTlBPV0RFUjogNS4wDQogIFNMSU1FQkFMTDogOC4wDQogIEVOREVSX1BFQVJMOiAyNS4wDQogIEVOREVSX0VZRTogNTAuMA0KICBQSEFOVE9NX01FTUJSQU5FOiAxNS4wDQogIFNIVUxLRVJfU0hFTEw6IDEwMC4wDQogIERSQUdPTl9CUkVBVEg6IDIwMC4wDQogIERSQUdPTl9FR0c6IDEwMDAwLjANCiAgDQogICMgTmV0aGVyIEl0ZW1zDQogIE5FVEhFUlJBQ0s6IDEuMA0KICBTT1VMX1NBTkQ6IDMuMA0KICBTT1VMX1NPSUw6IDIuMA0KICBHTE9XU1RPTkVfRFVTVDogNS4wDQogIEdMT1dTVE9ORTogMjAuMA0KICBORVRIRVJfQlJJQ0s6IDMuMA0KICBORVRIRVJfV0FSVDogOC4wDQogIENSSU1TT05fRlVOR1VTOiAxMC4wDQogIFdBUlBFRF9GVU5HVVM6IDEwLjANCiAgU0hST09NTElHSFQ6IDI1LjANCiAgV0VFUElOR19WSU5FUzogNS4wDQogIFRXSVNUSU5HX1ZJTkVTOiA1LjANCiAgDQogICMgRW5kIEl0ZW1zDQogIEVORF9TVE9ORTogNS4wDQogIFBVUlBVUl9CTE9DSzogOC4wDQogIENIT1JVU19GUlVJVDogMTAuMA0KICBQT1BQRURfQ0hPUlVTX0ZSVUlUOiAxNS4wDQogIEVORF9ST0Q6IDIwLjANCiAgU0hVTEtFUl9CT1g6IDIwMC4wDQogIFdISVRFX1NIVUxLRVJfQk9YOiAyMDAuMA0KICBPUkFOR0VfU0hVTEtFUl9CT1g6IDIwMC4wDQogIE1BR0VOVEFfU0hVTEtFUl9CT1g6IDIwMC4wDQogIExJR0hUX0JMVUVfU0hVTEtFUl9CT1g6IDIwMC4wDQogIFlFTExPV19TSFVMS0VSX0JPWDogMjAwLjANCiAgTElNRV9TSFVMS0VSX0JPWDogMjAwLjANCiAgUElOS19TSFVMS0VSX0JPWDogMjAwLjANCiAgR1JBWV9TSFVMS0VSX0JPWDogMjAwLjANCiAgTElHSFRfR1JBWV9TSFVMS0VSX0JPWDogMjAwLjANCiAgQ1lBTl9TSFVMS0VSX0JPWDogMjAwLjANCiAgUFVSUExFX1NIVUxLRVJfQk9YOiAyMDAuMA0KICBCTFVFX1NIVUxLRVJfQk9YOiAyMDAuMA0KICBCUk9XTl9TSFVMS0VSX0JPWDogMjAwLjANCiAgR1JFRU5fU0hVTEtFUl9CT1g6IDIwMC4wDQogIFJFRF9TSFVMS0VSX0JPWDogMjAwLjANCiAgQkxBQ0tfU0hVTEtFUl9CT1g6IDIwMC4wDQogIA0KICAjIE9jZWFuIEl0ZW1zDQogIFBSSVNNQVJJTkU6IDEwLjANCiAgUFJJU01BUklORV9CUklDS1M6IDE1LjANCiAgREFSS19QUklTTUFSSU5FOiAyMC4wDQogIFBSSVNNQVJJTkVfU0hBUkQ6IDguMA0KICBQUklTTUFSSU5FX0NSWVNUQUxTOiAxMi4wDQogIFNFQV9MQU5URVJOOiAzMC4wDQogIFNQT05HRTogNTAuMA0KICBXRVRfU1BPTkdFOiA0NS4wDQogIEtFTFA6IDIuMA0KICBEUklFRF9LRUxQOiAxLjANCiAgVFVSVExFX0VHRzogMjUuMA0KICBTQ1VURTogMjAuMA0KICBUVVJUTEVfSEVMTUVUOiAxMDAuMA0KICBUUklERU5UOiA4MDAuMA0KICANCiAgIyBNdXNpYyBEaXNjcw0KICBNVVNJQ19ESVNDXzEzOiAxMDAuMA0KICBNVVNJQ19ESVNDX0NBVDogMTAwLjANCiAgTVVTSUNfRElTQ19CTE9DS1M6IDEwMC4wDQogIE1VU0lDX0RJU0NfQ0hJUlA6IDEwMC4wDQogIE1VU0lDX0RJU0NfRkFSOiAxMDAuMA0KICBNVVNJQ19ESVNDX01BTEw6IDEwMC4wDQogIE1VU0lDX0RJU0NfTUVMTE9ISTogMTAwLjANCiAgTVVTSUNfRElTQ19TVEFMOiAxMDAuMA0KICBNVVNJQ19ESVNDX1NUUkFEOiAxMDAuMA0KICBNVVNJQ19ESVNDX1dBUkQ6IDEwMC4wDQogIE1VU0lDX0RJU0NfMTE6IDE1MC4wDQogIE1VU0lDX0RJU0NfV0FJVDogMTAwLjANCiAgTVVTSUNfRElTQ19PVEhFUlNJREU6IDEyMC4wDQogIE1VU0lDX0RJU0NfNTogMTIwLjANCiAgTVVTSUNfRElTQ19QSUdTVEVQOiAyMDAuMA0KICBNVVNJQ19ESVNDX1JFTElDOiAzMDAuMA0KICANCiAgIyAxLjE3KyBJdGVtcw0KICBDT1BQRVJfQkxPQ0s6IDkwLjANCiAgRVhQT1NFRF9DT1BQRVI6IDg1LjANCiAgV0VBVEhFUkVEX0NPUFBFUjogODAuMA0KICBPWElESVpFRF9DT1BQRVI6IDc1LjANCiAgQ1VUX0NPUFBFUjogOTUuMA0KICBXQVhFRF9DT1BQRVJfQkxPQ0s6IDEwMC4wDQogIExJR0hUTklOR19ST0Q6IDUwLjANCiAgU1BZR0xBU1M6IDc1LjANCiAgQU1FVEhZU1RfU0hBUkQ6IDMwLjANCiAgQU1FVEhZU1RfQ0xVU1RFUjogMTAwLjANCiAgQlVERElOR19BTUVUSFlTVDogMjAwLjANCiAgQ0FMQ0lURTogNS4wDQogIFRVRkY6IDMuMA0KICBEUklQU1RPTkVfQkxPQ0s6IDguMA0KICBQT0lOVEVEX0RSSVBTVE9ORTogNS4wDQogIE1PU1NfQkxPQ0s6IDEwLjANCiAgUk9PVEVEX0RJUlQ6IDIuMA0KICBIQU5HSU5HX1JPT1RTOiAzLjANCiAgQklHX0RSSVBMRUFGOiAxNS4wDQogIFNNQUxMX0RSSVBMRUFGOiA4LjANCiAgQVpBTEVBOiAxMi4wDQogIEZMT1dFUklOR19BWkFMRUE6IDE1LjANCiAgU1BPUkVfQkxPU1NPTTogMjUuMA0KICBHTE9XX0xJQ0hFTjogOC4wDQogIEdMT1dfSU5LX1NBQzogMjAuMA0KICBHTE9XX0lURU1fRlJBTUU6IDMwLjANCiAgR0xPV19CRVJSSUVTOiAxMC4wDQogIFBPV0RFUl9TTk9XX0JVQ0tFVDogMjUuMA0KICBBWE9MT1RMX0JVQ0tFVDogNTAuMA0KICBCVU5ETEU6IDEwMC4wDQogIENBTkRMRTogMTUuMA0KICANCiAgIyAxLjE4KyBJdGVtcw0KICBTQ1VMSzogMjAuMA0KICBTQ1VMS19WRUlOOiAxNS4wDQogIFNDVUxLX0NBVEFMWVNUOiAxMDAuMA0KICBTQ1VMS19TSFJJRUtFUjogODAuMA0KICBTQ1VMS19TRU5TT1I6IDYwLjANCiAgQ0FMSUJSQVRFRF9TQ1VMS19TRU5TT1I6IDc1LjANCiAgUkVJTkZPUkNFRF9ERUVQU0xBVEU6IDUwLjANCiAgRUNIT19TSEFSRDogMjAwLjANCiAgUkVDT1ZFUllfQ09NUEFTUzogMzAwLjANCiAgRElTQ19GUkFHTUVOVF81OiAxNTAuMA0KICANCiAgIyAxLjE5KyBJdGVtcyAoVGhlIFdpbGQgVXBkYXRlKQ0KICBNVUQ6IDIuMA0KICBQQUNLRURfTVVEOiAzLjANCiAgTVVEX0JSSUNLUzogNS4wDQogIE1VRERZX01BTkdST1ZFX1JPT1RTOiA4LjANCiAgTUFOR1JPVkVfUk9PVFM6IDYuMA0KICBNQU5HUk9WRV9MT0c6IDQuMA0KICBNQU5HUk9WRV9XT09EOiA2LjANCiAgU1RSSVBQRURfTUFOR1JPVkVfTE9HOiA1LjANCiAgU1RSSVBQRURfTUFOR1JPVkVfV09PRDogNy4wDQogIE1BTkdST1ZFX0xFQVZFUzogMi4wDQogIE1BTkdST1ZFX1BST1BBR1VMRTogMTAuMA0KICBPQ0hSRV9GUk9HTElHSFQ6IDQwLjANCiAgVkVSREFOVF9GUk9HTElHSFQ6IDQwLjANCiAgUEVBUkxFU0NFTlRfRlJPR0xJR0hUOiA0MC4wDQogIEZST0dTUEFXTjogMjAuMA0KICBUQURQT0xFX0JVQ0tFVDogMzAuMA0KICBHT0FUX0hPUk46IDUwLjANCiAgQUxMQVlfU1BBV05fRUdHOiA1MDAuMA0KICBGUk9HX1NQQVdOX0VHRzogMTAwLjANCiAgVEFEUE9MRV9TUEFXTl9FR0c6IDgwLjANCiAgV0FSREVOX1NQQVdOX0VHRzogMTAwMC4wDQogIA0KICAjIDEuMjArIEl0ZW1zIChUcmFpbHMgYW5kIFRhbGVzKQ0KICBCQU1CT09fQkxPQ0s6IDguMA0KICBTVFJJUFBFRF9CQU1CT09fQkxPQ0s6IDEwLjANCiAgQkFNQk9PX0ZFTkNFOiA2LjANCiAgQkFNQk9PX0ZFTkNFX0dBVEU6IDEyLjANCiAgQkFNQk9PX0RPT1I6IDguMA0KICBCQU1CT09fVFJBUERPT1I6IDEwLjANCiAgQkFNQk9PX1NUQUlSUzogNi4wDQogIEJBTUJPT19TTEFCOiAzLjANCiAgQkFNQk9PX0JVVFRPTjogMi4wDQogIEJBTUJPT19QUkVTU1VSRV9QTEFURTogNC4wDQogIEJBTUJPT19TSUdOOiA1LjANCiAgQkFNQk9PX0hBTkdJTkdfU0lHTjogOC4wDQogIENISVNFTEVEX0JPT0tTSEVMRjogMzAuMA0KICBERUNPUkFURURfUE9UOiAyNS4wDQogIFBPVFRFUllfU0hFUkRfQVJDSEVSOiA0MC4wDQogIFBPVFRFUllfU0hFUkRfQVJNU19VUDogNDAuMA0KICBQT1RURVJZX1NIRVJEX0JMQURFOiA0MC4wDQogIFBPVFRFUllfU0hFUkRfQlJFV0VSOiA0MC4wDQogIFBPVFRFUllfU0hFUkRfQlVSTjogNDAuMA0KICBQT1RURVJZX1NIRVJEX0RBTkdFUjogNDAuMA0KICBQT1RURVJZX1NIRVJEX0VYUExPUkVSOiA0MC4wDQogIFBPVFRFUllfU0hFUkRfRlJJRU5EOiA0MC4wDQogIFBPVFRFUllfU0hFUkRfSEVBUlQ6IDQwLjANCiAgUE9UVEVSWV9TSEVSRF9IRUFSVEJSRUFLOiA0MC4wDQogIFBPVFRFUllfU0hFUkRfSE9XTDogNDAuMA0KICBQT1RURVJZX1NIRVJEX01JTkVSOiA0MC4wDQogIFBPVFRFUllfU0hFUkRfTU9VUk5FUjogNDAuMA0KICBQT1RURVJZX1NIRVJEX1BMRU5UWTogNDAuMA0KICBQT1RURVJZX1NIRVJEX1BSSVpFOiA0MC4wDQogIFBPVFRFUllfU0hFUkRfU0hFQUY6IDQwLjANCiAgUE9UVEVSWV9TSEVSRF9TSEVMVEVSOiA0MC4wDQogIFBPVFRFUllfU0hFUkRfU0tVTEw6IDQwLjANCiAgUE9UVEVSWV9TSEVSRF9TTk9SVDogNDAuMA0KICBBUk1PUl9UUklNX0NPQVNUOiAxMDAuMA0KICBBUk1PUl9UUklNX0RVTkU6IDEwMC4wDQogIEFSTU9SX1RSSU1fRVlFOiAxMDAuMA0KICBBUk1PUl9UUklNX0hPU1Q6IDEwMC4wDQogIEFSTU9SX1RSSU1fUkFJU0VSOiAxMDAuMA0KICBBUk1PUl9UUklNX1JJQjogMTAwLjANCiAgQVJNT1JfVFJJTV9TRU5UUlk6IDEwMC4wDQogIEFSTU9SX1RSSU1fU0hBUEVSOiAxMDAuMA0KICBBUk1PUl9UUklNX1NJTEVOQ0U6IDEwMC4wDQogIEFSTU9SX1RSSU1fU05PVVQ6IDEwMC4wDQogIEFSTU9SX1RSSU1fU1BJUkU6IDEwMC4wDQogIEFSTU9SX1RSSU1fVElERTogMTAwLjANCiAgQVJNT1JfVFJJTV9WRVg6IDEwMC4wDQogIEFSTU9SX1RSSU1fV0FSRDogMTAwLjANCiAgQVJNT1JfVFJJTV9XQVlGSU5ERVI6IDEwMC4wDQogIEFSTU9SX1RSSU1fV0lMRDogMTAwLjANCiAgTkVUSEVSSVRFX1VQR1JBREVfU01JVEhJTkdfVEVNUExBVEU6IDgwMC4wDQogIFNOSUZGRVJfRUdHOiAzMDAuMA0KICBUT1JDSEZMT1dFUl9TRUVEUzogMjUuMA0KICBUT1JDSEZMT1dFUjogMzAuMA0KICBQSVRDSEVSX1BPRDogMjUuMA0KICBQSVRDSEVSX1BMQU5UOiAzMC4wDQogIEJSVVNIOiA1MC4wDQogIFNVU1BJQ0lPVVNfU0FORDogMjAuMA0KICBTVVNQSUNJT1VTX0dSQVZFTDogMjAuMA0KICANCiAgIyAxLjIxKyBJdGVtcyAoVHJpY2t5IFRyaWFscykNCiAgQ0hFUlJZX0xPRzogNC4wDQogIENIRVJSWV9XT09EOiA2LjANCiAgU1RSSVBQRURfQ0hFUlJZX0xPRzogNS4wDQogIFNUUklQUEVEX0NIRVJSWV9XT09EOiA3LjANCiAgQ0hFUlJZX1BMQU5LUzogMi41DQogIENIRVJSWV9MRUFWRVM6IDIuMA0KICBDSEVSUllfU0FQTElORzogOC4wDQogIFBJTktfUEVUQUxTOiA1LjANCiAgQ0hFUlJZX0ZFTkNFOiA2LjANCiAgQ0hFUlJZX0ZFTkNFX0dBVEU6IDEyLjANCiAgQ0hFUlJZX0RPT1I6IDguMA0KICBDSEVSUllfVFJBUERPT1I6IDEwLjANCiAgQ0hFUlJZX1NUQUlSUzogNi4wDQogIENIRVJSWV9TTEFCOiAzLjANCiAgQ0hFUlJZX0JVVFRPTjogMi4wDQogIENIRVJSWV9QUkVTU1VSRV9QTEFURTogNC4wDQogIENIRVJSWV9TSUdOOiA1LjANCiAgQ0hFUlJZX0hBTkdJTkdfU0lHTjogOC4wDQogIFRSSUFMX0tFWTogNTAwLjANCiAgT01JTk9VU19UUklBTF9LRVk6IDc1MC4wDQogIFRSSUFMX1NQQVdORVI6IDEwMDAuMA0KICBPTUlOT1VTX0JPVFRMRTogMTAwLjANCiAgV0lORF9DSEFSR0U6IDMwLjANCiAgTUFDRTogMTUwMC4wDQogIEhFQVZZX0NPUkU6IDIwMDAuMA0KICBCUkVFWkVfUk9EOiAyMDAuMA0KICBWQVVMVDogODAwLjANCiAgT01JTk9VU19WQVVMVDogMTIwMC4wDQogIFRVRkZfQlJJQ0tTOiA1LjANCiAgUE9MSVNIRURfVFVGRjogNC4wDQogIENISVNFTEVEX1RVRkY6IDguMA0KICBUVUZGX1NUQUlSUzogNC4wDQogIFRVRkZfU0xBQjogMi4wDQogIFRVRkZfV0FMTDogNi4wDQogIENISVNFTEVEX1RVRkZfQlJJQ0tTOiAxMC4wDQogIFBPTElTSEVEX1RVRkZfU1RBSVJTOiA1LjANCiAgUE9MSVNIRURfVFVGRl9TTEFCOiAzLjANCiAgUE9MSVNIRURfVFVGRl9XQUxMOiA3LjANCiAgVFVGRl9CUklDS19TVEFJUlM6IDYuMA0KICBUVUZGX0JSSUNLX1NMQUI6IDMuMA0KICBUVUZGX0JSSUNLX1dBTEw6IDguMA0KICBDSElTRUxFRF9DT1BQRVI6IDEwMC4wDQogIEVYUE9TRURfQ0hJU0VMRURfQ09QUEVSOiA5NS4wDQogIFdFQVRIRVJFRF9DSElTRUxFRF9DT1BQRVI6IDkwLjANCiAgT1hJRElaRURfQ0hJU0VMRURfQ09QUEVSOiA4NS4wDQogIFdBWEVEX0NISVNFTEVEX0NPUFBFUjogMTEwLjANCiAgV0FYRURfRVhQT1NFRF9DSElTRUxFRF9DT1BQRVI6IDEwNS4wDQogIFdBWEVEX1dFQVRIRVJFRF9DSElTRUxFRF9DT1BQRVI6IDEwMC4wDQogIFdBWEVEX09YSURJWkVEX0NISVNFTEVEX0NPUFBFUjogOTUuMA0KICBDT1BQRVJfR1JBVEU6IDgwLjANCiAgRVhQT1NFRF9DT1BQRVJfR1JBVEU6IDc1LjANCiAgV0VBVEhFUkVEX0NPUFBFUl9HUkFURTogNzAuMA0KICBPWElESVpFRF9DT1BQRVJfR1JBVEU6IDY1LjANCiAgV0FYRURfQ09QUEVSX0dSQVRFOiA5MC4wDQogIFdBWEVEX0VYUE9TRURfQ09QUEVSX0dSQVRFOiA4NS4wDQogIFdBWEVEX1dFQVRIRVJFRF9DT1BQRVJfR1JBVEU6IDgwLjANCiAgV0FYRURfT1hJRElaRURfQ09QUEVSX0dSQVRFOiA3NS4wDQogIENPUFBFUl9CVUxCOiAxMjAuMA0KICBFWFBPU0VEX0NPUFBFUl9CVUxCOiAxMTUuMA0KICBXRUFUSEVSRURfQ09QUEVSX0JVTEI6IDExMC4wDQogIE9YSURJWkVEX0NPUFBFUl9CVUxCOiAxMDUuMA0KICBXQVhFRF9DT1BQRVJfQlVMQjogMTMwLjANCiAgV0FYRURfRVhQT1NFRF9DT1BQRVJfQlVMQjogMTI1LjANCiAgV0FYRURfV0VBVEhFUkVEX0NPUFBFUl9CVUxCOiAxMjAuMA0KICBXQVhFRF9PWElESVpFRF9DT1BQRVJfQlVMQjogMTE1LjANCiAgQ1JBRlRFUjogMjAwLjANCiAgQ09QUEVSX0RPT1I6IDYwLjANCiAgRVhQT1NFRF9DT1BQRVJfRE9PUjogNTUuMA0KICBXRUFUSEVSRURfQ09QUEVSX0RPT1I6IDUwLjANCiAgT1hJRElaRURfQ09QUEVSX0RPT1I6IDQ1LjANCiAgV0FYRURfQ09QUEVSX0RPT1I6IDcwLjANCiAgV0FYRURfRVhQT1NFRF9DT1BQRVJfRE9PUjogNjUuMA0KICBXQVhFRF9XRUFUSEVSRURfQ09QUEVSX0RPT1I6IDYwLjANCiAgV0FYRURfT1hJRElaRURfQ09QUEVSX0RPT1I6IDU1LjANCiAgQ09QUEVSX1RSQVBET09SOiA1MC4wDQogIEVYUE9TRURfQ09QUEVSX1RSQVBET09SOiA0NS4wDQogIFdFQVRIRVJFRF9DT1BQRVJfVFJBUERPT1I6IDQwLjANCiAgT1hJRElaRURfQ09QUEVSX1RSQVBET09SOiAzNS4wDQogIFdBWEVEX0NPUFBFUl9UUkFQRE9PUjogNjAuMA0KICBXQVhFRF9FWFBPU0VEX0NPUFBFUl9UUkFQRE9PUjogNTUuMA0KICBXQVhFRF9XRUFUSEVSRURfQ09QUEVSX1RSQVBET09SOiA1MC4wDQogIFdBWEVEX09YSURJWkVEX0NPUFBFUl9UUkFQRE9PUjogNDUuMA0KDQogICMgTGVnYWN5IEl0ZW0gTmFtZXMgKGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSkNCiAgIyAxLjguOCAtIDEuMTIuMiBjb21wYXRpYmlsaXR5DQogIFdPT0w6IDMuMA0KICBMT0c6IDMuMA0KICBMT0cyOiAzLjANCiAgTEVBVkVTOiAxLjANCiAgTEVBVkVTMjogMS4wDQogIFNBUExJTkc6IDUuMA0KICBMT05HX0dSQVNTOiAxLjANCiAgREVBRF9CVVNIOiAxLjANCiAgWUVMTE9XX0ZMT1dFUjogMi4wDQogIFJFRF9ST1NFOiAyLjANCiAgQlJPV05fTVVTSFJPT006IDMuMA0KICBSRURfTVVTSFJPT006IDMuMA0KICBHT0xEX0JMT0NLOiAyNzAuMA0KICBJUk9OX0JMT0NLOiAxODAuMA0KICBET1VCTEVfU1RFUDogMy4wDQogIFNURVA6IDEuNQ0KICBCUklDSzogNS4wDQogIFROVDogMjAuMA0KICBCT09LU0hFTEY6IDE1LjANCiAgTU9TU1lfQ09CQkxFU1RPTkU6IDMuMA0KICBPQlNJRElBTjogMjUuMA0KICBUT1JDSDogMi4wDQogIEZJUkU6IDEuMA0KICBNT0JfU1BBV05FUjogMTAwMC4wDQogIFdPT0RfU1RBSVJTOiA2LjANCiAgQ0hFU1Q6IDIwLjANCiAgRElBTU9ORF9CTE9DSzogNzIwLjANCiAgV09SS0JFTkNIOiAxMC4wDQogIEZVUk5BQ0U6IDE1LjANCiAgTEFEREVSOiAzLjANCiAgUkFJTFM6IDguMA0KICBDT0JCTEVTVE9ORV9TVEFJUlM6IDQuMA0KICBMRVZFUjogMy4wDQogIFNUT05FX1BMQVRFOiA0LjANCiAgV09PRF9QTEFURTogNC4wDQogIFJFRFNUT05FX09SRTogMTIuMA0KICBSRURTVE9ORV9UT1JDSF9PRkY6IDUuMA0KICBTVE9ORV9CVVRUT046IDIuMA0KICBTTk9XOiAxLjANCiAgSUNFOiAyLjANCiAgU05PV19CTE9DSzogNC4wDQogIENBQ1RVUzogMy4wDQogIENMQVk6IDguMA0KICBTVUdBUl9DQU5FX0JMT0NLOiAyLjANCiAgSlVLRUJPWDogMzAuMA0KICBGRU5DRTogNi4wDQogIFBVTVBLSU46IDguMA0KICBORVRIRVJSQUNLOiAxLjANCiAgU09VTF9TQU5EOiAzLjANCiAgR0xPV1NUT05FOiAyMC4wDQogIEpBQ0tfT19MQU5URVJOOiAxMi4wDQogIENBS0VfQkxPQ0s6IDE1LjANCiAgRElPREVfQkxPQ0tfT0ZGOiAxMC4wDQogIERJT0RFX0JMT0NLX09OOiAxMC4wDQogIFRSQVBfRE9PUjogMTAuMA0KICBTTU9PVEhfQlJJQ0s6IDUuMA0KICBIVUdFX01VU0hST09NXzE6IDguMA0KICBIVUdFX01VU0hST09NXzI6IDguMA0KICBJUk9OX0ZFTkNFOiAyNS4wDQogIFRISU5fR0xBU1M6IDQuMA0KICBNRUxPTl9CTE9DSzogMTAuMA0KICBQVU1QS0lOX1NURU06IDMuMA0KICBNRUxPTl9TVEVNOiAzLjANCiAgVklORTogMi4wDQogIEZFTkNFX0dBVEU6IDEyLjANCiAgQlJJQ0tfU1RBSVJTOiA4LjANCiAgU01PT1RIX1NUQUlSUzogNi4wDQogIE1ZQ0VMOiA1LjANCiAgV0FURVJfTElMWTogNS4wDQogIE5FVEhFUl9CUklDSzogMy4wDQogIE5FVEhFUl9GRU5DRTogOC4wDQogIE5FVEhFUl9CUklDS19TVEFJUlM6IDYuMA0KICBORVRIRVJfV0FSVFM6IDguMA0KICBFTkNIQU5UTUVOVF9UQUJMRTogMTAwLjANCiAgQlJFV0lOR19TVEFORDogMTUuMA0KICBDQVVMRFJPTjogMjUuMA0KICBFTkRFUl9QT1JUQUw6IDEwMDAwLjANCiAgRU5ERVJfUE9SVEFMX0ZSQU1FOiAxMDAwLjANCiAgRU5ERVJfU1RPTkU6IDUuMA0KICBEUkFHT05fRUdHOiAxMDAwMC4wDQogIFJFRFNUT05FX0xBTVBfT0ZGOiAxNS4wDQogIFJFRFNUT05FX0xBTVBfT046IDE1LjANCiAgV09PRF9ET1VCTEVfU1RFUDogNi4wDQogIFdPT0RfU1RFUDogMy4wDQogIENPQ09BOiA4LjANCiAgU0FORFNUT05FX1NUQUlSUzogNC4wDQogIEVNRVJBTERfQkxPQ0s6IDEwODAuMA0KICBFTkRFUl9DSEVTVDogMjAwLjANCiAgVFJJUFdJUkVfSE9PSzogMTUuMA0KICBUUklQV0lSRTogMi4wDQogIEVNRVJBTERfT1JFOiAxNTAuMA0KICBTUFJVQ0VfV09PRF9TVEFJUlM6IDYuMA0KICBCSVJDSF9XT09EX1NUQUlSUzogNi4wDQogIEpVTkdMRV9XT09EX1NUQUlSUzogNi4wDQogIENPTU1BTkQ6IDUwMC4wDQogIEJFQUNPTjogNTAwMC4wDQogIENPQkJMRV9XQUxMOiAzLjANCiAgRkxPV0VSX1BPVDogOC4wDQogIENBUlJPVDogMy4wDQogIFBPVEFUTzogMy4wDQogIFdPT0RfQlVUVE9OOiAyLjANCiAgU0tVTEw6IDEwMC4wDQogIEFOVklMOiAxNTAuMA0KICBUUkFQUEVEX0NIRVNUOiAyNS4wDQogIEdPTERfUExBVEU6IDguMA0KICBJUk9OX1BMQVRFOiA2LjANCiAgUkVEU1RPTkVfQ09NUEFSQVRPUl9PRkY6IDE1LjANCiAgUkVEU1RPTkVfQ09NUEFSQVRPUl9PTjogMTUuMA0KICBEQVlMSUdIVF9ERVRFQ1RPUjogMjAuMA0KICBSRURTVE9ORV9CTE9DSzogMjcuMA0KICBRVUFSVFpfT1JFOiA4LjANCiAgSE9QUEVSOiA1MC4wDQogIFFVQVJUWl9CTE9DSzogMjAuMA0KICBRVUFSVFpfU1RBSVJTOiA4LjANCiAgQUNUSVZBVE9SX1JBSUw6IDEyLjANCiAgRFJPUFBFUjogMzAuMA0KICBTVEFJTkVEX0NMQVk6IDUuMA0KICBTVEFJTkVEX0dMQVNTX1BBTkU6IDMuMA0KICBMRUFWRVNfMjogMS4wDQogIExPR18yOiAzLjANCiAgQUNBQ0lBX1NUQUlSUzogNi4wDQogIERBUktfT0FLX1NUQUlSUzogNi4wDQogIFNMSU1FX0JMT0NLOiAzNi4wDQogIEJBUlJJRVI6IDEwMDAuMA0KICBJUk9OX1RSQVBET09SOiAzMC4wDQogIFBSSVNNQVJJTkU6IDEwLjANCiAgU0VBX0xBTlRFUk46IDMwLjANCiAgSEFZX0JMT0NLOiAyNy4wDQogIENBUlBFVDogMi4wDQogIEhBUkRfQ0xBWTogNC4wDQogIENPQUxfQkxPQ0s6IDI3LjANCiAgUEFDS0VEX0lDRTogOC4wDQogIERPVUJMRV9QTEFOVDogNC4wDQogIFNUQU5ESU5HX0JBTk5FUjogMTUuMA0KICBXQUxMX0JBTk5FUjogMTUuMA0KICBEQVlMSUdIVF9ERVRFQ1RPUl9JTlZFUlRFRDogMjAuMA0KICBSRURfU0FORFNUT05FOiA0LjANCiAgUkVEX1NBTkRTVE9ORV9TVEFJUlM6IDYuMA0KICBET1VCTEVfU1RPTkVfU0xBQjI6IDYuMA0KICBTVE9ORV9TTEFCMjogMy4wDQogIFNQUlVDRV9GRU5DRV9HQVRFOiAxMi4wDQogIEJJUkNIX0ZFTkNFX0dBVEU6IDEyLjANCiAgSlVOR0xFX0ZFTkNFX0dBVEU6IDEyLjANCiAgREFSS19PQUtfRkVOQ0VfR0FURTogMTIuMA0KICBBQ0FDSUFfRkVOQ0VfR0FURTogMTIuMA0KICBTUFJVQ0VfRkVOQ0U6IDYuMA0KICBCSVJDSF9GRU5DRTogNi4wDQogIEpVTkdMRV9GRU5DRTogNi4wDQogIERBUktfT0FLX0ZFTkNFOiA2LjANCiAgQUNBQ0lBX0ZFTkNFOiA2LjANCiAgU1BSVUNFX0RPT1I6IDguMA0KICBCSVJDSF9ET09SOiA4LjANCiAgSlVOR0xFX0RPT1I6IDguMA0KICBBQ0FDSUFfRE9PUjogOC4wDQogIERBUktfT0FLX0RPT1I6IDguMA0KDQojIEVuY2hhbnRtZW50IFZhbHVlcyAoRW5jaGFudG1lbnQgTmFtZTogQmFzZSBWYWx1ZSArIExldmVsIE11bHRpcGxpZXIpDQplbmNoYW50bWVudHM6DQogICMgQXJtb3IgRW5jaGFudG1lbnRzDQogIFBST1RFQ1RJT05fRU5WSVJPTk1FTlRBTDogIyBQcm90ZWN0aW9uDQogICAgYmFzZV92YWx1ZTogMjAuMA0KICAgIHBlcl9sZXZlbDogMTUuMA0KICAgIG1heF9sZXZlbDogNA0KICBQUk9URUNUSU9OX0ZJUkU6ICMgRmlyZSBQcm90ZWN0aW9uDQogICAgYmFzZV92YWx1ZTogMTUuMA0KICAgIHBlcl9sZXZlbDogMTAuMA0KICAgIG1heF9sZXZlbDogNA0KICBQUk9URUNUSU9OX0ZBTEw6ICMgRmVhdGhlciBGYWxsaW5nDQogICAgYmFzZV92YWx1ZTogMjUuMA0KICAgIHBlcl9sZXZlbDogMjAuMA0KICAgIG1heF9sZXZlbDogNA0KICBQUk9URUNUSU9OX0VYUExPU0lPTlM6ICMgQmxhc3QgUHJvdGVjdGlvbg0KICAgIGJhc2VfdmFsdWU6IDE4LjANCiAgICBwZXJfbGV2ZWw6IDEyLjANCiAgICBtYXhfbGV2ZWw6IDQNCiAgUFJPVEVDVElPTl9QUk9KRUNUSUxFOiAjIFByb2plY3RpbGUgUHJvdGVjdGlvbg0KICAgIGJhc2VfdmFsdWU6IDE1LjANCiAgICBwZXJfbGV2ZWw6IDEwLjANCiAgICBtYXhfbGV2ZWw6IDQNCiAgT1hZR0VOOiAjIFJlc3BpcmF0aW9uDQogICAgYmFzZV92YWx1ZTogMzAuMA0KICAgIHBlcl9sZXZlbDogMjUuMA0KICAgIG1heF9sZXZlbDogMw0KICBXQVRFUl9XT1JLRVI6ICMgQXF1YSBBZmZpbml0eQ0KICAgIGJhc2VfdmFsdWU6IDUwLjANCiAgICBwZXJfbGV2ZWw6IDAuMA0KICAgIG1heF9sZXZlbDogMQ0KICBUSE9STlM6ICMgVGhvcm5zDQogICAgYmFzZV92YWx1ZTogNDAuMA0KICAgIHBlcl9sZXZlbDogMzAuMA0KICAgIG1heF9sZXZlbDogMw0KICBERVBUSF9TVFJJREVSOiAjIERlcHRoIFN0cmlkZXINCiAgICBiYXNlX3ZhbHVlOiAzNS4wDQogICAgcGVyX2xldmVsOiAyNS4wDQogICAgbWF4X2xldmVsOiAzDQogIEZST1NUX1dBTEtFUjogIyBGcm9zdCBXYWxrZXINCiAgICBiYXNlX3ZhbHVlOiA2MC4wDQogICAgcGVyX2xldmVsOiA0MC4wDQogICAgbWF4X2xldmVsOiAyDQogIFNPVUxfU1BFRUQ6ICMgU291bCBTcGVlZA0KICAgIGJhc2VfdmFsdWU6IDcwLjANCiAgICBwZXJfbGV2ZWw6IDUwLjANCiAgICBtYXhfbGV2ZWw6IDMNCiAgU1dJRlRfU05FQUs6ICMgU3dpZnQgU25lYWsNCiAgICBiYXNlX3ZhbHVlOiA4MC4wDQogICAgcGVyX2xldmVsOiA2MC4wDQogICAgbWF4X2xldmVsOiAzDQoNCiAgIyBXZWFwb24gRW5jaGFudG1lbnRzDQogIERBTUFHRV9BTEw6ICMgU2hhcnBuZXNzDQogICAgYmFzZV92YWx1ZTogMjUuMA0KICAgIHBlcl9sZXZlbDogMjAuMA0KICAgIG1heF9sZXZlbDogNQ0KICBEQU1BR0VfVU5ERUFEOiAjIFNtaXRlDQogICAgYmFzZV92YWx1ZTogMjAuMA0KICAgIHBlcl9sZXZlbDogMTUuMA0KICAgIG1heF9sZXZlbDogNQ0KICBEQU1BR0VfQVJUSFJPUE9EUzogIyBCYW5lIG9mIEFydGhyb3BvZHMNCiAgICBiYXNlX3ZhbHVlOiAxNS4wDQogICAgcGVyX2xldmVsOiAxMC4wDQogICAgbWF4X2xldmVsOiA1DQogIEtOT0NLQkFDSzogIyBLbm9ja2JhY2sNCiAgICBiYXNlX3ZhbHVlOiAyMC4wDQogICAgcGVyX2xldmVsOiAxNS4wDQogICAgbWF4X2xldmVsOiAyDQogIEZJUkVfQVNQRUNUOiAjIEZpcmUgQXNwZWN0DQogICAgYmFzZV92YWx1ZTogMzUuMA0KICAgIHBlcl9sZXZlbDogMjUuMA0KICAgIG1heF9sZXZlbDogMg0KICBMT09UX0JPTlVTX01PQlM6ICMgTG9vdGluZw0KICAgIGJhc2VfdmFsdWU6IDUwLjANCiAgICBwZXJfbGV2ZWw6IDQwLjANCiAgICBtYXhfbGV2ZWw6IDMNCiAgU1dFRVBJTkdfRURHRTogIyBTd2VlcGluZyBFZGdlDQogICAgYmFzZV92YWx1ZTogMzAuMA0KICAgIHBlcl9sZXZlbDogMjAuMA0KICAgIG1heF9sZXZlbDogMw0KDQogICMgVG9vbCBFbmNoYW50bWVudHMNCiAgRElHX1NQRUVEOiAjIEVmZmljaWVuY3kNCiAgICBiYXNlX3ZhbHVlOiAzMC4wDQogICAgcGVyX2xldmVsOiAyNS4wDQogICAgbWF4X2xldmVsOiA1DQogIFNJTEtfVE9VQ0g6ICMgU2lsayBUb3VjaA0KICAgIGJhc2VfdmFsdWU6IDEwMC4wDQogICAgcGVyX2xldmVsOiAwLjANCiAgICBtYXhfbGV2ZWw6IDENCiAgRFVSQUJJTElUWTogIyBVbmJyZWFraW5nDQogICAgYmFzZV92YWx1ZTogNDAuMA0KICAgIHBlcl9sZXZlbDogMzAuMA0KICAgIG1heF9sZXZlbDogMw0KICBMT09UX0JPTlVTX0JMT0NLUzogIyBGb3J0dW5lDQogICAgYmFzZV92YWx1ZTogNjAuMA0KICAgIHBlcl9sZXZlbDogNTAuMA0KICAgIG1heF9sZXZlbDogMw0KDQogICMgQm93IEVuY2hhbnRtZW50cw0KICBBUlJPV19EQU1BR0U6ICMgUG93ZXINCiAgICBiYXNlX3ZhbHVlOiAyNS4wDQogICAgcGVyX2xldmVsOiAyMC4wDQogICAgbWF4X2xldmVsOiA1DQogIEFSUk9XX0tOT0NLQkFDSzogIyBQdW5jaA0KICAgIGJhc2VfdmFsdWU6IDIwLjANCiAgICBwZXJfbGV2ZWw6IDE1LjANCiAgICBtYXhfbGV2ZWw6IDINCiAgQVJST1dfRklSRTogIyBGbGFtZQ0KICAgIGJhc2VfdmFsdWU6IDQwLjANCiAgICBwZXJfbGV2ZWw6IDAuMA0KICAgIG1heF9sZXZlbDogMQ0KICBBUlJPV19JTkZJTklURTogIyBJbmZpbml0eQ0KICAgIGJhc2VfdmFsdWU6IDgwLjANCiAgICBwZXJfbGV2ZWw6IDAuMA0KICAgIG1heF9sZXZlbDogMQ0KDQogICMgRmlzaGluZyBFbmNoYW50bWVudHMNCiAgTFVDSzogIyBMdWNrIG9mIHRoZSBTZWENCiAgICBiYXNlX3ZhbHVlOiA0NS4wDQogICAgcGVyX2xldmVsOiAzNS4wDQogICAgbWF4X2xldmVsOiAzDQogIExVUkU6ICMgTHVyZQ0KICAgIGJhc2VfdmFsdWU6IDMwLjANCiAgICBwZXJfbGV2ZWw6IDI1LjANCiAgICBtYXhfbGV2ZWw6IDMNCg0KICAjIFRyaWRlbnQgRW5jaGFudG1lbnRzDQogIExPWUFMVFk6ICMgTG95YWx0eQ0KICAgIGJhc2VfdmFsdWU6IDUwLjANCiAgICBwZXJfbGV2ZWw6IDQwLjANCiAgICBtYXhfbGV2ZWw6IDMNCiAgSU1QQUxJTkc6ICMgSW1wYWxpbmcNCiAgICBiYXNlX3ZhbHVlOiA0MC4wDQogICAgcGVyX2xldmVsOiAzMC4wDQogICAgbWF4X2xldmVsOiA1DQogIFJJUFRJREU6ICMgUmlwdGlkZQ0KICAgIGJhc2VfdmFsdWU6IDcwLjANCiAgICBwZXJfbGV2ZWw6IDUwLjANCiAgICBtYXhfbGV2ZWw6IDMNCiAgQ0hBTk5FTElORzogIyBDaGFubmVsaW5nDQogICAgYmFzZV92YWx1ZTogMTAwLjANCiAgICBwZXJfbGV2ZWw6IDAuMA0KICAgIG1heF9sZXZlbDogMQ0KDQogICMgQ3Jvc3Nib3cgRW5jaGFudG1lbnRzDQogIE1VTFRJU0hPVDogIyBNdWx0aXNob3QNCiAgICBiYXNlX3ZhbHVlOiA4MC4wDQogICAgcGVyX2xldmVsOiAwLjANCiAgICBtYXhfbGV2ZWw6IDENCiAgUVVJQ0tfQ0hBUkdFOiAjIFF1aWNrIENoYXJnZQ0KICAgIGJhc2VfdmFsdWU6IDM1LjANCiAgICBwZXJfbGV2ZWw6IDI1LjANCiAgICBtYXhfbGV2ZWw6IDMNCiAgUElFUkNJTkc6ICMgUGllcmNpbmcNCiAgICBiYXNlX3ZhbHVlOiA0NS4wDQogICAgcGVyX2xldmVsOiAzMC4wDQogICAgbWF4X2xldmVsOiA0DQoNCiAgIyBVbml2ZXJzYWwgRW5jaGFudG1lbnRzDQogIE1FTkRJTkc6ICMgTWVuZGluZw0KICAgIGJhc2VfdmFsdWU6IDE1MC4wDQogICAgcGVyX2xldmVsOiAwLjANCiAgICBtYXhfbGV2ZWw6IDENCiAgVkFOSVNISU5HX0NVUlNFOiAjIEN1cnNlIG9mIFZhbmlzaGluZw0KICAgIGJhc2VfdmFsdWU6IC01MC4wDQogICAgcGVyX2xldmVsOiAwLjANCiAgICBtYXhfbGV2ZWw6IDENCiAgQklORElOR19DVVJTRTogIyBDdXJzZSBvZiBCaW5kaW5nDQogICAgYmFzZV92YWx1ZTogLTMwLjANCiAgICBwZXJfbGV2ZWw6IDAuMA0KICAgIG1heF9sZXZlbDogMQ0KDQojIExlZ2FjeSBlbmNoYW50bWVudCBuYW1lcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkNCmxlZ2FjeV9lbmNoYW50bWVudHM6DQogIFBST1RFQ1RJT046ICJQUk9URUNUSU9OX0VOVklST05NRU5UQUwiDQogIEZJUkVfUFJPVEVDVElPTjogIlBST1RFQ1RJT05fRklSRSINCiAgRkVBVEhFUl9GQUxMSU5HOiAiUFJPVEVDVElPTl9GQUxMIg0KICBCTEFTVF9QUk9URUNUSU9OOiAiUFJPVEVDVElPTl9FWFBMT1NJT05TIg0KICBQUk9KRUNUSUxFX1BST1RFQ1RJT046ICJQUk9URUNUSU9OX1BST0pFQ1RJTEUiDQogIFJFU1BJUkFUSU9OOiAiT1hZR0VOIg0KICBBUVVBX0FGRklOSVRZOiAiV0FURVJfV09SS0VSIg0KICBTSEFSUE5FU1M6ICJEQU1BR0VfQUxMIg0KICBTTUlURTogIkRBTUFHRV9VTkRFQUQiDQogIEJBTkVfT0ZfQVJUSFJPUE9EUzogIkRBTUFHRV9BUlRIUk9QT0RTIg0KICBMT09USU5HOiAiTE9PVF9CT05VU19NT0JTIg0KICBFRkZJQ0lFTkNZOiAiRElHX1NQRUVEIg0KICBVTkJSRUFLSU5HOiAiRFVSQUJJTElUWSINCiAgRk9SVFVORTogIkxPT1RfQk9OVVNfQkxPQ0tTIg0KICBQT1dFUjogIkFSUk9XX0RBTUFHRSINCiAgUFVOQ0g6ICJBUlJPV19LTk9DS0JBQ0siDQogIEZMQU1FOiAiQVJST1dfRklSRSINCiAgSU5GSU5JVFk6ICJBUlJPV19JTkZJTklURSINCiAgTFVDS19PRl9USEVfU0VBOiAiTFVDSyIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJlc291cmNlcy9tZXNzYWdlcy55bWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDA3NzQxMyAxNTAyNjM0NzMxMiAwMTM2MTMAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIyBHZW5lcmFsIHByZWZpeCB1c2VkIGFjcm9zcyBtZXNzYWdlcw0KcHJlZml4OiAiJjQmbEJvdW50aWVzICY3JmzCuyAmNyINCg0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiMgR2VuZXJhbCBNZXNzYWdlcw0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCm5vLXBlcm1pc3Npb246DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsTm8gUGVybWlzc2lvbiINCiAgLSAiJjdZb3UgZG8gbm90IGhhdmUgcGVybWlzc2lvbiB0byB1c2UgdGhpcyBjb21tYW5kLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpjb25zb2xlLW5vdC1hbGxvd2VkOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbENvbnNvbGUgTm90IEFsbG93ZWQiDQogIC0gIiY3VGhpcyBjb21tYW5kIGNhbiBvbmx5IGJlIHVzZWQgYnkgcGxheWVycywgZXhjZXB0IGZvciAnZ2l2ZScgY29tbWFuZC4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KbWlzc2luZy1jb25maWc6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsTWlzc2luZyBDb25maWciDQogIC0gIiY3TWVzc2FnZSBub3QgZm91bmQ6ICVwYXRoJSINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQppbnZhbGlkLW1hdGVyaWFsOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEludmFsaWQgTWF0ZXJpYWwiDQogIC0gIiY3SW52YWxpZCBtYXRlcmlhbCAlYm91bnRpZXNwbHVzX21hdGVyaWFsJSBmb3IgJWJvdW50aWVzcGx1c19idXR0b24lISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQppbnZhbGlkLWN1c3RvbS1zbG90Og0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEludmFsaWQgQ3VzdG9tIFNsb3QiDQogIC0gIiY3SW52YWxpZCBzbG90ICVib3VudGllc3BsdXNfc2xvdCUgZm9yIGN1c3RvbSBpdGVtICVib3VudGllc3BsdXNfaXRlbSUhIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmludmVudG9yeS1mdWxsOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEludmVudG9yeSBGdWxsIg0KICAtICImN1lvdXIgaW52ZW50b3J5IGlzIGZ1bGwuIFNvbWUgaXRlbXMgd2VyZSBkcm9wcGVkIG9uIHRoZSBncm91bmQuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCg0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiMgQm91bnR5IENyZWF0aW9uIE1lc3NhZ2VzDQojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KYm91bnR5LXNlc3Npb24tbm90LXN0YXJ0ZWQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsTm8gQm91bnR5IFNlc3Npb24gU3RhcnRlZCINCiAgLSAiJjdQbGVhc2UgYWRkIG1vbmV5LCBYUCwgaXRlbXMsIG9yIHNlbGVjdCBhIHRhcmdldCB0byBzdGFydCB0aGUgYm91bnR5IGNyZWF0aW9uIHNlc3Npb24uIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCm5vLXRhcmdldC1zZWxlY3RlZDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxObyBUYXJnZXQgU2VsZWN0ZWQiDQogIC0gIiY3Tm8gdGFyZ2V0IHBsYXllciBzZWxlY3RlZC4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0Kbm8tcmV3YXJkcy1zcGVjaWZpZWQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsTm8gUmV3YXJkcyBTcGVjaWZpZWQiDQogIC0gIiY3Tm8gcmV3YXJkcyBzcGVjaWZpZWQgKG1vbmV5LCBleHBlcmllbmNlLCBvciBpdGVtcykuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS1uby1lY29ub215Og0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbE5vIEVjb25vbXkgUGx1Z2luIg0KICAtICImN05vIGVjb25vbXkgcGx1Z2luIGZvdW5kISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpuby1leHBlcmllbmNlLWxldmVsczoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxJbnN1ZmZpY2llbnQgRXhwZXJpZW5jZSINCiAgLSAiJjdZb3UgZG9uJ3QgaGF2ZSBlbm91Z2ggZXhwZXJpZW5jZSBsZXZlbHMhIE5lZWQ6ICVib3VudGllc3BsdXNfbGV2ZWxzJSwgaGF2ZTogJWJvdW50aWVzcGx1c19jdXJyZW50JSINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpwbGF5ZXItb2ZmbGluZToNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxQbGF5ZXIgT2ZmbGluZSINCiAgLSAiJjdOb3RlOiBUaGlzIHBsYXllciBpcyBjdXJyZW50bHkgb2ZmbGluZS4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYWRkLW1vbmV5LXByb21wdDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZhJmxBZGQgTW9uZXkgdG8gQm91bnR5Ig0KICAtICImN1lvdXIgYmFsYW5jZTogJmEldmF1bHRfZWNvX2JhbGFuY2UlIg0KICAtICImN0N1cnJlbnQgYm91bnR5IGFtb3VudDogJmElYm91bnRpZXNwbHVzX21vbmV5X3ZhbHVlJSINCiAgLSAiJjdUeXBlIHRoZSBhbW91bnQgdG8gYWRkIHRvIHRoZSBib3VudHk6Ig0KICAtICImNy0gVHlwZSAnY2FuY2VsJyB0byBhYm9ydCBhbmQgcmV0dXJuIHRvIHRoZSBHVUkiDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KbW9uZXktaW5wdXQtY2FuY2VsbGVkOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmEmbE1vbmV5IElucHV0IENhbmNlbGxlZCINCiAgLSAiJjdJbnB1dCBieSAlYm91bnRpZXNwbHVzX3BsYXllciUgY2FuY2VsbGVkLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQppbnZhbGlkLW1vbmV5LWFtb3VudDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxJbnZhbGlkIE1vbmV5IEFtb3VudCINCiAgLSAiJjdBbW91bnQgbXVzdCBiZSBhdCBsZWFzdCAlYm91bnRpZXNwbHVzX21pbl9hbW91bnQlISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQppbnZhbGlkLW1vbmV5LWZvcm1hdDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxJbnZhbGlkIE1vbmV5IEZvcm1hdCINCiAgLSAiJjdJbnZhbGlkIGFtb3VudCEgUGxlYXNlIGVudGVyIGEgbnVtYmVyIG9yICdjYW5jZWwnLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQptb25leS1zZXQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYSZsTW9uZXkgU2V0Ig0KICAtICImN0FkZGVkICVib3VudGllc3BsdXNfbW9uZXlfdmFsdWUlIHRvIHRoZSBib3VudHkuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmFkZC14cC1wcm9tcHQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImZSZsQWRkIEV4cGVyaWVuY2UgdG8gQm91bnR5Ig0KICAtICImN1lvdXIgZXhwZXJpZW5jZSBsZXZlbHM6ICVib3VudGllc3BsdXNfcGxheWVyX2xldmVsJSINCiAgLSAiJjdDdXJyZW50IGJvdW50eSBleHBlcmllbmNlOiAlYm91bnRpZXNwbHVzX2V4cF92YWx1ZSUiDQogIC0gIiY3VHlwZSB0aGUgbnVtYmVyIG9mIGV4cGVyaWVuY2UgbGV2ZWxzIHRvIGFkZCB0byB0aGUgYm91bnR5OiINCiAgLSAiJjdUeXBlICdjYW5jZWwnIHRvIGFib3J0IGFuZCByZXR1cm4gdG8gdGhlIEdVSSINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpleHBlcmllbmNlLWlucHV0LWNhbmNlbGxlZDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZlJmxFeHBlcmllbmNlIElucHV0IENhbmNlbGxlZCINCiAgLSAiJjdJbnB1dCBieSAlYm91bnRpZXNwbHVzX3BsYXllciUgY2FuY2VsbGVkLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQppbnZhbGlkLWV4cGVyaWVuY2UtYW1vdW50Og0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmUmbEludmFsaWQgRXhwZXJpZW5jZSBBbW91bnQiDQogIC0gIiY3QW1vdW50IG11c3QgYmUgcG9zaXRpdmUhIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmludmFsaWQtZXhwZXJpZW5jZS1mb3JtYXQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImZSZsSW52YWxpZCBFeHBlcmllbmNlIEZvcm1hdCINCiAgLSAiJjdJbnZhbGlkIGFtb3VudCEgUGxlYXNlIGVudGVyIGEgbnVtYmVyIG9yICdjYW5jZWwnLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpleHBlcmllbmNlLXNldDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZlJmxFeHBlcmllbmNlIFNldCINCiAgLSAiJjdBZGRlZCAlYm91bnRpZXNwbHVzX2V4cF92YWx1ZSUgbGV2ZWxzIHRvIHRoZSBib3VudHkuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmFkZC10aW1lLXByb21wdDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZkJmxTZXQgQm91bnR5IER1cmF0aW9uIg0KICAtICImN0N1cnJlbnQgZHVyYXRpb246ICVib3VudGllc3BsdXNfZHVyYXRpb24lIg0KICAtICImN1R5cGUgdGhlIGR1cmF0aW9uICgwIGZvciBwZXJtYW5lbnQpOiINCiAgLSAiJjdFeGFtcGxlczogMzAgTWludXRlcywgMzBtLCAzMCBtaW4gfCAyIGhvdXJzLCAyaCwgMiBociB8IDEgZGF5LCAxZCINCiAgLSAiJjdUeXBlICdjYW5jZWwnIHRvIHJldHVybiB0byB0aGUgR1VJIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCnRpbWUtaW5wdXQtY2FuY2VsbGVkOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmQmbFRpbWUgSW5wdXQgQ2FuY2VsbGVkIg0KICAtICImN0lucHV0IGJ5ICVib3VudGllc3BsdXNfcGxheWVyJSBjYW5jZWxsZWQuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmludmFsaWQtdGltZS1mb3JtYXQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImZCZsSW52YWxpZCBUaW1lIEZvcm1hdCINCiAgLSAiJjdJbnZhbGlkIGR1cmF0aW9uISBVc2UgZm9ybWF0OiA8bnVtYmVyPiBbbXxofGR8d3xtaW51dGVzfGhvdXJzfGRheXN8d2Vla3NdIG9yICdjYW5jZWwnLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQp0aW1lLXNldDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZkJmxUaW1lIFNldCINCiAgLSAiJjdTZXQgYm91bnR5IGR1cmF0aW9uIHRvICVib3VudGllc3BsdXNfZHVyYXRpb24lLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQphZGQtcGxheWVyLXByb21wdDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxTZWxlY3QgQm91bnR5IFRhcmdldCINCiAgLSAiJjdUeXBlIHRoZSBuYW1lIG9mIHRoZSBwbGF5ZXIgdG8gc2V0IGEgYm91bnR5IG9uOiINCiAgLSAiJjcoVHlwZSAnY2FuY2VsJyB0byByZXR1cm4gdG8gdGhlIEdVSSkiDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KcGxheWVyLXNlbGVjdGlvbi1jYW5jZWxsZWQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsUGxheWVyIFNlbGVjdGlvbiBDYW5jZWxsZWQiDQogIC0gIiY3SW5wdXQgYnkgJWJvdW50aWVzcGx1c19wbGF5ZXIlIGNhbmNlbGxlZC4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KY2FuY2VsLWNvbmZpcm1hdGlvbi1wcm9tcHQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImZSZsQ29uZmlybSBDYW5jZWxsYXRpb24iDQogIC0gIiY3WW91IGhhdmUgdW5zYXZlZCBjaGFuZ2VzIHRvIHlvdXIgYm91bnR5LiINCiAgLSAiJjdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2FuY2VsPyINCiAgLSAiJmFUeXBlICd5ZXMnIG9yICd5JyB0byBkaXNjYXJkIGNoYW5nZXMgYW5kIGNhbmNlbC4iDQogIC0gIiZhVHlwZSAnbm8nIG9yICduJyB0byByZXR1cm4gdG8gdGhlIGJvdW50eSBjcmVhdGlvbiBHVUkuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS1jcmVhdGlvbi1jYW5jZWxsZWQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsQm91bnR5IENyZWF0aW9uIENhbmNlbGxlZCINCiAgLSAiJjdCb3VudHkgY3JlYXRpb24gY2FuY2VsbGVkLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpib3VudHktcmVzdW1lZDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxCb3VudHkgQ3JlYXRpb24gUmVzdW1lZCINCiAgLSAiJjdCb3VudHkgY3JlYXRpb24gcmVzdW1lZC4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KaW52YWxpZC1jYW5jZWwtcmVzcG9uc2U6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsSW52YWxpZCBDYW5jZWwgUmVzcG9uc2UiDQogIC0gIiY3UGxlYXNlIHR5cGUgJ3llcycsICd5JywgJ25vJywgb3IgJ24nLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpibGFja2xpc3RlZC1pdGVtLXRpdGxlOg0KICAtICImY0JsYWNrbGlzdGVkIEl0ZW0hIg0KYmxhY2tsaXN0ZWQtaXRlbS1zdWJ0aXRsZToNCiAgLSAiJmUlYm91bnRpZXNwbHVzX2l0ZW1fbmFtZSUgJjdjYW5ub3QgYmUgYWRkZWQuIg0KYmxhY2tsaXN0ZWQtaXRlbS1tZXNzYWdlOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEJsYWNrbGlzdGVkIEl0ZW0iDQogIC0gIiY3JWJvdW50aWVzcGx1c19pdGVtX25hbWUlICY3aXMgYmxhY2tsaXN0ZWQgYW5kIGNhbm5vdCBiZSBhZGRlZCB0byB0aGUgYm91bnR5ISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpuby1lbXB0eS1zbG90czoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxObyBFbXB0eSBTbG90cyINCiAgLSAiJjdObyBlbXB0eSBzbG90cyBhdmFpbGFibGUgaW4gdGhlIGl0ZW0gR1VJISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpjaGFuZ2VzLWRpc2NhcmRlZDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZlJmxDaGFuZ2VzIERpc2NhcmRlZCINCiAgLSAiJjdDaGFuZ2VzIGRpc2NhcmRlZC4gVXNlIENvbmZpcm0gdG8gc2F2ZSBpdGVtIGNoYW5nZXMuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCm5vLWNoYW5nZXM6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImZSZsTm8gQ2hhbmdlcyINCiAgLSAiJjdSZXR1cm5lZCB0byBDcmVhdGUgQm91bnR5IEdVSS4gTm8gY2hhbmdlcyB3ZXJlIG1hZGUuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCml0ZW1zLWFkZGVkOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmEmbEl0ZW1zIEFkZGVkIg0KICAtICImN0l0ZW1zIGFkZGVkIHRvIGJvdW50eSEgVG90YWwgdmFsdWU6ICZlJWJvdW50aWVzcGx1c19pdGVtX3ZhbHVlJSINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQppdGVtcy11cGRhdGVkOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmEmbEl0ZW1zIFVwZGF0ZWQiDQogIC0gIiY3SXRlbXMgdXBkYXRlZCBmb3IgYm91bnR5ISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpjYW5ub3QtcGxhY2UtaXRlbXM6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsQ2Fubm90IFBsYWNlIEl0ZW1zIg0KICAtICImN1lvdSBjYW5ub3QgcGxhY2UgaXRlbXMgaW4gdGhhdCBzbG90ISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQphbm9ueW1vdXMtYm91bnR5LXByb21wdDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiY1JmxBbm9ueW1vdXMgQm91bnR5IENvbmZpcm1hdGlvbiINCiAgLSAiJjdZb3UgYXJlIGFib3V0IHRvIHBsYWNlIGEgYm91bnR5IG9uICZjJWJvdW50aWVzcGx1c190YXJnZXQlICY3Zm9yICZhJWJvdW50aWVzcGx1c19tb25leV92YWx1ZSUmNy4iDQogIC0gIiY3RG8geW91IHdhbnQgdG8gcmVtYWluIGFub255bW91cz8gKEZlZTogJmElYm91bnRpZXNwbHVzX2Fub255bW91c19jb3N0JSY3KSINCiAgLSAiJjdUeXBlICd5ZXMnIG9yICd5JyB0byBzZXQgYW4gYW5vbnltb3VzIGJvdW50eSINCiAgLSAiJjdUeXBlICdubycgb3IgJ24nIHRvIHNldCBhIHJlZ3VsYXIgYm91bnR5Ig0KICAtICImN1R5cGUgJ2NhbmNlbCcgdG8gcmV0dXJuIHRvIHRoZSBib3VudHkgY3JlYXRpb24gR1VJIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmFub255bW91cy1ib3VudHktcGxhY2VkOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJjUmbEFub255bW91cyBCb3VudHkgUGxhY2VkIg0KICAtICImN1RhcmdldDogJmUlYm91bnRpZXNwbHVzX3RhcmdldCUiDQogIC0gIiY3Qm91bnR5IGFtb3VudDogJmElYm91bnRpZXNwbHVzX21vbmV5X3ZhbHVlJSINCiAgLSAiJjdJdGVtczogJmIlYm91bnRpZXNwbHVzX2l0ZW1fY291bnQlICY3KCZiJWJvdW50aWVzcGx1c19pdGVtX3ZhbHVlJSY3KSINCiAgLSAiJjdFeHBlcmllbmNlOiAmZSVib3VudGllc3BsdXNfZXhwX3ZhbHVlJSINCiAgLSAiJjdEdXJhdGlvbjogJmQlYm91bnRpZXNwbHVzX2R1cmF0aW9uJSINCiAgLSAiJjdBbm9ueW1vdXMgZmVlOiAmYyVib3VudGllc3BsdXNfYW5vbnltb3VzX2Nvc3QlIg0KICAtICImN1lvdXIgaWRlbnRpdHkgd2lsbCByZW1haW4gaGlkZGVuIGZyb20gb3RoZXIgcGxheWVycy4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYW5vbnltb3VzLXByb21wdC1jYW5jZWxsZWQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImNSZsQW5vbnltb3VzIFByb21wdCBDYW5jZWxsZWQiDQogIC0gIiY3UmV0dXJuZWQgdG8gYm91bnR5IGNyZWF0aW9uIEdVSS4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYW5vbnltb3VzLXNlc3Npb24tZXhwaXJlZDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiY1JmxBbm9ueW1vdXMgU2Vzc2lvbiBFeHBpcmVkIg0KICAtICImN0Fub255bW91cyBib3VudHkgc2Vzc2lvbiBleHBpcmVkLiBQbGVhc2Ugc3RhcnQgYWdhaW4uIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmludmFsaWQtYW5vbnltb3VzLWlucHV0Og0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJjUmbEludmFsaWQgQW5vbnltb3VzIElucHV0Ig0KICAtICImN0ludmFsaWQgaW5wdXQ6ICcmZiVib3VudGllc3BsdXNfaW5wdXQlJjcnIg0KICAtICImN1BsZWFzZSB0eXBlICZmJ3llcycmNywgJmYneScmNywgJmYnbm8nJjcsICZmJ24nJjcsIG9yICZmJ2NhbmNlbCciDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KaW5zdWZmaWNpZW50LWZ1bmRzLWFub255bW91czoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiY1JmxJbnN1ZmZpY2llbnQgRnVuZHMgZm9yIEFub255bW91cyBCb3VudHkiDQogIC0gIiY3SW5zdWZmaWNpZW50IGZ1bmRzIGZvciBhbm9ueW1vdXMgYm91bnR5ISINCiAgLSAiJjdSZXF1aXJlZDogJmElYm91bnRpZXNwbHVzX2Nvc3QlIg0KICAtICImN1lvdXIgYmFsYW5jZTogJmElYm91bnRpZXNwbHVzX3ZhdWx0X2Vjb19iYWxhbmNlJSINCiAgLSAiJjdQbGFjaW5nIGJvdW50eSBub3JtYWxseSBpbnN0ZWFkLi4uIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCg0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiMgL0JvdW50eSBTZXQgTWVzc2FnZXMNCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpib3VudHktdXNhZ2U6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYSZsQm91bnR5IENvbW1hbmQgVXNhZ2UiDQogIC0gIiY3VXNhZ2U6IC9ib3VudHkgc2V0IDxwbGF5ZXI+IDxhbW91bnQ+IFs8dGltZT4gPE1pbnV0ZXN8SG91cnN8RGF5cz5dIg0KICAtICImN29yIC9ib3VudHkgY2FuY2VsIG9yIC9ib3VudHkgc3RhdHMgb3IgL2JvdW50eSBzdGF0dXMiDQogIC0gIiY3b3IgL2JvdW50eSBnaXZlIDxwbGF5ZXI+IDxpdGVtPiA8YW1vdW50PiBbPG11bHRpcGxpZXI+IDx0aW1lPiA8ZmFpbHVyZT5dIg0KICAtICImN29yIC9ib3VudHkgcmVsb2FkIG9yIC9ib3VudHkgZnJlbnp5IDx0aW1lPiA8bXVsdGlwbGllcj4gb3IgL2JvdW50eSB0b3AiDQogIC0gIiY3b3IgL2JvdW50eSBzaG9wIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS1zYW1lLWlwOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbFNhbWUgSVAgUmVzdHJpY3Rpb24iDQogIC0gIiY3WW91IGNhbm5vdCBwbGFjZSBhIGJvdW50eSBvbiBhIHBsYXllciB3aXRoIHRoZSBzYW1lIElQIGFkZHJlc3MuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS1zYW1lLXRlYW06DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsU2FtZSBUZWFtIFJlc3RyaWN0aW9uIg0KICAtICImN1lvdSBjYW5ub3QgcGxhY2UgYSBib3VudHkgb24gYSBwbGF5ZXIgaW4gdGhlIHNhbWUgdGVhbS4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYm91bnR5LWludmFsaWQtYW1vdW50Og0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEludmFsaWQgQW1vdW50Ig0KICAtICImN1RvdGFsIGJvdW50eSB2YWx1ZSBjYW5ub3QgZXhjZWVkICZlJWJvdW50aWVzcGx1c19tYXhfYW1vdW50JSY3ISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpib3VudHktaW52YWxpZC1hbW91bnQtZm9ybWF0Og0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEludmFsaWQgQW1vdW50IEZvcm1hdCINCiAgLSAiJjdJbnZhbGlkIGFtb3VudCEgUGxlYXNlIGVudGVyIGEgbnVtYmVyLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpib3VudHktaW52YWxpZC10aW1lOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmQmbEludmFsaWQgVGltZSINCiAgLSAiJjdJbnZhbGlkIHRpbWU6ICZlJWJvdW50aWVzcGx1c190aW1lJSY3ISBQbGVhc2UgZW50ZXIgYSBwb3NpdGl2ZSBudW1iZXIuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS1pbnZhbGlkLXVuaXQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImZCZsSW52YWxpZCBVbml0Ig0KICAtICImN0ludmFsaWQgdW5pdDogJmUlYm91bnRpZXNwbHVzX3VuaXQlJjchIFVzZSBNaW51dGVzLCBIb3Vycywgb3IgRGF5cy4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYm91bnR5LWluc3VmZmljaWVudC1mdW5kczoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxJbnN1ZmZpY2llbnQgRnVuZHMiDQogIC0gIiY3SW5zdWZmaWNpZW50IGZ1bmRzISBZb3UgbmVlZCAmZSVib3VudGllc3BsdXNfY29zdCUmNyAoaW5jbHVkaW5nICZlJWJvdW50aWVzcGx1c190YXglJjcgdGF4KS4iDQogIC0gIiY3WW91ciBiYWxhbmNlOiAmZSVib3VudGllc3BsdXNfdmF1bHRfZWNvX2JhbGFuY2UlIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS1yZWNlaXZlZDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxCb3VudHkgUGxhY2VkIG9uIFlvdSINCiAgLSAiJjdBIGJvdW50eSBvZiAmZSVib3VudGllc3BsdXNfYW1vdW50JSY3IGhhcyBiZWVuIHBsYWNlZCBvbiB5b3UgYnkgJmUlYm91bnRpZXNwbHVzX3Nwb25zb3IlJjchIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS1zZXQtc3VjY2VzczoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZhJmxCb3VudHkgU2V0IFN1Y2Nlc3NmdWxseSINCiAgLSAiJjdZb3UgcGxhY2VkIGEgYm91bnR5IG9mICZlJWJvdW50aWVzcGx1c19hbW91bnQlJjcgb24gJmUlYm91bnRpZXNwbHVzX3RhcmdldCUmNyEiDQogIC0gIiY3VGF4IG9mICZlJWJvdW50aWVzcGx1c190YXhfYW1vdW50JSY3IHdhcyBkZWR1Y3RlZC4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYm91bnR5LXNldC1zdWNjZXNzLXRpbWVkOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmEmbFRpbWVkIEJvdW50eSBTZXQgU3VjY2Vzc2Z1bGx5Ig0KICAtICImN1lvdSBwbGFjZWQgYSBib3VudHkgb2YgJmUlYm91bnRpZXNwbHVzX2Ftb3VudCUmNyBvbiAmZSVib3VudGllc3BsdXNfdGFyZ2V0JSY3IGZvciAmZSVib3VudGllc3BsdXNfdGltZSUgJWJvdW50aWVzcGx1c191bml0JSY3ISINCiAgLSAiJjdUYXggb2YgJmUlYm91bnRpZXNwbHVzX3RheF9hbW91bnQlJjcgd2FzIGRlZHVjdGVkLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpib3VudHktdGltZS1yZXF1aXJlZDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxUaW1lIFJlcXVpcmVkIg0KICAtICImN0EgdGltZSBkdXJhdGlvbiBpcyByZXF1aXJlZCBmb3IgYm91bnRpZXMhIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS1zZXQtc2VsZjoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxDYW5ub3QgQm91bnR5IFNlbGYiDQogIC0gIiY3WW91IGNhbm5vdCBwbGFjZSBhIGJvdW50eSBvbiB5b3Vyc2VsZi4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KDQojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KIyAvQm91bnR5IENhbmNlbCBNZXNzYWdlcw0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCmJvdW50eS1jYW5jZWwtbm9uZToNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxObyBCb3VudGllcyB0byBDYW5jZWwiDQogIC0gIiY3WW91IGhhdmUgbm8gYWN0aXZlIGJvdW50aWVzIHRvIGNhbmNlbC4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYm91bnR5LWNhbmNlbC1zdWNjZXNzOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmEmbEJvdW50eSBDYW5jZWxsZWQiDQogIC0gIiY3U3VjY2Vzc2Z1bGx5IGNhbmNlbGxlZCB5b3VyIGJvdW50eSBvbiAmZSVib3VudGllc3BsdXNfdGFyZ2V0JSY3ISINCiAgLSAiJjdSZWZ1bmRlZDogJmUlYm91bnRpZXNwbHVzX3JlZnVuZCUmNy4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYm91bnR5LWNhbmNlbC10YXg6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsQ2FuY2VsIFRheCBBcHBsaWVkIg0KICAtICImN0EgJmMlYm91bnRpZXNwbHVzX3RheF9yYXRlJSUgJjd0YXggaGFzIGJlZW4gYXBwbGllZC4gVGF4IGFtb3VudDogJmMlYm91bnRpZXNwbHVzX3RheF9hbW91bnQlIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCm5vLWJvdW50aWVzLXRvLWNhbmNlbDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxObyBCb3VudGllcyB0byBDYW5jZWwiDQogIC0gIiY3WW91IGhhdmUgbm8gYWN0aXZlIGJvdW50aWVzIHRvIGNhbmNlbC4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KY2FuY2VsLWVycm9yOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbENhbmNlbCBFcnJvciINCiAgLSAiJjdFcnJvciBjYW5jZWxsaW5nIGJvdW50eS4gUGxlYXNlIHRyeSBhZ2Fpbi4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KDQojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KIyAvQm91bnR5IFN0YXRzIE1lc3NhZ2VzDQojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KYm91bnR5LXN0YXRzOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmEmbEJvdW50eSBTdGF0aXN0aWNzIg0KICAtICImN1N0YXRzIGZvciAlYm91bnRpZXNwbHVzX3BsYXllciU6Ig0KICAtICImN0JvdW50aWVzIENsYWltZWQ6ICZhJWJvdW50aWVzcGx1c19jbGFpbWVkJSINCiAgLSAiJjdCb3VudGllcyBTdXJ2aXZlZDogJmElYm91bnRpZXNwbHVzX3N1cnZpdmVkJSINCiAgLSAiJjdNb25leSBFYXJuZWQ6ICZhJWJvdW50aWVzcGx1c19tb25leV9lYXJuZWQlIg0KICAtICImN1JlcHV0YXRpb246ICZhJWJvdW50aWVzcGx1c19yZXB1dGF0aW9uJSINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQoNCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQojIC9Cb3VudHkgU3RhdHVzIE1lc3NhZ2VzDQojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KYm91bnR5LXN0YXR1cy11c2FnZToNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxCb3VudHkgU3RhdHVzIFVzYWdlIg0KICAtICImN1VzYWdlOiAvYm91bnR5IHN0YXR1cyBbPHBsYXllcj5dIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS1zdGF0dXMtbm9uZToNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxObyBCb3VudGllcyINCiAgLSAiJjclYm91bnRpZXNwbHVzX3RhcmdldCUgJjdoYXMgbm8gYm91bnRpZXMuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS1zdGF0dXM6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsQm91bnR5IFN0YXR1cyINCiAgLSAiJjdTcG9uc29yczogJmMlYm91bnRpZXNwbHVzX3Nwb25zb3JzJSINCiAgLSAiJjdUb3AgMyBTcG9uc29yczogJmMlYm91bnRpZXNwbHVzX3RvcDNfc3BvbnNvcnNfbnVtYmVyZWQlIg0KICAtICImN1RvcCA1IFNwb25zb3JzOiAmYyVib3VudGllc3BsdXNfdG9wNV9zcG9uc29yc19udW1iZXJlZCUiDQogIC0gIiY3VG9wIDEwIFNwb25zb3JzOiAmYyVib3VudGllc3BsdXNfdG9wMTBfc3BvbnNvcnNfbnVtYmVyZWQlIg0KICAtICImN1Bvb2w6ICZjJWJvdW50aWVzcGx1c19wb29sJSINCiAgLSAiJjdUaW1lIHRpbCBFeHBpcnk6ICZjJWJvdW50aWVzcGx1c19leHBpcnklIg0KICAtICImN0JpZ2dlc3QgRW5lbWllcyAoVG9wIDMpOiAmYyVib3VudGllc3BsdXNfdG9wM19zcG9uc29yc19jb21tYXMlIg0KICAtICImN0JpZ2dlc3QgRW5lbWllcyAoVG9wIDUpOiAmYyVib3VudGllc3BsdXNfdG9wNV9zcG9uc29yc19jb21tYXMlIg0KICAtICImN0JpZ2dlc3QgRW5lbWllcyAoVG9wIDEwKTogJmMlYm91bnRpZXNwbHVzX3RvcDEwX3Nwb25zb3JzX2NvbW1hcyUiDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYm91bnR5LXN0YXR1cy1zdW1tYXJ5Og0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEJvdW50eSBTdGF0dXMgU3VtbWFyeSINCiAgLSAiJjclYm91bnRpZXNwbHVzX3RhcmdldCUmNydzIEJvdW50eSBTdGF0dXM6Ig0KICAtICImN+KAoiBUb3RhbCBQb29sOiAmYyVib3VudGllc3BsdXNfdG90YWxfcG9vbCUiDQogIC0gIiY34oCiIEh1bnRlcnM6ICZjJWJvdW50aWVzcGx1c19odW50ZXJzJSINCiAgLSAiJjfigKIgRnJlbnp5IE11bHRpcGxpZXI6ICZjJWJvdW50aWVzcGx1c19mcmVuenkleCINCiAgLSAiJjfigKIgQm9vc3QgTXVsdGlwbGllcjogJmMlYm91bnRpZXNwbHVzX2Jvb3N0JXgiDQogIC0gIiY34oCiIFRpbWUgVW50aWwgRXhwaXJ5OiAmYyVib3VudGllc3BsdXNfZXhwaXJ5JSINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpib3VudHktc3RhdHVzLWxlc3MtbWludXRlOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEJvdW50eSBFeHBpcnkiDQogIC0gIiY3PCAxIG1pbnV0ZSINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpib3VudHktc3RhdHVzLWV4cGlyZWQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsQm91bnR5IEV4cGlyZWQiDQogIC0gIiY3RXhwaXJlZCINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpib3VudHktc3RhdHVzLWNsaWNrYWJsZToNCiAgLSAiJjdbQ2xpY2sgdG8gdmlldyBwcmV2aWV3XSINCg0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiMgL0JvdW50eSBUb3AgTWVzc2FnZXMNCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpib3VudHktdG9wLXVzYWdlOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmEmbEJvdW50eSBUb3AgVXNhZ2UiDQogIC0gIiY3VXNhZ2U6IC9ib3VudHkgdG9wIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS10b3Atbm8tcGVybWlzc2lvbjoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxObyBQZXJtaXNzaW9uIg0KICAtICImN1lvdSBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHVzZSB0aGlzIGNvbW1hbmQuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCg0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiMgL0JvdW50eSBHaXZlIE1lc3NhZ2VzDQojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KZ2l2ZS1uby1wZXJtaXNzaW9uOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbE5vIFBlcm1pc3Npb24iDQogIC0gIiY3WW91IGRvbid0IGhhdmUgcGVybWlzc2lvbiB0byB1c2UgdGhpcyBjb21tYW5kLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpnaXZlLXVzYWdlOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmEmbEdpdmUgQ29tbWFuZCBVc2FnZSINCiAgLSAiJjdVc2FnZTogL2JvdW50eSBnaXZlIDxwbGF5ZXI+IDxpdGVtX25hbWU+IDxhbW91bnQ+IFs8bXVsdGlwbGllcj4gPHRpbWU+IDxmYWlsdXJlPl0iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KZ2l2ZS1hdmFpbGFibGUtaXRlbXM6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYSZsQXZhaWxhYmxlIEl0ZW1zIg0KICAtICImN0F2YWlsYWJsZSBpdGVtczogdHJhY2tlciwgamFtbWVyLCB1YXYsIG1hbnVhbC1ib29zdCwgbWFudWFsLWZyZW56eSwgY2hyb25vcy1zaGFyZCwgcmV2ZXJzZS1ib3VudHkiDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KZ2l2ZS1pbnZhbGlkLWFtb3VudDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxJbnZhbGlkIEFtb3VudCINCiAgLSAiJjdBbW91bnQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlci4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KZ2l2ZS1pbnZhbGlkLWFtb3VudC1mb3JtYXQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsSW52YWxpZCBBbW91bnQgRm9ybWF0Ig0KICAtICImN0ludmFsaWQgYW1vdW50LiBQbGVhc2UgZW50ZXIgYSB2YWxpZCBudW1iZXIuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmdpdmUtcGxheWVyLW5vdC1mb3VuZDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxQbGF5ZXIgTm90IEZvdW5kIg0KICAtICImN1BsYXllciAmYyclYm91bnRpZXNwbHVzX3BsYXllciUnICY3bm90IGZvdW5kIG9yIG5vdCBvbmxpbmUuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmdpdmUtdW5rbm93bi1pdGVtOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbFVua25vd24gSXRlbSINCiAgLSAiJjdVbmtub3duIGl0ZW06ICVib3VudGllc3BsdXNfaXRlbSUiDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KZ2l2ZS1zdWNjZXNzOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmEmbEl0ZW0gR2l2ZW4gU3VjY2Vzc2Z1bGx5Ig0KICAtICImN1N1Y2Nlc3NmdWxseSBnYXZlICVib3VudGllc3BsdXNfaXRlbV9jb3VudCV4ICVib3VudGllc3BsdXNfaXRlbSUgdG8gJWJvdW50aWVzcGx1c19wbGF5ZXIlIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmdpdmUtcmVjZWl2ZWQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYSZsSXRlbSBSZWNlaXZlZCINCiAgLSAiJjdZb3UgcmVjZWl2ZWQgJWJvdW50aWVzcGx1c19pdGVtX2NvdW50JXggJWJvdW50aWVzcGx1c19pdGVtJSBmcm9tICVib3VudGllc3BsdXNfc2VuZGVyJSINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpnaXZlLWludmVudG9yeS1mdWxsOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEludmVudG9yeSBGdWxsIg0KICAtICImN1BsYXllcidzIGludmVudG9yeSBpcyBmdWxsLiBTb21lIGl0ZW1zIHdlcmUgZHJvcHBlZCBvbiB0aGUgZ3JvdW5kLiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpnaXZlLWZhaWxlZC1jcmVhdGU6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsSXRlbSBDcmVhdGlvbiBGYWlsZWQiDQogIC0gIiY3RmFpbGVkIHRvIGNyZWF0ZSBpdGVtOiAlYm91bnRpZXNwbHVzX2l0ZW0lLiBUaGUgaXRlbSBzeXN0ZW0gbWF5IG5vdCBiZSBpbml0aWFsaXplZC4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KZ2l2ZS1pbnZhbGlkLWZyZW56eS1wYXJhbXM6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsSW52YWxpZCBGcmVuenkgUGFyYW1ldGVycyINCiAgLSAiJjdJbnZhbGlkIHBhcmFtZXRlcnMgZm9yIG1hbnVhbC1mcmVuenkuIFVzYWdlOiA8bXVsdGlwbGllcj4gPHRpbWU+IDxmYWlsdXJlPiINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQoNCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQojIEJvdW50eUdVSSBNZXNzYWdlcw0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCmJvdW50eS1ndWktZGlzYWJsZWQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsQm91bnR5IEdVSSBEaXNhYmxlZCINCiAgLSAiJjdUaGUgQm91bnR5IEh1bnRlciBHVUkgaXMgZGlzYWJsZWQgc2luY2Ugc2t1bGwgdHVybi1pbiBpcyBvZmYuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmludmFsaWQtYm91bnR5LWNsaWNrOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEludmFsaWQgQm91bnR5IFNlbGVjdGlvbiINCiAgLSAiJjdJbnZhbGlkIGJvdW50eSBzZWxlY3Rpb24hIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCnNlYXJjaC1wcm9tcHQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImZSZsU2VhcmNoIEJvdW50eSINCiAgLSAiJjdUeXBlIHRoZSBwbGF5ZXIgbmFtZSB0byBzZWFyY2ggZm9yIGEgYm91bnR5IGluIGNoYXQiDQogIC0gIiY3b3IgdHlwZSAnY2FuY2VsJyB0byByZXR1cm4gdG8gdGhlIEdVSS4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYm91bnR5LXBsYXllci1ub3QtZm91bmQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsUGxheWVyIE5vdCBGb3VuZCINCiAgLSAiJjdQbGF5ZXIgJmUlYm91bnRpZXNwbHVzX3RhcmdldCUmNyBub3QgZm91bmQuIg0KICAtICImN1RyeSBhZ2FpbiBvciB0eXBlICdjYW5jZWwnIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCnNlYXJjaC10aW1lb3V0Og0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbFNlYXJjaCBUaW1lb3V0Ig0KICAtICImN1NlYXJjaCBwcm9tcHQgdGltZWQgb3V0IGFmdGVyIDMwIHNlY29uZHMuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCnNlYXJjaC1jYW5jZWxsZWQ6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYSZsU2VhcmNoIENhbmNlbGxlZCINCiAgLSAiJjdTZWFyY2ggY2FuY2VsbGVkLiBSZXR1cm5pbmcgdG8gQm91bnR5IEdVSS4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KDQojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KIyBTaG9wIE1lc3NhZ2VzDQojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0Kc2hvcC1kaXNhYmxlZDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxTaG9wIERpc2FibGVkIg0KICAtICImN1RoZSBIdW50ZXJzIERlbiBzaG9wIGlzIGRpc2FibGVkISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpzaG9wLWd1aS1wbHVzLWVycm9yOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbFNob3BHVUlQbHVzIEVycm9yIg0KICAtICImN0ZhaWxlZCB0byBvcGVuIFNob3BHVUlQbHVzIHNob3AuIFVzaW5nIGRlZmF1bHQgSHVudGVycyBEZW4uIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCnB1cmNoYXNlLXN1Y2Nlc3M6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYSZsUHVyY2hhc2UgU3VjY2Vzc2Z1bCINCiAgLSAiJjdTdWNjZXNzZnVsbHkgcHVyY2hhc2VkICVib3VudGllc3BsdXNfaXRlbSUhIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCnB1cmNoYXNlLWZhaWxlZDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxQdXJjaGFzZSBGYWlsZWQiDQogIC0gIiY3RmFpbGVkIHRvIHB1cmNoYXNlICVib3VudGllc3BsdXNfaXRlbSUhIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmluc3VmZmljaWVudC1mdW5kczoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxJbnN1ZmZpY2llbnQgRnVuZHMiDQogIC0gIiY3WW91IG5lZWQgJmUlYm91bnRpZXNwbHVzX3JlcXVpcmVkX2Ftb3VudCUmYyB0byBwdXJjaGFzZSB0aGlzIGl0ZW0hIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmluc3VmZmljaWVudC14cDoNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxJbnN1ZmZpY2llbnQgWFAiDQogIC0gIiY3WW91IG5lZWQgJmUlYm91bnRpZXNwbHVzX3JlcXVpcmVkX2Ftb3VudCUgWFAgbGV2ZWxzJmMgdG8gcHVyY2hhc2UgdGhpcyBpdGVtISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQppbnN1ZmZpY2llbnQtc2t1bGxzOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEluc3VmZmljaWVudCBTa3VsbHMiDQogIC0gIiY3WW91IG5lZWQgJmUlYm91bnRpZXNwbHVzX3JlcXVpcmVkX2Ftb3VudCUgYm91bnR5IHNrdWxscyZjIHRvIHB1cmNoYXNlIHRoaXMgaXRlbSEiDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KaW52YWxpZC1jdXJyZW5jeS10eXBlOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEludmFsaWQgQ3VycmVuY3kgVHlwZSINCiAgLSAiJjdJbnZhbGlkIGNsaWNrIHR5cGUgZm9yIG11bHRpLWN1cnJlbmN5IGl0ZW0hIFVzZSBsZWZ0LWNsaWNrIHRvIHB1cmNoYXNlIHdpdGggbW9uZXkuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmludmFsaWQtc2t1bGw6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsSW52YWxpZCBTa3VsbCINCiAgLSAiJjdPbmx5IGFjdGl2ZSBib3VudHkgc2t1bGxzIGNhbiBiZSB1c2VkIGZvciB0aGlzIHB1cmNoYXNlISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQppbnZlbnRvcnktZnVsbC1zaG9wOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEludmVudG9yeSBGdWxsIg0KICAtICImN1lvdXIgaW52ZW50b3J5IGlzIHRvbyBmdWxsIHRvIHJlY2VpdmUgdGhpcyBpdGVtISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQoNCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQojIEdlbmVyYWwgQm91bnR5IE1lc3NhZ2VzDQojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KYm91bnR5LWNsYWltZWQtbWVzc2FnZToNCiAga2lsbGVyOg0KICAgIGVuYWJsZWQ6IHRydWUNCiAgICBtZXNzYWdlOg0KICAgICAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogICAgICAtICImYyZsQm91bnR5IENsYWltZWQiDQogICAgICAtICImN1lvdSBjbGFpbWVkIHRoZSBib3VudHkgb24gJmUlYm91bnRpZXNwbHVzX2tpbGxlZCUmNyBhbmQgcmVjZWl2ZWQgJmUlYm91bnRpZXNwbHVzX2Ftb3VudCUmNyEiDQogICAgICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgYnJvYWRjYXN0Og0KICAgIGVuYWJsZWQ6IHRydWUNCiAgICBtZXNzYWdlOg0KICAgICAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogICAgICAtICImYyZsQm91bnR5IENsYWltZWQgQnJvYWRjYXN0Ig0KICAgICAgLSAiJjclYm91bnRpZXNwbHVzX2tpbGxlciUmNyBjbGFpbWVkIHRoZSBib3VudHkgb24gJmUlYm91bnRpZXNwbHVzX2tpbGxlZCUmNyB3b3J0aCAmZSVib3VudGllc3BsdXNfYW1vdW50JSY3ISINCiAgICAgIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYm91bnR5LWtpbGxlZC1uby1yZXdhcmQ6DQogIGVuYWJsZWQ6IHRydWUNCiAgbWVzc2FnZToNCiAgICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgICAtICImYyZsQm91bnR5IEtpbGxlZCINCiAgICAtICImN1lvdSBraWxsZWQgJmUlYm91bnRpZXNwbHVzX2tpbGxlZCUmNywgd2hvIGhhZCBhIGJvdW50eSBvbiB0aGVpciBoZWFkISINCiAgICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCnNrdWxsLWRyb3BwZWQtbWVzc2FnZToNCiAga2lsbGVyOg0KICAgIGVuYWJsZWQ6IHRydWUNCiAgICBtZXNzYWdlOg0KICAgICAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogICAgICAtICImYyZsU2t1bGwgRHJvcHBlZCINCiAgICAgIC0gIiY3WW91IGtpbGxlZCAmZSVib3VudGllc3BsdXNfa2lsbGVkJSAmN3dobyBoYWQgYm91bnRpZXMhIg0KICAgICAgLSAiJjdUaGVpciBza3VsbCBoYXMgYmVlbiBkcm9wcGVkIGZvciB5b3UgdG8gdHVybiBpbi4iDQogICAgICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAga2lsbGVkOg0KICAgIGVuYWJsZWQ6IHRydWUNCiAgICBtZXNzYWdlOg0KICAgICAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogICAgICAtICImYyZsU2t1bGwgRHJvcHBlZCINCiAgICAgIC0gIiY3WW91IHdlcmUga2lsbGVkIGJ5ICZlJWJvdW50aWVzcGx1c19raWxsZXIlJjchIg0KICAgICAgLSAiJjdZb3VyIGJvdW50eSBza3VsbCB3YXMgZHJvcHBlZC4iDQogICAgICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCnNrdWxsLWRyb3AtaW5zdHJ1Y3Rpb246DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsU2t1bGwgVHVybi1JbiBJbnN0cnVjdGlvbiINCiAgLSAiJjdUYWtlIHRoZSBza3VsbCB0byB0aGUgJWJvdW50aWVzcGx1c19ib3VudHlfaHVudGVyX2J1dHRvbiUgdG8gY2xhaW0geW91ciByZXdhcmRzISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQoNCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQojIEJvb3N0L0ZyZW56eSBNZXNzYWdlcw0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCm5vLWJvdW50aWVzLXRvLWJvb3N0Og0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbE5vIEJvdW50aWVzIHRvIEJvb3N0Ig0KICAtICImN05vIGJvdW50aWVzIGF2YWlsYWJsZSB0byBib29zdCEiDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KYm9vc3RlZC1ib3VudHktbWVzc2FnZToNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxCb29zdGVkIEJvdW50eSINCiAgLSAiJjclYm91bnRpZXNwbHVzX3RhcmdldCUmNydzIGJvdW50eSBoYXMgYmVlbiBib29zdGVkIGJ5ICZlJWJvdW50aWVzcGx1c19tdWx0aXBsaWVyJXgmNyEiDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KbWFudWFsLWZyZW56eS1zdWNjZXNzOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbE1hbnVhbCBGcmVuenkgQWN0aXZhdGVkIg0KICAtICImN0FsbCBib3VudHkgcmV3YXJkcyBhcmUgbm93IGJvb3N0ZWQgYnkgJmUlYm91bnRpZXNwbHVzX211bHRpcGxpZXIleCY3IGZvciAmZSVib3VudGllc3BsdXNfdGltZSUmNyBtaW51dGVzISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQptYW51YWwtZnJlbnp5LWZhaWx1cmU6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsTWFudWFsIEZyZW56eSBGYWlsZWQiDQogIC0gIiY3VGhlIGZyZW56eSBhY3RpdmF0aW9uIHdhcyB1bnN1Y2Nlc3NmdWwuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCm1hbnVhbC1mcmVuenktYWxyZWFkeS1hY3RpdmU6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsRnJlbnp5IEFscmVhZHkgQWN0aXZlIg0KICAtICImN0ZyZW56eSBtb2RlIGlzIGFscmVhZHkgYWN0aXZlISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQptYW51YWwtZnJlbnp5LXNlcnZlci1icm9hZGNhc3Q6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsTWFudWFsIEZyZW56eSBCcm9hZGNhc3QiDQogIC0gIiY3JWJvdW50aWVzcGx1c19wbGF5ZXIlICY3aGFzIGFjdGl2YXRlZCBhIG1hbnVhbCBmcmVuenkhIg0KICAtICImN0FsbCBib3VudHkgcmV3YXJkcyBhcmUgYm9vc3RlZCBieSAmZSVib3VudGllc3BsdXNfbXVsdGlwbGllciV4JjchIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmZyZW56eS1tb2RlLWFjdGl2YXRlZC1tZXNzYWdlOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEZyZW56eSBNb2RlIEFjdGl2YXRlZCINCiAgLSAiJjdBbGwgYm91bnRpZXMgYXJlIG5vdyBib29zdGVkIGJ5ICZjJWJvdW50aWVzcGx1c19mcmVuenkleCAmN2ZvciAlYm91bnRpZXNwbHVzX2R1cmF0aW9uJSBzZWNvbmRzISINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQpmcmVuenktbW9kZS1lbmRlZC1tZXNzYWdlOg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgLSAiJmMmbEZyZW56eSBNb2RlIEVuZGVkIg0KICAtICImN0ZyZW56eSBNb2RlIGhhcyBlbmRlZCEgQWxsIGJvdW50eSBtdWx0aXBsaWVycyBoYXZlIHJldHVybmVkIHRvIG5vcm1hbC4iDQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0Kbm8tYm91bnRpZXMtZm9yLWZyZW56eToNCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIC0gIiZjJmxObyBCb3VudGllcyBmb3IgRnJlbnp5Ig0KICAtICImN05vIGJvdW50aWVzIGF2YWlsYWJsZSBmb3IgRnJlbnp5IE1vZGUhIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCg0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiMgQWRtaW4gTWVzc2FnZXMNCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpib3VudHktcmVsb2FkLXN1Y2Nlc3M6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYSZsUmVsb2FkIFN1Y2Nlc3NmdWwiDQogIC0gIiY3Q29uZmlndXJhdGlvbiBmaWxlcyByZWxvYWRlZCBzdWNjZXNzZnVsbHkuIg0KICAtICImNyZtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSINCmJvdW50eS1yZWxvYWQtZXJyb3I6DQogIC0gIiY3Jm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAtICImYyZsUmVsb2FkIEVycm9yIg0KICAtICImN0Vycm9yIHJlbG9hZGluZyBjb25maWd1cmF0aW9uIGZpbGVzOiAlYm91bnRpZXNwbHVzX2Vycm9yJSINCiAgLSAiJjcmbS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAByZXNvdXJjZXMvcGx1Z2luLnltbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMDIxNDYgMTUwMjU0NDUxMDQgMDEzMjY2ACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG5hbWU6IEJvdW50aWVzUGx1cw0KdmVyc2lvbjogMS4wDQptYWluOiB0b255MjYuYm91bnRpZXNQbHVzLkJvdW50aWVzUGx1cw0KYXBpLXZlcnNpb246IDEuMjENCmRlcGVuZDogW1ZhdWx0LCBQbGFjZWhvbGRlckFQSV0NCnNvZnRkZXBlbmQ6IFtTaG9wR1VJUGx1cywgUHJvdG9jb2xMaWJdDQpjb21tYW5kczoNCiAgYm91bnR5Og0KICAgIGRlc2NyaXB0aW9uOiBNYW5hZ2UgYm91bnRpZXMgb24gcGxheWVycw0KICAgIHVzYWdlOiAvPGNvbW1hbmQ+IFtzZXR8Y2hlY2t8Y2FuY2VsfHN0YXRzfHN0YXR1c3xnaXZlfHJlbG9hZHxmcmVuenl8dG9wXQ0KICAgIHBlcm1pc3Npb246IGJvdW50aWVzcGx1cy5ib3VudHkNCnBlcm1pc3Npb25zOg0KICBib3VudGllc3BsdXMuYm91bnR5Og0KICAgIGRlc2NyaXB0aW9uOiBBbGxvd3Mgc2V0dGluZyBib3VudGllcw0KICAgIGRlZmF1bHQ6IHRydWUNCiAgYm91bnRpZXNwbHVzLmJvdW50eS5jaGVjazoNCiAgICBkZXNjcmlwdGlvbjogQWxsb3dzIGNoZWNraW5nIGJvdW50aWVzDQogICAgZGVmYXVsdDogdHJ1ZQ0KICBib3VudGllc3BsdXMuYm91bnR5LmNhbmNlbDoNCiAgICBkZXNjcmlwdGlvbjogQWxsb3dzIGNhbmNlbGxpbmcgYm91bnRpZXMNCiAgICBkZWZhdWx0OiB0cnVlDQogIGJvdW50aWVzcGx1cy5ib3VudHkuYm9vc3Q6DQogICAgZGVzY3JpcHRpb246IEFsbG93cyBtYW51YWxseSBib29zdGluZyBib3VudGllcw0KICAgIGRlZmF1bHQ6IG9wDQogIGJvdW50aWVzcGx1cy5ib3VudHkuZ2l2ZToNCiAgICBkZXNjcmlwdGlvbjogQWxsb3dzIGdpdmluZyBib3VudHkgaXRlbXMgdG8gcGxheWVycw0KICAgIGRlZmF1bHQ6IG9wDQogIGJvdW50aWVzcGx1cy5ib3VudHkuc3RhdHM6DQogICAgZGVzY3JpcHRpb246IEFsbG93cyB2aWV3aW5nIGJvdW50eSBzdGF0aXN0aWNzDQogICAgZGVmYXVsdDogdHJ1ZQ0KICBib3VudGllc3BsdXMuYm91bnR5LnJlbG9hZDoNCiAgICBkZXNjcmlwdGlvbjogQWxsb3dzIHJlbG9hZGluZyB0aGUgcGx1Z2luDQogICAgZGVmYXVsdDogb3ANCiAgYm91bnRpZXNwbHVzLnBhcnRpY2xlOg0KICAgIGRlc2NyaXB0aW9uOiBBbGxvd3MgdG9nZ2xpbmcgcGFydGljbGUgdmlzaWJpbGl0eQ0KICAgIGRlZmF1bHQ6IHRydlc291cmNlcy9TdG9yYWdlLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA3NzcgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAwMDAwMCAxNTAyNjA2MzMzMCAwMTI2NDQAIDUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcmVzb3VyY2VzL1N0b3JhZ2UvQm91bnR5U3RvcmFnZS55bWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDAwMzI1IDE1MDI0MTc3MzQwIDAxNjIwMQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjIEJvdW50eSBzdG9yYWdlIGZpbGUgZm9yIEJvdW50aWVzUGx1cw0KYm91bnRpZXM6DQojIERhdGEgd2lsbCBiZSBzdG9yZWQgaGVyZSBpbiB0aGUgZm9ybWF0Og0KIyA8dGFyZ2V0VVVJRD46DQojICAgPHNldHRlclVVSUQ+Og0KIyAgICAgYW1vdW50OiA8YW1vdW50Pg0KIyAgICAgc2V0X3RpbWU6IDx0aW1lc3RhbXA+DQojICAgICBleHBpcmVfdGltZTogPHRpbWVzdGFtcD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJlc291cmNlcy9TdG9yYWdlL1N0YXRTdG9yYWdlLnltbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAwMDI3NCAxNTAyNDE3NzM0MCAwMTU2MzcAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIyBQbGF5ZXIgc3RhdGlzdGljcyBmb3IgQm91bnRpZXNQbHVzDQpwbGF5ZXJzOg0KIyBFeGFtcGxlIGVudHJ5ICh3aWxsIGJlIHBvcHVsYXRlZCBkeW5hbWljYWxseSkNCiMgPHBsYXllci11dWlkPjoNCiMgICBjbGFpbWVkOiAwDQojICAgc3Vydml2ZWQ6IDANCiMgICBtb25leV9lYXJuZWQ6IDAuMA0KIyAgIHJlcHV0YXRpb246IDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAByZXNvdXJjZXMvR1VJcy9BZGRJdGVtc0dVSS55bWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMDUyMTUgMTUwMjQxNzczNDAgMDE0NjQxACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMgQWRkSXRlbXNHVUkgQ29uZmlndXJhdGlvbiBGaWxlDQojIENvbmZpZ3VyZSB0aGUgQWRkIEl0ZW1zIHRvIEJvdW50eSBHVUkgYXBwZWFyYW5jZSBhbmQgZnVuY3Rpb25hbGl0eQ0KDQojIEdVSSBTZXR0aW5ncw0KZ3VpLXRpdGxlOiAiICAgICAgICAgICY0JmzimpQgJjQmbCZuQWRkIEl0ZW1zJjQmbCAmNCZs4pqUIg0KZ3VpLXNpemU6IDU0DQoNCiMgVGl0bGUgRHVyYXRpb24gU2V0dGluZ3MgKGZvciBibGFja2xpc3RlZCBpdGVtIHJlamVjdGlvbikNCnRpdGxlLWR1cmF0aW9uOg0KICBmYWRlLWluOiAxMCAgIyBUaW1lIHRvIGZhZGUgaW4gdGhlIHRpdGxlIChpbiB0aWNrcykNCiAgc3RheTogNDAgICAgICMgVGltZSB0aGUgdGl0bGUgc3RheXMgdmlzaWJsZSAoaW4gdGlja3MpDQogIGZhZGUtb3V0OiAxMCAjIFRpbWUgdG8gZmFkZSBvdXQgdGhlIHRpdGxlIChpbiB0aWNrcykNCnJlb3Blbi1kZWxheTogNjAgIyBEZWxheSBiZWZvcmUgcmVvcGVuaW5nIEdVSSBhZnRlciBibGFja2xpc3RlZCBpdGVtIHJlamVjdGlvbiAoaW4gdGlja3MpDQoNCiMgQ29udGVudCBBcmVhIENvbmZpZ3VyYXRpb24NCmNvbnRlbnQtYXJlYToNCiAgIyBEZWZpbmUgd2hpY2ggc2xvdHMgYXJlIGF2YWlsYWJsZSBmb3IgaXRlbSBwbGFjZW1lbnQNCiAgYXZhaWxhYmxlLXNsb3RzOiBbMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyOCwgMjksIDMwLCAzMSwgMzIsIDMzLCAzNCwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDNdDQoNCiMgQm9yZGVyIENvbmZpZ3VyYXRpb24NCmJvcmRlcjoNCiAgZW5hYmxlZDogdHJ1ZQ0KICBtYXRlcmlhbDogIldISVRFX1NUQUlORURfR0xBU1NfUEFORSINCiAgbmFtZTogIiAiDQogIGxvcmU6IFtdDQogIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogIHNsb3RzOiBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTcsIDE4LCAyNiwgMjcsIDM1LCAzNiwgNDQsIDQ1LCA0NiwgNDgsIDUwLCA1MiwgNTNdDQoNCiMgQnV0dG9uIENvbmZpZ3VyYXRpb24NCmJ1dHRvbnM6DQogIGNhbmNlbDoNCiAgICBlbmFibGVkOiB0cnVlDQogICAgbWF0ZXJpYWw6ICJSRURTVE9ORSINCiAgICBzbG90OiA0Nw0KICAgIG5hbWU6ICImYyZsQ2FuY2VsIg0KICAgIGxvcmU6DQogICAgICAtICImN0NsaWNrIHRvIGNhbmNlbCBhbmQgcmV0dXJuIg0KICAgICAgLSAiJjd0byB0aGUgQ3JlYXRlIEJvdW50eSBHVUkiDQogICAgICAtICIiDQogICAgICAtICImZU5vIGl0ZW1zIHdpbGwgYmUgcmV0dXJuZWQhIg0KICAgICAgLSAiJmVVc2UgQ29uZmlybSB0byBzYXZlIGNoYW5nZXMuIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogIGluZm86DQogICAgZW5hYmxlZDogdHJ1ZQ0KICAgIG1hdGVyaWFsOiAiUEFQRVIiDQogICAgc2xvdDogNDkNCiAgICBuYW1lOiAiJmUmbEhvdyB0byBVc2UiDQogICAgbG9yZToNCiAgICAgIC0gIiY3RHJhZyBpdGVtcyBmcm9tIHlvdXIgaW52ZW50b3J5Ig0KICAgICAgLSAiJjdpbnRvIHRoZSBlbXB0eSBzbG90cyBhYm92ZSINCiAgICAgIC0gIiINCiAgICAgIC0gIiY3VGhlc2UgaXRlbXMgd2lsbCBiZSBnaXZlbiBhcyINCiAgICAgIC0gIiY3cmV3YXJkcyB0byB3aG9ldmVyIGNsYWltcyINCiAgICAgIC0gIiY3dGhlIGJvdW50eSEiDQogICAgICAtICIiDQogICAgICAtICImYUNsaWNrICYyQ29uZmlybSAmYXRvIHNhdmUgY2hhbmdlcyEiDQogICAgICAtICIiDQogICAgICAtICImN0N1cnJlbnQgaXRlbXM6ICZmJWJvdW50aWVzcGx1c19pdGVtX2NvdW50JSINCiAgICAgIC0gIiY3VG90YWwgdmFsdWU6ICZhJCVib3VudGllc3BsdXNfaXRlbV92YWx1ZSUiDQogICAgZW5jaGFudG1lbnQtZ2xvdzogZmFsc2UNCiAgY29uZmlybToNCiAgICBlbmFibGVkOiB0cnVlDQogICAgbWF0ZXJpYWw6ICJFTUVSQUxEIg0KICAgIHNsb3Q6IDUxDQogICAgbmFtZTogIiZhJmxDb25maXJtIg0KICAgIGxvcmU6DQogICAgICAtICImN0NsaWNrIHRvIGNvbmZpcm0gdGhlc2UgaXRlbXMiDQogICAgICAtICImN2FuZCByZXR1cm4gdG8gQ3JlYXRlIEJvdW50eSBHVUkiDQogICAgICAtICIiDQogICAgICAtICImYUl0ZW1zIHdpbGwgYmUgc2F2ZWQhIg0KICAgICAgLSAiIg0KICAgICAgLSAiJjdUb3RhbCBpdGVtczogJmYlYm91bnRpZXNwbHVzX2d1aV9pdGVtX2NvdW50JSINCiAgICAgIC0gIiY3VG90YWwgdmFsdWU6ICZhJCVib3VudGllc3BsdXNfZ3VpX2l0ZW1fdmFsdWUlIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCg0KIyBNZXNzYWdlcw0KbWVzc2FnZXM6DQogIG5vLWVtcHR5LXNsb3RzOiAiJmNObyBlbXB0eSBzbG90cyBhdmFpbGFibGUgaW4gdGhlIGl0ZW0gR1VJISINCiAgY2hhbmdlcy1kaXNjYXJkZWQ6ICImZUNoYW5nZXMgZGlzY2FyZGVkLiBVc2UgQ29uZmlybSB0byBzYXZlIGl0ZW0gY2hhbmdlcy4iDQogIG5vLWNoYW5nZXM6ICImZVJldHVybmVkIHRvIENyZWF0ZSBCb3VudHkgR1VJLiBObyBjaGFuZ2VzIHdlcmUgbWFkZS4iDQogIGl0ZW1zLWNvbmZpcm1lZDogIiZhSXRlbXMgYWRkZWQgdG8gYm91bnR5ISINCiAgaXRlbXMtY29uZmlybWVkLXdpdGgtdmFsdWU6ICImYUl0ZW1zIGFkZGVkIHRvIGJvdW50eSEgJmVUb3RhbCB2YWx1ZTogJmEkJWJvdW50aWVzcGx1c19pdGVtX3ZhbHVlJSINCiAgaXRlbXMtdXBkYXRlZDogIiZhSXRlbXMgdXBkYXRlZCBmb3IgYm91bnlc291cmNlcy9HVUlzL0JvdW50eUNhbmNlbEdVSS55bWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAwNDUyMyAxNTAyNDE3NzM0MCAwMTU1MzYAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQojIEJvdW50eUNhbmNlbEdVSSBDb25maWd1cmF0aW9uIEZpbGUNCiMgQ29uZmlndXJlIHRoZSBib3VudHkgY2FuY2VsbGF0aW9uIEdVSSBhcHBlYXJhbmNlIGFuZCBtZXNzYWdlcw0KDQojIEdVSSBDb25maWd1cmF0aW9uDQpndWk6DQogIHRpdGxlOiAiICAgICAgICAgJjQmbOKalCAmNCZsJm5DYW5jZWwgQSBCb3VudHkmNCZsICY0JmzimpQiDQogIHNpemU6IDU0ICMgTXVzdCBiZSBhIG11bHRpcGxlIG9mIDkgKDksIDE4LCAyNywgMzYsIDQ1LCA1NCkNCiAgaXRlbXMtcGVyLXBhZ2U6IDM2DQoNCiMgQm9yZGVyIENvbmZpZ3VyYXRpb24NCmJvcmRlcjoNCiAgZW5hYmxlZDogdHJ1ZQ0KICBtYXRlcmlhbDogIkdSQVlfU1RBSU5FRF9HTEFTU19QQU5FIiAjIFVzZSB2ZXJzaW9uLWFwcHJvcHJpYXRlIGdsYXNzIHBhbmUNCiAgbmFtZTogIiAiDQogIGxvcmU6IFtdDQogIHNsb3RzOiAjIEJvcmRlciBzbG90cyAoMC04LCA5LCAxNywgMTgsIDI2LCAyNywgMzUsIDM2LCA0NCwgNDUtNTMpDQogICAgLSAwLTgNCiAgICAtIDkNCiAgICAtIDE3DQogICAgLSAxOA0KICAgIC0gMjYNCiAgICAtIDI3DQogICAgLSAzNQ0KICAgIC0gMzYNCiAgICAtIDQ0DQogICAgLSA0NS01Mw0KDQojIEJvdW50eSBJdGVtIENvbmZpZ3VyYXRpb24gKFBsYXllciBoZWFkcyByZXByZXNlbnRpbmcgYm91bnRpZXMpDQpib3VudHktaXRlbToNCiAgbmFtZTogIiZjQ2FuY2VsIEJvdW50eSBvbiAmZSV0YXJnZXQlIg0KICBsb3JlOg0KICAgIC0gIiY3VGFyZ2V0OiAmZiV0YXJnZXQlIg0KICAgIC0gIiY3QW1vdW50OiAmYSVhbW91bnQlIg0KICAgIC0gIiY3U2V0IFRpbWU6ICZlJXNldF90aW1lJSINCiAgICAtICIiDQogICAgLSAiJmVDbGljayB0byBjYW5jZWwgdGhpcyBib3VudHkiDQogICAgLSAiJmNSZWZ1bmQ6ICZhJXJlZnVuZCUiDQogICAgLSAiJjdUYXg6ICZjJXRheF9hbW91bnQlIg0KICBpZGVudGlmaWVyOiAiQk9VTlRZX0NBTkNFTF9JVEVNIg0KDQojIE5hdmlnYXRpb24gQnV0dG9ucw0KbmF2aWdhdGlvbjoNCiAgcHJldmlvdXMtcGFnZToNCiAgICBlbmFibGVkOiB0cnVlDQogICAgc2xvdDogNDgNCiAgICBtYXRlcmlhbDogIkFSUk9XIg0KICAgIG5hbWU6ICImYVByZXZpb3VzIFBhZ2UiDQogICAgbG9yZToNCiAgICAgIC0gIiY3R28gdG8gcGFnZSAmZSVwcmV2aW91c19wYWdlJSINCiAgICAgIC0gIiINCiAgICAgIC0gIiZhQ2xpY2sgdG8gbmF2aWdhdGUiDQogICAgaWRlbnRpZmllcjogIlBSRVZJT1VTX1BBR0UiDQoNCiAgbmV4dC1wYWdlOg0KICAgIGVuYWJsZWQ6IHRydWUNCiAgICBzbG90OiA1MA0KICAgIG1hdGVyaWFsOiAiQVJST1ciDQogICAgbmFtZTogIiZhTmV4dCBQYWdlIg0KICAgIGxvcmU6DQogICAgICAtICImN0dvIHRvIHBhZ2UgJmUlbmV4dF9wYWdlJSINCiAgICAgIC0gIiINCiAgICAgIC0gIiZhQ2xpY2sgdG8gbmF2aWdhdGUiDQogICAgaWRlbnRpZmllcjogIk5FWFRfUEFHRSINCg0KICBpbmZvLWJ1dHRvbjoNCiAgICBlbmFibGVkOiB0cnVlDQogICAgc2xvdDogNDkNCiAgICBtYXRlcmlhbDogIkJPT0siDQogICAgbmFtZTogIiY2Qm91bnR5IENhbmNlbGxhdGlvbiBJbmZvIg0KICAgIGxvcmU6DQogICAgICAtICImN1RvdGFsIEJvdW50aWVzOiAmZSV0b3RhbF9ib3VudGllcyUiDQogICAgICAtICImN1BhZ2U6ICZlJWN1cnJlbnRfcGFnZSUmNy8mZSV0b3RhbF9wYWdlcyUiDQogICAgICAtICIiDQogICAgICAtICImZVRheCBSYXRlOiAmYyV0YXhfcmF0ZSUlIg0KICAgICAgLSAiJmVUb3RhbCBSZWZ1bmQ6ICZhJXRvdGFsX3JlZnVuZCUiDQogICAgaWRlbnRpZmllcjogIklORk9fQlVUVE9OIg0KDQojIE1lc3NhZ2VzIENvbmZpZ3VyYXRpb24NCm1lc3NhZ2VzOg0KICBuby1ib3VudGllcy10by1jYW5jZWw6ICIlcHJlZml4JSZjWW91IGhhdmUgbm8gYm91bnRpZXMgdG8gY2FuY2VsISINCiAgYm91bnR5LWNhbmNlbGxlZDogIiVwcmVmaXglJmFCb3VudHkgY2FuY2VsbGVkISAmZVJlZnVuZGVkOiAmYSVyZWZ1bmQlIg0KICBib3VudHktY2FuY2VsLXRheDogIiVwcmVmaXglJmVBICZjJXRheF9yYXRlJSUgJmV0YXggaGFzIGJlZW4gYXBwbGllZC4gJmVUYXggYW1vdW50OiAmYyV0YXhfYW1vdW50JSINCiAgY2FuY2VsLWVycm9yOiAiJXByZWZpeCUmY0Vycm9yIGNhbmNlbGxpbmcgYm91bnR5ISBQbGVhc2UgdHJ5IGFnYWluLiINCiAgaW52ZW50b3J5LWZ1bGw6ICIlcHJlZml4JSZjWW91ciBpbnZlbnRvcnkgaXMgZnVsbCEgUGxlYXNlIG1ha2Ugc3BhY2UgYW5kIHRyeSBhZ2Fpbi4iDQogIGNvbmZpcm0tY2FuY2VsOiAiJXByZWZpeCUmZUFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjYW5jZWwgdGhlIGJvdW50eSBvbiAmYyV0YXJnZXQlJmU/IFR5cGUgJmEvYm91bnR5IGNvbmZpcm0gJmV0byBwcm9jZWVkLiIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJlc291cmNlcy9HVUlzL0JvdW50eUdVSS55bWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAyMTIxMSAxNTAyNjM1Nzc0MyAwMTQ0MzIAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBCb3VudHlHVUkgQ29uZmlndXJhdGlvbg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KZ3VpLXRpdGxlOiAiJmRCb3VudHkgSHVudGVyIg0KZ3VpLXNpemU6IDU0DQoNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiMgQm9yZGVyIFNldHRpbmdzDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQpib3JkZXI6DQogIG1hdGVyaWFsOiBXSElURV9TVEFJTkVEX0dMQVNTX1BBTkUNCiAgZW5jaGFudG1lbnQtZ2xvdzogZmFsc2UNCiAgc2xvdHM6IFswLCAxLCAyLCAzLCA1LCA2LCA3LCA4LCA5LCAxNywgMTgsIDI2LCAyNywgMzUsIDM2LCA0NF0NCg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBCb3VudHkgU2t1bGwgU2xvdHMNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiMgRGVmaW5lcyBzbG90cyB3aGVyZSBib3VudHkgc2t1bGxzIChub3JtYWwsIEJvb3N0ZWQsIEZyZW56eSwgc2VhcmNoIHJlc3VsdHMsIGZpbHRlcmVkKSBhcmUgcGxhY2VkDQojIFNsb3RzIG11c3QgYmUgMC01MywgdW5pcXVlLCBhbmQgbm90IG92ZXJsYXAgd2l0aCBib3JkZXIuc2xvdHMgb3IgUGx1Z2luLUl0ZW1zIHNsb3RzIChlLmcuLCA0LCA0NSwgNDctNTEsIDUzKQ0KYm91bnR5LXNrdWxsLXNsb3RzOg0KICBzbG90czogWzEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxOSwgMjAsIDIxLCAyMiwgMjMsIDI0LCAyNSwgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzRdDQoNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiMgQm91bnR5IEl0ZW0gRGlzcGxheSAoUGxheWVyIGhlYWRzIGluIGNlbnRlciBhcmVhKQ0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KYm91bnR5LWl0ZW06DQogIG5hbWU6ICImNCZsJWJvdW50aWVzcGx1c190YXJnZXQlICY3JmwmbygmNCZsJm8lYm91bnRpZXNwbHVzX29ubGluZV9zdGF0dXMlJjcmbCZvKSINCiAgbG9yZToNCiAgICAtICImNyZs4pymICZlU3RhdHVzOiAmYk5vIGFjdGl2ZSBib3VudHkiDQogICAgLSAiJjcmbOKcpiAmZU9ubGluZTogJWJvdW50aWVzcGx1c19vbmxpbmVfc3RhdHVzJSINCiAgICAtICImNyZs4pymICZlVG90YWwgUmV3YXJkOiAmYSVib3VudGllc3BsdXNfdG90YWxfcG9vbCUiDQogICAgLSAiJjcmbOKcpiAmZU1vbmV5OiAmYSVib3VudGllc3BsdXNfbW9uZXlfdmFsdWUlIg0KICAgIC0gIiY3JmzinKYgJmVYUDogJmIlYm91bnRpZXNwbHVzX2V4cF92YWx1ZSUiDQogICAgLSAiJjcmbOKcpiAmZUl0ZW1zOiAmZCVib3VudGllc3BsdXNfaXRlbV9jb3VudCUgJjcoJmQlYm91bnRpZXNwbHVzX2l0ZW1fdmFsdWUlJjcpIg0KICAgIC0gIiY3JmzinKYgJmVWYWx1ZSBJbmNyZWFzZTogJjYlYm91bnRpZXNwbHVzX3Bvb2xfaW5jcmVhc2VfcGVyY2VudCUlJSINCiAgICAtICImNyZs4pymICZlRXhwaXJlczogJmYlYm91bnRpZXNwbHVzX2V4cGlyZV90aW1lJSINCiAgICAtICIiDQogICAgLSAiJjcmbOKcpiAmZVNwb25zb3JzOiAmYyVib3VudGllc3BsdXNfdG9wM19zcG9uc29yc19jb21tYXMlIg0KICAgIC0gIiINCg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBCb29zdGVkIFNrdWxsIERpc3BsYXkgKHVzZWQgd2hlbiBhIGJvdW50eSBpcyBib29zdGVkKQ0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KYm9vc3RlZC1za3VsbDoNCiAgbmFtZTogIiY2JmwlYm91bnRpZXNwbHVzX3RhcmdldCUgJjcmbCgmNkJvb3N0ZWQgJWJvdW50aWVzcGx1c19ib29zdCV4KSINCiAgbG9yZToNCiAgICAtICImNyZs4pymICZlU3RhdHVzOiAmYk5vIGFjdGl2ZSBib3VudHkiDQogICAgLSAiJjcmbOKcpiAmZU9ubGluZTogJWJvdW50aWVzcGx1c19vbmxpbmVfc3RhdHVzJSINCiAgICAtICImNyZs4pymICZlVG90YWwgUmV3YXJkOiAmYSVib3VudGllc3BsdXNfdG90YWxfcG9vbCUiDQogICAgLSAiJjcmbOKcpiAmZU1vbmV5OiAmYSVib3VudGllc3BsdXNfbW9uZXlfdmFsdWUlIg0KICAgIC0gIiY3JmzinKYgJmVYUDogJmIlYm91bnRpZXNwbHVzX2V4cF92YWx1ZSUiDQogICAgLSAiJjcmbOKcpiAmZUl0ZW1zOiAmZCVib3VudGllc3BsdXNfaXRlbV9jb3VudCUgJjcoJmQlYm91bnRpZXNwbHVzX2l0ZW1fdmFsdWUlJjcpIg0KICAgIC0gIiY3JmzinKYgJmVWYWx1ZSBJbmNyZWFzZTogJjYlYm91bnRpZXNwbHVzX3Bvb2xfaW5jcmVhc2VfcGVyY2VudCUlJSINCiAgICAtICImNyZs4pymICZlRXhwaXJlczogJmYlYm91bnRpZXNwbHVzX2V4cGlyZV90aW1lJSINCiAgICAtICIiDQogICAgLSAiJjcmbOKcpiAmZVNwb25zb3JzOiAmYyVib3VudGllc3BsdXNfdG9wM19zcG9uc29yc19jb21tYXMlIg0KICAgIC0gIiY2ICY2fGwgJjdCb29zdDogJjYlYm91bnRpZXNwbHVzX2Jvb3N0JXgiDQogICAgLSAiJjgmbS0tLS0tLS0tLS0tLS0tLS0tLS0iDQogIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBGcmVuenkgU2t1bGwgRGlzcGxheSAodXNlZCBkdXJpbmcgRnJlbnp5IE1vZGUgZm9yIGFsbCBib3VudGllcykNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmZyZW56eS1za3VsbDoNCiAgbmFtZTogIiZjJmwlYm91bnRpZXNwbHVzX3RhcmdldCUgJjcmbCgmY0ZyZW56eSAlYm91bnRpZXNwbHVzX2ZyZW56eSV4KSINCiAgbG9yZToNCiAgICAtICImNyZs4pymICZlU3RhdHVzOiAmYk5vIGFjdGl2ZSBib3VudHkiDQogICAgLSAiJjcmbOKcpiAmZU9ubGluZTogJWJvdW50aWVzcGx1c19vbmxpbmVfc3RhdHVzJSINCiAgICAtICImNyZs4pymICZlVG90YWwgUmV3YXJkOiAmYSVib3VudGllc3BsdXNfdG90YWxfcG9vbCUiDQogICAgLSAiJjcmbOKcpiAmZU1vbmV5OiAmYSVib3VudGllc3BsdXNfbW9uZXlfdmFsdWUlIg0KICAgIC0gIiY3JmzinKYgJmVYUDogJmIlYm91bnRpZXNwbHVzX2V4cF92YWx1ZSUiDQogICAgLSAiJjcmbOKcpiAmZUl0ZW1zOiAmZCVib3VudGllc3BsdXNfaXRlbV9jb3VudCUgJjcoJmQlYm91bnRpZXNwbHVzX2l0ZW1fdmFsdWUlJjcpIg0KICAgIC0gIiY3JmzinKYgJmVWYWx1ZSBJbmNyZWFzZTogJjYlYm91bnRpZXNwbHVzX3Bvb2xfaW5jcmVhc2VfcGVyY2VudCUlJSINCiAgICAtICImNyZs4pymICZlRXhwaXJlczogJmYlYm91bnRpZXNwbHVzX2V4cGlyZV90aW1lJSINCiAgICAtICIiDQogICAgLSAiJjcmbOKcpiAmZVNwb25zb3JzOiAmYyVib3VudGllc3BsdXNfdG9wM19zcG9uc29yc19jb21tYXMlIg0KICAgIC0gIiZjICZjfGwgJjdGcmVuenkgQm9vc3Q6ICZjJWJvdW50aWVzcGx1c19mcmVuenkleCINCiAgICAtICImOCZtLS0tLS0tLS0tLS0tLS0tLS0tLSINCiAgZW5jaGFudG1lbnQtZ2xvdzogdHJ1ZQ0KDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIFNlYXJjaCBSZXN1bHRzIFNrdWxsIERpc3BsYXkgKHVzZWQgZm9yIHBsYXllcnMgd2l0aG91dCBib3VudGllcyBpbiBzZWFyY2ggcmVzdWx0cykNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCnNlYXJjaC1yZXN1bHRzOg0KICBzaW5nbGUtc2xvdDogMjIgIyBTbG90IGZvciBzaW5nbGUtcGxheWVyIHNlYXJjaCByZXN1bHQgKDAtNTMsIG5vdCBpbiBib3VudHktc2t1bGwtc2xvdHMgb3IgUGx1Z2luLUl0ZW1zKQ0KICBza3VsbDoNCiAgICBuYW1lOiAiJjcmbCVib3VudGllc3BsdXNfdGFyZ2V0JSAmNygmYk5vIEJvdW50eSY3KSINCiAgICBsb3JlOg0KICAgICAgLSAiJjcmbOKcpiAmZVN0YXR1czogJmJObyBhY3RpdmUgYm91bnR5Ig0KICAgICAgLSAiJjcmbOKcpiAmZU9ubGluZTogJWJvdW50aWVzcGx1c19vbmxpbmVfc3RhdHVzJSINCiAgICAgIC0gIiY3JmzinKYgJmVUb3RhbCBSZXdhcmQ6ICZhJWJvdW50aWVzcGx1c190b3RhbF9wb29sJSINCiAgICAgIC0gIiY3JmzinKYgJmVNb25leTogJmElYm91bnRpZXNwbHVzX21vbmV5X3ZhbHVlJSINCiAgICAgIC0gIiY3JmzinKYgJmVYUDogJmIlYm91bnRpZXNwbHVzX2V4cF92YWx1ZSUiDQogICAgICAtICImNyZs4pymICZlSXRlbXM6ICZkJWJvdW50aWVzcGx1c19pdGVtX2NvdW50JSAmNygmZCVib3VudGllc3BsdXNfaXRlbV92YWx1ZSUmNykiDQogICAgICAtICImNyZs4pymICZlVmFsdWUgSW5jcmVhc2U6ICY2JWJvdW50aWVzcGx1c19wb29sX2luY3JlYXNlX3BlcmNlbnQlJSUiDQogICAgICAtICImNyZs4pymICZlRXhwaXJlczogJmYlYm91bnRpZXNwbHVzX2V4cGlyZV90aW1lJSINCiAgICAgIC0gIiINCiAgICAgIC0gIiY3JmzinKYgJmVTcG9uc29yczogJmMlYm91bnRpZXNwbHVzX3RvcDNfc3BvbnNvcnNfY29tbWFzJSINCiAgICBlbmNoYW50bWVudC1nbG93OiBmYWxzZQ0KDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIFBsdWdpbiBJdGVtcw0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KUGx1Z2luLUl0ZW1zOg0KICBmaWx0ZXItYnV0dG9uOg0KICAgIHNsb3Q6IDQ3DQogICAgbWF0ZXJpYWw6IEZJUkVXT1JLX1NUQVINCiAgICBuYW1lOiAiJmVGaWx0ZXI6ICVib3VudGllc3BsdXNfZmlsdGVyX3N0YXR1cyUiDQogICAgbG9yZToNCiAgICAgIC0gIiY3TGVmdCBDbGljazogVG9nZ2xlIE9ubGluZS9BbGwgZmlsdGVyIg0KICAgICAgLSAiJjdSaWdodCBDbGljazogVG9nZ2xlIEhpZ2gtdG8tTG93IHNvcnRpbmciDQogICAgICAtICImN0N1cnJlbnQ6ICVib3VudGllc3BsdXNfZmlsdGVyX2RldGFpbHMlIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogICAgZmlyZXdvcmstZWZmZWN0Og0KICAgICAgYWxsLW5vLXNvcnQtY29sb3I6DQogICAgICAgIHJlZDogMjU1DQogICAgICAgIGdyZWVuOiAyNTUNCiAgICAgICAgYmx1ZTogMjU1DQogICAgICAgIGhleDogIiNGRkZGRkYiDQogICAgICBhbGwtc29ydGVkLWNvbG9yOg0KICAgICAgICByZWQ6IDANCiAgICAgICAgZ3JlZW46IDANCiAgICAgICAgYmx1ZTogMjU1DQogICAgICAgIGhleDogIiMwMDAwRkYiDQogICAgICBvbmxpbmUtbm8tc29ydC1jb2xvcjoNCiAgICAgICAgcmVkOiAwDQogICAgICAgIGdyZWVuOiAyNTUNCiAgICAgICAgYmx1ZTogMA0KICAgICAgICBoZXg6ICIjMDBGRjAwIg0KICAgICAgb25saW5lLXNvcnRlZC1jb2xvcjoNCiAgICAgICAgcmVkOiAyNTUNCiAgICAgICAgZ3JlZW46IDANCiAgICAgICAgYmx1ZTogMA0KICAgICAgICBoZXg6ICIjRkYwMDAwIg0KICAgICAgZWZmZWN0LXR5cGU6IFNUQVINCiAgc2VhcmNoLWJ1dHRvbjoNCiAgICBzbG90OiA0DQogICAgbWF0ZXJpYWw6IE9BS19TSUdODQogICAgbmFtZTogIiZlU2VhcmNoIEJvdW50aWVzIg0KICAgIGxvcmU6DQogICAgICAtICImN0NsaWNrIHRvIHNlYXJjaCBmb3IgYSBwbGF5ZXIiDQogICAgICAtICImN2J5IG5hbWUuIg0KICAgICAgLSAiJjdSZXF1aXJlcyAmZmJvdW50aWVzcGx1cy5ib3VudHkuc2VhcmNoIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogIGNyZWF0ZS1ib3VudHktYnV0dG9uOg0KICAgIHNsb3Q6IDUwDQogICAgbWF0ZXJpYWw6IEVNRVJBTEQNCiAgICBuYW1lOiAiJmFDcmVhdGUgQm91bnR5Ig0KICAgIGxvcmU6DQogICAgICAtICImN0NsaWNrIGhlcmUgdG8gY3JlYXRlIGEgbmV3IGJvdW50eSEiDQogICAgICAtICImN1NldCBib3VudGllcyBvbiBvdGhlciBwbGF5ZXJzIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogIGh1bnRlcnMtZGVuLWJ1dHRvbjoNCiAgICBzbG90OiA0OA0KICAgIG1hdGVyaWFsOiBESUFNT05EX1NXT1JEDQogICAgbmFtZTogIiY2SHVudGVycyBEZW4iDQogICAgbG9yZToNCiAgICAgIC0gIiY3VmlzaXQgdGhlIHNob3AgZm9yIGJvdW50eSBwZXJrcyEiDQogICAgZW5jaGFudG1lbnQtZ2xvdzogZmFsc2UNCiAgYm91bnR5LWh1bnRlci1idXR0b246DQogICAgc2xvdDogNTENCiAgICBtYXRlcmlhbDogUExBWUVSX0hFQUQNCiAgICBuYW1lOiAiJmNCb3VudHkgSHVudGVyIg0KICAgIGxvcmU6DQogICAgICAtICImN0NsaWNrIHRvIHR1cm4gaW4gaGVhZHMiDQogICAgICAtICImN0NsYWltIHlvdXIgYm91bnR5IHJld2FyZHMiDQogICAgZW5jaGFudG1lbnQtZ2xvdzogZmFsc2UNCiAgcHJldmlvdXMtcGFnZS1idXR0b246DQogICAgc2xvdDogNDUNCiAgICBtYXRlcmlhbDogQVJST1cNCiAgICBuYW1lOiAiJmVQcmV2aW91cyBQYWdlIg0KICAgIGxvcmU6DQogICAgICAtICImN0dvIHRvIHByZXZpb3VzIHBhZ2UiDQogICAgICAtICImN1BhZ2UgJWJvdW50aWVzcGx1c19jdXJyZW50X3BhZ2UlIG9mICVib3VudGllc3BsdXNfdG90YWxfcGFnZXMlIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogIG5leHQtcGFnZS1idXR0b246DQogICAgc2xvdDogNTMNCiAgICBtYXRlcmlhbDogQVJST1cNCiAgICBuYW1lOiAiJmVOZXh0IFBhZ2UiDQogICAgbG9yZToNCiAgICAgIC0gIiY3R28gdG8gbmV4dCBwYWdlIg0KICAgICAgLSAiJjdQYWdlICVib3VudGllc3BsdXNfY3VycmVudF9wYWdlJSBvZiAlYm91bnRpZXNwbHVzX3RvdGFsX3BhZ2VzJSINCiAgICBlbmNoYW50bWVudC1nbG93OiBmYWxzZQ0KICBib29zdC1jbG9jazoNCiAgICBzbG90OiA0OQ0KICAgIG1hdGVyaWFsOiBDTE9DSw0KICAgIG5hbWU6ICImNuKPsCBCb29zdCBDbG9jayINCiAgICBsb3JlOg0KICAgICAgLSAiJjfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiDQogICAgICAtICImZSZsQ3VycmVudCBCb29zdGVkIEJvdW50eToiDQogICAgICAtICIlY3VycmVudF9ib29zdF9pbmZvJSINCiAgICAgIC0gIiINCiAgICAgIC0gIiZhJmxMYXN0IEJvb3N0ZWQgQm91bnR5OiINCiAgICAgIC0gIiVsYXN0X2Jvb3N0X2luZm8lIg0KICAgICAgLSAiIg0KICAgICAgLSAiJmImbE5leHQgQm9vc3Q6Ig0KICAgICAgLSAiJW5leHRfYm9vc3RfaW5mbyUiDQogICAgICAtICImN+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCINCiAgICAgIC0gIiZjJmzwn5SlIEZSRU5aWSBNT0RFIPCflKUiDQogICAgICAtICIiDQogICAgICAtICImYyZsQ3VycmVudCBGcmVuenk6Ig0KICAgICAgLSAiJWN1cnJlbnRfZnJlbnp5X2luZm8lIg0KICAgICAgLSAiIg0KICAgICAgLSAiJmMmbExhc3QgRnJlbnp5OiINCiAgICAgIC0gIiVsYXN0X2ZyZW56eV9pbmZvJSINCiAgICAgIC0gIiINCiAgICAgIC0gIiZjJmxOZXh0IEZyZW56eToiDQogICAgICAtICIlbmV4dF9mcmVuenlfaW5mbyUiDQogICAgICAtICImN+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCINCiAgICAgIC0gIiY3Q2xpY2sgdG8gcmVmcmVzaCBpbmZvcm1hdGlvbiINCiAgICBlbmNoYW50bWVudC1nbG93OiBmYWxzZQ0KDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIEN1c3RvbSBJdGVtcw0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KQ3VzdG9tLUl0ZW1zOg0KICBmaWxsZXI6DQogICAgbWF0ZXJpYWw6IFdISVRFX1NUQUlORURfR0xBU1NfUEFORQ0KICAgIG5hbWU6ICIgIg0KICAgIGxvcmU6IFtdDQogICAgZW5jaGFudG1lbnQtZ2xvdzogZmFsc2UNCiAgICBzbG90czogW10NCiAgZXhhbXBsZS1pdGVtOg0KICAgIG1hdGVyaWFsOiBTVE9ORQ0KICAgIG5hbWU6ICImYkV4YW1wbGUgSXRlbSINCiAgICBsb3JlOg0KICAgICAgLSAiJjdUaGlzIGlzIGEgc2FtcGxlIGN1c3RvbSBpdGVtIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogICAgc2xvdHM6IFtdcmVzb3VyY2VzL0dVSXMvQ3JlYXRlR1VJLnltbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDIyMzEwIDE1MDI2NDMxMDcxIDAxNDM0MQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIEdlbmVyYWwgR1VJIFNldHRpbmdzDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQpndWktdGl0bGU6ICIgICAgICAgICY0JmzimpQgJjQmbCZuQ3JlYXRlIGEgQm91bnR5JjQmbCAmNCZs4pqUIg0KDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIEJvcmRlciBDb25maWd1cmF0aW9uDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQpib3JkZXI6DQogIGVuYWJsZWQ6IHRydWUNCiAgbWF0ZXJpYWw6IFdISVRFX1NUQUlORURfR0xBU1NfUEFORQ0KICBlbmNoYW50bWVudC1nbG93OiBmYWxzZQ0KICBzbG90czogWzAsMSwyLDMsNCw1LDYsNyw4LDksMTcsMTgsMjYsMjcsMzUsMzYsNDQsNDUsNDYsNDcsNDgsNDksNTAsNTEsNTIsNTNdDQoNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiMgQm91bnR5IFNrdWxsIFNsb3RzDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIERlZmluZXMgc2xvdHMgd2hlcmUgcGxheWVyIGhlYWRzIGFyZSBwbGFjZWQgZm9yIHRhcmdldCBzZWxlY3Rpb24NCiMgU2xvdHMgbXVzdCBiZSAwLTUzLCB1bmlxdWUsIGFuZCBub3Qgb3ZlcmxhcCB3aXRoIGJvcmRlci5zbG90cyBvciBwbHVnaW4gYnV0dG9uIHNsb3RzIChlLmcuLCA0Ni01MikNCmJvdW50eS1za3VsbC1zbG90czoNCiAgc2xvdHM6IFsxMCwxMSwxMiwxMywxNCwxNSwxNiwxOSwyMCwyMSwyMiwyMywyNCwyNSwyOCwyOSwzMCwzMSwzMiwzMywzNCwzNywzOCwzOSw0MCw0MSw0Miw0M10NCg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBQbGF5ZXIgSGVhZCBEaXNwbGF5DQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQpwbGF5ZXItaGVhZDoNCiAgbWF0ZXJpYWw6IFBMQVlFUl9IRUFEDQogIHNsb3Q6IDEwDQogIG5hbWU6DQogICAgc2VsZWN0ZWQ6ICImNsK7ICZhJWJvdW50aWVzcGx1c190YXJnZXQlICY2wqsiDQogICAgb25saW5lOiAiJmElYm91bnRpZXNwbHVzX3RhcmdldCUiDQogICAgb2ZmbGluZTogIiY3JWJvdW50aWVzcGx1c190YXJnZXQlIg0KICBsb3JlOg0KICAgIHNlbGVjdGVkOg0KICAgICAgLSAiJjZDdXJyZW50bHkgU2VsZWN0ZWQgVGFyZ2V0Ig0KICAgICAgLSAiIg0KICAgICAgLSAiJjdCb3VudGllczogJWJvdW50aWVzcGx1c19ib3VudHlfY291bnQlIg0KICAgICAgLSAiJWJvdW50aWVzcGx1c19vbmxpbmVfc3RhdHVzJSINCiAgICAgIC0gIiINCiAgICAgIC0gIiZlQ2xpY2sgdG8gZGVzZWxlY3QgdGhpcyBwbGF5ZXIiDQogICAgbm90LXNlbGVjdGVkOg0KICAgICAgLSAiJjdCb3VudGllczogJWJvdW50aWVzcGx1c19ib3VudHlfY291bnQlIg0KICAgICAgLSAiJWJvdW50aWVzcGx1c19vbmxpbmVfc3RhdHVzJSINCiAgICAgIC0gIiINCiAgICAgIC0gIiZlQ2xpY2sgdG8gc2V0IGEgYm91bnR5IG9uIHRoaXMgcGxheWVyISINCiAgZW5jaGFudG1lbnQtZ2xvdzoNCiAgICBzZWxlY3RlZDogdHJ1ZQ0KICAgIG5vdC1zZWxlY3RlZDogZmFsc2UNCiAgb25saW5lLXN0YXR1czoNCiAgICBvbmxpbmU6ICImN1N0YXR1czogJmFPbmxpbmUiDQogICAgb2ZmbGluZTogIiY3U3RhdHVzOiAmY09mZmxpbmUiDQogICAgbGFzdC1zZWVuOiAiJjdMYXN0IFNlZW46ICZlJWxhc3Rfc2VlbiUgYWdvIg0KDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIENvbmZpcm0gQnV0dG9uIENvbmZpZ3VyYXRpb24NCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmNvbmZpcm0tYnV0dG9uOg0KICBzbG90OiA1Mg0KICBtYXRlcmlhbDogTElNRV9EWUUNCiAgbmFtZTogIiZhJmxDb25maXJtIg0KICBsb3JlOg0KICAgIC0gIiY3Q2xpY2sgdG8gY29uZmlybSBhbmQgY3JlYXRlIg0KICAgIC0gIiY3dGhlIGJvdW50eSB3aXRoIGN1cnJlbnQgc2V0dGluZ3MiDQogICAgLSAiIg0KICAgIC0gIiY3TW9uZXk6ICZmJWJvdW50aWVzcGx1c19tb25leV92YWx1ZSUiDQogICAgLSAiJjdFeHBlcmllbmNlOiAmZiVib3VudGllc3BsdXNfZXhwX3ZhbHVlJSINCiAgICAtICImN0R1cmF0aW9uOiAmZiVib3VudGllc3BsdXNfZHVyYXRpb24lIg0KICAgIC0gIiINCiAgICAtICImYVJlYWR5IHRvIHByb2NlZWQhIg0KICBlbmNoYW50bWVudC1nbG93OiB0cnVlDQogIGNvbmZpcm0tYnV0dG9uLWZpbGxlcjoNCiAgICBtYXRlcmlhbDogV0hJVEVfU1RBSU5FRF9HTEFTU19QQU5FDQogICAgbmFtZTogIiAiDQogICAgbG9yZTogW10NCiAgICBlbmNoYW50bWVudC1nbG93OiBmYWxzZQ0KDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIEFkZCBJdGVtcyBCdXR0b24gQ29uZmlndXJhdGlvbg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KYWRkLWl0ZW1zLWJ1dHRvbjoNCiAgc2xvdDogNTANCiAgbWF0ZXJpYWw6IENIRVNUDQogIG5vLWl0ZW1zOg0KICAgIG5hbWU6ICImYiZsQWRkIEl0ZW1zIg0KICAgIGxvcmU6DQogICAgICAtICImN0RyYWcgYW5kIERyb3AgaXRlbXMiDQogICAgICAtICImN2ludG8gdGhlIEdVSSB0byBhZGQgdGhlbSINCiAgICAgIC0gIiY3dG8gdGhlIGJvdW50eSINCiAgICAgIC0gIiINCiAgICAgIC0gIiY3WW91IGNhbiBwbGFjZSBpdGVtcyBpbiB0aGUiDQogICAgICAtICImN2VtcHR5IHNsb3RzIGluc2lkZSB0aGUgR1VJIg0KICAgICAgLSAiIg0KICAgICAgLSAiJjdSaWdodC1jbGljayBpdGVtcyB0byByZW1vdmUgdGhlbSINCiAgICAgIC0gIiINCiAgICAgIC0gIiZiU3BlY2lhbCBpdGVtIHJld2FyZHMhIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogIGhhcy1pdGVtczoNCiAgICBuYW1lOiAiJjYmbEVkaXQgSXRlbXMgKCZlJWJvdW50aWVzcGx1c19pdGVtX2NvdW50JSY2JmwpIg0KICAgIGxvcmU6DQogICAgICAtICImN1lvdSBoYXZlICZlJWJvdW50aWVzcGx1c19pdGVtX2NvdW50JSAmaXRlbXMiDQogICAgICAtICImN2luIHRoaXMgYm91bnR5IHdvcnRoICVib3VudGllc3BsdXNfaXRlbV92YWx1ZSUiDQogICAgICAtICIiDQogICAgICAtICImN0RyYWcgYW5kIERyb3AgbW9yZSBpdGVtcyINCiAgICAgIC0gIiY3aW50byB0aGUgR1VJIHRvIGFkZCB0aGVtIg0KICAgICAgLSAiIg0KICAgICAgLSAiJjdSaWdodC1jbGljayBpdGVtcyB0byByZW1vdmUgdGhlbSINCiAgICAgIC0gIiY3TGVmdC1jbGljayBoZXJlIHRvIHZpZXcgYWxsIGl0ZW1zIg0KICAgICAgLSAiIg0KICAgICAgLSAiJjZDdXJyZW50bHkgb2ZmZXJpbmcgaXRlbXMhIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBBZGQgTW9uZXkgQnV0dG9uIENvbmZpZ3VyYXRpb24NCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmFkZC1tb25leS1idXR0b246DQogIHNsb3Q6IDQ4DQogIG1hdGVyaWFsOiBFTUVSQUxEDQogIG5hbWU6ICImYSZsQWRkIE1vbmV5Ig0KICBsb3JlOg0KICAgIC0gIiY3Q2xpY2sgdG8gYWRkIG1vbmV0YXJ5Ig0KICAgIC0gIiY3cmV3YXJkcyB0byB0aGlzIGJvdW50eSINCiAgICAtICIiDQogICAgLSAiJjdDdXJyZW50OiAmYSVib3VudGllc3BsdXNfbW9uZXlfdmFsdWUlIg0KICAgIC0gIiINCiAgICAtICImYUV4dHJhIGNhc2ggcmV3YXJkcyEiDQogIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogIG5vLW1vbmV5LXRpdGxlOiAiJmNZb3UgZG9uJ3QgaGF2ZSBhbnkgbW9uZXkgdG8gYWRkIg0KICB0aXRsZS1kdXJhdGlvbjoNCiAgICBmYWRlLWluOiAyMA0KICAgIHN0YXk6IDYwDQogICAgZmFkZS1vdXQ6IDIwDQogIHJlb3Blbi1kZWxheTogMTAwDQoNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiMgVG90YWwgQm91bnR5IFZhbHVlIEJ1dHRvbiBDb25maWd1cmF0aW9uDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQp0b3RhbC1ib3VudHktdmFsdWUtYnV0dG9uOg0KICBzbG90OiA0OQ0KICBtYXRlcmlhbDogUEFQRVINCiAgbmFtZTogIiZjJmxDaG9vc2UgQSBUYXJnZXQiDQogIGxvcmU6DQogICAgLSAiJmVDbGljayBoZXJlIHRvIGNob29zZSBhIg0KICAgIC0gIiZlcGxheWVyIHRvIHNldCBhIGJvdW50eSBvbiINCiAgICAtICIiDQogICAgLSAiJjdDdXJyZW50IGJvdW50eSB2YWx1ZToiDQogICAgLSAiJmYlYm91bnRpZXNwbHVzX3RvdGFsX2JvdW50eSUiDQogICAgLSAiIg0KICAgIC0gIiY3TW9uZXk6ICZhJWJvdW50aWVzcGx1c19tb25leV92YWx1ZSUiDQogICAgLSAiJjdFeHBlcmllbmNlOiAmZSVib3VudGllc3BsdXNfdG90YWxfZXhwJSINCiAgICAtICImN0l0ZW1zOiAmYiVib3VudGllc3BsdXNfaXRlbV9jb3VudCUgJjd3b3J0aCAmYiVib3VudGllc3BsdXNfaXRlbV92YWx1ZSUiDQogICAgLSAiJjdEdXJhdGlvbjogJmQlYm91bnRpZXNwbHVzX2R1cmF0aW9uJSINCiAgZW5jaGFudG1lbnQtZ2xvdzogdHJ1ZQ0KICB0YXJnZXQtc2VsZWN0ZWQ6DQogICAgbWF0ZXJpYWw6IFBMQVlFUl9IRUFEDQogICAgbmFtZTogIiZjJmxCb3VudHkgb24gJWJvdW50aWVzcGx1c190YXJnZXQlIg0KICAgIGxvcmU6DQogICAgICAtICImN0N1cnJlbnQgYm91bnR5IHZhbHVlOiINCiAgICAgIC0gIiZmJWJvdW50aWVzcGx1c190b3RhbF9ib3VudHklIg0KICAgICAgLSAiIg0KICAgICAgLSAiJjdNb25leTogJmElYm91bnRpZXNwbHVzX21vbmV5X3ZhbHVlJSINCiAgICAgIC0gIiY3RXhwZXJpZW5jZTogJmUlYm91bnRpZXNwbHVzX3RvdGFsX2V4cCUiDQogICAgICAtICImN0l0ZW1zOiAmYiVib3VudGllc3BsdXNfaXRlbV9jb3VudCUgJjd3b3J0aCAmYiVib3VudGllc3BsdXNfaXRlbV92YWx1ZSUiDQogICAgICAtICImN0R1cmF0aW9uOiAmZCVib3VudGllc3BsdXNfZHVyYXRpb24lIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCiAgbm8tcmV3YXJkcy10aXRsZToNCiAgICB0aXRsZTogIiZjTm8gUmV3YXJkcyBTcGVjaWZpZWQiDQogICAgc3VidGl0bGU6ICImN1lvdSBtdXN0IGFkZCAkLCBYUCBvciBpdGVtcyB0byB0aGUgYm91bnR5ISINCiAgICB0aXRsZS1kdXJhdGlvbjoNCiAgICAgIGZhZGUtaW46IDIwDQogICAgICBzdGF5OiA2MA0KICAgICAgZmFkZS1vdXQ6IDIwDQogICAgcmVvcGVuLWRlbGF5OiAxMDANCg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBBZGQgRXhwZXJpZW5jZSBCdXR0b24gQ29uZmlndXJhdGlvbg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KYWRkLWV4cGVyaWVuY2UtYnV0dG9uOg0KICBzbG90OiA0Nw0KICBtYXRlcmlhbDogRVhQRVJJRU5DRV9CT1RUTEUNCiAgbmFtZTogIiZlJmxBZGQgRXhwZXJpZW5jZSINCiAgbG9yZToNCiAgICAtICImN0NsaWNrIHRvIGFkZCBleHBlcmllbmNlIg0KICAgIC0gIiY3cmV3YXJkcyB0byB0aGlzIGJvdW50eSINCiAgICAtICIiDQogICAgLSAiJjdDdXJyZW50OiAmZSVib3VudGllc3BsdXNfZXhwX3ZhbHVlJSINCiAgICAtICIiDQogICAgLSAiJmVCb251cyBYUCBmb3IgdGhlIGh1bnRlciEiDQogIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogIG5vLWV4cGVyaWVuY2UtdGl0bGU6ICImY1lvdSBkb24ndCBoYXZlIGFueSBYUCBsZXZlbHMgdG8gYWRkIg0KICB0aXRsZS1kdXJhdGlvbjoNCiAgICBmYWRlLWluOiAxMA0KICAgIHN0YXk6IDQwDQogICAgZmFkZS1vdXQ6IDEwDQogIHJlb3Blbi1kZWxheTogNjANCg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBBZGQgVGltZSBCdXR0b24gQ29uZmlndXJhdGlvbg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KYWRkLXRpbWUtYnV0dG9uOg0KICBzbG90OiA1MQ0KICBtYXRlcmlhbDogQ0xPQ0sNCiAgbmFtZTogIiZkJmxBZGQgVGltZSINCiAgbG9yZToNCiAgICAtICImN0NsaWNrIHRvIHNldCB0aGUgZHVyYXRpb24iDQogICAgLSAiJjd0aGlzIGJvdW50eSB3aWxsIHJlbWFpbiBhY3RpdmUiDQogICAgLSAiIg0KICAgIC0gIiY3Q3VycmVudDogJmQlYm91bnRpZXNwbHVzX2R1cmF0aW9uJSINCiAgICAtICIiDQogICAgLSAiJmRFeHBpcmF0aW9uIHNldHRpbmdzIg0KICBlbmNoYW50bWVudC1nbG93OiBmYWxzZQ0KDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIENhbmNlbCBCdXR0b24gQ29uZmlndXJhdGlvbg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KY2FuY2VsLWJ1dHRvbjoNCiAgc2xvdDogNDYNCiAgbWF0ZXJpYWw6IFJFRF9EWUUNCiAgbmFtZTogIiZjJmxDYW5jZWwiDQogIGxvcmU6DQogICAgLSAiJjdDbGljayB0byBjYW5jZWwgYm91bnR5Ig0KICAgIC0gIiY3Y3JlYXRpb24gYW5kIHJldHVybiINCiAgICAtICIiDQogICAgLSAiJmNEaXNjYXJkcyBhbGwgY2hhbmdlcyEiDQogIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogIG5vLXNlc3Npb246DQogICAgbWF0ZXJpYWw6IEJBUlJJRVINCiAgICBuYW1lOiAiJmMmbFJldHVybiB0byB0aGUgQm91bnR5IEdVSSINCiAgICBsb3JlOg0KICAgICAgLSAiJjdDbGljayB0byByZXR1cm4gdG8gQm91bnR5IEdVSSINCiAgICBlbmNoYW50bWVudC1nbG93OiBmYWxzZQ0KDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIEJvb3N0ZWQgU2t1bGwgRGlzcGxheQ0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KYm9vc3RlZC1za3VsbDoNCiAgbmFtZTogIiY2JmzCuyAmZSVib3VudGllc3BsdXNfdGFyZ2V0JSAmNiZswqsgKCY2Qm9vc3RlZCAlYm91bnRpZXNwbHVzX2Jvb3N0JXgpIg0KICBsb3JlOg0KICAgIC0gIiY2Q3VycmVudGx5IEJvb3N0ZWQgVGFyZ2V0Ig0KICAgIC0gIiY3Qm91bnRpZXM6ICVib3VudGllc3BsdXNfYm91bnR5X2NvdW50JSINCiAgICAtICImN0Jvb3N0IE11bHRpcGxpZXI6ICY2JWJvdW50aWVzcGx1c19ib29zdCV4Ig0KICAgIC0gIiVib3VudGllc3BsdXNfb25saW5lX3N0YXR1cyUiDQogICAgLSAiIg0KICAgIC0gIiZlQ2xpY2sgdG8gc2V0IGEgYm91bnR5IG9uIHRoaXMgcGxheWVyISINCiAgZW5jaGFudG1lbnQtZ2xvdzogdHJ1ZQ0KDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIEZyZW56eSBTa3VsbCBEaXNwbGF5DQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQpmcmVuenktc2t1bGw6DQogIG5hbWU6ICImYyZswrsgJmUlYm91bnRpZXNwbHVzX3RhcmdldCUgJmMmbMKrICgmY0ZyZW56eSAlYm91bnRpZXNwbHVzX2ZyZW56eSV4KSINCiAgbG9yZToNCiAgICAtICImY0ZyZW56eSBNb2RlIEFjdGl2ZSEiDQogICAgLSAiJjdCb3VudGllczogJWJvdW50aWVzcGx1c19ib3VudHlfY291bnQlIg0KICAgIC0gIiY3RnJlbnp5IE11bHRpcGxpZXI6ICZjJWJvdW50aWVzcGx1c19mcmVuenkleCINCiAgICAtICIlYm91bnRpZXNwbHVzX29ubGluZV9zdGF0dXMlIg0KICAgIC0gIiINCiAgICAtICImZUNsaWNrIHRvIHNldCBhIGJvdW50eSBvbiB0aGlzIHBsYXllciEiDQogIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBDdXN0b20gSXRlbXMgQ29uZmlndXJhdGlvbg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KQ3VzdG9tLUl0ZW1zOg0KICBmaWxsZXI6DQogICAgbWF0ZXJpYWw6IFdISVRFX1NUQUlORURfR0xBU1NfUEFORQ0KICAgIG5hbWU6ICIgIg0KICAgIGxvcmU6IFtdDQogICAgZW5jaGFudG1lbnQtZ2xvdzogZmFsc2UNCiAgICBzbG90czogW10NCiAgZXhhbXBsZS1pdGVtOg0KICAgIG1hdGVyaWFsOiBESUFNT05EDQogICAgbmFtZTogIiZiRXhhbXBsZSBJdGVtIg0KICAgIGxvcmU6DQogICAgICAtICImN1RoaXMgaXMgYSBzYW1wbGUgY3VzdG9tIGl0ZW0iDQogICAgICAtICImN05vIGZ1bmN0aW9uYWxpdHksIGp1c3QgZm9yIGRpc3BsYXkiDQogICAgZW5jaGFudG1lbnQtZ2xvdzogdHJ1ZQ0KICAgIHNsb3RzOiBbXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJlc291cmNlcy9HVUlzL0h1bnRlcnNEZW4ueW1sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDA2NjYgADAwMDAwMCAAMDAwMDAwIAAwMDAwMDAzNTUwNiAxNTAyNTQ0MjM3MSAwMTQ2NjcAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwIAAwMDAwMDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ3VpLXRpdGxlOiAiJjQmbOKalCBIdW50ZXIncyBEZW4g4pqUIg0Kc2l6ZTogNTQNClBsdWdpbi1JdGVtczoNCiAgYm9yZGVyOg0KICAgIG1hdGVyaWFsOiAiUkVEX1NUQUlORURfR0xBU1NfUEFORSINCiAgICBuYW1lOiAiIg0KICAgIGxvcmU6IFtdDQogICAgZW5jaGFudG1lbnQtZ2xvdzogZmFsc2UNCiAgICBzbG90czogWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDE3LCAxOCwgMjYsIDI3LCAzNSwgMzYsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNTAsIDUxLCA1MiwgNTNdDQogIGJhY2stYnV0dG9uOg0KICAgIG1hdGVyaWFsOiAiQkFSUklFUiINCiAgICBuYW1lOiAiJmMmbEJhY2sgdG8gQm91bnRpZXMiDQogICAgbG9yZToNCiAgICAgIC0gIiY3Q2xpY2sgdG8gcmV0dXJuIHRvIHRoZSBtYWluIg0KICAgICAgLSAiJjdib3VudHkgaW50ZXJmYWNlIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogICAgc2xvdDogNDkNCiAgYm91bnR5X3RyYWNrZXI6DQogICAgbWF0ZXJpYWw6ICJDT01QQVNTIg0KICAgIG5hbWU6ICImNiZsQm91bnR5IFRyYWNrZXIiDQogICAgbG9yZToNCiAgICAgIC0gIiY3VHJhY2sgZG93biB5b3VyIGVuZW1pZXMgd2l0aCBwcmVjaXNpb24hIg0KICAgICAgLSAiJjhSZXZlYWxzIHRoZSBsb2NhdGlvbiBvZiBuZWFyYnkgdGFyZ2V0cyINCiAgICAgIC0gIiINCiAgICAgIC0gIiZlUHVyY2hhc2UgT3B0aW9uczoiDQogICAgICAtICImZuKAoiAmYSQ1MDAgJjcoTW9uZXkpIg0KICAgICAgLSAiJmbigKIgJmIxNSBMZXZlbHMgJjcoRXhwZXJpZW5jZSkiDQogICAgICAtICImZuKAoiAmYzMgQm91bnR5IFNrdWxscyAmNyhNaW46ICQyMDAgZWFjaCkiDQogICAgICAtICIiDQogICAgICAtICImYUxlZnQtY2xpY2s6ICZmQnV5IHdpdGggTW9uZXkiDQogICAgICAtICImYlNoaWZ0LWNsaWNrOiAmZkJ1eSB3aXRoIFhQIg0KICAgICAgLSAiJmNSaWdodC1jbGljazogJmZCdXkgd2l0aCBTa3VsbHMiDQogICAgZW5jaGFudG1lbnQtZ2xvdzogdHJ1ZQ0KICAgIHNsb3Q6IDEwDQogICAgY3VycmVuY3ktdHlwZTogIm11bHRpIg0KICAgIHByaWNlOiA1MDAuMA0KICAgIHhwLXByaWNlOiAxNQ0KICAgIHNrdWxsLWNvdW50OiAzDQogICAgbWluLXNrdWxsLXZhbHVlOiAyMDAuMA0KICAgIGNvbW1hbmRzOg0KICAgICAgbW9uZXk6DQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIHRyYWNrZXIgMSINCiAgICAgIHhwOg0KICAgICAgICAtICJib3VudHkgZ2l2ZSAlcGxheWVyJSB0cmFja2VyIDEiDQogICAgICBza3VsbHM6DQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIHRyYWNrZXIgMSINCiAgdGFjdGljYWxfamFtbWVyOg0KICAgIG1hdGVyaWFsOiAiUkVEU1RPTkVfQkxPQ0siDQogICAgbmFtZTogIiZjJmxUYWN0aWNhbCBKYW1tZXIiDQogICAgbG9yZToNCiAgICAgIC0gIiY3QmVjb21lIGludmlzaWJsZSB0byBlbmVteSB0cmFja2VycyEiDQogICAgICAtICImOEJsb2NrcyBhbGwgdHJhY2tpbmcgYXR0ZW1wdHMgZm9yIGEgZHVyYXRpb24iDQogICAgICAtICIiDQogICAgICAtICImZVB1cmNoYXNlIE9wdGlvbnM6Ig0KICAgICAgLSAiJmbigKIgJmEkNzUwICY3KE1vbmV5KSINCiAgICAgIC0gIiZm4oCiICZiMjAgTGV2ZWxzICY3KEV4cGVyaWVuY2UpIg0KICAgICAgLSAiJmbigKIgJmM0IEJvdW50eSBTa3VsbHMgJjcoTWluOiAkMTUwIGVhY2gpIg0KICAgICAgLSAiIg0KICAgICAgLSAiJjdQZXJmZWN0IGZvciBzdGVhbHRoeSBlc2NhcGVzIGFuZCINCiAgICAgIC0gIiY3YXZvaWRpbmcgdW53YW50ZWQgYXR0ZW50aW9uISINCiAgICAgIC0gIiINCiAgICAgIC0gIiZhTGVmdC1jbGljazogJmZCdXkgd2l0aCBNb25leSINCiAgICAgIC0gIiZiU2hpZnQtY2xpY2s6ICZmQnV5IHdpdGggWFAiDQogICAgICAtICImY1JpZ2h0LWNsaWNrOiAmZkJ1eSB3aXRoIFNrdWxscyINCiAgICBlbmNoYW50bWVudC1nbG93OiB0cnVlDQogICAgc2xvdDogMTENCiAgICBjdXJyZW5jeS10eXBlOiAibXVsdGkiDQogICAgcHJpY2U6IDc1MC4wDQogICAgeHAtcHJpY2U6IDIwDQogICAgc2t1bGwtY291bnQ6IDQNCiAgICBtaW4tc2t1bGwtdmFsdWU6IDE1MC4wDQogICAgY29tbWFuZHM6DQogICAgICBtb25leToNCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgamFtbWVyIDEiDQogICAgICB4cDoNCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgamFtbWVyIDEiDQogICAgICBza3VsbHM6DQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIGphbW1lciAxIg0KICBhZHZhbmNlZF91YXY6DQogICAgbWF0ZXJpYWw6ICJFTFlUUkEiDQogICAgbmFtZTogIiY5JmxBZHZhbmNlZCBVQVYiDQogICAgbG9yZToNCiAgICAgIC0gIiY3TGF1bmNoIGEgc3VydmVpbGxhbmNlIGRyb25lISINCiAgICAgIC0gIiY4UmV2ZWFscyBhbGwgbmVhcmJ5IHRhcmdldHMgdGhyb3VnaCB3YWxscyINCiAgICAgIC0gIiY4UHJvdmlkZXMgdGVtcG9yYXJ5IGdsb3cgZWZmZWN0IG9uIGVuZW1pZXMiDQogICAgICAtICIiDQogICAgICAtICImZVB1cmNoYXNlIE9wdGlvbnM6Ig0KICAgICAgLSAiJmbigKIgJmEkMTIwMCAmNyhNb25leSkiDQogICAgICAtICImZuKAoiAmYjM1IExldmVscyAmNyhFeHBlcmllbmNlKSINCiAgICAgIC0gIiZm4oCiICZjNiBCb3VudHkgU2t1bGxzICY3KE1pbjogJDE3NSBlYWNoKSINCiAgICAgIC0gIiINCiAgICAgIC0gIiY3VGhlIHVsdGltYXRlIHJlY29ubmFpc3NhbmNlIHRvb2wiDQogICAgICAtICImN2ZvciBwcm9mZXNzaW9uYWwgYm91bnR5IGh1bnRlcnMhIg0KICAgICAgLSAiIg0KICAgICAgLSAiJmFMZWZ0LWNsaWNrOiAmZkJ1eSB3aXRoIE1vbmV5Ig0KICAgICAgLSAiJmJTaGlmdC1jbGljazogJmZCdXkgd2l0aCBYUCINCiAgICAgIC0gIiZjUmlnaHQtY2xpY2s6ICZmQnV5IHdpdGggU2t1bGxzIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCiAgICBzbG90OiAxMg0KICAgIGN1cnJlbmN5LXR5cGU6ICJtdWx0aSINCiAgICBwcmljZTogMTIwMC4wDQogICAgeHAtcHJpY2U6IDM1DQogICAgc2t1bGwtY291bnQ6IDYNCiAgICBtaW4tc2t1bGwtdmFsdWU6IDE3NS4wDQogICAgY29tbWFuZHM6DQogICAgICBtb25leToNCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgdWF2IDEiDQogICAgICB4cDoNCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgdWF2IDEiDQogICAgICBza3VsbHM6DQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIHVhdiAxIg0KICBtYW51YWxfYm9vc3Q6DQogICAgbWF0ZXJpYWw6ICJHT0xERU5fQVBQTEUiDQogICAgbmFtZTogIiZlJmxNYW51YWwgQm9vc3QgQ3J5c3RhbCINCiAgICBsb3JlOg0KICAgICAgLSAiJjdFbmhhbmNlIGEgc3BlY2lmaWMgdGFyZ2V0J3MgYm91bnR5ISINCiAgICAgIC0gIiY4Q2hvb3NlIHlvdXIgdGFyZ2V0IGFuZCBtdWx0aXBseSB0aGVpciB3b3J0aCINCiAgICAgIC0gIiY4RHVyYXRpb24gdmFyaWVzIGJhc2VkIG9uIFJORyINCiAgICAgIC0gIiINCiAgICAgIC0gIiZlUHVyY2hhc2UgT3B0aW9uczoiDQogICAgICAtICImZuKAoiAmYSQyMDAwICY3KE1vbmV5KSINCiAgICAgIC0gIiZm4oCiICZiNTAgTGV2ZWxzICY3KEV4cGVyaWVuY2UpIg0KICAgICAgLSAiJmbigKIgJmM4IEJvdW50eSBTa3VsbHMgJjcoTWluOiAkMjI1IGVhY2gpIg0KICAgICAgLSAiIg0KICAgICAgLSAiJjdTdHJhdGVnaWMgdG9vbCBmb3IgbWF4aW1pemluZyINCiAgICAgIC0gIiY3eW91ciBodW50aW5nIHByb2ZpdHMhIg0KICAgICAgLSAiIg0KICAgICAgLSAiJmFMZWZ0LWNsaWNrOiAmZkJ1eSB3aXRoIE1vbmV5Ig0KICAgICAgLSAiJmJTaGlmdC1jbGljazogJmZCdXkgd2l0aCBYUCINCiAgICAgIC0gIiZjUmlnaHQtY2xpY2s6ICZmQnV5IHdpdGggU2t1bGxzIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCiAgICBzbG90OiAxOQ0KICAgIGN1cnJlbmN5LXR5cGU6ICJtdWx0aSINCiAgICBwcmljZTogMjAwMC4wDQogICAgeHAtcHJpY2U6IDUwDQogICAgc2t1bGwtY291bnQ6IDgNCiAgICBtaW4tc2t1bGwtdmFsdWU6IDIyNS4wDQogICAgY29tbWFuZHM6DQogICAgICBtb25leToNCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgbWFudWFsLWJvb3N0IDEiDQogICAgICB4cDoNCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgbWFudWFsLWJvb3N0IDEiDQogICAgICBza3VsbHM6DQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIG1hbnVhbC1ib29zdCAxIg0KICBtYW51YWxfZnJlbnp5Og0KICAgIG1hdGVyaWFsOiAiTkVUSEVSX1NUQVIiDQogICAgbmFtZTogIiZkJmxGcmVuenkgQ2F0YWx5c3QiDQogICAgbG9yZToNCiAgICAgIC0gIiY3VHJpZ2dlciBhIHNlcnZlci13aWRlIGJvdW50eSBmcmVuenkhIg0KICAgICAgLSAiJjhBbGwgYm91bnRpZXMgcmVjZWl2ZSBtYXNzaXZlIG11bHRpcGxpZXJzIg0KICAgICAgLSAiJjhEdXJhdGlvbiBhbmQgcG93ZXIgZGV0ZXJtaW5lZCBieSBjaGFuY2UiDQogICAgICAtICIiDQogICAgICAtICImZVB1cmNoYXNlIE9wdGlvbnM6Ig0KICAgICAgLSAiJmbigKIgJmEkNTAwMCAmNyhNb25leSBPbmx5KSINCiAgICAgIC0gIiINCiAgICAgIC0gIiZjJmxXQVJOSU5HOiAmN1RoaXMgYWZmZWN0cyBBTEwgcGxheWVycyEiDQogICAgICAtICImN1VzZSB3aXNlbHkgLSBldmVyeW9uZSB3aWxsIGtub3cgaXQgd2FzIHlvdSEiDQogICAgICAtICIiDQogICAgICAtICImN1RoZSBtb3N0IHBvd2VyZnVsIHRvb2wgaW4gdGhlIEh1bnRlcidzIERlbi4iDQogICAgICAtICImN1Jlc2VydmVkIGZvciB0aGUgZWxpdGUgYm91bnR5IGh1bnRlcnMuIg0KICAgICAgLSAiIg0KICAgICAgLSAiJmFMZWZ0LWNsaWNrOiAmZkJ1eSB3aXRoIE1vbmV5Ig0KICAgIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCiAgICBzbG90OiAyMA0KICAgIGN1cnJlbmN5LXR5cGU6ICJtb25leSINCiAgICBwcmljZTogNTAwMC4wDQogICAgY29tbWFuZHM6DQogICAgICBtb25leToNCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgbWFudWFsLWZyZW56eSAxIg0KICBjaHJvbm9zX3NoYXJkOg0KICAgIG1hdGVyaWFsOiAiQ0xPQ0siDQogICAgbmFtZTogIiZiJmxDaHJvbm9zIFNoYXJkIg0KICAgIGxvcmU6DQogICAgICAtICImN01hbmlwdWxhdGUgdGhlIGZsb3cgb2YgdGltZSBpdHNlbGYhIg0KICAgICAgLSAiJjhSZWR1Y2UgcmVtYWluaW5nIGJvdW50eSBkdXJhdGlvbnMiDQogICAgICAtICImOE9yIHBvdGVudGlhbGx5IGV4dGVuZCB0aGVtIGlmIHlvdSdyZSB1bmx1Y2t5Ig0KICAgICAgLSAiIg0KICAgICAgLSAiJmVQdXJjaGFzZSBPcHRpb25zOiINCiAgICAgIC0gIiZm4oCiICZhJDE1MDAgJjcoTW9uZXkpIg0KICAgICAgLSAiJmbigKIgJmI0MCBMZXZlbHMgJjcoRXhwZXJpZW5jZSkiDQogICAgICAtICImZuKAoiAmYzcgQm91bnR5IFNrdWxscyAmNyhNaW46ICQyMDAgZWFjaCkiDQogICAgICAtICIiDQogICAgICAtICImN1RpbWUgaXMgbW9uZXksIGFuZCB0aGlzIHNoYXJkIg0KICAgICAgLSAiJjdnaXZlcyB5b3UgY29udHJvbCBvdmVyIGJvdGghIg0KICAgICAgLSAiIg0KICAgICAgLSAiJmFMZWZ0LWNsaWNrOiAmZkJ1eSB3aXRoIE1vbmV5Ig0KICAgICAgLSAiJmJTaGlmdC1jbGljazogJmZCdXkgd2l0aCBYUCINCiAgICAgIC0gIiZjUmlnaHQtY2xpY2s6ICZmQnV5IHdpdGggU2t1bGxzIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCiAgICBzbG90OiAyMQ0KICAgIGN1cnJlbmN5LXR5cGU6ICJtdWx0aSINCiAgICBwcmljZTogMTUwMC4wDQogICAgeHAtcHJpY2U6IDQwDQogICAgc2t1bGwtY291bnQ6IDcNCiAgICBtaW4tc2t1bGwtdmFsdWU6IDIwMC4wDQogICAgY29tbWFuZHM6DQogICAgICBtb25leToNCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgY2hyb25vcy1zaGFyZCAxIg0KICAgICAgeHA6DQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIGNocm9ub3Mtc2hhcmQgMSINCiAgICAgIHNrdWxsczoNCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgY2hyb25vcy1zaGFyZCAxIg0KICByZXZlcnNlX2JvdW50eToNCiAgICBtYXRlcmlhbDogIkVORF9DUllTVEFMIg0KICAgIG5hbWU6ICImNSZsUmV2ZXJzZSBCb3VudHkgT3JiIg0KICAgIGxvcmU6DQogICAgICAtICImN1R1cm4gdGhlIHRhYmxlcyBvbiB5b3VyIGh1bnRlcnMhIg0KICAgICAgLSAiJjhSZXZlcnNlcyBhbGwgYm91bnRpZXMgcGxhY2VkIG9uIHlvdSINCiAgICAgIC0gIiY4VGhlIGhpZ2hlc3QgY29udHJpYnV0b3IgcGF5cyB0aGUgcHJpY2UiDQogICAgICAtICIiDQogICAgICAtICImZVB1cmNoYXNlIE9wdGlvbnM6Ig0KICAgICAgLSAiJmbigKIgJmEkMzAwMCAmNyhNb25leSkiDQogICAgICAtICImZuKAoiAmYjc1IExldmVscyAmNyhFeHBlcmllbmNlKSINCiAgICAgIC0gIiZm4oCiICZjMTIgQm91bnR5IFNrdWxscyAmNyhNaW46ICQyNTAgZWFjaCkiDQogICAgICAtICIiDQogICAgICAtICImN0EgZGVzcGVyYXRlIG1lYXN1cmUgZm9yIGRlc3BlcmF0ZSB0aW1lcy4iDQogICAgICAtICImN0hpZ2ggcmlzaywgaGlnaCByZXdhcmQhIg0KICAgICAgLSAiIg0KICAgICAgLSAiJmMmbFJpc2s6ICY3TWF5IGZhaWwgYW5kIHdhc3RlIHlvdXIgaW52ZXN0bWVudCEiDQogICAgICAtICIiDQogICAgICAtICImYUxlZnQtY2xpY2s6ICZmQnV5IHdpdGggTW9uZXkiDQogICAgICAtICImYlNoaWZ0LWNsaWNrOiAmZkJ1eSB3aXRoIFhQIg0KICAgICAgLSAiJmNSaWdodC1jbGljazogJmZCdXkgd2l0aCBTa3VsbHMiDQogICAgZW5jaGFudG1lbnQtZ2xvdzogdHJ1ZQ0KICAgIHNsb3Q6IDI4DQogICAgY3VycmVuY3ktdHlwZTogIm11bHRpIg0KICAgIHByaWNlOiAzMDAwLjANCiAgICB4cC1wcmljZTogNzUNCiAgICBza3VsbC1jb3VudDogMTINCiAgICBtaW4tc2t1bGwtdmFsdWU6IDI1MC4wDQogICAgY29tbWFuZHM6DQogICAgICBtb25leToNCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgcmV2ZXJzZS1ib3VudHkgMSINCiAgICAgIHhwOg0KICAgICAgICAtICJib3VudHkgZ2l2ZSAlcGxheWVyJSByZXZlcnNlLWJvdW50eSAxIg0KICAgICAgc2t1bGxzOg0KICAgICAgICAtICJib3VudHkgZ2l2ZSAlcGxheWVyJSByZXZlcnNlLWJvdW50eSAxIg0KICBzdGFydGVyX3BhY2s6DQogICAgbWF0ZXJpYWw6ICJDSEVTVCINCiAgICBuYW1lOiAiJmEmbEh1bnRlcidzIFN0YXJ0ZXIgUGFjayINCiAgICBsb3JlOg0KICAgICAgLSAiJjdQZXJmZWN0IGZvciBuZXcgYm91bnR5IGh1bnRlcnMhIg0KICAgICAgLSAiJjhDb250YWluczogMXggVHJhY2tlciArIDF4IEphbW1lciINCiAgICAgIC0gIiINCiAgICAgIC0gIiZlUHVyY2hhc2UgT3B0aW9uczoiDQogICAgICAtICImZuKAoiAmYSQ4MDAgJjcoTW9uZXkpIg0KICAgICAgLSAiJmbigKIgJmIyNSBMZXZlbHMgJjcoRXhwZXJpZW5jZSkiDQogICAgICAtICIiDQogICAgICAtICImN1NhdmUgbW9uZXkgd2l0aCB0aGlzIGJ1bmRsZSBkZWFsISINCiAgICAgIC0gIiY3RXZlcnl0aGluZyB5b3UgbmVlZCB0byBnZXQgc3RhcnRlZC4iDQogICAgICAtICIiDQogICAgICAtICImYUxlZnQtY2xpY2s6ICZmQnV5IHdpdGggTW9uZXkiDQogICAgICAtICImYlNoaWZ0LWNsaWNrOiAmZkJ1eSB3aXRoIFhQIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogICAgc2xvdDogMzcNCiAgICBjdXJyZW5jeS10eXBlOiAibXVsdGkiDQogICAgcHJpY2U6IDgwMC4wDQogICAgeHAtcHJpY2U6IDI1DQogICAgY29tbWFuZHM6DQogICAgICBtb25leToNCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgdHJhY2tlciAxIg0KICAgICAgICAtICJib3VudHkgZ2l2ZSAlcGxheWVyJSBqYW1tZXIgMSINCiAgICAgIHhwOg0KICAgICAgICAtICJib3VudHkgZ2l2ZSAlcGxheWVyJSB0cmFja2VyIDEiDQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIGphbW1lciAxIg0KICBwcm9fcGFjazoNCiAgICBtYXRlcmlhbDogIkVOREVSX0NIRVNUIg0KICAgIG5hbWU6ICImNiZsUHJvZmVzc2lvbmFsIEh1bnRlciBQYWNrIg0KICAgIGxvcmU6DQogICAgICAtICImN0ZvciBleHBlcmllbmNlZCBib3VudHkgaHVudGVycyEiDQogICAgICAtICImOENvbnRhaW5zOiAyeCBUcmFja2VyICsgMXggVUFWICsgMXggQm9vc3QiDQogICAgICAtICIiDQogICAgICAtICImZVB1cmNoYXNlIE9wdGlvbnM6Ig0KICAgICAgLSAiJmbigKIgJmEkMzUwMCAmNyhNb25leSkiDQogICAgICAtICImZuKAoiAmYjkwIExldmVscyAmNyhFeHBlcmllbmNlKSINCiAgICAgIC0gIiZm4oCiICZjMTUgQm91bnR5IFNrdWxscyAmNyhNaW46ICQyMDAgZWFjaCkiDQogICAgICAtICIiDQogICAgICAtICImN1RoZSB1bHRpbWF0ZSBodW50aW5nIHRvb2xraXQhIg0KICAgICAgLSAiJjdTaWduaWZpY2FudCBzYXZpbmdzIG92ZXIgaW5kaXZpZHVhbCBwdXJjaGFzZXMuIg0KICAgICAgLSAiIg0KICAgICAgLSAiJmFMZWZ0LWNsaWNrOiAmZkJ1eSB3aXRoIE1vbmV5Ig0KICAgICAgLSAiJmJTaGlmdC1jbGljazogJmZCdXkgd2l0aCBYUCINCiAgICAgIC0gIiZjUmlnaHQtY2xpY2s6ICZmQnV5IHdpdGggU2t1bGxzIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCiAgICBzbG90OiAzOA0KICAgIGN1cnJlbmN5LXR5cGU6ICJtdWx0aSINCiAgICBwcmljZTogMzUwMC4wDQogICAgeHAtcHJpY2U6IDkwDQogICAgc2t1bGwtY291bnQ6IDE1DQogICAgbWluLXNrdWxsLXZhbHVlOiAyMDAuMA0KICAgIGNvbW1hbmRzOg0KICAgICAgbW9uZXk6DQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIHRyYWNrZXIgMiINCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgdWF2IDEiDQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIG1hbnVhbC1ib29zdCAxIg0KICAgICAgeHA6DQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIHRyYWNrZXIgMiINCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgdWF2IDEiDQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIG1hbnVhbC1ib29zdCAxIg0KICAgICAgc2t1bGxzOg0KICAgICAgICAtICJib3VudHkgZ2l2ZSAlcGxheWVyJSB0cmFja2VyIDIiDQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIHVhdiAxIg0KICAgICAgICAtICJib3VudHkgZ2l2ZSAlcGxheWVyJSBtYW51YWwtYm9vc3QgMSINCiAgZWxpdGVfcGFjazoNCiAgICBtYXRlcmlhbDogIlNIVUxLRVJfQk9YIg0KICAgIG5hbWU6ICImZCZsRWxpdGUgSHVudGVyIEFyc2VuYWwiDQogICAgbG9yZToNCiAgICAgIC0gIiY3T25seSBmb3IgdGhlIG1vc3QgZWxpdGUgaHVudGVycyEiDQogICAgICAtICImOENvbnRhaW5zOiAzeCBUcmFja2VyICsgMnggVUFWICsgMnggQm9vc3QiDQogICAgICAtICImOCsgMXggQ2hyb25vcyBTaGFyZCArIDF4IEphbW1lciINCiAgICAgIC0gIiINCiAgICAgIC0gIiZlUHVyY2hhc2UgT3B0aW9uczoiDQogICAgICAtICImZuKAoiAmYSQ3NTAwICY3KE1vbmV5IE9ubHkpIg0KICAgICAgLSAiIg0KICAgICAgLSAiJjdUaGUgY29tcGxldGUgYXJzZW5hbCBvZiBhIGxlZ2VuZGFyeSINCiAgICAgIC0gIiY3Ym91bnR5IGh1bnRlci4gTWFzc2l2ZSB2YWx1ZSEiDQogICAgICAtICIiDQogICAgICAtICImYyZsRVhDTFVTSVZFOiAmN0NhbiBvbmx5IGJlIHB1cmNoYXNlZCINCiAgICAgIC0gIiY3d2l0aCBtb25leS4gTm8gWFAgb3Igc2t1bGwgb3B0aW9ucy4iDQogICAgICAtICIiDQogICAgICAtICImYUxlZnQtY2xpY2s6ICZmQnV5IHdpdGggTW9uZXkiDQogICAgZW5jaGFudG1lbnQtZ2xvdzogdHJ1ZQ0KICAgIHNsb3Q6IDM5DQogICAgY3VycmVuY3ktdHlwZTogIm1vbmV5Ig0KICAgIHByaWNlOiA3NTAwLjANCiAgICBjb21tYW5kczoNCiAgICAgIG1vbmV5Og0KICAgICAgICAtICJib3VudHkgZ2l2ZSAlcGxheWVyJSB0cmFja2VyIDMiDQogICAgICAgIC0gImJvdW50eSBnaXZlICVwbGF5ZXIlIHVhdiAyIg0KICAgICAgICAtICJib3VudHkgZ2l2ZSAlcGxheWVyJSBtYW51YWwtYm9vc3QgMiINCiAgICAgICAgLSAiYm91bnR5IGdpdmUgJXBsYXllciUgY2hyb25vcy1zaGFyZCAxIg0KICAgICAgICAtICJib3VudHkgZ2l2ZSAlcGxheWVyJSBqYW1tZXIgMSINCkN1c3RvbS1JdGVtczoNCiAgZmlsbGVyOg0KICAgIG1hdGVyaWFsOiAiQkxBQ0tfU1RBSU5FRF9HTEFTU19QQU5FIg0KICAgIG5hbWU6ICIiDQogICAgbG9yZTogW10NCiAgICBzbG90czogWzE0LCAxNSwgMTYsIDIzLCAyNCwgMjUsIDMyLCAzMywgMzQsIDQxLCA0MiwgNDNdDQogIGRlY29yYXRpb25fMToNCiAgICBtYXRlcmlhbDogIkRJQU1PTkRfU1dPUkQiDQogICAgbmFtZTogIiZiJmzimpQgSHVudGVyJ3MgQ3JlZWQg4pqUIg0KICAgIGxvcmU6DQogICAgICAtICImNyZvXCJJbiB0aGUgd29ybGQgb2YgYm91bnRpZXMsIg0KICAgICAgLSAiJjcmb29ubHkgdGhlIHByZXBhcmVkIHN1cnZpdmUuXCIiDQogICAgICAtICIiDQogICAgICAtICImZSZsV2VsY29tZSB0byB0aGUgSHVudGVyJ3MgRGVuISINCiAgICAgIC0gIiY3WW91ciBvbmUtc3RvcCBzaG9wIGZvciBhbGwiDQogICAgICAtICImN2JvdW50eSBodW50aW5nIG5lZWRzLiINCiAgICBlbmNoYW50bWVudC1nbG93OiB0cnVlDQogICAgc2xvdDogMTMNCiAgZGVjb3JhdGlvbl8yOg0KICAgIG1hdGVyaWFsOiAiU0tFTEVUT05fU0tVTEwiDQogICAgbmFtZTogIiZjJmxUcm9waGllcyBvZiB0aGUgSHVudCINCiAgICBsb3JlOg0KICAgICAgLSAiJjdUaGUgcmVtbmFudHMgb2Ygc3VjY2Vzc2Z1bCBodW50cy4uLiINCiAgICAgIC0gIiY4RWFjaCBza3VsbCB0ZWxscyBhIHN0b3J5IG9mIHZpY3RvcnkiDQogICAgICAtICIiDQogICAgICAtICImN0JyaW5nIHlvdXIgYm91bnR5IHNrdWxscyBoZXJlIg0KICAgICAgLSAiJjd0byB0cmFkZSBmb3IgcG93ZXJmdWwgaXRlbXMhIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogICAgc2xvdDogMjINCiAgZGVjb3JhdGlvbl8zOg0KICAgIG1hdGVyaWFsOiAiR09MRF9JTkdPVCINCiAgICBuYW1lOiAiJjYmbFdlYWx0aCBBY2N1bXVsYXRvciINCiAgICBsb3JlOg0KICAgICAgLSAiJjdZb3VyIGN1cnJlbnQgYmFsYW5jZTogJmEkJXBsYXllcl9iYWxhbmNlJSINCiAgICAgIC0gIiY3WW91ciBjdXJyZW50IFhQOiAmYiVwbGF5ZXJfeHAlIGxldmVscyINCiAgICAgIC0gIiINCiAgICAgIC0gIiY3QnVpbGQgeW91ciBmb3J0dW5lIHRocm91Z2giDQogICAgICAtICImN3N1Y2Nlc3NmdWwgYm91bnR5IGh1bnRpbmchIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IHRydWUNCiAgICBzbG90OiAzMQ0KICBkZWNvcmF0aW9uXzQ6DQogICAgbWF0ZXJpYWw6ICJCT09LIg0KICAgIG5hbWU6ICImZSZsSHVudGVyJ3MgR3VpZGUiDQogICAgbG9yZToNCiAgICAgIC0gIiY3JmxUaXBzIGZvciBOZXcgSHVudGVyczoiDQogICAgICAtICImZuKAoiAmN1N0YXJ0IHdpdGggdGhlIFN0YXJ0ZXIgUGFjayINCiAgICAgIC0gIiZm4oCiICY3VXNlIFRyYWNrZXJzIHRvIGZpbmQgdGFyZ2V0cyINCiAgICAgIC0gIiZm4oCiICY3SmFtbWVycyBoZWxwIHlvdSBlc2NhcGUiDQogICAgICAtICImZuKAoiAmN1VBVnMgcmV2ZWFsIGhpZGRlbiBlbmVtaWVzIg0KICAgICAgLSAiIg0KICAgICAgLSAiJjcmbEFkdmFuY2VkIFN0cmF0ZWdpZXM6Ig0KICAgICAgLSAiJmbigKIgJjdUaW1lIHlvdXIgRnJlbnp5IHVzYWdlIg0KICAgICAgLSAiJmbigKIgJjdTYXZlIHNrdWxscyBmb3IgYmlnIHB1cmNoYXNlcyINCiAgICAgIC0gIiZm4oCiICY3Q29vcmRpbmF0ZSB3aXRoIG90aGVyIGh1bnRlcnMiDQogICAgZW5jaGFudG1lbnQtZ2xvdzogZmFsc2UNCiAgICBzbG90OiA0MA0KbWVzc2FnZXM6DQogIGl0ZW0tbm90LWF2YWlsYWJsZTogIiZjVGhpcyBpdGVtIGlzIG5vdCBhdmFpbGFibGUhIg0KICBuby1wZXJtaXNzaW9uOiAiJmNZb3UgZG9uJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHB1cmNoYXNlIHRoaXMgaXRlbSEiDQogIHB1cmNoYXNlLXN1Y2Nlc3M6ICImYSZs4pyTIFN1Y2Nlc3NmdWxseSBwdXJjaGFzZWQgJWl0ZW0lISINCiAgcHVyY2hhc2UtZmFpbGVkOiAiJmMmbOKclyBGYWlsZWQgdG8gcHVyY2hhc2UgJWl0ZW0lISINCiAgZXh0cmEtaXRlbS1uby1wZXJtaXNzaW9uOiAiJmNZb3UgZG9uJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHVzZSB0aGlzIGl0ZW0hIg0KICBpbnZhbGlkLXByaWNlOiAiJmNJbnZhbGlkIHByaWNlIGZvciB0aGlzIGl0ZW0hIg0KICBpbnZhbGlkLXhwLXByaWNlOiAiJmNJbnZhbGlkIFhQIHByaWNlIGZvciB0aGlzIGl0ZW0hIg0KICBpbnZhbGlkLXNrdWxsLWNvdW50OiAiJmNJbnZhbGlkIHNrdWxsIGNvdW50IGZvciB0aGlzIGl0ZW0hIg0KICBpbnZhbGlkLWN1cnJlbmN5LXR5cGU6ICImY0ludmFsaWQgY3VycmVuY3kgdHlwZSBjb25maWd1cmVkIGZvciB0aGlzIGl0ZW0hIg0KICBpbnN1ZmZpY2llbnQtZnVuZHM6ICImY1lvdSBuZWVkICQlcHJpY2UlIHRvIHB1cmNoYXNlIHRoaXMgaXRlbSEiDQogIGluc3VmZmljaWVudC14cDogIiZjWW91IG5lZWQgJXhwX3ByaWNlJSBYUCB0byBwdXJjaGFzZSB0aGlzIGl0ZW0hIg0KICBpbnN1ZmZpY2llbnQtc2t1bGxzOiAiJmNZb3UgbmVlZCAlc2t1bGxfY291bnQlIGJvdW50eSBza3VsbHMgd29ydGggYXQgbGVhc3QgJCVtaW5fc2t1bGxfdmFsdWUlIGVhY2ghIg0KICBpbnN1ZmZpY2llbnQtZnVuZHMtYm90aDogIiZjWW91IG5lZWQgJCVwcmljZSUgYW5kICV4cF9wcmljZSUgWFAgdG8gcHVyY2hhc2UgdGhpcyBpdGVtISAoTWlzc2luZyBtb25leSkiDQogIGluc3VmZmljaWVudC14cC1ib3RoOiAiJmNZb3UgbmVlZCAkJXByaWNlJSBhbmQgJXhwX3ByaWNlJSBYUCB0byBwdXJjaGFzZSB0aGlzIGl0ZW0hIChNaXNzaW5nIFhQKSINCiAgaW5zdWZmaWNpZW50LWZ1bmRzLW1peGVkOiAiJmNJbnN1ZmZpY2llbnQgbW9uZXkhIE5lZWQgJCVwcmljZSUiDQogIGluc3VmZmljaWVudC14cC1taXhlZDogIiZjSW5zdWZmaWNpZW50IFhQISBOZWVkICV4cF9wcmljZSUgWFAiDQogIGluc3VmZmljaWVudC1za3VsbHMtbWl4ZWQ6ICImY0luc3VmZmljaWVudCBza3VsbHMhIE5lZWQgJXNrdWxsX2NvdW50JSBza3VsbHMgd29ydGggJCVtaW5fc2t1bGxfdmFsdWUlKyBlYWNoIg0KICBwdXJjaGFzZS1zdWNjZXNzLW5ldzogIiZhJmxQVVJDSEFTRSBTVUNDRVNTRlVMISINCiAgcHVyY2hhc2UtZmFpbHVyZS1uZXc6ICImYyZsUFVSQ0hBU0UgRkFJTEVEISINCiAgaW5zdWZmaWNpZW50LWZ1bmRzLW5ldzogIiZjJmxJbnN1ZmZpY2llbnQgJWN1cnJlbmN5X3R5cGUlISBZb3UgbmVlZCAlcmVxdWlyZWRfYW1vdW50JS4iDQogIGluc3VmZmljaWVudC1za3VsbHMtbmV3OiAiJmMmbFlvdSBuZWVkICVyZXF1aXJlZF9jb3VudCUgYm91bnR5IHNrdWxscyAobWluaW11bSAkJW1pbl92YWx1ZSUgZWFjaCkhIg0KICBpbnZhbGlkLXNrdWxsczogIiZjJmxTb21lIG9mIHlvdXIgc2t1bGxzIGRvbid0IG1lZXQgdGhlIG1pbmltdW0gdmFsdWUgcmVxdWlyZW1lbnQhIg0KICBpdGVtLWdpdmVuOiAiJmFZb3UgaGF2ZSByZWNlaXZlZDogJiDQn9Cg0J5lJWl0ZW1fbmFtZSUiDQogIGludmVudG9yeS1mdWxsOiAiJmMmbFlvdXIgaW52ZW50b3J5IGlzIGZ1bGwhIEl0ZW1zIGRyb3BwZWQgb24gdGhlIGdyb3VuZC4iDQogIHdhcm5pbmdzOg0KICAgIGludmFsaWQtYm9yZGVyLW1hdGVyaWFsOiAiSW52YWxpZCBib3JkZXIgbWF0ZXJpYWwgJyVtYXRlcmlhbCUnIGluIEh1bnRlcnNEZW4ueW1sLCB1c2luZyBkZWZhdWx0Ig0KICAgIGludmFsaWQtYm9yZGVyLXNsb3Q6ICJJbnZhbGlkIHNsb3QgJXNsb3QlIGluIEh1bnRlcnNEZW4ueW1sIGJvcmRlciBjb25maWd1cmF0aW9uIChtdXN0IGJlIDAtNTMpIg0KICAgIG5vLXNob3AtaXRlbXM6ICJObyBzaG9wLUl0ZW1zIHNlY3Rpb24gZm91bmQgaW4gSHVudGVyc0Rlbi55bWwiDQogICAgaW52YWxpZC1pdGVtLXNsb3Q6ICJJbnZhbGlkIHNsb3QgJXNsb3QlIGZvciBpdGVtICVpdGVtJSBpbiBIdW50ZXJzRGVuLnltbCINCiAgICBpbnZhbGlkLWl0ZW0tbWF0ZXJpYWw6ICJJbnZhbGlkIG1hdGVyaWFsICclbWF0ZXJpYWwlJyBmb3IgaXRlbSAlaXRlbSUgaW4gSHVudGVyc0Rlbi55bWwsIHVzaW5nIFNUT05FIg0KICAgIGludmFsaWQtYmFjay1idXR0b24tbWF0ZXJpYWw6ICJJbnZhbGlkIGJhY2sgYnV0dG9uIG1hdGVyaWFsICclbWF0ZXJpYWwlJyBpbiBIdW50ZXJzRGVuLnltbCwgdXNpbmcgQkFSUklFUiINCiAgICBpdGVtLWxvYWQtZXJyb3I6ICJFcnJvciBsb2FkaW5nIHNob3AgaXRlbSAlaXRlbSUgZnJvbSBIdW50ZXJzRGVuLnltbDogJWVycm9yJSINCiAgICBza3VsbC12YWx1ZS1wYXJzZS1lcnJvcjogIkZhaWxlZCB0byBwYXJzZSBib3VudHkgc2t1bGwgdmFsdWUgZnJvbTogJWxpbmUlIg0KICAgIGVjb25vbXktdW5hdmFpbGFibGU6ICJFY29ub215IHN5c3RlbSBub3QgYXZhaWxhYmxlIGZvciBtb25leSB0cmFuc2FjdGlvbnMiDQogICAgaW52YWxpZC1jdXJyZW5jeS10eXBlOiAiSW52YWxpZCBjdXJyZW5jeSB0eXBlOiAlY3VycmVuY3lfdHlwZSUiDQogICAgcHVyY2hhc2UtZXJyb3I6ICJFcnJvciBwcm9jZXNzaW5nIHB1cmNoYXNlIGZvciAlcGxheWVyJTogJWVycm9yJSINCiAgICBzbG90LW9jY3VwaWVkOiAiU2xvdCAlc2xvdCUgZm9yICVpdGVtJSBpcyBhbHJlYWR5IG9jY3VwaWVkIg0KICAgIGludmFsaWQtZXh0cmEtaXRlbS1zbG90OiAiSW52YWxpZCBzbG90ICVzbG90JSBmb3IgZXh0cmEgaXRlbSAlaXRlbSUgaW4gSHVudGVyc0Rlbi55bWwiDQogICAgaW52YWxpZC1leHRyYS1pdGVtLW1hdGVyaWFsOiAiSW52YWxpZCBtYXRlcmlhbCAnJW1hdGVyaWFsJScgZm9yIGV4dHJhIGl0ZW0gJWl0ZW0lIGluIEh1bnRlcnNEZW4ueW1sLCB1c2luZyBTVE9ORSINCiAgICBleHRyYS1pdGVtLWxvYWQtZXJyb3I6ICJFcnJvciBsb2FkaW5nIGV4dHJhIGl0ZW0gJWl0ZW0lIGZyb20gSHVudGVyc0Rlbi55bWw6ICVlcnJvciUiDQpjdXJyZW5jeS1uYW1lczoNCiAgbW9uZXk6ICJNb25leSINCiAgeHA6ICJFeHBlcmllbmNlIg0KICBza3VsbHM6ICJCb3VudHkgU2t1bGxzIg0KcGVybWlzc2lvbnM6DQogIHVzZS1zaG9wOiAiYm91bnRpZXNwbHVzLnNob3AudXNlIg0KICBidXktcHJlbWl1bTogImJvdW50aWVzcGx1cy5zaG9wLnByZW1pdW0iAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcmVzb3VyY2VzL0dVSXMvUHJldmlld0dVSS55bWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDY2NiAAMDAwMDAwIAAwMDAwMDAgADAwMDAwMDA1Mzc3IDE1MDI0MTc3MzQwIDAxNDYwMQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAgADAwMDAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABndWktdGl0bGU6ICIgICAgICAgICAgJjQmbOKalCAmNCZsJm5Cb3VudHkgUHJldmlldyY0JmwgJjQmbOKalCINCmJvcmRlcjoNCiAgZW5hYmxlZDogdHJ1ZQ0KICBtYXRlcmlhbDogV0hJVEVfU1RBSU5FRF9HTEFTU19QQU5FDQogIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogIHNsb3RzOg0KICAgIC0gMA0KICAgIC0gMQ0KICAgIC0gMg0KICAgIC0gMw0KICAgIC0gNA0KICAgIC0gNQ0KICAgIC0gNg0KICAgIC0gNw0KICAgIC0gOA0KICAgIC0gOQ0KICAgIC0gMTcNCiAgICAtIDE4DQogICAgLSAyNg0KICAgIC0gMjcNCiAgICAtIDM1DQogICAgLSAzNg0KICAgIC0gNDQNCiAgICAtIDQ1DQogICAgLSA0Ng0KICAgIC0gNDcNCiAgICAtIDQ4DQogICAgLSA0OQ0KICAgIC0gNTANCiAgICAtIDUxDQogICAgLSA1Mg0KICAgIC0gNTMNCmJvdW50eS1pdGVtczoNCiAgc2xvdDogMTANCiAgbG9yZToNCiAgICAtICImN0NvbnRyaWJ1dG9yOiAlY29udHJpYnV0b3IlIg0KICAgIC0gIiY3VmFsdWU6ICZhJCVpdGVtX3ZhbHVlJSINCg0KYm91bnR5LWluZm86DQogIG1hdGVyaWFsOiBQQVBFUg0KICBzbG90OiA0OQ0KICBuYW1lOiAiJjYlYm91bnRpZXNwbHVzX3RhcmdldF9uYW1lJSBCb3VudHkiDQogIGxvcmU6DQogICAgLSAiJjdUb3AgU3BvbnNvcnM6ICVib3VudGllc3BsdXNfdG9wM19zcG9uc29yc19udW1iZXJlZCUiICMgQWx0ZXJuYXRpdmVzOiAlYm91bnRpZXNwbHVzX3RvcDwzLzUvMTBfc3BvbnNvcnNfbnVtYmVyZWQvY29tbWFzJSB1c2luZyBjb21tYXMgaW5zdGVhZCBvZiBudW1iZXJzID0gMSwgMiwgMw0KICAgIC0gIiINCiAgICAtICImN09yaWdpbmFsIE1vbmV5OiAmYSQlYm91bnRpZXNwbHVzX29yaWdpbmFsX21vbmV5JSINCiAgICAtICImN0N1cnJlbnQgTW9uZXk6ICZhJCVib3VudGllc3BsdXNfbW9uZXlfdmFsdWUlICY3JjAoJmEmbyslYm91bnRpZXNwbHVzX3ByaWNlX2luY3JlYXNlX3BlcmNlbnQlJSY3Jm8pIg0KICAgIC0gIiINCiAgICAtICImN09yaWdpbmFsIEl0ZW1zOiAmYiVib3VudGllc3BsdXNfb3JpZ2luYWxfaXRlbV9jb3VudCUgJjdpdGVtcyB2YWx1ZWQgYXQgJmIkJWJvdW50aWVzcGx1c19vcmlnaW5hbF9pdGVtX3ZhbHVlJSAmNyYiDQogICAgLSAiJjdDdXJyZW50IEl0ZW1zOiAmYiVib3VudGllc3BsdXNfaXRlbV9jb3VudCUgJjcmbygmYiZvKyVib3VudGllc3BsdXNfaXRlbV9jb3VudF9pbmNyZWFzZV9wZXJjZW50JSUmYiZvKSAmN2l0ZW1zIHZhbHVlZCBhdCAmYiQlYm91bnRpZXNwbHVzX2l0ZW1fdmFsdWUlICY3JjAoJmImbyslYm91bnRpZXNwbHVzX2l0ZW1fdmFsdWVfaW5jcmVhc2VfcGVyY2VudCUlJjcmbykiDQogICAgLSAiIg0KICAgIC0gIiY3T3JpZ2luYWwgWFA6ICZlJWJvdW50aWVzcGx1c19vcmlnaW5hbF94cCUgTGV2ZWxzIg0KICAgIC0gIiY3Q3VycmVudCBYUDogJmUlYm91bnRpZXNwbHVzX2V4cF92YWx1ZSUgJjdMZXZlbHMgJjcmbygmZSZvKyVib3VudGllc3BsdXNfeHBsZXZlbF9pbmNyZWFzZV9wZXJjZW50JSUmNyZvKSINCiAgICAtICIiDQogICAgLSAiJjdPcmlnaW5hbCBEdXJhdGlvbjogJjklYm91bnRpZXNwbHVzX29yaWdpbmFsX2R1cmF0aW9uJSINCiAgICAtICImN0N1cnJlbnQgRHVyYXRpb246ICY5JWJvdW50aWVzcGx1c190aW1lX3ZhbHVlJSAmNyZvKCY5Jm8rJWJvdW50aWVzcGx1c19kdXJhdGlvbl9pbmNyZWFzZV9wZXJjZW50JSUmNyZvKSINCiAgICAtICIiDQogICAgLSAiJjdPcmlnaW5hbCBQb29sOiAmNiQlYm91bnRpZXNwbHVzX29yaWdpbmFsX3Bvb2wlIg0KICAgIC0gIiY3Q3VycmVudCBQb29sOiAmNiQlYm91bnRpZXNwbHVzX3RvdGFsX3Bvb2wlICY3Jm8oJjYmbyslYm91bnRpZXNwbHVzX3Bvb2xfaW5jcmVhc2VfcGVyY2VudCUlJjcmbykiDQogIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQpwYWdpbmF0aW9uOg0KICBwcmV2aW91czoNCiAgICBzbG90OiA0NQ0KICAgIG5hbWU6ICImZVByZXZpb3VzIFBhZ2UiDQogICAgbG9yZToNCiAgICAgIC0gIiY3UGFnZSAlY3VycmVudF9wYWdlJSBvZiAldG90YWxfcGFnZXMlIg0KICAgICAgLSAiJjdDbGljayB0byBnbyB0byBwcmV2aW91cyBwYWdlIg0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQogIG5leHQ6DQogICAgc2xvdDogNTMNCiAgICBuYW1lOiAiJmVOZXh0IFBhZ2UiDQogICAgbG9yZToNCiAgICAgIC0gIiY3UGFnZSAlY3VycmVudF9wYWdlJSBvZiAldG90YWxfcGFnZXMlIg0KICAgICAgLSAiJjdDbGljayB0byBnbyB0byBuZXh0IHBhZ2UiDQogICAgZW5jaGFudG1lbnQtZ2xvdzogZmFsc2UNCmN1c3RvbS1pdGVtczoNCiAgaW5mby1idXR0b246DQogICAgbWF0ZXJpYWw6IEJPT0sNCiAgICBzbG90OiA0Ng0KICAgIG5hbWU6ICImNkJvdW50eSBJbmZvIg0KICAgIGxvcmU6DQogICAgICAtICImN0NsaWNrIGZvciBkZXRhaWxlZCBib3VudHkgaW5mb3JtYXRpb24iDQogICAgICAtICImN1RhcmdldDogJmUlYm91bnRpZXNwbHVzX3RhcmdldF9uYW1lJSINCiAgICBlbmNoYW50bWVudC1nbG93OiB0cnVlDQogIGNsb3NlLWJ1dHRvbjoNCiAgICBtYXRlcmlhbDogQkFSUklFUg0KICAgIHNsb3Q6IDQ3DQogICAgbmFtZTogIiZjQ2xvc2UgR1VJIg0KICAgIGxvcmU6DQogICAgICAtICImN0NsaWNrIHRvIGNsb3NlIHRoZSBwcmV2aWV3Ig0KICAgIGVuY2hhbnRtZW50LWdsb3c6IGZhbHNlDQptZXNzYWdlczoNCiAgaW52YWxpZC1tYXRlcmlhbDogIiZjSW52YWxpZCBtYXRlcmlhbCAlbWF0ZXJpYWwlIGZvciAlYnV0dG9uJSEiDQogIGNhbm5vdC1wbGFjZS1pdGVtczogIiZjWW91IGNhbm5vdCBwbGFjZSBpdGVtcyBpbiB0aGlzIEdVSSEiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAByZXNvdXJjZXMvR1VJcy9Ub3BHVUkueW1sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwNjY2IAAwMDAwMDAgADAwMDAwMCAAMDAwMDAwMDQ3NTQgMTUwMjQxNzczNDAgMDEzNzIwACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMCAAMDAwMDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMgVG9wR1VJLnltbA0KIyBDb25maWd1cmF0aW9uIGZpbGUgZm9yIHRoZSBUb3BHVUkgaW4gQm91bnRpZXNQbHVzIHBsdWdpbg0KDQp0aXRsZTogIiAgICAgICAgICAgICAgICY0JmzimpQgJjQmbCZuQm91bnR5IExlYWRlcmJvYXJkJjQmbCAmNCZs4pqUIg0Kc2l6ZTogNTQNCg0KUGx1Z2luLUl0ZW1zOg0KICBCb3JkZXI6DQogICAgTWF0ZXJpYWw6IEJMQUNLX1NUQUlORURfR0xBU1NfUEFORQ0KICAgIE5hbWU6ICIgIg0KICAgIExvcmU6IFtdDQogICAgRW5jaGFudG1lbnQtR2xvdzogZmFsc2UNCiAgSW5mbzoNCiAgICBNYXRlcmlhbDogUEFQRVINCiAgICBOYW1lOiAiJmVMZWFkZXJib2FyZCBJbmZvIg0KICAgIExvcmU6DQogICAgICAtICImN1ZpZXcgdGhlIHRvcCBwbGF5ZXJzIGJhc2VkIG9uIHRoZWlyIg0KICAgICAgLSAiJjdib3VudHkgc3RhdGlzdGljcy4iDQogICAgICAtICImN1VzZSB0aGUgZmlsdGVyIGJ1dHRvbiB0byBzb3J0IGJ5IGRpZmZlcmVudCINCiAgICAgIC0gIiY3c3RhdHMgYW5kIHRvZ2dsZSBzb3J0IG9yZGVyLiINCiAgICBFbmNoYW50bWVudC1HbG93OiBmYWxzZQ0KICBGaWx0ZXI6DQogICAgTWF0ZXJpYWw6IEZJUkVXT1JLX1NUQVINCiAgICBOYW1lOiAiJmVGaWx0ZXI6ICVmaWx0ZXJfc3RhdHVzJSINCiAgICBMb3JlOg0KICAgICAgLSAiJjdDdXJyZW50IEZpbHRlcjogJWZpbHRlcl9kZXRhaWxzJSINCiAgICAgIC0gIiZlTGVmdC1DbGljazogJjdDeWNsZSBGaWx0ZXIiDQogICAgICAtICImZVJpZ2h0LUNsaWNrOiAmN1RvZ2dsZSBTb3J0IE9yZGVyIg0KICAgIEVuY2hhbnRtZW50LUdsb3c6IGZhbHNlDQogICAgZmlyZXdvcmstZWZmZWN0Og0KICAgICAgZWZmZWN0LXR5cGU6IFNUQVINCiAgICAgIGNsYWltZWQtY29sb3I6DQogICAgICAgIHJlZDogMjU1DQogICAgICAgIGdyZWVuOiAyMTUNCiAgICAgICAgYmx1ZTogMA0KICAgICAgc3Vydml2ZWQtY29sb3I6DQogICAgICAgIHJlZDogMA0KICAgICAgICBncmVlbjogMjU1DQogICAgICAgIGJsdWU6IDANCiAgICAgIG1vbmV5LWVhcm5lZC1jb2xvcjoNCiAgICAgICAgcmVkOiAwDQogICAgICAgIGdyZWVuOiAyNTUNCiAgICAgICAgYmx1ZTogMjU1DQogICAgICB4cC1lYXJuZWQtY29sb3I6DQogICAgICAgIHJlZDogMTI4DQogICAgICAgIGdyZWVuOiAwDQogICAgICAgIGJsdWU6IDEyOA0KICAgICAgdG90YWwtdmFsdWUtY29sb3I6DQogICAgICAgIHJlZDogMjU1DQogICAgICAgIGdyZWVuOiAwDQogICAgICAgIGJsdWU6IDANCiAgICAgIGFsbC1jb2xvcjoNCiAgICAgICAgcmVkOiAyNTUNCiAgICAgICAgZ3JlZW46IDI1NQ0KICAgICAgICBibHVlOiAyNTUNCiAgUGxheWVyLVNrdWxsOg0KICAgIE1hdGVyaWFsOiBQTEFZRVJfSEVBRA0KICAgIE5hbWU6ICImZSVwbGF5ZXIlIg0KICAgIExvcmU6DQogICAgICAtICImN0NsYWltZWQ6ICZlJWJvdW50aWVzcGx1c19jbGFpbWVkJSINCiAgICAgIC0gIiY3U3Vydml2ZWQ6ICZlJWJvdW50aWVzcGx1c19zdXJ2aXZlZCUiDQogICAgICAtICImN01vbmV5OiAmZSVib3VudGllc3BsdXNfdG90YWxtb25leWVhcm5lZCUiDQogICAgICAtICImN1hQOiAmZSVib3VudGllc3BsdXNfdG90YWx4cGVhcm5lZCUiDQogICAgICAtICImN1ZhbHVlOiAmZSVib3VudGllc3BsdXNfdG90YWx2YWx1ZWVhcm5lZCUiDQogICAgRW5jaGFudG1lbnQtR2xvdzogZmFsc2UNCiAgQ2xvc2U6DQogICAgTWF0ZXJpYWw6IEJBUlJJRVINCiAgICBOYW1lOiAiJmNDbG9zZSINCiAgICBMb3JlOg0KICAgICAgLSAiJjdDbGljayB0byBjbG9zZSB0aGUgbGVhZGVyYm9hcmQuIg0KICAgIEVuY2hhbnRtZW50LUdsb3c6IGZhbHNlDQogIFByZXZpb3VzOg0KICAgIE1hdGVyaWFsOiBBUlJPVw0KICAgIE5hbWU6ICImZVByZXZpb3VzIFBhZ2UiDQogICAgTG9yZToNCiAgICAgIC0gIiY3UGFnZSAlY3VycmVudF9wYWdlJSBvZiAldG90YWxfcGFnZXMlIg0KICAgIEVuY2hhbnRtZW50LUdsb3c6IGZhbHNlDQogIE5leHQ6DQogICAgTWF0ZXJpYWw6IEFSUk9XDQogICAgTmFtZTogIiZlTmV4dCBQYWdlIg0KICAgIExvcmU6DQogICAgICAtICImN1BhZ2UgJWN1cnJlbnRfcGFnZSUgb2YgJXRvdGFsX3BhZ2VzJSINCiAgICBFbmNoYW50bWVudC1HbG93OiBmYWxzZQ0KDQpDdXN0b20tSXRlbXM6DQogIEZpbGxlcjoNCiAgICBNYXRlcmlhbDogR1JBWV9TVEFJTkVEX0dMQVNTX1BBTkUNCiAgICBOYW1lOiAiICINCiAgICBMb3JlOiBbXQ0KICAgIEVuY2hhbnRtZW50LUdsb3c6IGZhbHNlDQogICAgU2xvdHM6IFswLCAxLCAyLCA2LCA3LCA4LCA5LCAxNywgMTgsIDI2LCAyNywgMzUsIDM2LCA0NCwgNDUsIDQ2LCA0NywgNTEsIDUyLCA1M10NCiAgRXhhbXBsZS1JdGVtOg0KICAgIE1hdGVyaWFsOiBESUFNT05EDQogICAgTmFtZTogIiZiRXhhbXBsZSBJdGVtIg0KICAgIExvcmU6DQogICAgICAtICImN1RoaXMgaXMgYW4gZXhhbXBsZSBjdXN0b20gaXRlbS4iDQogICAgICAtICImN0l0IGhhcyBubyBmdW5jdGlvbmFsaXR5LiINCiAgICBFbmNoYW50bWVudC1HbG93OiB0cnVlDQogICAgU2xvdHM6IFtd
